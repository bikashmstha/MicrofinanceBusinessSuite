/*
 * File: app/controller/GeneralizedLogin.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.GeneralizedLogin', {
    extend: 'Ext.app.Controller',

    onBtnLoginGeneralizedClick: function(button, e, options) {
        var me=this;
        var uiConfig='';

        var menuLink;
        var pageTitle;


        //var validateForm = Ext.getCmp('frmVatReturnsSubNo');

        var submissionNo = Ext.ComponentQuery.query('#txtVRSubmissionNo')[0].getValue();
        var username = Ext.ComponentQuery.query('#txtVRUsername')[0].getValue();
        var password = Ext.ComponentQuery.query('#txtVRPassword')[0].getValue();

        var leaf = Ext.ComponentQuery.query('#hdnGenLoginLeaf')[0].getValue();

        var form = button.up('form').getForm();

        if(form)
        {
            console.log(form);
        }
        if(form.isValid()){
            //var submissionNo = Ext.ComponentQuery.query('#txtVRSubmissionNo')[0].getValue();

            Ext.Ajax.request({
                url: '../Handlers/Vat/VatReturnsSubmissionNumberHandler.ashx',
                waitMsg: 'Validating User...',
                params:{method:'ValidateUser',
                    submissionNo:submissionNo,
                    username:username,
                password:password},
                success: function(response) {
                    var userInfo = Ext.decode(response.responseText);
                    // console.log(userInfo);

                    //USER VALIDATION FAILED
                    if(userInfo.root==='')
                    {
                        msg('INFO','कृपया प्रयोगकर्ताको नाम र पासवर्ड  मिलेन!!! <br/ ');
                        return;
                    }


                    if(userInfo.root.submittedFor=='VRET'||userInfo.root.submittedFor=='VCB')
                    {
                        me.LoadReturns(submissionNo,userInfo.root.submittedFor,userInfo.root.PAN,userInfo.root.SubmittedYN);
                        return;
                    }





                    if(userInfo.root.SubmittedYN=='N')
                    {


                        if(userInfo.root.submittedFor=='ASS01')   // for Suresh 
                        {
                            uiConfig={menuLink:'SelfAssessmentD01',
                                pageTitle:'E-SelfAssessmentD01/SelfAssessmentD01'


                            };
                            DynamicUI(uiConfig,function(){

                                Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setValue(submissionNo);

                                Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setReadOnly(true);
                                Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
                                Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);
                                Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);
                                Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
                                Ext.ComponentQuery.query('#btnEditSA')[0].enable(true);



                                Ext.Ajax.request({

                                    url:'../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=GetAssessment',
                                    params:{submissionNumber:submissionNo},
                                    success:function(response){
                                        var obj=Ext.decode(response.responseText);

                                        var row= obj.root;


                                        var strSADone=Ext.getStore('SelfAssessmentD01');
                                        strSADone.removeAll();
                                        strSADone.loadData([],false);


                                        console.log("yahoooo",obj.root);
                                        console.log("AssmtDetailChildDOne",obj.root.AssmtDetailChildDOne);

                                        //console.log("Expenses",obj.root.AssmtDetailChildDOne[0].Expenses);



                                        console.log("ASS01Testing",row);



                                        var taxpayer=obj.root.Taxpayer;
                                        var address=taxpayer.BusinessAddress.Address;
                                        var office=taxpayer.Office;
                                        var individual=taxpayer.IndividualAddress.Address;

                                        var grdVoucherLST=Ext.ComponentQuery.query('#grdSADoneFour')[0];
                                        grdVoucherLST.store.add(obj.root.VoucherTbsLSTLST); 
                                        console.log('TranNo>>>>',obj.root.TranNo);
                                        Ext.ComponentQuery.query('#hdnTranNo')[0].setValue(obj.root.TranNo);



                                        //----------------------------------------------------------------------------------------------------
                                        if(obj.root.RecordStatus==="D")
                                        {
                                            msg("Info","यो बिबरण हटाईसकेको छ <br/ ");

                                            Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue("");

                                            Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtAcctType')[0].setValue(""); 

                                            Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue("");                   
                                            Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue("");

                                            Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtWardSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtToleSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue("");

                                            Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue("");
                                            Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue("");

                                            Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);                   
                                            Ext.ComponentQuery.query('#rbdSM')[0].setValue(false); 
                                            Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);                        
                                            Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);

                                            //---setting values in Two no field (Individual Address)-----

                                            Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue("");                    
                                            Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue("");

                                            Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(false);  
                                            Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);   
                                            Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(false);                   

                                            Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(false);                  

                                            //--setting Values in three--
                                            Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue("");

                                            Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue("");

                                            Ext.ComponentQuery.query('#txt117SADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txt119SADone')[0].setValue("");
                                            //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);

                                            var grdVoucherLSTa=Ext.ComponentQuery.query('#grdSADoneFour')[0];
                                            grdVoucherLSTa.store.removeAll(); 

                                            var SelfAssessmentD01=Ext.getStore('SelfAssessmentD01');
                                            SelfAssessmentD01.removeAll();

                                            SelfAssessmentD01.loadData([],false);





                                            Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnPrintSA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnCancelSA')[0].disable(true);
                                        }







                                        //-----------------------------------------------------------------------------------------------------


                                        else if(obj.root.RecordStatus==="V")
                                        {
                                            msg("Info","यो बिबरण रूजु भईसकेको छ <br/ ");

                                            Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue("");

                                            Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtAcctType')[0].setValue(""); 

                                            Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue("");                   
                                            Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue("");

                                            Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtWardSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtToleSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue("");

                                            Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue("");
                                            Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue("");

                                            Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);                   
                                            Ext.ComponentQuery.query('#rbdSM')[0].setValue(false); 
                                            Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);                        
                                            Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);

                                            //---setting values in Two no field (Individual Address)-----

                                            Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue("");                    
                                            Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue("");

                                            Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(false);  
                                            Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);   
                                            Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(false);                   

                                            Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(false);                  

                                            //--setting Values in three--
                                            Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue("");

                                            Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue("");

                                            Ext.ComponentQuery.query('#txt117SADone')[0].setValue("");
                                            Ext.ComponentQuery.query('#txt119SADone')[0].setValue("");
                                            //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);

                                            var grdVoucherLSTaa=Ext.ComponentQuery.query('#grdSADoneFour')[0];
                                            grdVoucherLSTaa.store.removeAll(); 

                                            var SelfAssessmentsD01=Ext.getStore('SelfAssessmentD01');
                                            SelfAssessmentsD01.removeAll();


                                            Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnPrintSA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnCancelSA')[0].disable(true);

                                        }

                                        //-------------------------------------------------------------------------------------------------------



                                        else if(obj.root.RecordStatus==="F")
                                        {
                                            msg("Info","यो बिबरण परिबर्तन गर्न पाईनेछैन् <br/ ");
                                            Ext.ComponentQuery.query('#hdnStatusForHide')[0].setValue("F");

                                            Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);

                                            Ext.ComponentQuery.query('#txtPanSTDone')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtAcctType')[0].setReadOnly(true); 

                                            Ext.ComponentQuery.query('#txtPhoneSADone')[0].setReadOnly(true);                  
                                            Ext.ComponentQuery.query('#txtNameSTDone')[0].setReadOnly(true);

                                            Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtWardSADone')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtToleSADone')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtDistrictDone')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtFaxSADone')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtEmailSADone')[0].setReadOnly(true);

                                            Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtTSOsaDone')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setReadOnly(true);




                                            Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);                   
                                            Ext.ComponentQuery.query('#rbdSM')[0].setValue(false); 
                                            Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);                        
                                            Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);





                                            // ----------------------------------------
                                            //---setting values in Two no field (Individual Address)-----

                                            Ext.ComponentQuery.query('#txtNameDtwo')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtWardDtwo')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtToleDtwo')[0].setReadOnly(true);                    
                                            Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtMetroDtwo')[0].setReadOnly(true);                   


                                            //--setting Values in three--
                                            Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setReadOnly(true);

                                            Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);

                                            Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(true);
                                            Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(true);







                                            Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

                                            Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
                                            Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType); 

                                            Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(address.Telephone);                   
                                            Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

                                            Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(address.HouseNo);
                                            Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(address.WardNo);
                                            Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(address.StreetName);
                                            Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(address.DistrictNameNep);
                                            Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(address.Fax);
                                            Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(address.Email);

                                            Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(address.VdcTown);
                                            Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
                                            Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



                                            if(address.LocationType=== "MM")
                                            {  
                                                Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
                                                Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
                                                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                                            }

                                            else if(address.LocationType==="SM")
                                            {  
                                                Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
                                                Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
                                                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                                            }

                                            else if(address.LocationType==="MN")
                                            {

                                                Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
                                                Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
                                                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
                                            }

                                            else
                                            {   
                                                Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
                                                Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
                                                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

                                            }


                                            //---setting values in Two no field (Individual Address)-----

                                            Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.Name);
                                            Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(individual.HouseNo);
                                            Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(individual.WardNo);
                                            Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(individual.StreetName);                    
                                            Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(individual.DistrictNameNep);
                                            Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(individual.VdcTown);

                                            if(individual.LocationType==="MM")
                                            {                           
                                                Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);                        
                                            }

                                            else if(individual.LocationType==="SM")
                                            {
                                                Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);                        
                                                Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
                                            }
                                            else if(individual.LocationType==="MN")
                                            {
                                                Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);                        
                                                Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
                                            }
                                            else
                                            {
                                                Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);                        
                                                Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
                                            }



                                            //--setting Values in three--
                                            Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
                                            Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
                                            Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);

                                            Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
                                            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(obj.root.TotalTaxLiability);
                                            Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);

                                            Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
                                            Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
                                            //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);


                                            Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true);                  


                                        }

                                        //----------------------------------------------------------------------------------------------------------

                                        else
                                        {     Ext.ComponentQuery.query('#hdnAction')[0].setValue('E');   


                                            Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

                                            Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
                                            Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType); 

                                            Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(address.Telephone);                   
                                            Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

                                            Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(address.HouseNo);
                                            Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(address.WardNo);
                                            Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(address.StreetName);
                                            Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(address.DistrictNameNep);
                                            Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(address.Fax);
                                            Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(address.Email);

                                            Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(address.VdcTown);
                                            Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
                                            Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



                                            if(address.LocationType=== "MM")
                                            {  
                                                Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
                                                Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
                                                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                                            }

                                            else if(address.LocationType==="SM")
                                            {  
                                                Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
                                                Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
                                                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                                            }

                                            else if(address.LocationType==="MN")
                                            {

                                                Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
                                                Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
                                                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
                                            }

                                            else
                                            {   
                                                Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
                                                Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
                                                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

                                            }


                                            //---setting values in Two no field (Individual Address)-----

                                            Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.Name);
                                            Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(individual.HouseNo);
                                            Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(individual.WardNo);
                                            Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(individual.StreetName);                    
                                            Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(individual.DistrictNameNep);
                                            Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(individual.VdcTown);

                                            if(individual.LocationType==="MM")
                                            {                           
                                                Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);                        
                                            }

                                            else if(individual.LocationType==="SM")
                                            {
                                                Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);                        
                                                Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
                                            }
                                            else if(individual.LocationType==="MN")
                                            {
                                                Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);                        
                                                Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
                                            }
                                            else
                                            {
                                                Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);                        
                                                Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
                                            }



                                            //--setting Values in three--
                                            if(obj.root.AssmtDetailChildDOne)
                                            {

                                                Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
                                                Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue("E");
                                                Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
                                                Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);
                                            }
                                            else
                                            {
                                                Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue('');
                                                Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
                                                Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
                                                Ext.ComponentQuery.query('#btnDelete')[0].disable(true);


                                            }
                                            Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
                                            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(obj.root.TotalTaxLiability);
                                            Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);

                                            Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
                                            Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
                                            //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);

                                            Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnEditSA')[0].enable(true);
                                            Ext.ComponentQuery.query('#btnSubmitSA')[0].enable(true);
                                            Ext.ComponentQuery.query('#btnDelete')[0].enable(true);
                                            Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
                                            Ext.ComponentQuery.query('#btnPrintSA')[0].enable(true);
                                            Ext.ComponentQuery.query('#btnCancelSA')[0].enable(true);


                                        }

                                    },
                                    failure:function(response){}


                                });
                            });

                        }

                        if(userInfo.root.submittedFor=='INST')
                        {
                            uiConfig = {menuLink:'EstimatedReturn',
                                pageTitle:'E-Estimate Return/Estimate Revision Return/Estimate Revision Notice'

                            };

                            DynamicUI(uiConfig,function(){
                                Ext.ComponentQuery.query('#hdnEst_Ret_Action')[0].setValue('E');
                                Ext.ComponentQuery.query('#dispEst_Ret_submissionNo')[0].setValue(submissionNo);


                                Ext.Ajax.request({
                                    url: '../Handlers/IncomeTax/EstimatesReturn/EstimateReturnsHandlers1.ashx',
                                    params: {
                                        method:'GetEstimateReturn',submissionNumber:submissionNo,
                                        id: 1
                                    },
                                    success: function(response){
                                        var obj =Ext.decode( response.responseText);
                                        console.log(obj);
                                        var estReturn=obj.root;
                                        var taxpayer=estReturn.Taxpayer;
                                        var office=taxpayer.Office;
                                        var address=taxpayer.BusinessAddress.Address;

                                        console.log(estReturn);
                                        Ext.ComponentQuery.query('#dispEst_Ret_submissionNo')[0].setValue(submissionNo);

                                        Ext.ComponentQuery.query('#txtEst_Ret_PanNo')[0].setValue(obj.root.PAN);
                                        Ext.ComponentQuery.query('#txtEst_Ret_AccType')[0].setValue(taxpayer.acctType);
                                        //SET TAXPAYER'S INFO
                                        Ext.ComponentQuery.query('#hdnEst_Ret_Office_Code')[0].setValue(office.OfficeCode);
                                        Ext.ComponentQuery.query('#Est_Ret_IROName')[0].setValue(office.OfficeNameNepali);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Name')[0].setValue(taxpayer.Name);


                                        Ext.ComponentQuery.query('#txtEst_Ret_HouseNo')[0].setValue(address.HouseNo);
                                        Ext.ComponentQuery.query('#txtEst_Ret_WardNo')[0].setValue(address.WardNo);
                                        Ext.ComponentQuery.query('#txtEst_Ret_ToleName')[0].setValue(address.StreetName);

                                        if(address.LocationType=='MM')
                                        {
                                            Ext.ComponentQuery.query('#rdl_Est_Metro_Mun')[0].setValue(true);
                                        }
                                        else if(address.LocationType=='SM')
                                        {
                                            Ext.ComponentQuery.query('#rdl_Est_Sub_Metro_Mun')[0].setValue(true);
                                        }
                                        else if(address.LocationType=='MN')
                                        {
                                            Ext.ComponentQuery.query('#rdl_Est_Mun')[0].setValue(true);
                                        }
                                        else if(address.LocationType=='VD')
                                        {
                                            Ext.ComponentQuery.query('#rdl_Est_VDC')[0].setValue(true);
                                        }

                                        Ext.ComponentQuery.query('#txtEst_Ret_VDCName')[0].setValue(address.VdcTown);
                                        Ext.ComponentQuery.query('#txtEst_Ret_DistrictName')[0].setValue(address.DistrictNameNep);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Phone')[0].setValue(address.Telephone);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Mobile')[0].setValue(address.Phone);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Email')[0].setValue(address.Email);
                                        if(taxpayer.AcctStatus==='A')
                                        Ext.ComponentQuery.query('#Est_Ret_TpOfficeType')[0].setValue('सक्रिय');


                                        //Load Estimate Return
                                        Ext.ComponentQuery.query('#txtEst_Ret_AccType')[0].setValue(estReturn.AccType);
                                        Ext.ComponentQuery.query('#ddlEst_Ret_ReturnType')[0].setValue(estReturn.EstimateType);
                                        Ext.ComponentQuery.query('#txtEst_Ret_FiscalYear')[0].setValue(estReturn.FiscalYear);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Income')[0].setValue(estReturn.EstIncome);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Deductions')[0].setValue(estReturn.EstDeductions);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Exempt_Amount')[0].setValue(estReturn.EstExemptAmount);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Assessable_Income')[0].setValue(estReturn.EstAssessableIncome);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Income_Oth_Bus_Inv')[0].setValue(estReturn.EstIncomeOthBusInv);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Total_Assessable_Income')[0].setValue(estReturn.EstTtotalAssessableIncome);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Donation_To_Exempt_Org')[0].setValue(estReturn.DonationToExemptOrg);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Retirement_Contribution')[0].setValue(estReturn.EstRetirementContribution);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Taxable_Income')[0].setValue(estReturn.EstTaxableIncome);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Tax_Liability')[0].setValue(estReturn.EstTaxLiability);
                                        Ext.ComponentQuery.query('#txtEst_Ret_TDS_Paid_Amt')[0].setValue(estReturn.EstTdsPaidAmt);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Inst_Paid_Amt')[0].setValue(estReturn.EstInstPaidAmt);

                                        Ext.ComponentQuery.query('#txtEst_Ret_Foreign_Tax')[0].setValue(estReturn.EstForeignTax);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Income_Sent_Abroad')[0].setValue(estReturn.EstIncomeSentAbroad);
                                        Ext.ComponentQuery.query('#txtEst_Ret_Tax_OnIncome_Sent_Abraod')[0].setValue(estReturn.EstTaxOnIncomeSentAbraod);

                                        Ext.ComponentQuery.query('#hdnEstFilingDate')[0].setValue(estReturn.FilingDate);
                                        // Ext.ComponentQuery.query('#hdnEst_Ret_Action')[0].setValue(estReturn.Status);
                                        //Ext.ComponentQuery.query('#hdnlblEstimateReturnAction')[0].setValue(estReturn.);
                                        Ext.ComponentQuery.query('#hdnEstimateReturnTranNo')[0].setValue(estReturn.TranNo);

                                        Ext.ComponentQuery.query('#txtEst_Ret_FiscalYear')[0].setDisabled(false);




                                    },
                                    failure: function ( result, request ) {
                                        Ext.Msg.show({
                                            title: 'Failure',
                                            msg: 'ERROR OCURRED !!!' ,
                                            buttons: Ext.MessageBox.OK,
                                            icon:Ext.Msg.ERROR
                                        });
                                    }
                                });                    
                            });
                        }
                        else if(userInfo.root.submittedFor=='ASS03')
                        {
                            //NB:Income Tax
                            if(leaf !== "e-IncomeTax Self-Assessment")
                            {
                                msg("WARNING","This Submission is registered for 'e-IncomeTax Self-Assessment'.");
                                return;
                            }

                            uiConfig = {menuLink:'SetAssessmentType',
                                pageTitle:'SetAssessmentType'
                            }; 


                            DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:null,assmtType:'ASS03'});


                        }
                        else if(userInfo.root.submittedFor=='JA')
                        {
                            //NB:Income Tax
                            if(leaf !== "Jeopardy Assessment")
                            {
                                msg("WARNING","This Submission is registered for 'Jeopardy'.");
                                return;
                            }

                            uiConfig = {menuLink:'SetAssessmentType',
                                pageTitle:'SetAssessmentType'
                            }; 


                            DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:null,assmtType:'JA'});


                        }
                        else if(userInfo.root.submittedFor=='CB')
                        {
                            //NB:Income Tax
                            if(leaf !== "Change Off Business")
                            {
                                msg("WARNING","This Submission is registered for 'Change Off Business'.");
                                return;
                            }

                            uiConfig = {menuLink:'SetAssessmentType',
                                pageTitle:'SetAssessmentType'
                            }; 


                            DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:null,assmtType:'CB'});


                        }
                        else if(userInfo.root.submittedFor=='BH')
                        {
                            //NB:Income Tax
                            if(leaf !== "Change of Control")
                            {
                                msg("WARNING","This Submission is registered for 'Change of Control'.");
                                return;
                            }

                            uiConfig = {menuLink:'SetAssessmentType',
                                pageTitle:'SetAssessmentType'
                            }; 


                            DynamicUI(uiConfig,null,{submissionNo:submissionNo,pan:null,assmtType:'BH'});


                        }
                    }

                    else
                    {
                        msg('INFO','Submission Number Already Submitted');
                    }
                },
                failure:function(fp, o) {

                    msg('ERROR','There are Errors on the Pages');
                }
            });

        }               

    },

    onGeneralizedLoginAfterRender: function(abstractcomponent, options) {

        var map = Ext.getCmp('CntSiteMapPath');
        var val = map.html;
        var arr = val.split(">>");
        var module = arr[arr.length-2].trim();
        var leaf = arr[arr.length-1].trim();


        Ext.ComponentQuery.query('#hdnGenLoginLeaf')[0].setValue(leaf);
        Ext.ComponentQuery.query('#hdnGenLoginModule')[0].setValue(module);
        var btnGetGenSubNo = Ext.ComponentQuery.query('#btnGetGenSubNo')[0];

        var lblmsb1= Ext.ComponentQuery.query('#lblmsb1')[0];
        var lblmsg2 =  Ext.ComponentQuery.query('#lblmsg2')[0];

        var modtitle = module + '>>' + leaf;

        if(("Income Tax System" === module) && ("Income Tax Login" === leaf))
        { 
            //Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(true);
            //cntSelfAssessmentInstruction.setVisible(false);
            //cntVatEstRet.setVisible(true);
            btnGetGenSubNo.setVisible(false);
            lblmsb1.setVisible(false);
            lblmsg2.setVisible(false);
        }

        if(("Value Added Tax System" === module) && ("Vat Returns Login" === leaf))
        { 
            //Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(true);
            //cntSelfAssessmentInstruction.setVisible(false);
            //cntVatEstRet.setVisible(true);
            btnGetGenSubNo.setVisible(false);
            lblmsb1.setVisible(false);
            lblmsg2.setVisible(false);
        }

        Ext.getCmp('CntSiteMapPath').update(modtitle);
        //Value Added Tax System>>Vat Returns Login
    },

    onBtnGetGenSubNoClick: function(button, e, options) {
        var leaf=Ext.ComponentQuery.query('#hdnGenLoginLeaf')[0].getValue();
        var module=Ext.ComponentQuery.query('#hdnGenLoginModule')[0].getValue();

        var cntSelfAssessmentInstruction = Ext.ComponentQuery.query('#cntSelfAssessmentInstruction')[0];

        var cntVatEstRet = Ext.ComponentQuery.query('#cntVatEstRet')[0];
        var btnGetGenSubNo = Ext.ComponentQuery.query('#btnGetGenSubNo')[0];


        var uiConfig = {menuLink:'GetGeneralizedSubmissionNo',
            pageTitle:module + '>>' + leaf
        };
        var modtitle = module + '>>' + leaf;

        DynamicUI(uiConfig,function(){



            if((("Integrated Tax Menus" === module) && ("GeneralizedLogin" === leaf)))
            { 
                Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(false);

                cntSelfAssessmentInstruction.setVisible(false);
                cntVatEstRet.setVisible(true);

            }

            else if(("Value Added Tax System" === module) && ("Vat Returns Login" === leaf))
            { 
                Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(false);
                cntSelfAssessmentInstruction.setVisible(false);
                cntVatEstRet.setVisible(true);
            }
            else if(("Value Added Tax System" === module) && ("Logins" === leaf))
            { 
                Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(false);
                cntSelfAssessmentInstruction.setVisible(false);
                cntVatEstRet.setVisible(true);
            }

            else if(("Income Tax System" === module) && ("Income Tax Login" === leaf))
            { 

                Ext.ComponentQuery.query('#ddlVatretFysicalyr')[0].setVisible(true);
                cntSelfAssessmentInstruction.setVisible(false);
                cntVatEstRet.setVisible(true);
                btnGetGenSubNo.setVisible(false);
            }



        });
        Ext.getCmp('CntSiteMapPath').update(modtitle);
        //Income Tax System>>Income Tax Login



    },

    LoadReturns: function(submissionNo, submittedFor, pan, submittedYN) {
        var uiConfig='';

        if(submittedFor=='VRET')
        {
            uiConfig = {menuLink:'VatReturns',
                pageTitle:'E-Vat Returns Entry'

            };

        }
        else if(submittedFor=='VCB')
        {
            uiConfig = {menuLink:'CloseOfBusiness',
                pageTitle:'E-Close of Business Entry'

            };


        }


        DynamicUI(uiConfig,function(){
            var acctType='00';
            Ext.ComponentQuery.query("#txtAccountType")[0].setValue('00');
            Ext.ComponentQuery.query("#lblSubmissionNo")[0].setValue(submissionNo);
            Ext.ComponentQuery.query("#txtPan")[0].setValue(pan);


            if(submittedYN!='N')
            {


                msg('INFO','Submission Number Already Submitted.<BR>You Cannot Edit The Information.');
                Ext.ComponentQuery.query('#btnSaveVatReturns')[0].disable(true);
                Ext.ComponentQuery.query('#btnSubmitVatReturns')[0].disable(true);
            }



            if(submittedYN=='Y')
            {

                Ext.ComponentQuery.query("#hfRTStatus")[0].setValue('Y');
            }



            //LOAD TAXPAYER INFO    
            Ext.Ajax.request({
                url: '../Handlers/Registration/Taxpayer/TaxpayerHandler.ashx',
                params: {
                    method:'GetTaxPayer',pan:pan,
                    acctType:acctType,
                    id: 1
                },
                success: function(response){
                    var obj =Ext.decode( response.responseText);
                    //console.log(obj);

                    var taxpayer=obj.root.Taxpayer;
                    var address=taxpayer.BusinessAddress.Address;
                    var office=taxpayer.Office;

                    if(taxpayer.AcctStatus!='A')
                    {
                        msg('INFO', 'PAN IS NOT ACTIVE');
                        return;
                    }
                    //Sets TaxPayer's Info
                    Ext.ComponentQuery.query("#lblTaxpayerName")[0].setValue(taxpayer.Name);
                    Ext.ComponentQuery.query("#lblTaxpayerAddress")[0].setValue(address.DistrictNameNep+' / '+address.StreetName);
                    Ext.ComponentQuery.query("#lblTaxpayerPhoneNo")[0].setValue(address.Phone);
                    Ext.ComponentQuery.query("#lblTaxpayerFax")[0].setValue(address.Phone);
                    Ext.ComponentQuery.query('#hdnRegistrationDate')[0].setValue(taxpayer.RegistrationDate);

                }
            });


            //LOAD VAT RETURNS DETAILS
            Ext.Ajax.request({
                url: '../Handlers/Vat/VatReturnsHandler.ashx',
                params: {method:'GetVatReturn',SubNo:submissionNo,
                    id: 1
                },
                success: function(response){
                    var returnsInfo =Ext.decode( response.responseText);

                    if(returnsInfo.root!=='')
                    {



                        //Set Taxpayer Year Month Details
                        Ext.ComponentQuery.query("#txtTaxYear")[0].setValue(returnsInfo.root.TaxYear);
                        Ext.ComponentQuery.query("#ddlFilingPeriod")[0].setValue(returnsInfo.root.FilePer);
                        Ext.ComponentQuery.query("#ddlPeriod")[0].setValue(returnsInfo.root.Period);


                        //Set Taxpayer Transaction Details
                        Ext.ComponentQuery.query("#txtTaxableSale")[0].setValue(returnsInfo.root.TaxableSale);
                        Ext.ComponentQuery.query("#txtVatOnSale")[0].setValue(returnsInfo.root.VATOnSale);
                        Ext.ComponentQuery.query("#txtExport")[0].setValue(returnsInfo.root.Export);
                        Ext.ComponentQuery.query("#txtExemptSale")[0].setValue(returnsInfo.root.ExemptSale);
                        Ext.ComponentQuery.query("#txtTaxablePurchase")[0].setValue(returnsInfo.root.TaxablePurchase);
                        Ext.ComponentQuery.query("#txtVatOnPurchase")[0].setValue(returnsInfo.root.VATOnPur);
                        Ext.ComponentQuery.query("#txtTaxablePurI")[0].setValue(returnsInfo.root.TaxablePurI);
                        Ext.ComponentQuery.query("#txtVatOnPurI")[0].setValue(returnsInfo.root.VATOnPurI);
                        Ext.ComponentQuery.query("#txtExemptPurchase")[0].setValue(returnsInfo.root.ExemptPur);
                        Ext.ComponentQuery.query("#txtExemptPurI")[0].setValue(returnsInfo.root.ExemptPurI);
                        Ext.ComponentQuery.query("#txtAdjCredit")[0].setValue(returnsInfo.root.AdjCredit);
                        Ext.ComponentQuery.query("#txtAdjDebit")[0].setValue(returnsInfo.root.AdjDebit);
                        Ext.ComponentQuery.query("#txtCreditBF")[0].setValue(returnsInfo.root.CreditBF);
                        Ext.ComponentQuery.query("#txtRefClaimAmt")[0].setValue(returnsInfo.root.RefClaimAmt);
                        Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setValue(returnsInfo.root.RBID);


                        var form='';
                        if(submittedFor=='VRET')
                        {
                            Ext.getCmp("hfAction").setValue(returnsInfo.root.Action);
                            form=(Ext.ComponentQuery.query('#frmVatReturns')[0]).getForm();
                        }
                        else if(submittedFor=='VCB')
                        {
                            Ext.ComponentQuery.query("#txtStockAmount")[0].setValue(returnsInfo.root.TDStockAmount);
                            Ext.ComponentQuery.query("#txtStockTax")[0].setValue(returnsInfo.root.TDStockTax);

                            Ext.ComponentQuery.query("#hfCOBAction")[0].setValue(returnsInfo.root.Action);
                            form=(Ext.ComponentQuery.query('#frmCloseOfBusiness')[0]).getForm();
                        }


                        if(submittedYN!='N')
                        {
                            //Convert All Fields To Read Only
                            fields = form.getFields();
                            Ext.each(fields.items, function (f) {
                                f.inputEl.dom.disabled = true;
                            });
                            //Ends Converting Fields To Read Only
                        }

                    }       
                    else
                    {
                        if(submittedFor=='VRET')
                        {
                            Ext.getCmp("hfAction").setValue('A');
                        }
                        else if(submittedFor=='VCB')
                        {
                            Ext.ComponentQuery.query("#hfCOBAction")[0].setValue('A');
                        }

                    }
                }
            });
        });

    },

    init: function(application) {
        this.control({
            "#btnLoginGeneralized": {
                click: this.onBtnLoginGeneralizedClick
            },
            "#GeneralizedLogin": {
                afterrender: this.onGeneralizedLoginAfterRender
            },
            "#btnGetGenSubNo": {
                click: this.onBtnGetGenSubNoClick
            }
        });
    }

});
