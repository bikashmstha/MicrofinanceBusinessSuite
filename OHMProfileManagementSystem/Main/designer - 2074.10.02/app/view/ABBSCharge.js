/*
 * File: app/view/ABBSCharge.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.ABBSCharge', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.form.field.Checkbox',
        'Ext.grid.column.Action',
        'Ext.selection.RowModel',
        'Ext.toolbar.Toolbar',
        'Ext.grid.plugin.RowEditing'
    ],

    frame: true,
    title: 'ABBS Charge Type Setup',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    itemId: 'frmABBSCharge',
                    bodyPadding: 10,
                    layout: {
                        type: 'table',
                        columns: 4
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            itemId: 'ddlOffice',
                            width: 300,
                            fieldLabel: 'Office',
                            labelWidth: 50,
                            emptyText: '--- Select Office ---',
                            displayField: 'OfficeName',
                            queryMode: 'local',
                            store: 'OfficeShortStore',
                            valueField: 'OfficeCode'
                        },
                        {
                            xtype: 'combobox',
                            itemId: 'ddlToOffice',
                            margin: '0 0 0 10',
                            width: 300,
                            fieldLabel: 'To Office',
                            labelWidth: 70,
                            emptyText: '--- Select To Office ---',
                            displayField: 'OfficeName',
                            queryMode: 'local',
                            store: 'OfficeShortStore',
                            valueField: 'OfficeCode'
                        },
                        {
                            xtype: 'combobox',
                            itemId: 'ddlABBSType',
                            margin: '0 0 0 10',
                            fieldLabel: 'ABBS Type',
                            labelWidth: 80,
                            emptyText: '--- Select ABBS Type ---',
                            displayField: 'RefDtlName',
                            queryMode: 'local',
                            store: 'ReferenceShortStore',
                            valueField: 'RefDtlCode'
                        },
                        {
                            xtype: 'button',
                            colspan: 3,
                            itemId: 'btnABBSChargeType',
                            padding: 5,
                            text: 'Load',
                            listeners: {
                                click: {
                                    fn: me.onBtnABBSChargeTypeClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'gridpanel',
                            colspan: 4,
                            itemId: 'grdABBSCharge',
                            title: 'ABBS Type Charges',
                            store: 'ABBSTypeChargeStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    hidden: true,
                                    dataIndex: 'TranOfficeCode',
                                    text: 'Tran Office Code',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtTranOffice'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    hidden: true,
                                    dataIndex: 'ToOfficeCode',
                                    text: 'To Office Code',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtToOffice'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    hidden: true,
                                    dataIndex: 'ABBSType',
                                    text: 'ABBS Type',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtABBSType'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    hidden: true,
                                    dataIndex: 'ABBSTypeDesc',
                                    text: 'ABBS Type Desc',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtABBSTypeDesc'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 150,
                                    dataIndex: 'ABBSMinAmount',
                                    text: 'ABBS Min Amount',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtABBSMinAmount'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 150,
                                    dataIndex: 'ABBSMaxAmount',
                                    text: 'ABBS Max Amount',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtABBSMaxAmount'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 150,
                                    dataIndex: 'ABBSChargeAmount',
                                    text: 'ABBS Charge Amount',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtABBSChargeAmount'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Active',
                                    text: 'Active',
                                    editor: {
                                        xtype: 'checkboxfield',
                                        itemId: 'chkActive'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Action',
                                    text: 'Action',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtAction'
                                    }
                                },
                                {
                                    xtype: 'actioncolumn',
                                    itemId: 'delABBSTypeCharge',
                                    items: [
                                        {
                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                var store = Ext.getStore('ABBSTypeChargeStore');
                                                var grd =  Ext.ComponentQuery.query('#grdABBSCharge')[0];
                                                var row = store.getAt(rowIndex).data;

                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected ABBS Charge ?', function(btn) {
                                                    if(btn == 'yes'){


                                                        var aBBSCharge={TranOfficeCode:row.TranOfficeCode,
                                                                ToOfficeCode:row.ToOfficeCode,
                                                                ABBSType:row.ABBSType,
                                                                ABBSMinAmount:row.ABBSMinAmount,
                                                                ABBSMaxAmount:row.ABBSMaxAmount,
                                                                ABBSChargeAmount:row.ABBSChargeAmount,
                                                                Active:row.Active===true?'Y':'N',
                                                            Action:'D'};

                                                        var wMsg='Deleting....';

                                                        var waitSave = watiMsg(wMsg);

                                                        Ext.Ajax.request({
                                                            url: '../Handlers/Finance/Maintenance/ABBSChargeHandler.ashx',
                                                            params: {
                                                                method:'SaveABBSCharge',
                                                                aBBSCharge:JSON.stringify(aBBSCharge)
                                                            },
                                                            success: function(response){
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                console.log(out);

                                                                if(out.success==="true")
                                                                {
                                                                    var message=out.root;
                                                                    if(message.OutResultCode==="SUCCESS")
                                                                    {
                                                                        msg("SUCCESS",message.OutResultMessage,function(){
                                                                            grd.bindStore(store);
                                                                            store.removeAt(rowIndex);
                                                                        });



                                                                    }
                                                                    else
                                                                    {
                                                                        msg("FAILURE",message.OutResultMessage);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    msg("FAILURE",out.message);
                                                                }
                                                            },
                                                            failure: function ( result, request ) {
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                msg("FAILURE",out.message);
                                                            }

                                                        });



                                                        return true;
                                                    }
                                                });
                                            },
                                            icon: '../ITS/resources/images/icons/cancel.png'
                                        }
                                    ]
                                }
                            ],
                            selModel: Ext.create('Ext.selection.RowModel', {

                            }),
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    items: [
                                        {
                                            xtype: 'button',
                                            itemId: 'btnAddABBSTypeCharge',
                                            width: 100,
                                            text: 'Add ABBS Charge Type',
                                            listeners: {
                                                click: {
                                                    fn: me.onBtnAddABBSTypeChargeClick,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }
                            ],
                            plugins: [
                                Ext.create('Ext.grid.plugin.RowEditing', {
                                    listeners: {
                                        validateedit: {
                                            fn: me.onRowEditingValidateedit,
                                            scope: me
                                        },
                                        canceledit: {
                                            fn: me.onRowEditingCanceledit,
                                            scope: me
                                        }
                                    }
                                })
                            ]
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFrmABBSChargeAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onBtnABBSChargeTypeClick: function(button, e, eOpts) {
        var office=Ext.ComponentQuery.query('#ddlOffice')[0];
        var toOffice=Ext.ComponentQuery.query('#ddlToOffice')[0];
        var abbsType=Ext.ComponentQuery.query('#ddlABBSType')[0];

        if (office.getValue()===null||office.getValue()===null)
            {
                msg('WARNING','Please, Select Office');
                return;
            }
        if (toOffice.getValue()===null||toOffice.getValue()===null)
            {
                msg('WARNING','Please, Select To Office');
                return;
            }
        if (abbsType.getValue()===null||abbsType.getValue()===null)
            {
                msg('WARNING','Please, Select ABBS Type');
                return;
            }


        var store=Ext.getStore('ABBSTypeChargeStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Finance/Maintenance/ABBSChargeHandler.ashx',
            params: {
                method:'GetABBSCharge',
                office:office.getValue(),
                toOffice:toOffice.getValue(),
                abbsType:abbsType.getValue()
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onBtnAddABBSTypeChargeClick: function(button, e, eOpts) {
        var office=Ext.ComponentQuery.query('#ddlOffice')[0];
        var toOffice=Ext.ComponentQuery.query('#ddlToOffice')[0];
        var abbsType=Ext.ComponentQuery.query('#ddlABBSType')[0];

        if (office.getValue()===null||office.getValue()===null)
            {
                msg('WARNING','Please, Select Office');
                return;
            }
        if (toOffice.getValue()===null||toOffice.getValue()===null)
            {
                msg('WARNING','Please, Select To Office');
                return;
            }
        if (abbsType.getValue()===null||abbsType.getValue()===null)
            {
                msg('WARNING','Please, Select ABBS Type');
                return;
            }
        var store =Ext.getStore('ABBSTypeChargeStore');
        var rec={TranOfficeCode:office.getValue(),
                 ToOfficeCode:toOffice.getValue(),
                 ABBSType:abbsType.getValue(),
                 ABBSTypeDesc:'',
                 ABBSMinAmount:'0',
                 ABBSMaxAmount:'0',
                 ABBSChargeAmount:'0',
                 Active:'',
                 Action:'I'};
        store.add(rec);
    },

    onRowEditingValidateedit: function(editor, e, eOpts) {
        var errMsg='';
        var office=Ext.ComponentQuery.query('#txtTranOffice')[0];
        var toOffice=Ext.ComponentQuery.query('#txtToOffice')[0];
        var abbsType=Ext.ComponentQuery.query('#txtABBSType')[0];
        var abbsTypeDesc=Ext.ComponentQuery.query('#txtABBSTypeDesc')[0];
        var abbsMinAmount=Ext.ComponentQuery.query('#txtABBSMinAmount')[0];
        var abbsMaxAmount=Ext.ComponentQuery.query('#txtABBSMaxAmount')[0];
        var abbsChargeAmount=Ext.ComponentQuery.query('#txtABBSChargeAmount')[0];
        var active=Ext.ComponentQuery.query('#chkActive')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];
        if(office.getValue()===null||office.getValue()==='')
            {
                errMsg+='Please, Select Office.';
            }
        if(toOffice.getValue()===null||toOffice.getValue()==='')
            {
                errMsg+='Please, Select Office.';
            }
        if(abbsType.getValue()===null||abbsType.getValue()==='')
            {
                errMsg+='Please, Select Office.';
            }

        if(abbsMinAmount.getValue()===null ||abbsMinAmount.getValue()==="")
            {
                errMsg+="Please, Enter Minimum Amount";
            }
        if(abbsMaxAmount.getValue()===null ||abbsMaxAmount.getValue()==="")
            {
                errMsg+="Please,Enter Maximum Amount";
            }
        if(abbsChargeAmount.getValue()===null ||abbsChargeAmount.getValue()==="")
            {
                errMsg+="Please,Enter Charge Amount";
            }

        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }

        var aBBSCharge={TranOfficeCode:office.getValue(),
                 ToOfficeCode:toOffice.getValue(),
                 ABBSType:abbsType.getValue(),
                 ABBSMinAmount:abbsMinAmount.getValue(),
                 ABBSMaxAmount:abbsMaxAmount.getValue(),
                 ABBSChargeAmount:abbsChargeAmount.getValue(),
                 Active:active.getValue()===true?'Y':'N',
                 Action:action.getValue()};



        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updting....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Finance/Maintenance/ABBSChargeHandler.ashx',
                    params: {
                        method:'SaveABBSCharge',
                        aBBSCharge:JSON.stringify(aBBSCharge)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdABBSCharge')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit: function(editor, e, eOpts) {

    },

    onFrmABBSChargeAfterRender: function(component, eOpts) {
        var store=Ext.getStore('OfficeShortStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Office/OfficeHandler.ashx',
            params: {
                method:'GetOfficeShort'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            store.removeAll();
            store.add(data.root);


        }
        });

        var abbsTypeChargeStore=Ext.getStore('ABBSTypeChargeStore');
        abbsTypeChargeStore.removeAll();

        var abbsTypeStore=Ext.getStore('ReferenceShortStore');
        abbsTypeStore.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/References/MsRefrenceCodeDetailsHandler.ashx',
            params: {
                method:'GetReferenceDetailListShort',referenceCode:'ABBS_TYPE'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            abbsTypeStore.removeAll();
            abbsTypeStore.add(data.root);


        }
        });
    }

});