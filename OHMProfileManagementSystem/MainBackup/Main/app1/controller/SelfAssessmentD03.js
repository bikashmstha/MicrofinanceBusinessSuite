/*
 * File: app/controller/SelfAssessmentD03.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.SelfAssessmentD03', {
    extend: 'Ext.app.Controller',

    stores: [
        'TaxPayerTypeD03'
    ],

    refs: [
        {
            ref: 'auditorVerf',
            selector: '#pnlAuditorVerificationD03'
        },
        {
            ref: 'taxPayerSelDetail',
            selector: '#pnlTaxPayerSelectionDetailD03'
        },
        {
            ref: 'submissionNo',
            selector: '#lblSubmissionNoD03'
        }
    ],

    onPnlSelfAssessmentD03AfterRender: function(component, eOpts) {
        var me = this;
        var view = Ext.ComponentQuery.query('#pnlSelfAssessmentD03')[0];
        var user = me.getController('MyApp.controller.LoginSecurity');  
        var param = "";

        if(view.extraParam === null)
        {
            user.clearSession();
            return;
        }

        param = view.extraParam;

        //-------------------------------------------------------------------------
        // NB: Loading details using TRAN-NO i.e. for Verification Preview
        //-------------------------------------------------------------------------
        if(param.params)
        {    
            var arg = param.params;

            if(arg.from)
            {
                var from = arg.from;

                switch(from)
                {
                    case "MV":       
                    var tranNo = arg.tranNo; 
                    me.loadDetailByTran(tranNo,param,view);
                    break;  
                    case "OV":
                    var tranNo = arg.tranNo; 
                    me.loadDetailByTran(tranNo,param,view);
                }

                return;
            }
        }    

        //-------------------------------------------------------------------

        me.hideShowDates(param.assmtType);

        if(param.pan !== null)
        {
            //-------------------------------------------------------------------------
            // NB: Loading details using PAN and ACCOUNT-TYPE i.e. for Submission Login
            //-------------------------------------------------------------------------
            LoadTaxpayerInfoWithValidPan(param.pan,"10",function(data){

                param.loginType = "SubLogin";
                me.loadControls(data);        

            });
        }
        else
        {
            //-------------------------------------------------------------------------
            // NB: Loading details using submission Number i.e. for Income Tax Login
            //-------------------------------------------------------------------------

            var subNum = param.submissionNo;

            Ext.Ajax.request({
                url: '../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=GetDCTBAssessment',
                //params:{assessmentNo:param.submissionNo},
                params:{assessmentNo:subNum},
                success: function ( result, request ) {


                    var obj = Ext.decode(result.responseText); 

                    if(obj.success === "true" && obj.total > 0)
                    {
                        param.loginType = "ITaxLogin";
                        me.loadControls(obj);

                        me.loadAnxSummary(subNum);

                        if(param.recStatus === "F")
                        {
                            var btnUpdate = Ext.ComponentQuery.query('#btnUpdateD03')[0]; 
                            btnUpdate.setVisible(false); 
                        }
                    }
                    else
                    {
                        //-------------------------------------------------------------
                        // NB: No data saved before case , get pan info from loginTB
                        //-------------------------------------------------------------
                        var flag = me.getLoginTB(param,user);
                    }

                },
                failure: function(form, action) {


                    msg("FAILURE","Error in Fetching data !!!");
                }

            });
        }


    },

    onBtnEnterAnnexD03Click: function(button, e, eOpts) {
        var obj = Ext.ComponentQuery.query('#pnlSelfAssessmentD03')[0];
        var param = obj.extraParam;
        var uiConfig = {menuLink:'SetAnnexD03',pageTitle:'Set Annex'};

        var cboTaxPayerType = Ext.ComponentQuery.query('#cboTaxPayerTypeD03')[0];
        var cat = cboTaxPayerType.getValue();
        //var offCode = Ext.get('offCode').dom.innerHTML;
        var offCode = param.officeCode;
        var from = "";
        var moduleID = "SA-DO3";

        //-------------------------------------------------------------------------
        // NB: For Verification Preview
        //-------------------------------------------------------------------------
        if(param.params)
        {    
            var arg = param.params;

            if(arg.from)
            {        
                from = arg.from;  

                if(from === "AU")
                {
                    requestNo = arg.requestNo;
                    offCodeAU = arg.offCode;
                }
            }
        } 


        if(from === "OV")
        {
            from = "MV";
        }

        switch(param.assmtType)
        {
            case "SA":       
            moduleID = "SA-DO3";
            break;
            case "JA":
            moduleID = "JA";
            break;
            case "BH":
            moduleID = "BH";
            break;
            case "CB":
            moduleID = "CB";
            break;
        }




        var params = {  submissionNo:param.submissionNo,
                pan:param.pan,
                taxPayerCatID:param.taxPayerCatID,
                name:param.name,
                offCode:offCode,
                fiscalYear:param.fiscalYear,
                taxpayerCat:cat,
                action:"",
                recStatus:param.recStatus === undefined?"":param.recStatus,
                moduleID:moduleID,
                from :from,
                requestNo:"",
                offCodeAU:""

            };

        /*
        DynamicUI(uiConfig,null,{submissionNo:param.submissionNo,
        pan:param.pan,
        fiscalYear:param.fiscalYear,
        name:param.name,
        offCode:offCode,
        taxPayerCatID:param.taxPayerCatID,
        taxpayerCat:cat,
        action:"",
        recStatus:param.recStatus === undefined?"":param.recStatus,
        moduleID:"SA-DO3"                  
        });

        */


        if(from === "MV")
        {
            Ext.getCmp("PopupWindow").close();
            //dynamicPopUp("SetAnnexD03",{params:params});
            dynamicPopUp("SetAnnexD03",params);    
            Ext.getCmp("PopupWindow").setWidth(1140);
        }
        else
        {
            DynamicUI(uiConfig,null,params);
        }

    },

    onRgbtnClubbedPanChange: function(field, newValue, oldValue, eOpts) {
        var radios = Ext.ComponentQuery.query('#rgbtnClubbedPanD03')[0];
        var clubPanNo = Ext.ComponentQuery.query('#txtClubbedPanNoDo3')[0];


        if(newValue.pan === "Y")
        {
            clubPanNo.setReadOnly(false);
        }
        else if(newValue.pan === "N")
        {
            clubPanNo.setReadOnly(true);
            clubPanNo.setValue("");
        }

    },

    onBtnRegisterD03Click: function(button, e, eOpts) {
        var me = this;

        var form = button.up('form').getForm();
        if(!form.isValid())
        {
            msg("WARNING","कृपया सबै विवरणहरू भन्नुहोस् !!!");    
            return;
        }

        me.saveUpdate("A");

        var strAnxSummary = Ext.create ('Ext.data.Store', {
            fields: ['AnnexID','Business','Action'],
            proxy: {
                type: 'ajax',
                url: '',
                reader: {
                    type: 'json',
                    root: 'root'
                }
            },
            storeId:'AnxSummary'
        });


        strAnxSummary.loadData([],false);
    },

    onCboTaxPayerTypeD03Select: function(combo, records, eOpts) {
        var me = this;
        var newValue = combo.getValue(); 

        me.onChangeTaxPayerType(newValue);
    },

    onBtnUpdateD03Click: function(button, e, eOpts) {
        var me = this;

        var form = button.up('form').getForm();
        if(!form.isValid())
        {
            msg("WARNING","कृपया सबै विवरणहरू भन्नुहोस् !!!");    
            return;
        }

        me.saveUpdate("E");
    },

    onTxtAuditorPanNoD03Blur: function(component, e, eOpts) {
        /*
        var me = this;

        if(field.getValue !== "")
        {
        return ValidatePan(field.getValue(),"10",function(){field.focus();});
        }

        return true;

        */
        /*
        if(field.getValue !== "")
        {

        //-------------------------------------------------------------------------
        // NB: Loading details using PAN and ACCOUNT-TYPE i.e. for Submission Login
        //-------------------------------------------------------------------------
        var isValid =  LoadTaxpayerInfoWithValidPan(textfield.getValue(),"10",function(data){

            var txtAuditorName =  Ext.ComponentQuery.query('#txtAuditorNameD03')[0];
            var rec = data.root.Taxpayer;

            txtAuditorName.setValue(rec.Name);
        });

        if(!isValid)
        {
            alert("isValid" + isValid);
            field.focus();
        }
    }

    return true;

    */
    },

    onTxtAuditorPanNoD03Keypress: function(textfield, e, eOpts) {
        var me = this;


        if((e.keyCode === 13 || e.keyCode === 9) && textfield.getValue().length === 9)
        {
            var txtAuditorName =  Ext.ComponentQuery.query('#txtAuditorNameD03')[0];
            txtAuditorName.setValue("");
            txtAuditorName.clearInvalid();

            //-------------------------------------------------------------------------
            // NB: Loading details using PAN and ACCOUNT-TYPE i.e. for Submission Login
            //-------------------------------------------------------------------------
            LoadTaxpayerInfoWithValidPan(textfield.getValue(),"10",function(data){


                if(!data.root.Taxpayer.Name)
                {
                    msg("WARNING","Please Enter a VALID Pan!!!",function(){textfield.focus();});

                    return;
                }

                var rec = data.root.Taxpayer;

                txtAuditorName.setValue(rec.Name);

            },function(){ textfield.focus();});
            }


    },

    onTxtAuditorPanNoD03Blur: function(component, e, eOpts) {

    },

    loadControls: function(data) {
        var me = this;
        var pnlSelfAssessment = Ext.ComponentQuery.query('#pnlSelfAssessmentD03')[0];
        var param = pnlSelfAssessment.extraParam;

        var fiscalYear = Ext.ComponentQuery.query('#txtFiscalYearDo3')[0];
        var pan = Ext.ComponentQuery.query('#txtPanNoDo3')[0];
        var IRO = Ext.ComponentQuery.query('#txtPlaceD03')[0];
        var name = Ext.ComponentQuery.query('#txtNameDo3')[0];
        var houseNo = Ext.ComponentQuery.query("#txtHouseNoDo3")[0];
        var ward = Ext.ComponentQuery.query('#txtWardNoD03')[0];
        var street = Ext.ComponentQuery.query('#txtToleNameD03')[0];
        var vdc = Ext.ComponentQuery.query('#txtVDCNameD03')[0];
        var district = Ext.ComponentQuery.query('#txtDistrictNameD03')[0];
        var phone = Ext.ComponentQuery.query('#txtPhoneD03')[0];
        var mobile = Ext.ComponentQuery.query('#txtMobileDo3')[0];
        var email = Ext.ComponentQuery.query('#txtEmailDo3')[0];
        var radios = Ext.ComponentQuery.query('#rbtnsLocationD03')[0]; 

        var txtFromDate =  Ext.ComponentQuery.query('#txtFromDateD03')[0];
        var txtToDate =  Ext.ComponentQuery.query('#txtToDateD03')[0];

        var obj = data.root;
        var rec = data.root.Taxpayer;
        var addr = rec.BusinessAddress !== null? rec.BusinessAddress.Address:null;
        var office = rec.Office;
        var store = Ext.getStore("TaxPayerTypeD03");
        store.loadData([],false);

        if(param.assmtType === "JA" || param.assmtType === "BH")
        {
            txtFromDate.setValue(obj.AssessmentFromDate);
            txtToDate.setValue(obj.DateUpto);
            partOrFull = "Y";

        }
        else if(param.assmtType === "CB")
        {
            txtToDate.setValue(obj.DateUpto);
            partOrFull = "Y";
        }


        if(param.loginType === "ITaxLogin")
        {  
            param.fiscalYear = obj.FiscalYear;
            param.pan = obj.Pan;
            param.recStatus= obj.RecordStatus;     

        }

        me.getSubmissionNo().setValue(param.submissionNo);

        param.officeCode = office.OfficeCode;
        param.taxPayerCatID = rec.TaxpayerCategoryId;
        param.name = rec.Name;

        pan.setValue(param.pan);
        fiscalYear.setValue(param.fiscalYear);
        IRO.setValue(office.OfficeNameNepali);
        name.setValue(rec.Name);

        if(addr !== null)
        {
            houseNo.setValue(addr.HouseNo);
            ward.setValue(addr.WardNo);
            street.setValue(addr.StreetName);
            vdc.setValue(addr.VdcTown);        
            district.setValue(addr.DistrictNameNep);
            phone.setValue(addr.Telephone);
            email.setValue(addr.Email);
        }

        if(rec.TaxpayerCategoryId == "I")
        {
            me.getTaxPayerSelDetail().setVisible(true);
            me.getAuditorVerf().setTitle("४. लेखाप्ररिक्षण प्रमाणीकरण");
        }
        else
        {
            me.getTaxPayerSelDetail().setVisible(false);
            me.getAuditorVerf().setTitle("३. लेखाप्ररिक्षण प्रमाणीकरण");
        }

        radios.setValue({loc:addr.LocationType});
        store.load({params:{fiscalYear: param.fiscalYear,taxCatType: rec.TaxpayerCategoryId}});

        if(param.loginType === "ITaxLogin" && obj.TaxpayerCat !== "")
        {
            me.loadControlsForITaxLogin(obj);

        }
    },

    onChangeTaxPayerType: function(val) {
        var obj = Ext.ComponentQuery.query('#pnlSelfAssessmentD03')[0];
        var param = obj.extraParam;

        if(param.taxPayerCatID === "I")
        {
            var statusVal = "";
            var flag = false;

            var clubbedPan = Ext.ComponentQuery.query('#cntClubbedPanD03')[0];
            var panForClubbed = Ext.ComponentQuery.query('#txtClubbedPanNoDo3')[0];
            var clubbedName = Ext.ComponentQuery.query('#txtClubbedNameD03')[0];
            var radios = Ext.ComponentQuery.query('#rgbtnClubbedD03')[0];

            switch (val) {
                case "A": statusVal='N';flag = false; break;
                case "A1-1-1": statusVal='N';flag = false; break;
                case "A1-1-2": statusVal='Y';flag = true; break;
                case "A1-1-9C":statusVal='Y';flag = true; break;
                case "A1-1-9KA": statusVal='N';flag = false; break;
                case "A1-1-9KAC": statusVal='Y';flag = true; break;
                default: status ='N';flag = false; break;
            }

            clubbedPan.setVisible(flag);
            clubbedName.setReadOnly(!flag);
            panForClubbed.setValue("");
            clubbedName.setValue("");
            radios.setValue({status:statusVal});
        }


    },

    loadControlsForITaxLogin: function(obj) {
        var me = this;

        //-------------------------------------------------------------------------
        // NB: Setting datas from Assessment
        //-------------------------------------------------------------------------
        var btnRegister = Ext.ComponentQuery.query('#btnRegisterD03')[0];        
        var btnUpdate = Ext.ComponentQuery.query('#btnUpdateD03')[0];
        var btnEnterAnnex = Ext.ComponentQuery.query('#btnEnterAnnexD03')[0];

        var cboTaxPayerType = Ext.ComponentQuery.query('#cboTaxPayerTypeD03')[0];
        var clubbedYN = Ext.ComponentQuery.query('#rgbtnClubbedD03')[0];
        var clubbedHasPan = Ext.ComponentQuery.query('#rgbtnClubbedPanD03')[0];
        var clubbedPan = Ext.ComponentQuery.query('#txtClubbedPanNoDo3')[0];
        var clubbedName = Ext.ComponentQuery.query('#txtClubbedNameD03')[0];

        var auditorName = Ext.ComponentQuery.query('#txtAuditorNameD03')[0];
        var auditorLicenseNo = Ext.ComponentQuery.query('#txtAuditorLicenseNoD03')[0];
        var auditorPanNo = Ext.ComponentQuery.query('#txtAuditorPanNoD03')[0];

        cboTaxPayerType.setValue(obj.TaxpayerCat);
        me.onChangeTaxPayerType(obj.TaxpayerCat);   

        clubbedYN.setValue({status:obj.ClubbedYN});
        clubbedHasPan.setValue({pan:obj.ClubbedHasPan}); 

        auditorName.setValue(obj.AuditorName);
        auditorLicenseNo.setValue(obj.AuditorLicenceNo);
        auditorPanNo.setValue(obj.AuditorPan);    

        if(obj.ClubbedYN === "Y")
        {        
            clubbedName.setValue(obj.ClubbedName);
        }

        if(obj.ClubbedHasPan === "Y")
        { 
            clubbedPan.setValue(obj.ClubbedPan);
        }

        btnRegister.setVisible(false);
        btnUpdate.setVisible(true);
        btnEnterAnnex.setVisible(true);
    },

    saveUpdate: function(action) {
        var me = this;

        var obj = Ext.ComponentQuery.query('#pnlSelfAssessmentD03')[0];
        var param = obj.extraParam;

        var panNo = Ext.ComponentQuery.query('#txtPanNoDo3')[0].getValue();
        var taxPayerCat = Ext.ComponentQuery.query('#cboTaxPayerTypeD03')[0].getValue();

        var clubbedYN = Ext.ComponentQuery.query('#rgbtnClubbedD03')[0].getValue().status;
        var clubbedHasPan = Ext.ComponentQuery.query('#rgbtnClubbedPanD03')[0].getValue().pan;
        var clubbedPan = Ext.ComponentQuery.query('#txtClubbedPanNoDo3')[0].getValue();
        var clubbedName = Ext.ComponentQuery.query('#txtClubbedNameD03')[0].getValue();

        var auditorName = Ext.ComponentQuery.query('#txtAuditorNameD03')[0].getValue();
        var auditorLicenseNo = Ext.ComponentQuery.query('#txtAuditorLicenseNoD03')[0].getValue();
        var auditorPanNo = Ext.ComponentQuery.query('#txtAuditorPanNoD03')[0].getValue();

        var acctType = "10";

        if(param.taxPayerCatID === "I")
        {
            var cntClubbedPan = Ext.ComponentQuery.query('#cntClubbedPanD03')[0];

            if(cntClubbedPan.isVisible())
            {
                var errMsg = "";

                if(clubbedName === "")
                {
                    errMsg += "कृपया पति/ पत्नीको नाम राख्नुहोस् !!! <br/>";
                }

                if(clubbedHasPan === "Y")
                {

                    if(clubbedPan === "")
                    {
                        errMsg += "कृपया पति पत्नीको स्था.ले.नं. राख्नुहोस् !!!";
                    }
                }

                if(errMsg !== "")
                {
                    msg("WARNING",errMsg);
                    return;
                }
            }
        }


        var txtFromDate =  Ext.ComponentQuery.query('#txtFromDateD03')[0];
        var txtToDate =  Ext.ComponentQuery.query('#txtToDateD03')[0];

        var assessmentFromDate = "";
        var dateUpto = "";
        var partOrFull = "";
        var assessmentType = "";

        if(param.assmtType === "JA" || param.assmtType === "BH")
        {
            assessmentFromDate = txtFromDate.getValue();
            dateUpto = txtToDate.getValue();
            partOrFull = "Y";

        }
        else if(param.assmtType === "CB")
        {
            dateUpto = txtToDate.getValue();
            partOrFull = "Y";
        }

        assessmentType = param.assmtType;

        assessment = {
            TotalPayableTax:null,
            MTCFromDate:"",
            AssessmentFromDate:assessmentFromDate,
            OffCode:param.officeCode,
            Pan:param.pan,
            FiscalYear:param.fiscalYear,
            AssessmentNo:param.submissionNo,
            SubmissionDate:"",
            AssessmentDate:"",
            ReturnDocType:'D03',
            ExtendedReturnDate:"",
            OfficerCode:"",
            AuditorName:auditorName, 
            AuditorLicenceNo:auditorLicenseNo,
            DecisionType:"",
            ReferenceNo:"",
            ReferenceDate:"", 
            AssessmentToDate:"",
            ClubbedYN:clubbedYN,
            ClubbedHasPan:clubbedHasPan,
            ClubbedName:clubbedName, 
            TotalTaxLiability:null,
            PartOrFull:partOrFull,
            Terminal:"",
            Tran_Date:"", 
            UserName:"",
            RecordStatus:"",
            AuditorPan:auditorPanNo,
            ClubbedPan:clubbedPan,
            ReferenceFiscalYear:"",
            TaxpayerCat:taxPayerCat,
            Attachment:"",
            JpFiscalYear:"",
            BusinessClose:"", 
            DateUpto:dateUpto, 
            TaxIncomeAFTDe:"",
            TaxAFTDe:"",
            TranNo:"",     
            AcctType:acctType,
            Action:action,
            AssessmentType:assessmentType
        };


        //console.log("assessment" ,assessment);

        Ext.Ajax.request({

            url:'../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=SaveAssessmentSADone',

            params:{assmtSADone:JSON.stringify(assessment)},
            success:function(result, request)
            {
                var obj = Ext.decode(result.responseText);     
                msg(obj.success === "true" ?"SUCCESS":"WARNING",obj.message); 

                var btnRegister = Ext.ComponentQuery.query('#btnRegisterD03')[0];        
                var btnUpdate = Ext.ComponentQuery.query('#btnUpdateD03')[0];
                var btnEnterAnnex = Ext.ComponentQuery.query('#btnEnterAnnexD03')[0];

                btnRegister.setVisible(false);
                btnUpdate.setVisible(true);
                btnEnterAnnex.setVisible(true);

            },

            failure:function(result, request){
                msg('ERROR OCURRED !!!', 'Error');                 
            }


        });
    },

    hideShowDates: function(assmtType) {
        var pnl = Ext.ComponentQuery.query('#pnlSelfAssessmentD03')[0];
        var txtFromDate =  Ext.ComponentQuery.query('#txtFromDateD03')[0];
        var txtToDate =  Ext.ComponentQuery.query('#txtToDateD03')[0];

        txtFromDate.setVisible(false);
        txtToDate.setVisible(false);

        if(assmtType === "JA")
        {
            txtFromDate.setVisible(true);
            txtToDate.setVisible(true);

            pnl.setTitle("Jeopardy Assessment");
            Ext.getCmp('CntSiteMapPath').update("Integrated Tax Menus >> Jeopardy Assessment");

        }
        else if(assmtType === "BH")
        {
            txtFromDate.setVisible(true);
            txtToDate.setVisible(true);

            pnl.setTitle("Change of Control");
            Ext.getCmp('CntSiteMapPath').update("Integrated Tax Menus >> Change of Control");

        }
        else if(assmtType === "CB")
        {
            txtToDate.setVisible(true);    

            pnl.setTitle("Change Off Business");
            Ext.getCmp('CntSiteMapPath').update("Integrated Tax Menus >> Close Off Business");
        }



    },

    getLoginTB: function(param,user) {
        var me = this;

        Ext.Ajax.request({
            url: '../Handlers/Vat/VatReturnsSubmissionNumberHandler.ashx',
            params:{method:'GetLoginTBs',
            submissionNo:param.submissionNo},
            async:false,
            success: function(result) {

                var obj = Ext.decode(result.responseText);        
                var pan = obj.root.PAN;
                var submittedFor = obj.root.submittedFor; 

                if(param.assmtType != submittedFor)
                {
                    msg("WARNING","Submission No 'submittedFor' MISMATCH !!!",function(){

                        me.getController('MyApp.controller.Main').showMainView();

                    });
                    return;
                }

                param.fiscalYear = obj.root.FiscalYear;        
                param.submittedFor = submittedFor;

                var offCode = Ext.get('offCode').dom.innerHTML;

                //-------------------------------------------------------------------------
                // NB: Loading details using PAN and ACCOUNT-TYPE i.e. for Submission Login
                //-------------------------------------------------------------------------
                LoadTaxpayerInfoWithValidPan(pan,"10",function(data){

                    var panOffice = data.root.Taxpayer.Office.OfficeCode; 

                    if(offCode != panOffice)
                    {

                        msg("WARNING","Pan not registered in this office !!!",function(){

                            me.getController('MyApp.controller.Main').showMainView();

                        });
                        return;
                    }

                    param.loginType = "SubLogin";
                    param.pan = pan;                       
                    me.loadControls(data);

                });


            },
            failure: function(form, action) {


                msg("FAILURE","Error in Fetching data !!!");
            }
        });

    },

    loadAnxSummary: function(submissionNo) {
        Ext.Ajax.request({
            url:"../Handlers/IncomeTax/D03/DCTBAnnexHandler.ashx?method=GetDCTBAnnexSummary" ,
            params:{assessmentNo:submissionNo},
            //async : false,
            success: function ( result, request ) {   

                var obj = Ext.decode(result.responseText); 

                var strAnxSummary = Ext.create ('Ext.data.Store', {
                    fields: ['AnnexID','Business','Action'],
                    proxy: {
                        type: 'ajax',
                        url: '',
                        reader: {
                            type: 'json',
                            root: 'root'
                        }
                    },
                    storeId:'AnxSummary'
                });

                strAnxSummary.loadData([],false);
                strAnxSummary.add(obj.root);
                strAnxSummary.sort('AnnexID','ASC');

            },
            failure:  function ( result, request ) { 
                msg("FAILURE","Error in Saving data !!!");

            }
        });

    },

    loadDetailByTran: function(tranNo,param,view) {
        var me = this;
        var wait  = waitMsg('Loading Preview ...');


        Ext.Ajax.request({
            url:"../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=GetDCTBAssessmentD03ByTran" ,
            params:{tranNo:tranNo},
            async : false,
            success: function ( result, request ) {   

                wait.hide();        
                var obj = Ext.decode(result.responseText);  
                var lblSubNo = Ext.ComponentQuery.query('#lblSubmissionNoD03')[0];
                var btnUpdate = Ext.ComponentQuery.query('#btnUpdateD03')[0];        
                //var txtSubmissionNo = Ext.ComponentQuery.query('#txtSubmissionNoD03')[0]; 

                param.loginType = "ITaxLogin";
                param.recordStatus = "F";
                param.submissionNo = obj.root.AssessmentNo;

                me.loadControls(obj);
                me.loadAnxSummary(obj.root.AssessmentNo);         
                me.hideShowDates(obj.root.AssessmentType);

                btnUpdate.setVisible(false);        
                lblSubNo.setValue(obj.root.AssessmentNo);        

                //txtSubmissionNo.setVisible(false);
                //txtSubmissionNo.setValue(obj.root.AssessmentNo);

                //view.query('.button').forEach(function(c){c.setDisabled(true);});
                view.query('.field,.combo').forEach(function(c){c.setReadOnly(true);});

            },
            failure:  function ( result, request ) { 

                wait.hide();

                msg("FAILURE","Error in Saving data !!!");        
            }
        });
    },

    init: function(application) {
        this.control({
            "#pnlSelfAssessmentD03": {
                afterrender: this.onPnlSelfAssessmentD03AfterRender
            },
            "#btnEnterAnnexD03": {
                click: this.onBtnEnterAnnexD03Click
            },
            "#rgbtnClubbedPanD03": {
                change: this.onRgbtnClubbedPanChange
            },
            "#btnRegisterD03": {
                click: this.onBtnRegisterD03Click
            },
            "#cboTaxPayerTypeD03": {
                select: this.onCboTaxPayerTypeD03Select
            },
            "#btnUpdateD03": {
                click: this.onBtnUpdateD03Click
            },
            "#txtAuditorPanNoD03": {
                blur: this.onTxtAuditorPanNoD03Blur,
                keypress: this.onTxtAuditorPanNoD03Keypress,
                blur: this.onTxtAuditorPanNoD03Blur
            }
        });
    }

});
