/*
 * File: app/view/SelectEmployeePopup.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.SelectEmployeePopup', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.Text',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.selection.RowModel',
        'Ext.grid.column.Column'
    ],

    height: 500,
    itemId: 'SelectEmployeePopup',
    width: 1000,
    autoScroll: true,
    title: 'Select Employee',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    itemId: 'frmSelectEmployeePopup',
                    autoScroll: true,
                    bodyPadding: 10,
                    items: [
                        {
                            xtype: 'container',
                            layout: 'table',
                            items: [
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtSearchEmployee',
                                    fieldLabel: 'Employee Name'
                                },
                                {
                                    xtype: 'button',
                                    colspan: 2,
                                    itemId: 'btnSearchEmployee',
                                    margin: '0 0 0 5',
                                    text: 'Search',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnSearchEmployeeClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            itemId: 'grdSearchEmployee',
                            title: '',
                            store: 'EmployeeSearchStore',
                            selModel: Ext.create('Ext.selection.RowModel', {
                                listeners: {
                                    beforeselect: {
                                        fn: me.onRowModelBeforeSelect,
                                        scope: me
                                    }
                                }
                            }),
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'EmpId',
                                    text: 'Employee Id'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Fname',
                                    text: 'First Name'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Lname',
                                    text: 'Last Name'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 146,
                                    dataIndex: 'PermanentAddress',
                                    text: 'Permanent Address'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'TemporaryAddress',
                                    text: 'Temporary Address'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'FatherName',
                                    text: 'Father\'s Name'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'SpouseName',
                                    text: 'Spouse\'s Name'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Dob',
                                    text: 'DOB'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Married',
                                    text: 'Married'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Gender',
                                    text: 'Gender'
                                }
                            ]
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFrmSelectEmployeePopupAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onBtnSearchEmployeeClick: function(button, e, eOpts) {
        var employeeName=Ext.ComponentQuery.query('#txtSearchEmployee')[0].getValue();

        var waitSave = watiMsg("Searching..Please wait ...");
            Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/StaffLoanTransaction/EmployeeKycEmployeeHandler.ashx',
            params: {
                method:'GetEmpKycEmp',
                OfficeCode:getOfficeCode(),
                EmpName:employeeName


            },
            success: function(response){


                var obj = Ext.decode(response.responseText);



                if(obj.success === "true")
                {

                    var store=Ext.getStore('EmployeeSearchStore');
                    store.removeAll();
                    store.add(obj.root);


                }
                else
                {

                    msg("FAILURE",obj.message);
                }
                waitSave.hide();

            },
                failure: function(response){
                                waitSave.hide();


                }
        });
    },

    onRowModelBeforeSelect: function(rowmodel, record, index, eOpts) {
        Ext.MessageBox.confirm('Select', 'Are you sure ?', function(btn){

           if(btn === 'yes'){
               console.log('record',record);

               Ext.ComponentQuery.query('#txtEmpID')[0].setValue(record.data.EmpId);
               Ext.ComponentQuery.query('#txtEmpName')[0].setValue(record.data.EmpName);
               Ext.ComponentQuery.query('#txtFirstName')[0].setValue(record.data.Fname);
               Ext.ComponentQuery.query('#txtLastName')[0].setValue(record.data.Lname);
               if(record.data.Married==='Y')
               {
                   Ext.ComponentQuery.query('#ddlMartialStatus')[0].setValue('M');
               }
               else{
                   Ext.ComponentQuery.query('#ddlMartialStatus')[0].setValue('U');
               }

               Ext.ComponentQuery.query('#txtPostalAddress')[0].setValue(record.data.PermanentAddress);
               Ext.ComponentQuery.query('#txtSpouseName')[0].setValue(record.data.SpouseName);
               Ext.ComponentQuery.query('#txtFatherName')[0].setValue(record.data.FatherName);
               Ext.ComponentQuery.query('#txtAddress')[0].setValue(record.data.TemporaryAddress);
               Ext.ComponentQuery.query('#txtDOBAD')[0].setValue(record.data.Dob);
               Ext.ComponentQuery.query('#hdnGender')[0].setValue(record.data.Gender);



              // return true;
           }
           else
           {

           }
            var v=Ext.ComponentQuery.query('#SelectEmployeePopup')[0];

            v.close();
        });

    },

    onFrmSelectEmployeePopupAfterRender: function(component, eOpts) {
        var store=Ext.getStore('EmployeeSearchStore');
        store.removeAll();
    }

});