/*
 * File: app/controller/GetSubmitionNo.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.GetSubmitionNo', {
    extend: 'Ext.app.Controller',

    stores: [
        'TSOName',
        'IROName',
        'OthersOffices',
        'GetSubmissionNoStore'
    ],

    onChkIncomeTaxChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        var RdoOthers=Ext.ComponentQuery.query('#RdoOthers')[0];
        RdoOthers.setValue(false);

        Ext.ComponentQuery.query('#RdoOthers')[0].show();

        if (newValue) {
            Ext.ComponentQuery.query('#ChkPersonalPanel')[0].setValue(false);
        }

        if (Ext.ComponentQuery.query('#ChkIncomeTax')[0].getValue() === true && Ext.ComponentQuery.query('#ChkVat')[0].getValue() === false && Ext.ComponentQuery.query('#ChkExcise')[0].getValue() === false && Ext.ComponentQuery.query('#ChkPersonalPanel')[0].getValue() === false) {

            RdoOthers.show();
            me.LoadVerifyingOffices();
        }
        else
        {
            RdoOthers.hide();
        }
    },

    onChkVatChange: function(field, newValue, oldValue, eOpts) {
        var me =this;
        var RdoOthers=Ext.ComponentQuery.query('#RdoOthers')[0];
        RdoOthers.setValue(false);

        if (newValue) {
            Ext.ComponentQuery.query('#ChkPersonalPanel')[0].setValue(false); 
        }


        if (Ext.ComponentQuery.query('#ChkIncomeTax')[0].getValue() === true && Ext.ComponentQuery.query('#ChkVat')[0].getValue() === false && Ext.ComponentQuery.query('#ChkExcise')[0].getValue() === false && Ext.ComponentQuery.query('#ChkPersonalPanel')[0].getValue() === false) {

            RdoOthers.show();
            me.LoadVerifyingOffices();
        }
        else
        {
            RdoOthers.hide();
        }
    },

    onChkExciseChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        var RdoOthers=Ext.ComponentQuery.query('#RdoOthers')[0];
        RdoOthers.setValue(false);

        if (newValue) {

            Ext.ComponentQuery.query('#ChkPersonalPanel')[0].setValue(false);   
        }

        if (Ext.ComponentQuery.query('#ChkIncomeTax')[0].getValue() === true && Ext.ComponentQuery.query('#ChkVat')[0].getValue() === false && Ext.ComponentQuery.query('#ChkExcise')[0].getValue() === false && Ext.ComponentQuery.query('#ChkPersonalPanel')[0].getValue() === false) {

            RdoOthers.show();   
            me.LoadVerifyingOffices();
        }
        else
        {
            RdoOthers.hide();
        }
    },

    onChkPersonalPanelChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        var RdoOthers=Ext.ComponentQuery.query('#RdoOthers')[0];
        RdoOthers.setValue(false);

        if (newValue) {

            Ext.ComponentQuery.query('#ChkIncomeTax')[0].setValue(false);
            Ext.ComponentQuery.query('#ChkVat')[0].setValue(false);
            Ext.ComponentQuery.query('#ChkExcise')[0].setValue(false);    
        }

        if (Ext.ComponentQuery.query('#ChkIncomeTax')[0].getValue() === true && Ext.ComponentQuery.query('#ChkVat')[0].getValue() === false && Ext.ComponentQuery.query('#ChkExcise')[0].getValue() === false && Ext.ComponentQuery.query('#ChkPersonalPanel')[0].getValue() === false) {

            RdoOthers.show();  
            me.LoadVerifyingOffices();
        }
        else
        {
            RdoOthers.hide();
        }
    },

    onCboTsoNameChange: function(field, newValue, oldValue, eOpts) {
        /*var me=this;

        var TSOStore=Ext.getStore('TSOName');
        var OTHERStore=Ext.getStore('OthersOffices');


        var CboOthersOffices=Ext.ComponentQuery.query('#CboOthersOffices')[0];

        CboOthersOffices.setValue("");


        TSOStore.removeAll();
        OTHERStore.removeAll();

        Ext.Ajax.request({
        url: '../Handlers/Common/OfficeHandler.ashx?method=GetOfficeByParentWithType',
        params:{officeType:'IRO',parentID:newValue},
        success: function(response, opts) {

        var resp=Ext.decode(response.responseText);           

        console.log(resp.success);
        if(resp.success=="true")
        {
        TSOStore.loadData(resp.root);
        }
        else
        {
        msg('ERROR',"Could Load TSO's");
        }
        }
        });
        me.LoadVerifyingOffices();
        */
    },

    onGetSubNo_BtnsubmitClick: function(button, e, eOpts) {


        var RegistrationForarray = [];
        var RegistrationForarray1 = [];
        if(Ext.ComponentQuery.query('#ChkPersonalPanel')[0].checked)
        {
            RegistrationForarray.push({ SubmissionNo:null, RegFor: 'PPAN' });
            RegistrationForarray1.push('PPAN');
        }
        if(Ext.ComponentQuery.query('#ChkIncomeTax')[0].checked)
        {
            RegistrationForarray.push({ SubmissionNo:null, RegFor: 'ITAX' });
            RegistrationForarray1.push('ITAX');
        }
        if(Ext.ComponentQuery.query('#ChkVat')[0].checked)
        {
            RegistrationForarray.push({ SubmissionNo:null, RegFor: 'VAT' });
            RegistrationForarray1.push('VAT');
        }
        if(Ext.ComponentQuery.query('#ChkExcise')[0].checked)
        {
            RegistrationForarray.push({ SubmissionNo:null, RegFor: 'EXCS' });
            RegistrationForarray1.push('EXCS');
        }



        var VOffice   = Ext.ComponentQuery.query('#CboOthersOffices')[0].getValue();
        var RegOffice = '';
        if(Ext.ComponentQuery.query('#RdoIRO')[0].checked)
        {    
            RegOffice = Ext.ComponentQuery.query('#CboIROName')[0].getValue();
        }
        else if(Ext.ComponentQuery.query('#RdoTSO')[0].checked)
        {    
            RegOffice = Ext.ComponentQuery.query('#CboTsoName')[0].getValue();
        }
        else
        {    
            RegOffice = Ext.ComponentQuery.query('#CboIROName')[0].getValue();
        }
        if(!RegOffice)
        {
            msg('WARNING',"Verifying Office Missing");
            return;
        }

        var submissionNo =
        {
            SubmissionNo :null,
            Username: Ext.ComponentQuery.query('#txtUsername')[0].getValue(),
            Password: Ext.ComponentQuery.query('#txtPassword')[0].getValue(),
            ContactNo: Ext.ComponentQuery.query('#txtContactNo')[0].getValue(),
            Emailid: Ext.ComponentQuery.query('#txtEmailId')[0].getValue(),
            submittedFor: 'REG',
            SubmittedYN : '',
            VOffice: VOffice,
            RegOffice: RegOffice, 
            SubmittedDate :Ext.decode(AppWakeUpJSON).root.NepaliDate,
            RegistrationFor:RegistrationForarray
        };


        if(Ext.ComponentQuery.query('#txtUsername')[0].getValue()==="")
        {
            Ext.Msg.alert('WARNING','Username Missing.');
            return false;
        }    
        if(Ext.ComponentQuery.query('#txtPassword')[0].getValue()==="")
        {
            Ext.Msg.alert('WARNING','Password Missing.');
            return false;
        }
        if(Ext.ComponentQuery.query('#txtRePassword')[0].getValue()==="")
        {
            Ext.Msg.alert('WARNING','RePassword Missing.');
            return false;
        }

        if(Ext.ComponentQuery.query('#txtPassword')[0].getValue()!=Ext.ComponentQuery.query('#txtRePassword')[0].getValue())
        {
            Ext.Msg.alert('WARNING','Password and Re-Password did not match.');
            return false;
        }

        if(RegistrationForarray.length<1)
        {
            Ext.Msg.alert('WARNING','Choose Registration For');
            return false;
        }


        if(VOffice=="" && RegOffice=="")
        {
            Ext.Msg.alert('WARNING','Select Verifying Office.');
            return false;
        }


        Ext.Ajax.request({
            url: '../Handlers/Registration/RegSubmissionNoHandler.ashx?method=SaveSubmissionNo',
            params:{submissionNo:JSON.stringify(submissionNo)},
            success: function(response, opts) {

                var resp = Ext.decode(response.responseText);
                if(resp.success=="True")
                {
                    objSubmissionNo= resp.message;
                    //objSubmissionNo=resp
                    var uiConfig = {menuLink:'ShwSubmissionNo',pageTitle:'Your Submission No'};

                    DynamicUI(uiConfig,function(){

                        var store=Ext.getStore('Sub_No_BusinessType');


                        var regFor= Ext.ComponentQuery.query('#Show_SubNo_hdnRegFor')[0];                            
                        Ext.ComponentQuery.query('#SubmissionNoText')[0].setText(objSubmissionNo);                    
                        var comboBusType=Ext.ComponentQuery.query('#Sub_No_BusinessType')[0];
                        var comboBusSubType=Ext.ComponentQuery.query('#Sub_No_BusinessubType')[0];

                        var havePan=Ext.ComponentQuery.query('#Show_Sub_No_HavePan')[0];
                        var panNo=Ext.ComponentQuery.query('#Show_Sub_No_PanNo')[0];
                        var arr=RegistrationForarray1;                 
                        if(arr.length==1)
                        {                
                            if(arr[0]==='PPAN')
                            {   
                                panNo.hide();
                                havePan.hide();                        
                                comboBusType.hide(); 
                                comboBusSubType.hide();
                                regFor.setValue(1);
                            }
                            else if(arr[0]==='ITAX')
                            {
                                panNo.hide();
                                havePan.hide();                
                                comboBusType.show();
                                comboBusSubType.show();
                                regFor.setValue(2);
                            }
                            else if(arr[0]==='VAT')
                            {
                                panNo.show();
                                havePan.hide();                        
                                comboBusType.hide();
                                comboBusSubType.hide();
                                regFor.setValue(3);
                            }
                            else if(arr[0]==='EXCS')
                            {
                                panNo.show();
                                havePan.hide();                        
                                comboBusType.hide(); 
                                comboBusSubType.hide();
                                regFor.setValue(4);
                            }
                        }
                        else if(arr.length==2)
                        {
                            var url1=arr[0];
                            var url2=arr[1];
                            if((url1=='ITAX'&& url2=='VAT')||(url2=='ITAX'&& url1=='VAT'))
                            {
                                panNo.hide();
                                havePan.hide();                
                                comboBusType.show();
                                comboBusSubType.show();
                                regFor.setValue(6);
                            }
                            else if((url1=='ITAX'&& url2=='EXCS')||(url2=='ITAX'&& url1=='EXCS'))
                            {
                                panNo.hide();
                                havePan.hide();                
                                comboBusType.show();
                                comboBusSubType.show();
                                regFor.setValue(8);
                            }
                            else if((url1=='VAT'&& url2=='EXCS')||(url2=='VAT'&& url1=='EXCS'))
                            {
                                panNo.show();
                                havePan.hide();                        
                                comboBusType.hide();
                                comboBusSubType.hide();
                                regFor.setValue(7);
                            }
                        }
                        else if(arr.length==3)
                        {
                            panNo.hide();
                            havePan.hide();                
                            comboBusType.show();
                            comboBusSubType.show();
                            regFor.setValue(5);
                        }
                        else
                        {
                            alert('Select Registration For');
                            return;
                        }                
                    });
                }
            }
        });

    },

    onPnlGetSubmitionNoAfterRender: function(component, eOpts) {
        this.Reload();


    },

    onCboIRONameChanged: function(field, newValue, oldValue, eOpts) {
        /*var me=this;

        var TSOStore=Ext.getStore('TSOName');
        var OTHERStore=Ext.getStore('OthersOffices');

        var CboTsoName=Ext.ComponentQuery.query('#CboTsoName')[0];
        var CboOthersOffices=Ext.ComponentQuery.query('#CboOthersOffices')[0];

        CboTsoName.setValue("");
        CboOthersOffices.setValue("");

        TSOStore.removeAll();
        OTHERStore.removeAll();
        */


    },

    onRdoIROChange: function(field, newValue, oldValue, eOpts) {

        var me=this;
        var TSO=Ext.ComponentQuery.query('#CboTsoName')[0];
        var IRO=Ext.ComponentQuery.query('#CboIROName')[0];
        var Others=Ext.ComponentQuery.query('#CboOthersOffices')[0];

        if(newValue===true)
        {    
            IRO.show();   
            TSO.hide();
            Others.hide();
        }

    },

    onRdoTSOChange: function(field, newValue, oldValue, eOpts) {

        var me=this;
        var TSO=Ext.ComponentQuery.query('#CboTsoName')[0];
        var IRO=Ext.ComponentQuery.query('#CboIROName')[0];
        var Others=Ext.ComponentQuery.query('#CboOthersOffices')[0];





        if(newValue===true)
        {    
            TSO.show();  
            IRO.hide();
            Others.hide();
        }

    },

    onRdoOthersChange: function(field, newValue, oldValue, eOpts) {


        var me=this;
        var TSO=Ext.ComponentQuery.query('#CboTsoName')[0];
        var IRO=Ext.ComponentQuery.query('#CboIROName')[0];
        var Others=   Ext.ComponentQuery.query('#CboOthersOffices')[0];



        if(newValue===true)
        {
            IRO.show();   
            Others.show();
            TSO.hide();
        }


    },

    onRdoOthersBeforeHide: function(component, eOpts) {

        Ext.ComponentQuery.query('#RdoIRO')[0].setValue(true);


    },

    Reload: function() {
        var me=this;
        var IROStore=Ext.getStore('IROName');
        var TSOStore=Ext.getStore('TSOName');
        var OTHERStore=Ext.getStore('OthersOffices');



        Ext.Ajax.request({
            url: '../Handlers/Common/OfficeHandler.ashx?method=GetIROTSO',
            params:{officeType:'IRO'},
            success: function(response, opts) {

                var resp=Ext.decode(response.responseText);           

                console.log(resp.success);
                if(resp.success=="true")
                {
                    IROStore.loadData(resp.root);
                }
                else
                {
                    msg('ERROR',"Could Load IRO's");
                }
            }
        });

        Ext.Ajax.request({
            url: '../Handlers/Common/OfficeHandler.ashx?method=GetIROTSO',
            params:{officeType:'TSO'},
            success: function(response, opts) {

                var resp=Ext.decode(response.responseText);           

                console.log(resp.success);
                if(resp.success=="true")
                {
                    TSOStore.loadData(resp.root);
                }
                else
                {
                    msg('ERROR',"Could Load TSO's");
                }
            }
        });

        Ext.Ajax.request({
            url: '../Handlers/Common/VerifyingOfficesHandler.ashx?method=GetVerifyingOffices',
            params:{},
            success: function(response, opts) {

                var resp=Ext.decode(response.responseText);           


                if(resp.success=="true")
                {
                    OTHERStore.loadData(resp.root);
                }
                else
                {
                    msg('ERROR',"Could Load TSO's");
                }
            }
        });
    },

    LoadVerifyingOffices: function() {

    },

    init: function(application) {
        this.control({
            "#ChkIncomeTax": {
                change: this.onChkIncomeTaxChange
            },
            "#ChkVat": {
                change: this.onChkVatChange
            },
            "#ChkExcise": {
                change: this.onChkExciseChange
            },
            "#ChkPersonalPanel": {
                change: this.onChkPersonalPanelChange
            },
            "#CboTsoName": {
                change: this.onCboTsoNameChange
            },
            "#GetSubNo_Btnsubmit": {
                click: this.onGetSubNo_BtnsubmitClick
            },
            "#PnlGetSubmitionNo": {
                afterrender: this.onPnlGetSubmitionNoAfterRender
            },
            "#CboIROName": {
                change: this.onCboIRONameChanged
            },
            "#RdoIRO": {
                change: this.onRdoIROChange
            },
            "#RdoTSO": {
                change: this.onRdoTSOChange
            },
            "#RdoOthers": {
                change: this.onRdoOthersChange,
                beforehide: this.onRdoOthersBeforeHide
            }
        });
    }

});
