/*
 * File: app/view/Religion.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.Religion', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.form.Panel',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.form.field.Text',
        'Ext.grid.column.Action',
        'Ext.selection.RowModel',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.grid.plugin.RowEditing'
    ],

    frame: true,
    title: 'Religion',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    itemId: 'frmReligion',
                    bodyPadding: 10,
                    items: [
                        {
                            xtype: 'gridpanel',
                            itemId: 'grdReligion',
                            store: 'ReligionStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'ReligionCode',
                                    text: 'Religion Code',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtReligionCode'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 273,
                                    dataIndex: 'ReligionDesc',
                                    text: 'Religion Description',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtReligionDesc'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'CibCode',
                                    text: 'Cib Code',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtCibCode'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    hidden: true,
                                    dataIndex: 'Action',
                                    text: 'Action',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtAction'
                                    }
                                },
                                {
                                    xtype: 'actioncolumn',
                                    itemId: 'delReligion',
                                    items: [
                                        {
                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                var store = Ext.getStore('ReligionStore');
                                                var grd =  Ext.ComponentQuery.query('#grdReligion')[0];
                                                var row = store.getAt(rowIndex).data;

                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected REligion?', function(btn) {
                                                    if(btn == 'yes'){

                                                        /*
                                                        nepaliDateConversion.FiscalYear, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_MONTH_CODE", nepaliDateConversion.MonthCode, OracleDbType.Int16, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_START_DATE", nepaliDateConversion.EnglishStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_START_DATE", nepaliDateConversion.NepaliStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_END_DATE", nepaliDateConversion.EnglishEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_END_DATE", nepaliDateConversion.NepaliEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_YEAR", nepaliDateConversion.NepaliYear, OracleDbType.Int16, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_PERIOD", nepaliDateConversion.NepaliPeriod, OracleDbType.Int16, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_NO_OF_DAYS_IN_MONTH", nepaliDateConversion.NoOfDays, OracleDbType.Int16, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_ON", nepaliDateConversion.CreatedOn, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_BY", nepaliDateConversion.CreatedBy, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_INSERT_UPDATE", nepaliDateConversion.Action, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_CODE", null, OracleDbType.Varchar2, ParameterDirection.Output));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_DESC", null, OracleDbType.
                                                        */
                                                        var religion ={
                                                            ReligionCode : row.ReligionCode,
                                                            ReligionDesc : row.ReligionDesc,
                                                            CreatedBy : '',
                                                            CreatedOn : '',
                                                            CibCode : row.CibCode,
                                                            Action:'D'
                                                        };

                                                        var wMsg='Deleting....';

                                                        var waitSave = watiMsg(wMsg);

                                                        Ext.Ajax.request({
                                                            url: '../Handlers/GeneralMasterParameters/Maintenance/ReligionHandler.ashx',
                                                            params:{method:'Save',religion:JSON.stringify(religion)},
                                                            success: function(response){
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                console.log(out);

                                                                if(out.success==="true")
                                                                {

                                                                    msg("SUCCESS",out.message,function(){
                                                                        grd.bindStore(store);
                                                                        store.removeAt(rowIndex);
                                                                    });
                                                                }
                                                                else
                                                                {
                                                                    msg("FAILURE",out.message);
                                                                }
                                                            },
                                                            failure: function ( result, request ) {
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                msg("FAILURE",out.message);
                                                            }

                                                        });



                                                        return true;
                                                    }
                                                });
                                            },
                                            icon: '../ITS/resources/images/icons/cancel.png'
                                        }
                                    ]
                                }
                            ],
                            selModel: Ext.create('Ext.selection.RowModel', {

                            }),
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    items: [
                                        {
                                            xtype: 'button',
                                            itemId: 'btnAddReligion',
                                            text: 'Add Religion',
                                            listeners: {
                                                click: {
                                                    fn: me.onBtnAddReligionClick,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }
                            ],
                            plugins: [
                                Ext.create('Ext.grid.plugin.RowEditing', {
                                    listeners: {
                                        validateedit: {
                                            fn: me.onRowEditingValidateedit,
                                            scope: me
                                        },
                                        canceledit: {
                                            fn: me.onRowEditingCanceledit,
                                            scope: me
                                        }
                                    }
                                })
                            ]
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFrmReligionAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onBtnAddReligionClick: function(button, e, eOpts) {
        var store=Ext.getStore('ReligionStore');
        var religion ={
                        ReligionCode : '',
                        ReligionDesc : '',
                        CreatedBy : '',
                        CreatedOn : '',
                        CibCode : '',
                        Action:'I'
        };
        store.add(religion);


    },

    onRowEditingValidateedit: function(editor, e, eOpts) {

        var religionCode=Ext.ComponentQuery.query('#txtReligionCode')[0];
        var religionDesc=Ext.ComponentQuery.query('#txtReligionDesc')[0];
        var cibCode=Ext.ComponentQuery.query('#txtCibCode')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];

        if (religionCode===''||religionCode===null)
        {
            msg('WARNING','Please, Enter Religion Code');
            return;
        }
        if (religionDesc===''||religionDesc===null)
        {
            msg('WARNING','Please, Enter Religion Description');
            return;
        }
        if (cibCode===''||cibCode===null)
        {
            msg('WARNING','Please, Enter CIB Code');
            return;
        }

        var religion ={
            ReligionCode : religionCode.getValue(),
            ReligionDesc : religionDesc.getValue(),
            CreatedBy : '',
            CreatedOn : '',
            CibCode : cibCode.getValue(),
            Action:action.getValue()
        };

        var waitSave = watiMsg('Please wait ...');
        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/ReligionHandler.ashx',
            params:{method:'Save',religion:JSON.stringify(religion)},
            success: function ( response, request ) {
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                console.log(out);

                if(out.success==="true")
                {
                    msg("SUCCESS",out.message,function(){
                        var grd = Ext.ComponentQuery.query('#grdReligion')[0];

                        var record = grd.getSelectionModel().getSelection()[0];
                        record.set('Action','U');

                    });
                }
                else
                {
                    msg("FAILURE",out.message);
                }
            },
            failure: function ( result, request ) {
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                msg("FAILURE",out.message);
            }

        });


    },

    onRowEditingCanceledit: function(editor, e, eOpts) {

    },

    onFrmReligionAfterRender: function(component, eOpts) {
        var waitSave = watiMsg('Please wait ...');
        Ext.Ajax.request({
             url: '../Handlers/GeneralMasterParameters/Maintenance/ReligionHandler.ashx',
             params:{method:'Get'},
             success: function ( result, request ) {
        waitSave.hide();
                  var obj = Ext.decode(result.responseText);
                  if(obj.success === 'true'){
                      var store =Ext.getStore('ReligionStore');
                      store.removeAll();
                      store.add(obj.root);


                  }else{}

             },
             failure: function(form, action) {
             }
        });

    }

});