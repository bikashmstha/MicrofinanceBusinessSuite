/*
 * File: app/controller/VatPreAssmnt.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.VatPreAssmnt', {
    extend: 'Ext.app.Controller',

    stores: [
        'FilingPeriodStore',
        'MaReason',
        'TaxDurationVpa',
        'Period'
    ],

    onBtnAddVpaClick: function(button, e, eOpts) {
        var grd = Ext.ComponentQuery.query('#grdTaxDurationVpa')[0];
        var pan = Ext.ComponentQuery.query("#txtPanVpa")[0].getValue();

        if(pan ===''||pan === null)
        {
            msg('WARNING', 'Please Enter PAN before adding PreLines !!!');
            return;
        }


        var rec={filPeriod:'',
                Period:'',
                TaxYear:null,
                MaAmount:null,
                PenAmount:null,
                AddAmount:null,
                IntAmount:null,
            TotAmount:null };

        grd.store.add(rec);

        var col = grd.headerCt.getHeaderAtIndex(0);
        var rows = grd.store.data.items;
        var record = rows[rows.length-1];
        grd.getPlugin('grdTaxDurationPluginVpa').startEdit(record, col);


    },

    onCboFilingPeriodChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        var cboFilingPeriod = Ext.ComponentQuery.query("#cboFilingPeriodVpa")[0];
        var record = cboFilingPeriod.findRecord(cboFilingPeriod.valueField || cboFilingPeriod.displayField,newValue); 

        var cboPeriod = Ext.ComponentQuery.query("#cboPeriodVpa")[0];
        cboPeriod.setValue('');


        if(record === false)
        {
            return;
        }
        else
        {
            cboPeriod.store.loadData(record.data.Period);

            var taxyear = Ext.ComponentQuery.query("#txtTaxYearVpa")[0].getValue();
            var period = Ext.ComponentQuery.query("#cboPeriodVpa")[0].getValue();

            if(period !== "" && taxyear !== "")    
            me.validateTaxDuration();
            else
            return;

        }


    },

    onCntGrdTaxDurationVpaAfterRender: function(component, eOpts) {
        var me = this;
        var grd = Ext.ComponentQuery.query('#grdTaxDurationVpa')[0];
        var txtAcctTypeVpa = Ext.ComponentQuery.query("#txtAcctTypeVpa")[0];
        var txtOfficeCodeVpa = Ext.ComponentQuery.query("#txtOfficeCodeVpa")[0];


        //txtOfficeCodeVpa.setValue("22");
        txtAcctTypeVpa.setValue("00");

        var offCode = Ext.get('offCode').dom.innerHTML;
        txtOfficeCodeVpa.setValue(offCode);

        grd.getStore().loadData([],false);

        grd.on('beforeedit', function(editor,e) {
            var valid=true;
            // msg('WARNING','Before Updatings !!!');
        });


        grd.on('validateedit', function(editor, e) {

            var valid= true;
            var filePerMsg = Ext.ComponentQuery.query("#hdnFilePerVpa")[0].getValue();
            var pan = Ext.ComponentQuery.query("#txtPanVpa")[0].getValue();
            var cboFilingPeriod = Ext.ComponentQuery.query("#cboFilingPeriodVpa")[0];
            var cboPeriod = Ext.ComponentQuery.query("#cboPeriodVpa")[0];
            var txtTaxYearVpa = Ext.ComponentQuery.query("#txtTaxYearVpa")[0];

            var filingPeriod = cboFilingPeriod.getValue();
            var period = cboPeriod.getValue();
            var year = txtTaxYearVpa.getValue();

            var idx = 0;
            var rowIdx = e.rowIdx;



            valid = me.validateTaxDuration();

            /*
            if((filePerMsg !== ""  && filePerMsg.length !== 1 )|| filePerMsg === "Invalid")
            {
            valid=false;
            cboFilingPeriod.focus();
            msg("WARNING","Please Enter valid Filing Period !!!");    
            }
            */

            if (valid === true)
            {
                var str = editor.grid.store;

                //console.log("store",str.data.Items);

                var count = str.findBy(
                function(record, id){

                    if(record.data.FilPeriod == filingPeriod && 
                    record.data.Period == period && 
                    record.data.TaxYear == year && rowIdx !== idx)
                    {
                        //i++;

                        // return i;

                        // alert("matched !!!");
                        return true;  // a record with this data exists
                    }

                    idx++;
                    return false;  // there is no record in the store with this data
                    //return i;
                });

                // alert('indx' + recordIndex);
                if(count != -1)
                {
                    valid=false;
                    msg("WARNING","Two Duplicate Periods is not allowed !!!");    

                }   


            }

            return valid;

        });

        grd.getPlugin('grdTaxDurationPluginVpa').on('canceledit',function(e){    

            // console.log("cancel:",e);
            // msg('WARNING','Cancel !!!');

        });


    },

    onCntGrdTaxDurationVpaBeforeRender: function(component, eOpts) {

        var grid = Ext.ComponentQuery.query('#grdTaxDurationVpa')[0];


        grid.columns[1].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";   

            var strFilPeriod = Ext.getStore("FilingPeriodStore");                
            var index = strFilPeriod.find('FilPeriod',value);
            var rec = strFilPeriod.getAt(index);

            var strPeriod = Ext.getStore("Period");

            var items=Ext.getStore('FilingPeriodStore').data.items;    


            for(var i=0;i<items.length;i++)
            {

                if(items[i].data.FilPeriod === value)
                {
                    temp=items[i].data.FilPeriodDesc;
                    break;
                }        
            }   


            // console.log("rec",rec);

            if(rec !== false && rec !== undefined)
            {
                strPeriod.loadData(rec.data.Period);
            } 


            return temp;
        };


        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";    

            var items = Ext.getStore('Period').data.items;

            for(var i=0;i<items.length;i++)
            {        
                if(items[i].data.Period == value)
                {           
                    temp=items[i].data.PeriodDesc;
                    break;
                }        
            }

            return temp;
        };

    },

    onTxtPanVpaBlur: function(component, e, eOpts) {
        var name = Ext.ComponentQuery.query('#txtNameVpa')[0].getValue();

        if(name === "")
        {
            // this.loadPanDetails();
        }
    },

    onTxtTaxYearVpaBlur: function(component, e, eOpts) {
        //this.validateTaxDuration();
        //var taxyear = field.getValue();
        var me = this;
        var taxyear = Ext.ComponentQuery.query('#txtTaxYearVpa')[0].getValue();

        if(taxyear !== "")
        {
            ValidateTaxyear(taxyear,function(invalidMsg){

                if(invalidMsg!=="")
                {
                    msg('WARNING',invalidMsg);

                    return false;
                }
                else
                {            
                    me.validateTaxDuration();
                }
            });
        }
    },

    onBtnCancelVpaClick: function(button, e, eOpts) {
        this.clearControls("");
    },

    onCboPeriodVpaChange: function(field, newValue, oldValue, eOpts) {
        var me = this;

        var taxyear = Ext.ComponentQuery.query("#txtTaxYearVpa")[0].getValue();

        if(taxyear !== "")    
        this.validateTaxDuration();
        else
        return;

    },

    onTxtPanVpaKeypress: function(textfield, e, eOpts) {
        var name = Ext.ComponentQuery.query('#txtNameVpa')[0].getValue();

        if(e.keyCode === 13)
        {
            this.loadPanDetails();
        }
        else if(e.keyCode === 9)
        {
            this.loadPanDetails();
        }
        else if(name !== "")
        {   

            Ext.Msg.confirm('Confirm Action', 'Do you want to change Pan No. ?', function(btn) {
                if(btn == 'yes'){

                    this.loadPanDetails();
                    return true;
                }
            }, this);

        }

    },

    onTxtMaAmountVpaChange: function(field, newValue, oldValue, eOpts) {
        this.calTotal();
    },

    onTxtAddAmountVpaChange: function(field, newValue, oldValue, eOpts) {
        this.calTotal();
    },

    onTxtIntAmountVpaChange: function(field, newValue, oldValue, eOpts) {
        this.calTotal();
    },

    onTxtPenAmountVpaChange: function(field, newValue, oldValue, eOpts) {
        this.calTotal();
    },

    onBtnSaveVpaClick: function(button, e, eOpts) {
        var form = button.up('form').getForm();
        var action = Ext.ComponentQuery.query('#hdnActionVpa')[0].getValue();
        var txtMaNo = Ext.ComponentQuery.query('#txtMaNoVpa')[0];

        if(action == "E" && txtMaNo.getValue()  === "")
        {
            msg("WARNING","Please Enter  Ma No. !!!");

            //txtMaNo.focus(true);
            return;
        }


        if(!form.isValid())
        {
            msg("WARNING","Please Fill the required fields !!!");    
            return;
        }


        this.save("I");
    },

    onBtnEditVpaClick: function(button, e, eOpts) {
        var hdnAction = Ext.ComponentQuery.query('#hdnActionVpa')[0];
        var lblActionVpa = Ext.ComponentQuery.query('#lblActionVpa')[0];
        var txtMaNoVpa = Ext.ComponentQuery.query('#txtMaNoVpa')[0];


        //var form = Ext.ComponentQuery.query("#frmVatPreAssmnt")[0];
        //disableControls(form,false);

        this.clearControls("");
        txtMaNoVpa.setReadOnly(false);
        txtMaNoVpa.focus(true);
        hdnAction.setValue("E");
        lblActionVpa.setValue("Updating ...");

        var btnSave = Ext.ComponentQuery.query("#btnSaveVpa")[0];
        var btnSubmit = Ext.ComponentQuery.query("#btnSubmitVpa")[0];

        btnSave.setDisabled(false);
        btnSubmit.setDisabled(false);

    },

    onBtnDeleteVpaClick: function(button, e, eOpts) {
        var hdnAction = Ext.ComponentQuery.query('#hdnActionVpa')[0];
        var lblActionVpa = Ext.ComponentQuery.query('#lblActionVpa')[0];
        var txtMaNoVpa = Ext.ComponentQuery.query('#txtMaNoVpa')[0];

        //var form = Ext.ComponentQuery.query("#frmVatPreAssmnt")[0];
        //disableControls(form,false);

        this.clearControls("");
        txtMaNoVpa.setReadOnly(false);
        txtMaNoVpa.focus(true);
        hdnAction.setValue("D");

        lblActionVpa.setValue("Deleting ...");

        var btnSave = Ext.ComponentQuery.query("#btnSaveVpa")[0];
        var btnSubmit = Ext.ComponentQuery.query("#btnSubmitVpa")[0];

        btnSave.setDisabled(false);
        btnSubmit.setDisabled(false);



    },

    onTxtMaNoVpaKeypress: function(textfield, e, eOpts) {
        var me = this;
        me.clearControls("MaNo");


        if(e.keyCode === 13)
        {
            me.loadMaDetails();

        }
        else if(e.keyCode === 9)
        {
            me.loadMaDetails();
        }

    },

    onCboMaReasonCodeVpaChange: function(field, newValue, oldValue, eOpts) {
        var txtAppealNoVpa = Ext.ComponentQuery.query('#txtAppealNoVpa')[0];
        var txtMaReasonDescVpa = Ext.ComponentQuery.query('#txtMaReasonDescVpa')[0];

        txtAppealNoVpa.setDisabled(true);
        txtMaReasonDescVpa.setDisabled(true);

        if(oldValue !== undefined && oldValue !== null)
        {   
            txtAppealNoVpa.setValue("");
            txtMaReasonDescVpa.setValue("");
        }

        if(newValue == "4")
        {
            txtAppealNoVpa.setDisabled(false);
        }
        else if(newValue == "5")
        {
            txtMaReasonDescVpa.setDisabled(false);
        }

        //console.log("newValue",newValue);
        //console.log("oldValue",oldValue);
    },

    onBtnSubmitVpaClick: function(button, e, eOpts) {
        var me = this;
        var form = button.up('form').getForm();
        var action = Ext.ComponentQuery.query('#hdnActionVpa')[0].getValue();
        var txtMaNo = Ext.ComponentQuery.query('#txtMaNoVpa')[0];

        if(action == "E" && txtMaNo.getValue()  === "")
        {
            msg("WARNING","Please Enter  Ma No. !!!");

            //txtMaNo.focus(true);
            return;
        }


        if(!form.isValid())
        {
            msg("WARNING","Please Fill the required fields !!!");    
            return;
        }

        if(action === "D")
        {  

            var offCode = Ext.ComponentQuery.query('#txtOfficeCodeVpa')[0].getValue();
            var maNo = Ext.ComponentQuery.query('#txtMaNoVpa')[0].getValue() === "" ?null:Ext.ComponentQuery.query('#txtMaNoVpa')[0].getValue();


            //------------------------------------------------------
            // NB: Posting Data to Server
            //------------------------------------------------------

            Ext.Ajax.request({
                url:"../Handlers/VAT/ManagementAssessment/MaPreHeadsHandler.ashx?method=DeleteMaPreHeads" ,
                params:{offCode:offCode,maNo:maNo},
                success: function ( result, request ) {

                    var obj = Ext.decode(result.responseText);

                    msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);
                    if(obj.success === "false") return;

                    me.clearControls("");

                },
                failure: function ( result, request ) {

                    var obj = Ext.decode(result.responseText);

                    msg("FAILURE",obj.message);
                    return;
                }

            });



        }
        else
        {
            Ext.Msg.confirm('Confirm Action', 'एकपटक Submit गरिसकेपछि अर्को पटक विवरण फेरि परिवर्तन गर्न पइने छैन। \n के तपाई Submit गर्न चाहनुहन्छ ?', function(btn) {
                if(btn == 'yes'){

                    me.save("F");

                    return true;
                }
            }, this);


        }
    },

    onBtnPrintVpaClick: function(button, e, eOpts) {
        var me = this;

        var txtOfficeCodeVpa = Ext.ComponentQuery.query("#txtOfficeCodeVpa")[0];
        var txtMaNoVpa = Ext.ComponentQuery.query("#txtMaNoVpa")[0];

        var lblActionVpa = Ext.ComponentQuery.query('#lblActionVpa')[0];

        var offCode = txtOfficeCodeVpa.getValue();    
        var maNo = txtMaNoVpa.getValue();
        var hdnAction = Ext.ComponentQuery.query('#hdnActionVpa')[0];

        if(offCode === "")
        {
            msg("WARNING","कृपया  'कार्यलय कोड' राख्नुहोस् !!!",function(){offCode.focus(true);});
            return;
        }


        me.clearControls("");

        txtMaNoVpa.setValue(maNo);

        hdnAction.setValue("P");
        lblActionVpa.setValue("Print ...");
        txtMaNoVpa.focus(true);
        txtMaNoVpa.setReadOnly(false);


        //var btnSave = Ext.ComponentQuery.query("#btnSaveVpa")[0];
        //var btnSubmit = Ext.ComponentQuery.query("#btnSubmitVpa")[0];

        //btnSave.setDisabled(true);
        //btnSubmit.setDisabled(true);




        ///------------------------------------------------------------------------------------
        //Convert All Fields To Read Only
        //var form = button.up('form').getForm();

        //var form1 = Ext.ComponentQuery.query("#frmVatPreAssmnt")[0];
        //console.log("form>>>>",form);
        //console.log("form1>>>>",form1);
        //disableControls(form,false);
        //disableControls(form,true);
    },

    onPnlVatPreAssmntAfterRender: function(component, eOpts) {
        var me = this;
        var view = Ext.ComponentQuery.query('#pnlVatPreAssmnt')[0];
        var strTaxDurationVpa = Ext.getStore('TaxDurationVpa');
        strTaxDurationVpa.loadData([],false);

        if(view.extraParam)
        {
            var param = view.extraParam.params;
            var tranNo = param.tranNo; 

            me.loadDetailByTran(tranNo);
        }

    },

    onTxtMaAmountVpaBlur: function(component, e, eOpts) {
        var me = this;

        var txtMaAmount = Ext.ComponentQuery.query("#txtMaAmountVpa")[0];
        var txtPenAmount = Ext.ComponentQuery.query("#txtPenAmountVpa")[0];
        var txtIntAmount = Ext.ComponentQuery.query("#txtIntAmountVpa")[0];

        var txtAddAmount = Ext.ComponentQuery.query("#txtAddAmountVpa")[0];


        if(txtMaAmount.getValue() === "")
        {
            return ;

        }


        var txtIntCalUpto = Ext.ComponentQuery.query('#txtIntCalUptoVpa')[0];
        var txtEffDate = Ext.ComponentQuery.query('#txtEffDateVpa')[0];

        var offCode = Ext.ComponentQuery.query('#txtOfficeCodeVpa')[0].getValue();
        var pan = Ext.ComponentQuery.query('#txtPanVpa')[0].getValue();
        var accTypeVpa = Ext.ComponentQuery.query('#txtAcctTypeVpa')[0].getValue();
        var intCalUpto = Ext.ComponentQuery.query('#txtIntCalUptoVpa')[0].getValue();
        var effDate = Ext.ComponentQuery.query('#txtEffDateVpa')[0].getValue();

        var filePer = Ext.ComponentQuery.query("#cboFilingPeriodVpa")[0].getValue();
        var taxyear = Ext.ComponentQuery.query("#txtTaxYearVpa")[0].getValue();
        var period = Ext.ComponentQuery.query("#cboPeriodVpa")[0].getValue();

        var maAmount = txtMaAmount.getValue();

        if(effDate === "" )
        {
            txtMaAmount.setValue("");
            msg("WARNING","कृपया  'प्रारम्भिक कर मिति' राख्नुहोस् !!!",function(){txtEffDate.focus();});
            return;
        }

        if(intCalUpto === "" )
        {
            txtMaAmount.setValue("");
            msg("WARNING","कृपया 'जरिवाना गणना मिति' राख्नुहोस् !!!",function(){txtIntCalUpto.focus();});
            return;
        }

        if(intCalUpto < effDate)
        {
            txtMaAmount.setValue("");
            msg("WARNING"," 'प्रारम्भिक कर मिति' 'व्याज र जरिवाना गणना मिति' भन्दा कम हुनु पर्छ !!!",function(){txtEffDate.focus();});
            return;
        }

        var wait = waitMsg("Loading ...");

        maPreLines = [{
            TaxYear:taxyear,
            FilPeriod:filePer,
            Period:period,
            MaAmount:maAmount
        }];


        maPreHead = { 
            Pan :pan,
            AcctType : accTypeVpa,
            EffDate: effDate,
            IntCalUpto : intCalUpto,
            MaPreLines:maPreLines !== ""?maPreLines:null
        };


        //------------------------------------------------------
        // NB: Posting Data to Server
        //------------------------------------------------------

        Ext.Ajax.request({
            url:"../Handlers/VAT/ManagementAssessment/MaPreHeadsHandler.ashx?method=CalcMaIntPen" ,
            params:{maPreHead:JSON.stringify(maPreHead)},
            success: function ( result, request ) {

                wait.hide();

                var obj = Ext.decode(result.responseText);


                if(obj.success === "true")
                {
                    var arr = obj.message.split("/");
                    var intAmount = arr[0].trim();
                    //var penAmount = arr[1].trim();

                    var addAmount = arr[1].trim();


                    txtIntAmount.setValue(intAmount);
                    txtAddAmount.setValue(addAmount);
                    //txtPenAmount.setValue(penAmount);
                }
                else
                {
                    msg("FAILURE",obj.message);

                    return;
                }



            },
            failure: function ( result, request ) {

                wait.hide();

                var obj = Ext.decode(result.responseText);

                msg("FAILURE","Error in Fetching Data!!!" );
                return;
            }

        });
    },

    validateTaxDuration: function() {
        var hdnFilePerVpa = Ext.ComponentQuery.query("#hdnFilePerVpa")[0];
        var filePer = Ext.ComponentQuery.query("#cboFilingPeriodVpa")[0].getValue();
        var taxyear = Ext.ComponentQuery.query("#txtTaxYearVpa")[0].getValue();
        var period = Ext.ComponentQuery.query("#cboPeriodVpa")[0].getValue();
        var pan = Ext.ComponentQuery.query("#txtPanVpa")[0].getValue();
        var acctType = Ext.ComponentQuery.query("#txtAcctTypeVpa")[0].getValue();

        hdnFilePerVpa.setValue("");
        var flag = true;
        var errMsg = "";
        var objFocus = null

        if(pan ===''||pan === null)
        {
            // msg('WARNING', 'कृपया स्था.लेखा.नं. राख्नुहोस् !!!');
            //return false;
            errMsg = "कृपया स्था.लेखा.नं. राख्नुहोस् !!!<br>";
            objFocus = Ext.ComponentQuery.query("#txtPanVpa")[0];
        }

        if(filePer === "" || filePer === null)
        {      
            //msg("WARNING","कृपया मा/चौ/द्रवै राख्नुहोस्!!!");
            //return false;
            errMsg += "कृपया मा/चौ/द्रवै राख्नुहोस् !!!<br>";

            if(objFocus == null)
            {
                objFocus = Ext.ComponentQuery.query("#cboFilingPeriodVpa")[0];
            }
        }


        if(period === "" || period === null)
        {  
            // msg("WARNING","कृपया कर अवधि राख्नुहोस् <br>"); 
            //return false;
            errMsg += "कृपया कर अवधि राख्नुहोस् !!!<br>";

            if(objFocus == null)
            {
                objFocus = Ext.ComponentQuery.query("#cboPeriodVpa")[0];
            }
        }



        if(taxyear ==='0'|| taxyear === null ||taxyear === "")
        {
            // msg('WARNING','कृपया  कर वर्ष राख्नुहोस् <br>');
            // return false;
            errMsg += "कृपया  कर वर्ष राख्नुहोस् !!!<br>";

            if(objFocus == null)
            {
                objFocus = Ext.ComponentQuery.query("#txtTaxYearVpa")[0];
            }
        }

        if(errMsg !== "")
        {
            msg("WARNING",errMsg,function(){ objFocus.focus();});
            return false;
        }


        var  wait = watiMsg('Validating ...');

        Ext.Ajax.request({
            url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
            params: {
                method:'GetFilePeriodWithEndDate',
                filePer: filePer,
                taxyear:taxyear,
                period:period,
                pan: pan,
                acctType:acctType
            },
            async:false,
            success: function(result, request){
                wait.hide();

                objFocus = Ext.ComponentQuery.query("#cboFilingPeriodVpa")[0];
                var obj = Ext.decode(result.responseText);
                var message = "";

                message = obj.success === 'true'?(obj.message !== filePer?"Please Enter valid Filing Period <br>": obj.message):obj.message; 

                if(obj.success === 'false')
                {
                    flag = false;
                    msg("WARNING",message,function(){ objFocus.focus();});
                }
                else if(obj.success === 'true' && obj.message !== filePer)
                {
                    flag = false;
                    msg("WARNING",message,function(){ objFocus.focus();});
                }
                else if(obj.success == 'true' && obj.message === filePer)
                {
                    //hdnFilePerVpa.setValue(message);
                    flag = true;
                }
                else
                {
                    flag = false;                                        
                    msg("WARNING",message,function(){ objFocus.focus();});
                }

                /*
                if(flag === false)
                {    
                hdnFilePerVpa.setValue("Invalid");
                }
                */

            },
            failure: function ( result, request ) {

                wait.hide();

                var obj = Ext.decode(result.responseText);

                msg("FAILURE",obj.message);
            }

        });

        return flag;
    },

    clearControls: function(arg) {
        var txtOfficeCodeVpa = Ext.ComponentQuery.query('#txtOfficeCodeVpa')[0];
        var txtMaNoVpa = Ext.ComponentQuery.query('#txtMaNoVpa')[0];
        var txtPanVpa = Ext.ComponentQuery.query('#txtPanVpa')[0];
        var txtNameVpa = Ext.ComponentQuery.query('#txtNameVpa')[0];
        var txtAddressVpa = Ext.ComponentQuery.query('#txtAddressVpa')[0];
        var txtPhoneVpa = Ext.ComponentQuery.query('#txtPhoneVpa')[0];
        var txtAssessPeriodVpa = Ext.ComponentQuery.query('#txtAssessPeriodVpa')[0];
        var txtSectionVpa = Ext.ComponentQuery.query('#txtSectionVpa')[0];
        var txtRuleVpa = Ext.ComponentQuery.query('#txtRuleVpa')[0];
        var txtMaReasonDescVpa = Ext.ComponentQuery.query('#txtMaReasonDescVpa')[0];
        var txtAppealNoVpa = Ext.ComponentQuery.query('#txtAppealNoVpa')[0];
        var txtIntCalUptoVpa = Ext.ComponentQuery.query('#txtIntCalUptoVpa')[0];
        var txtEffDateVpa = Ext.ComponentQuery.query('#txtEffDateVpa')[0];
        var txtBankVpa = Ext.ComponentQuery.query('#txtBankVpa')[0];
        var txtBranchVpa = Ext.ComponentQuery.query('#txtBranchVpa')[0];

        var cboMaReasonCodeVpa = Ext.ComponentQuery.query('#cboMaReasonCodeVpa')[0];

        var strTaxDurationVpa = Ext.getStore('TaxDurationVpa');

        var hdnFilePerVpa = Ext.ComponentQuery.query("#hdnFilePerVpa")[0];
        var hdnActionVpa = Ext.ComponentQuery.query('#hdnActionVpa')[0];

        var lblActionVpa = Ext.ComponentQuery.query('#lblActionVpa')[0];
        var lblFinAmount = Ext.ComponentQuery.query('#lblFinTotalVpa')[0];

        var btnAddVpa = Ext.ComponentQuery.query("#btnAddVpa")[0];

        btnAddVpa.setDisabled(true);

        if(arg !== "Pan")
        {
            txtPanVpa.setValue("");
            txtPanVpa.clearInvalid();
        }


        if(arg !== "MaNo")
        {    
            txtMaNoVpa.setValue("");
            txtMaNoVpa.clearInvalid();
            txtMaNoVpa.setReadOnly(true);

            hdnActionVpa.setValue("");
            lblActionVpa.setValue("");
            lblFinAmount.setValue("");
        }

        hdnFilePerVpa.setValue("");

        txtBankVpa.setValue("");
        txtBranchVpa.setValue("");

        txtNameVpa.setValue("");
        txtAddressVpa.setValue("");
        txtPhoneVpa.setValue("");
        txtAssessPeriodVpa.setValue("");
        txtSectionVpa.setValue("");
        txtRuleVpa.setValue("");
        txtMaReasonDescVpa.setValue("");
        txtAppealNoVpa.setValue("");
        txtIntCalUptoVpa.setValue("");
        txtEffDateVpa.setValue("");
        cboMaReasonCodeVpa.setValue("");


        txtBankVpa.clearInvalid();
        txtBranchVpa.clearInvalid();

        txtNameVpa.clearInvalid();
        txtAddressVpa.clearInvalid();
        txtPhoneVpa.clearInvalid();
        txtAssessPeriodVpa.clearInvalid();
        txtSectionVpa.clearInvalid();
        txtRuleVpa.clearInvalid();
        txtMaReasonDescVpa.clearInvalid();
        txtAppealNoVpa.clearInvalid();
        txtIntCalUptoVpa.clearInvalid();
        txtEffDateVpa.clearInvalid();
        cboMaReasonCodeVpa.clearInvalid();

        strTaxDurationVpa.loadData([],false);

    },

    calTotal: function() {
        var grd = Ext.ComponentQuery.query('#grdTaxDurationVpa')[0];
        var store = grd.getStore();
        var selectedRow = grd.getSelectionModel();

        var record = grd.getSelectionModel().getSelection()[0];

        var txtMaAmountVpa = Ext.ComponentQuery.query('#txtMaAmountVpa')[0].getValue();
        var txtPenAmountVpa = Ext.ComponentQuery.query('#txtPenAmountVpa')[0].getValue();
        var txtAddAmountVpa = Ext.ComponentQuery.query('#txtAddAmountVpa')[0].getValue();
        var txtIntAmountVpa = Ext.ComponentQuery.query('#txtIntAmountVpa')[0].getValue();
        var finAmount = Ext.ComponentQuery.query('#lblFinTotalVpa')[0];


        var maAmount  = (txtMaAmountVpa  === "" || txtMaAmountVpa  === null)?0:txtMaAmountVpa;
        var penAmount = (txtPenAmountVpa === "" || txtPenAmountVpa === null)?0:txtPenAmountVpa;
        var addAmount = (txtAddAmountVpa === "" || txtPenAmountVpa === null)?0:txtAddAmountVpa;
        var intAmount = (txtIntAmountVpa === "" || txtPenAmountVpa === null)?0:txtIntAmountVpa;

        var totAmount = parseInt(maAmount)+parseInt(penAmount)+parseInt(addAmount)+parseInt(intAmount);


        Ext.ComponentQuery.query('#txtTotAmountVpa')[0].setValue(totAmount);

        finAmount.setValue("");

        //This code sum numbers in certain column
        var sum = 0; 
        //store.each(function (rec) { sum += rec.get('NameColumn'); console.log('sum',sum);});
        var rowIdx = store.indexOf(record);
        var idx = 0;


        store.each(function (rec) {     


            if(rec.get('TotAmount') !=="" && rowIdx !== idx)
            {
                sum = parseInt(sum) + parseInt(rec.get('TotAmount')); 
            }

            idx++;


        });

        //console.log('totAmount',totAmount);
        //console.log('sum',sum);


        var overallTot = parseInt(sum)+parseInt(totAmount);

        finAmount.setValue(overallTot);



    },

    save: function(maStatus) {
        var me = this;

        var loadMsg = "";

        var offCode = Ext.ComponentQuery.query('#txtOfficeCodeVpa')[0].getValue();
        var maNo = Ext.ComponentQuery.query('#txtMaNoVpa')[0].getValue() === "" ?null:Ext.ComponentQuery.query('#txtMaNoVpa')[0].getValue();
        var pan = Ext.ComponentQuery.query('#txtPanVpa')[0].getValue();
        var name = Ext.ComponentQuery.query('#txtNameVpa')[0].getValue();
        var address = Ext.ComponentQuery.query('#txtAddressVpa')[0].getValue();
        var phone = Ext.ComponentQuery.query('#txtPhoneVpa')[0].getValue();
        var assessPeriod = Ext.ComponentQuery.query('#txtAssessPeriodVpa')[0].getValue();
        var section = Ext.ComponentQuery.query('#txtSectionVpa')[0].getValue();
        var rule = Ext.ComponentQuery.query('#txtRuleVpa')[0].getValue();
        var maReasonDesc = Ext.ComponentQuery.query('#txtMaReasonDescVpa')[0].getValue();
        var appealNo = Ext.ComponentQuery.query('#txtAppealNoVpa')[0].getValue();
        var intCalUpto = Ext.ComponentQuery.query('#txtIntCalUptoVpa')[0].getValue();
        var effDate = Ext.ComponentQuery.query('#txtEffDateVpa')[0].getValue();
        var maReasonCode = Ext.ComponentQuery.query('#cboMaReasonCodeVpa')[0].getValue();
        var accTypeVpa = Ext.ComponentQuery.query('#txtAcctTypeVpa')[0].getValue();

        var bankName = Ext.ComponentQuery.query('#txtBankVpa')[0].getValue();
        var bankAddr = Ext.ComponentQuery.query('#txtBranchVpa')[0].getValue();


        var totMaAmt = Ext.ComponentQuery.query('#lblFinTotalVpa')[0].getValue();

        var strTaxDurationVpa = Ext.getStore('TaxDurationVpa');

        var action = Ext.ComponentQuery.query('#hdnActionVpa')[0].getValue();

        var tranNo = Ext.ComponentQuery.query('#hdnTranNoVpa')[0].getValue();

        if(intCalUpto < effDate)
        {
            msg("WARNING"," 'प्रारम्भिक कर मिति' 'व्याज र जरिवाना गणना मिति' भन्दा कम हुनु पर्छ !!!");
            return;
        }



        if(action == "E")
        {
            loadMsg = "Updating ...";
        }
        else
        {
            loadMsg = "Saving ...";
        }

        strTaxDurationVpa.each(function (rec) {     

            var taxYear = rec.get('TaxYear') === ""? null:rec.get('TaxYear');
            var maAmount = rec.get('MaAmount') === ""? null:rec.get('MaAmount');
            var penAmount = rec.get('PenAmount') === ""? null:rec.get('PenAmount');
            var addAmount = rec.get('AddAmount') === ""? null:rec.get('AddAmount');
            var intAmount = rec.get('IntAmount') === ""? null:rec.get('IntAmount');

            rec.data.TaxYear = taxYear;
            rec.data.MaAmount = maAmount;
            rec.data.PenAmount = penAmount;
            rec.data.AddAmount = addAmount;
            rec.data.IntAmount = intAmount;

        });

        var maPreLines = "";
        var maPreHead = "";

        strTaxDurationVpa.clearFilter();

        if(strTaxDurationVpa.getCount() > 0)
        {
            maPreLines = getJson(strTaxDurationVpa); 

            //console.log('str',strTaxDurationVpa.data.Items);

            strTaxDurationVpa.filter(function(item){
                return item.get("Action")!= 'D';
            });
        }



        maPreHead = { 
            Pan :pan,
            AcctType : accTypeVpa,
            MaReasonCode :maReasonCode,     
            OffCode : offCode, 
            MaNo :maNo, 
            EffDate: effDate,
            TranDate :"",  
            MaReasonDesc : maReasonDesc,
            AppealNo:appealNo !== ""?appealNo:null, 
            TotMaAmt:totMaAmt !== ""?totMaAmt:null, 
            IntCalUpto : intCalUpto,
            AssessPeriod:assessPeriod,
            Section :section,
            Rules : rule,
            BankName:bankName,
            BankAddr:bankAddr,
            UserID:"",
            MaStatus:maStatus,
            FinalDate:"",  
            TranNo:tranNo !== ""?tranNo:null,
            MaPreLines:maPreLines !== ""?maPreLines:null,
            Action:action

        };

        var waitSave = watiMsg(loadMsg);



        //------------------------------------------------------
        // NB: Posting Data to Server
        //------------------------------------------------------

        Ext.Ajax.request({
            url:"../Handlers/VAT/ManagementAssessment/MaPreHeadsHandler.ashx?method=Save" ,
            params:{maPreHead:JSON.stringify(maPreHead)},
            success: function ( result, request ) {

                waitSave.hide();

                var obj = Ext.decode(result.responseText);

                //console.log('obj',obj);        

                if(obj.success === "false")
                {

                    msg("FAILURE",obj.message);
                    return;
                }


                me.clearControls("");

                if(maStatus === "F")
                {

                    var message = obj.message;

                    if(maNo === "" || maNo === null)
                    {
                        var len = message.length;

                        maNo = message.substr(len-10,10);

                    }


                    //Ext.Msg.confirm('Confirm Action', 'Successfully Submitted. <br>Do you want to Print?', function(btn) {
                    Ext.Msg.confirm('Confirm Action',message +'<br><br> के तपाई प्रिन्ट गर्न चाहनुहुन्छ?', function(btn) {
                        if(btn == 'yes'){

                            me.print(offCode,maNo);

                            return true;
                        }
                    }, this);
                }
                else
                {
                    msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);
                }



            },
            failure: function ( result, request ) {

                waitSave.hide();

                var obj = Ext.decode(result.responseText);

                msg("FAILURE","Error in Fetching Data!!!" );
                return;
            }

        });



        //var s = t.replace(/"/g,'\"');

        // console.log("msg",s);

        // var obj = Ext.decode(s);

        // var obj = Ext.decode(result.responseText);

        // console.log('res',obj);

        // msg("FAILURE",obj);

        //var t = "{a:'xyz',b:'xxx'}";
        //var s = t.replace(/x/g, "y")

    },

    loadMaDetails: function() {
        var me = this;
        var form = Ext.ComponentQuery.query("#frmVatPreAssmnt")[0];
        var txtOfficeCodeVpa = Ext.ComponentQuery.query("#txtOfficeCodeVpa")[0];
        var txtMaNoVpa = Ext.ComponentQuery.query("#txtMaNoVpa")[0];

        var offCode = txtOfficeCodeVpa.getValue();    
        var maNo = txtMaNoVpa.getValue();

        var action = Ext.ComponentQuery.query('#hdnActionVpa')[0].getValue();

        if(offCode === "" || maNo === "")
        {
            return;
        }


        var wait = waitMsg('loading ...');

        Ext.Ajax.request({
            url:"../Handlers/VAT/ManagementAssessment/MaPreHeadsHandler.ashx?method=GetMaPreHeads" ,
            params:{offCode:offCode,maNo:maNo},
            success: function ( result, request ) {            

                wait.hide();            
                var obj = Ext.decode(result.responseText);        
                var data = obj.root; 

                if(obj.success === "false")
                {   

                    if(obj.message === "V")
                    {
                        Ext.Msg.confirm('Confirm Action', 'Pre Ma is already VERIFIED . Do you want to PRINT ?', function(btn) {
                            if(btn == 'yes'){
                                me.print(offCode,maNo);
                            }
                        }, this);
                    }
                    else if(obj.message === "F")
                    {               

                        if(action === "P")
                        {
                            me.print(offCode,maNo);
                            return; 

                        }
                        else
                        {

                            Ext.Msg.confirm('Confirm Action', 'Pre Ma is already FINALIZED !!!. <br/> Do you want to PREVIEW ?', function(btn) {
                                if(btn == 'yes'){

                                    me.loadMaData(data,"F");    
                                }
                            }, this);
                        }
                    }            
                    else
                    {
                        msg("WARNING",obj.message);
                    }

                    return;
                }

                if(action === "P")
                {

                    me.print(offCode,maNo);
                    return;
                }
                else
                {
                    me.loadMaData(data,"");
                }

            },
            failure: function ( result, request ) {

                wait.hide(); 

                msg("FAILURE","Error in Fetching Data !!!");
            }
        });

    },

    loadDetailByTran: function(tran) {
        var me = this;
        var form = Ext.ComponentQuery.query("#frmVatPreAssmnt")[0];
        var txtOfficeCodeVpa = Ext.ComponentQuery.query("#txtOfficeCodeVpa")[0];
        var txtMaNoVpa = Ext.ComponentQuery.query("#txtMaNoVpa")[0];


        var action = Ext.ComponentQuery.query('#hdnActionVpa')[0].getValue();


        if(tran === "" || tran === null)
        {    
            msg("WARNING","No Tran Exists for Verification !!!");
            return;
        }

        var wait = waitMsg('loading ...');

        Ext.Ajax.request({
            url:"../Handlers/VAT/ManagementAssessment/MaPreHeadsHandler.ashx?method=GetMaPreHeadsByTranNo" ,
            params:{tranNo:tran},
            success: function ( result, request ) {            

                wait.hide();            
                var obj = Ext.decode(result.responseText);        
                var data = obj.root; 

                if(obj.success === "true")
                {              
                    me.loadMaData(data,"");

                    var view = Ext.ComponentQuery.query('#pnlVatPreAssmnt')[0];

                    view.query('.button').forEach(function(c){c.setDisabled(true);});
                    view.query('.field,.combo').forEach(function(c){c.setReadOnly(true);});
                    view.query('.grid').forEach(function(c){ c.on('beforeedit', function(editor, e) { return false;});});

                    return;
                }
                else
                {
                    msg("WARNING",obj.message);

                    return;
                }       

            },
            failure: function ( result, request ) {

                wait.hide(); 

                msg("FAILURE","Error in Fetching Data !!!");
            }
        });

    },

    loadPanDetails: function() {
        this.clearControls("Pan");

        var isValid = false;

        var btnAddVpa = Ext.ComponentQuery.query("#btnAddVpa")[0];
        var txtPanVpa = Ext.ComponentQuery.query("#txtPanVpa")[0];
        var txtNameVpa = Ext.ComponentQuery.query("#txtNameVpa")[0];
        var txtAddressVpa = Ext.ComponentQuery.query("#txtAddressVpa")[0];
        var txtPhoneVpa = Ext.ComponentQuery.query("#txtPhoneVpa")[0];

        var offCode = Ext.ComponentQuery.query("#txtOfficeCodeVpa")[0].getValue();

        if(txtPanVpa.getValue() === "")
        {
            //  msg("WARNING","Please Enter PAN !!!");
            return;
        }

        LoadTaxpayerInfoWithValidPan(txtPanVpa.getValue(),"00",function(data){

            var rec = data.root.Taxpayer;
            var addr = rec.BusinessAddress.Address;
            var office = rec.Office;
            var detailAddr = addr.StreetName + " , " + addr.DistrictNameNep;

            var panOffice = office.OfficeCode;
            if(rec.AcctStatus === "D")
            {
                msg("WARNING","PAN is Deactivated !!!");
                return;
            }

            if(offCode.trim() != panOffice)
            {
                msg("WARNING","PAN is not registered in this office !!!");

                return;
            }


            txtNameVpa.setValue(rec.Name);
            txtAddressVpa.setValue(detailAddr);
            txtPhoneVpa.setValue(rec.TelePhone);

            btnAddVpa.setDisabled(false);

        });

    },

    loadMaData: function(data,type) {
        var me = this;
        var sum = 0;
        var finAmount = Ext.ComponentQuery.query('#lblFinTotalVpa')[0];
        var grd = Ext.ComponentQuery.query("#grdTaxDurationVpa")[0];

        var txtOfficeCodeVpa = Ext.ComponentQuery.query("#txtOfficeCodeVpa")[0];
        var txtMaNoVpa = Ext.ComponentQuery.query("#txtMaNoVpa")[0];
        var txtPanVpa = Ext.ComponentQuery.query("#txtPanVpa")[0];
        var txtNameVpa = Ext.ComponentQuery.query("#txtNameVpa")[0];
        var txtAddressVpa = Ext.ComponentQuery.query("#txtAddressVpa")[0];
        var txtPhoneVpa = Ext.ComponentQuery.query("#txtPhoneVpa")[0];

        var txtAssessPeriodVpa = Ext.ComponentQuery.query('#txtAssessPeriodVpa')[0];
        var txtSectionVpa = Ext.ComponentQuery.query('#txtSectionVpa')[0];
        var txtRuleVpa = Ext.ComponentQuery.query('#txtRuleVpa')[0];
        var txtMaReasonDescVpa = Ext.ComponentQuery.query('#txtMaReasonDescVpa')[0];
        var txtAppealNoVpa = Ext.ComponentQuery.query('#txtAppealNoVpa')[0];
        var txtIntCalUptoVpa = Ext.ComponentQuery.query('#txtIntCalUptoVpa')[0];
        var txtEffDateVpa = Ext.ComponentQuery.query('#txtEffDateVpa')[0];
        var txtBankVpa = Ext.ComponentQuery.query('#txtBankVpa')[0];
        var txtBranchVpa = Ext.ComponentQuery.query('#txtBranchVpa')[0];
        var hdnAction = Ext.ComponentQuery.query('#hdnActionVpa')[0];
        var hdnTranNo = Ext.ComponentQuery.query('#hdnTranNoVpa')[0];


        var cboMaReasonCodeVpa = Ext.ComponentQuery.query('#cboMaReasonCodeVpa')[0];

        var store = Ext.getStore('TaxDurationVpa');


        txtMaNoVpa.setValue(data.MaNo);
        txtPanVpa.setValue(data.Pan);
        txtBankVpa.setValue(data.BankName);
        txtBranchVpa.setValue(data.BankAddr);
        txtNameVpa.setValue(data.Name);
        txtAddressVpa.setValue(data.Address);
        txtPhoneVpa.setValue(data.Phone);
        txtAssessPeriodVpa.setValue(data.AssessPeriod);
        txtSectionVpa.setValue(data.Section);
        txtRuleVpa.setValue(data.Rules);
        txtMaReasonDescVpa.setValue(data.MaReasonDesc);
        txtAppealNoVpa.setValue(data.AppealNo);
        txtIntCalUptoVpa.setValue(data.IntCalUpto);
        txtEffDateVpa.setValue(data.EffDate);

        hdnTranNo.setValue(data.TranNo);

        if(hdnAction.getValue() !== "D" && hdnAction.getValue() !== "P")
        {
            hdnAction.setValue(data.Action);
        }

        cboMaReasonCodeVpa.setValue(data.MaReasonCode);

        store.loadData([],false);

        store.add(data.MaPreLines);   

        store.each(function (rec) {

            var taxYear = rec.get('TaxYear') === ""? null:rec.get('TaxYear');
            var maAmount = rec.get('MaAmount') === ""? null:rec.get('MaAmount');
            var penAmount = rec.get('PenAmount') === ""? null:rec.get('PenAmount');
            var addAmount = rec.get('AddAmount') === ""? null:rec.get('AddAmount');
            var intAmount = rec.get('IntAmount') === ""? null:rec.get('IntAmount');

            rec.data.TaxYear = taxYear;
            rec.data.MaAmount = maAmount;
            rec.data.PenAmount = penAmount;
            rec.data.AddAmount = addAmount;
            rec.data.IntAmount = intAmount;


            var maAmount1 = (maAmount === null)?0:maAmount;
            var penAmount1 = (penAmount === null)?0:penAmount;
            var addAmount1 = (addAmount === null)?0:addAmount;
            var intAmount1 = (intAmount === null)?0:intAmount;
            var totAmount = parseInt(maAmount1)+parseInt(penAmount1)+parseInt(addAmount1)+parseInt(intAmount1);

            rec.data.TotAmount = totAmount;


            if(rec.data.TotAmount !=="")
            {
                sum = parseInt(sum) + parseInt(rec.data.TotAmount); 
            }

        });


        grd.bindStore(store);
        finAmount.setValue(sum );

        var btnAddVpa = Ext.ComponentQuery.query("#btnAddVpa")[0];
        btnAddVpa.setDisabled(false);

        if(type === "F")
        {
            var btnSave = Ext.ComponentQuery.query("#btnSaveVpa")[0];
            var btnSubmit = Ext.ComponentQuery.query("#btnSubmitVpa")[0];

            btnSave.setDisabled(true);
            btnSubmit.setDisabled(true);
        }
        /*
        if(hdnAction.getValue() === "P")
        {
        me.print(data.OffCode,data.MaNo);
        }
        */
        //NB: to hide the column of grid
        //grd.columns[9].setVisible(false);
    },

    print: function(offCode,maNo) {
        var param = { 'offCode':offCode,'maNo' :maNo };
        var url="../../../Reporting/Vat/ReportHandlers/PreMaReportHandler.ashx?subnum=555";
        var winOption="width=730,height=345,left=100,top=100,resizable=yes,scrollbars=yes";

        OpenWindowWithPost(url,winOption,"NewFile", param);
    },

    init: function(application) {
        this.control({
            "#btnAddVpa": {
                click: this.onBtnAddVpaClick
            },
            "#cboFilingPeriodVpa": {
                change: this.onCboFilingPeriodChange
            },
            "#cntGrdTaxDurationVpa": {
                afterrender: this.onCntGrdTaxDurationVpaAfterRender,
                beforerender: this.onCntGrdTaxDurationVpaBeforeRender
            },
            "#txtPanVpa": {
                blur: this.onTxtPanVpaBlur,
                keypress: this.onTxtPanVpaKeypress
            },
            "#txtTaxYearVpa": {
                blur: this.onTxtTaxYearVpaBlur
            },
            "#btnCancelVpa": {
                click: this.onBtnCancelVpaClick
            },
            "#cboPeriodVpa": {
                change: this.onCboPeriodVpaChange
            },
            "#txtMaAmountVpa": {
                change: this.onTxtMaAmountVpaChange,
                blur: this.onTxtMaAmountVpaBlur
            },
            "#txtAddAmountVpa": {
                change: this.onTxtAddAmountVpaChange
            },
            "#txtIntAmountVpa": {
                change: this.onTxtIntAmountVpaChange
            },
            "#txtPenAmountVpa": {
                change: this.onTxtPenAmountVpaChange
            },
            "#btnSaveVpa": {
                click: this.onBtnSaveVpaClick
            },
            "#btnEditVpa": {
                click: this.onBtnEditVpaClick
            },
            "#btnDeleteVpa": {
                click: this.onBtnDeleteVpaClick
            },
            "#txtMaNoVpa": {
                keypress: this.onTxtMaNoVpaKeypress
            },
            "#cboMaReasonCodeVpa": {
                change: this.onCboMaReasonCodeVpaChange
            },
            "#btnSubmitVpa": {
                click: this.onBtnSubmitVpaClick
            },
            "#btnPrintVpa": {
                click: this.onBtnPrintVpaClick
            },
            "#pnlVatPreAssmnt": {
                afterrender: this.onPnlVatPreAssmntAfterRender
            }
        });
    }

});
