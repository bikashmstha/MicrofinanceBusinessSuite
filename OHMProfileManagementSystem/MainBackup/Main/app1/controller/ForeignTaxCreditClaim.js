/*
 * File: app/controller/ForeignTaxCreditClaim.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.ForeignTaxCreditClaim', {
    extend: 'Ext.app.Controller',

    stores: [
        'DCTBForeignTaxDetails',
        'CountryStore',
        'IncomeTaxAcctType',
        'FiscalYear'
    ],

    onDdlFTCCActTypeChange: function(field, newValue, oldValue, eOpts) {
        this.ForeignTaxCreditClaimTaxpayerInfo();



    },

    onBtn_AddFTCCDetailClick: function(button, e, eOpts) {
        var me = this;
        var loadMsg = "";
        var count = 0;
        var errorMsg = "";


        var DCTBForeignTaxDetailsStore = Ext.getStore('DCTBForeignTaxDetails');
        var grd = Ext.ComponentQuery.query('#grdForeignTaxCreditClaimDetail')[0];



        var txtFTCC_PanNo = Ext.ComponentQuery.query('#txtFTCC_PanNo')[0].getValue(); 
        var ddlFTCCActType = Ext.ComponentQuery.query('#ddlFTCCActType')[0].getValue();
        var txtFTCC_FiscalYear =  Ext.ComponentQuery.query('#txtFTCC_FiscalYear')[0].getValue();
        var txtFTCC_ClainDate = Ext.ComponentQuery.query('#txtFTCC_ClainDate')[0].getValue();

        var action = Ext.ComponentQuery.query('#hdnFTCC_Action')[0].getValue();


        if(txtFTCC_PanNo === "" || txtFTCC_PanNo === null)
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया स्था . ले . नं . भर्नुहोस् !!!";

        }

        if(ddlFTCCActType === "" || ddlFTCCActType === null)
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया खाताको किसिम  भर्नुहोस् !!!";

        }

        if(txtFTCC_FiscalYear === "" || txtFTCC_FiscalYear === null)
        {

            count++; 
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया आ.ब. छान्नुहोस्!!! ";

        }

        if(count >0)
        {
            msg("WARNING",errorMsg);
            return false;
        }



        var rec={
            AssessmentNo:'',
            CountryCode:'',
            FtcRemPreviousFy:null,
            FtcPaidCurrentFy:null,
            FtcUsedCurrentFy:null,
            RecordStatus:'',
            Terminal:'',
            TranDate:'',
            UserName:'',
            Action:''
        };
        /*
        if(grd.store.add(rec))
        {
        var btn_AddFTCCDetail = Ext.ComponentQuery.query('#btn_AddFTCCDetail')[0];
        btn_AddFTCCDetail.disable(true);
        }
        */
        grd.store.add(rec);
        //console.log('store ',grd.store.data);
        var col = grd.headerCt.getHeaderAtIndex(0);
        var recd = grd.store.data.items;
        var record = recd[recd.length-1];
        grd.getPlugin('plugingrdForeignTaxCreditClaimDetail').startEdit(record, col);

    },

    onBtnFTCC_SaveClick: function(button, e, eOpts) {
        var me = this;
        var frm_ForeignTaxCreditClaim = Ext.ComponentQuery.query('#frm_ForeignTaxCreditClaim')[0].getForm();


        this.SaveForeignTaxCreditClaim("I");












        /*
        if(!frm_ForeignTaxCreditClaim.isValid())
        {
        msg("WARNING","Please Fill the required fields !!!");   
        return;

        }
        else
        {

        this.SaveForeignTaxCreditClaim("I"); 
        }
        */
    },

    onGrdForeignTaxCreditClaimDetailBeforeRender: function(component, eOpts) {
        var grid = Ext.ComponentQuery.query('#grdForeignTaxCreditClaimDetail')[0];

        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";    

            var items = Ext.getStore('CountryStore').data.items;

            for(var i=0;i<items.length;i++)
            {        
                if(items[i].data.CountryCode == value)
                {           
                    temp=items[i].data.CountryName;
                    break;
                }        
            }

            return temp;
        };
    },

    onBtnFTCC_EditClick: function(button, e, eOpts) {
        var hdnFTCCAction = Ext.ComponentQuery.query('#hdnFTCC_Action')[0];
        var lblFTCCAction  = Ext.ComponentQuery.query('#hdnlblForeignTaxCreditClaimAction')[0];
        var txtFTCC_ASSESSMENTNO = Ext.ComponentQuery.query('#txtFTCC_ASSESSMENTNO')[0];
        hdnFTCCAction.setValue("E");
        lblFTCCAction.setValue("Updating ...कृपया ऐसिसमेनट नं भर्नुहोस् !!! ");
        txtFTCC_ASSESSMENTNO.setDisabled(false);

        //var txtMCC_ASSESSMENTNO = Ext.ComponentQuery.query('#txtMCC_ASSESSMENTNO')[0];
        txtFTCC_ASSESSMENTNO.focus();

    },

    onBtnFTCC_DeleteClick: function(button, e, eOpts) {
        var me = this;
        var hdnFTCCAction = Ext.ComponentQuery.query('#hdnFTCC_Action')[0];
        var lblFTCCAction  = Ext.ComponentQuery.query('#hdnlblForeignTaxCreditClaimAction')[0];
        hdnFTCCAction.setValue("D");
        lblFTCCAction.setValue(" Deleting  ... कृपया ऐसिसमेनट नं भर्नुहोस् !!!");
        //var txtFTCC_ASSESSMENTNO = Ext.ComponentQuery.query('#txtFTCC_ASSESSMENTNO')[0];
        //txtFTCC_ASSESSMENTNO.focus();

    },

    onBtnFTCC_CancelClick: function(button, e, eOpts) {
        var me = this;
        me.ClearForeignTaxCreditClaim();
    },

    onBtnFTCC_submitClick: function(button, e, eOpts) {
        var loadMsg = "";
        var count = 0;
        var errorMsg = "";
        var me = this;
        var form = button.up('form').getForm();
        var action =  Ext.ComponentQuery.query('#hdnFTCC_Action')[0].getValue();





        var txtFTCC_PanNo = Ext.ComponentQuery.query('#txtFTCC_PanNo')[0].getValue(); 
        var ddlFTCCActType = Ext.ComponentQuery.query('#ddlFTCCActType')[0].getValue();
        var txtFTCC_FiscalYear =  Ext.ComponentQuery.query('#txtFTCC_FiscalYear')[0].getValue();
        var txtFTCC_ClainDate = Ext.ComponentQuery.query('#txtFTCC_ClainDate')[0].getValue();
        var hdnFTCCTranNo = Ext.ComponentQuery.query('#hdnFTCCTranNo')[0].getValue();
        var hdnFTCC_Office_Code = Ext.ComponentQuery.query('#hdnFTCC_Office_Code')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#hdnFTCC_Office_Code')[0].getValue();
        var txtSumFtcRemPreviousFy = Ext.ComponentQuery.query('#txtSumFtcRemPreviousFy')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtSumFtcRemPreviousFy')[0].getValue();
        var txtSumFtcPaidCurrentFy = Ext.ComponentQuery.query('#txtSumFtcPaidCurrentFy')[0].getValue() === "" ?null:Ext.ComponentQuery.query('#txtSumFtcPaidCurrentFy')[0].getValue();
        var txtSumFtcUsedCurrentFy = Ext.ComponentQuery.query('#txtSumFtcUsedCurrentFy')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtSumFtcUsedCurrentFy')[0].getValue();



        if(txtFTCC_PanNo === "")
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया स्था . ले . नं . भर्नुहोस् !!!";

        }

        if(ddlFTCCActType === "" || ddlFTCCActType === null)
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया खाताको किसिम  भर्नुहोस् !!!";

        }

        if(txtFTCC_FiscalYear === "" || txtFTCC_FiscalYear === null)
        {

            count++; 
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया आ.ब. छान्नुहोस्!!! ";

        }

        if(count >0)
        {
            msg("WARNING",errorMsg);
            return false;
        }




        /*
        if(action == "E" && Ext.ComponentQuery.query('#dispForeignTaxCreditClaim_submissionNo')[0].getValue()  === "")
        {
        msg("WARNING","Please Enter Assessment No !!!");

        return;
        }

        if(!form.isValid())
        {
        msg("WARNING","Please Fill the required fields !!!");   
        return;

        }
        */
        if(action === "D")
        {

            //------------------------------------------------------
            // NB: Posting Data to Server
            //------------------------------------------------------

            Ext.Ajax.request({
                url:"../Handlers/IncomeTax/D03/DCTBForeignTaxHandler.ashx?method=DeleteDCTBForeignTax" ,
                params:{assessmentNo:Ext.ComponentQuery.query('#dispForeignTaxCreditClaim_submissionNo')[0].getValue()
                },
                success: function ( result, request ) {

                    var obj = Ext.decode(result.responseText);

                    msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);

                    if(obj.success === "false") return;


                    me.ClearForeignTaxCreditClaim();



                },
                failure: function ( result, request ) {

                    var obj = Ext.decode(result.responseText);

                    msg("FAILURE",obj.message);
                    return;
                }

            });


        }

        else
        {
            Ext.Msg.confirm('Confirm Action', 'एकपटक Submit गरिसकेपछि अर्को पटक विवरण फेरि परिवर्तन गर्न पइने छैन। \n के तपाई Submit गर्न चाहनुहन्छ ?', function(btn) {
                if(btn == 'yes'){


                    me.SaveForeignTaxCreditClaim("F");

                    return true;
                }
            }, this);


        }

    },

    onTxtFTCC_ASSESSMENTNOKeypress: function(textfield, e, eOpts) {
        var me=this;
        Ext.getStore('DCTBForeignTaxDetails').loadData([],false);
        var objParam = Ext.ComponentQuery.query('#pnlForeignTaxCreditClaim')[0];

        if(e.keyCode === 13 || e.keyCode === 9)
        {

            var txtFTCC_ASSESSMENTNO = Ext.ComponentQuery.query('#txtFTCC_ASSESSMENTNO')[0].getValue();
            Ext.ComponentQuery.query('#dispForeignTaxCreditClaim_submissionNo')[0].setValue(txtFTCC_ASSESSMENTNO);
            Ext.Ajax.request({
                url: '../Handlers/IncomeTax/D03/DCTBForeignTaxHandler.ashx',
                params: {
                    method:'GetDCTBForeignTax',assessmentNo:txtFTCC_ASSESSMENTNO,
                    id: 1
                },
                success: function(response){
                    /*
                    var obj = Ext.decode( response.responseText);
                    console.log(obj);
                    var dctbForeignTax = obj.root;
                    var taxpayer = dctbForeignTax.Taxpayer;
                    var office = taxpayer.Office;
                    var address = taxpayer.BusinessAddress.Address;
                    */
                    var obj =Ext.decode( response.responseText);
                    var btnFTCC_Save = Ext.ComponentQuery.query("#btnFTCC_Save")[0];
                    var btnFTCC_submit = Ext.ComponentQuery.query("#btnFTCC_submit")[0];
                    var btnFTCC_Delete = Ext.ComponentQuery.query("#btnFTCC_Delete")[0];
                    var btn_AddFTCCDetail = Ext.ComponentQuery.query('#btn_AddFTCCDetail')[0];


                    if(obj.success === "false")
                    {   

                        if(obj.message === "D") 
                        {
                            btnFTCC_Save.setDisabled(true);
                            btnFTCC_submit.setDisabled(true);
                            btnFTCC_Delete.setDisabled(true);
                            btn_AddFTCCDetail.setDisabled(true);
                            this.ReadOnlyControl(objParam);

                            msg("WARNING","This Record is already Deleted !!!");
                            return;            
                        }

                        else
                        {
                            msg("WARNING",obj.message);
                            return;
                        }
                    }



                    var dctbForeignTax = obj.root;
                    var taxpayer = dctbForeignTax.Taxpayer;
                    var office = taxpayer.Office;
                    var address = taxpayer.BusinessAddress.Address;


                    console.log(dctbForeignTax);
                    //Ext.ComponentQuery.query('#hdnFTCC_Office_Code')[0].setValue(office.OfficeCode);
                    Ext.ComponentQuery.query('#ForeignTaxCreditClaim_IROName')[0].setValue(office.OfficeNameNepali);
                    Ext.ComponentQuery.query('#txtFTCC_Name')[0].setValue(taxpayer.Name);
                    Ext.ComponentQuery.query('#txtFTCC_Name')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtFTCC_HouseNo')[0].setValue(address.HouseNo);
                    Ext.ComponentQuery.query('#txtFTCC_HouseNo')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtFTCC_WardNo')[0].setValue(address.WardNo);
                    Ext.ComponentQuery.query('#txtFTCC_WardNo')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtFTCC_ToleName')[0].setValue(address.StreetName);
                    Ext.ComponentQuery.query('#txtFTCC_ToleName')[0].setReadOnly(true);

                    if(address.LocationType == 'MM')
                    {
                        Ext.ComponentQuery.query('#rdl_FTCC_Metro_Mun')[0].setValue(true);
                    }
                    else if(address.LocationType == 'SM')
                    {
                        Ext.ComponentQuery.query('#rdl_FTCC_Sub_Metro_Mun')[0].setValue(true);
                    }
                    else if(address.LocationType == 'MN')
                    {
                        Ext.ComponentQuery.query('#rdl_FTCC_Mun')[0].setValue(true);
                    }
                    else if(address.LocationType == 'VD')
                    {
                        Ext.ComponentQuery.query('#rdl_FTCC_VDC')[0].setValue(true);
                    }

                    Ext.ComponentQuery.query('#txtFTCC_VDCName')[0].setValue(address.VdcTown);
                    Ext.ComponentQuery.query('#txtFTCC_VDCName')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtFTCC_DistrictName')[0].setValue(address.DistrictNameNep);
                    Ext.ComponentQuery.query('#txtFTCC_DistrictName')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtFTCC_Phone')[0].setValue(address.Telephone);
                    Ext.ComponentQuery.query('#txtFTCC_Phone')[0].setReadOnly(true);
                    //Ext.ComponentQuery.query('#txtFTCC_Mobile')[0].setValue(true);
                    Ext.ComponentQuery.query('#txtFTCC_Email')[0].setValue(address.Email);
                    Ext.ComponentQuery.query('#txtFTCC_Email')[0].setReadOnly(true);
                    if(taxpayer.AcctStatus === 'A')
                    Ext.ComponentQuery.query('#FTCC_TpOfficeType')[0].setValue('सक्रिय');


                    //LoadFTCC
                    Ext.ComponentQuery.query('#txtFTCC_PanNo')[0].setValue(dctbForeignTax.PAN);
                    Ext.ComponentQuery.query('#ddlFTCCActType')[0].setValue(dctbForeignTax.AccType);
                    Ext.ComponentQuery.query('#txtFTCC_FiscalYear')[0].setValue(dctbForeignTax.FiscalYear);
                    Ext.ComponentQuery.query('#txtFTCC_ClainDate')[0].setValue(dctbForeignTax.AssessmentDate);
                    Ext.ComponentQuery.query('#hdnFTCCTranNo')[0].setValue(dctbForeignTax.TranNo);
                    Ext.ComponentQuery.query('#hdnFTCC_Office_Code')[0].getValue(dctbForeignTax.OfficeCode);
                    Ext.ComponentQuery.query('#txtSumFtcRemPreviousFy')[0].setValue(dctbForeignTax.TotalFtcRemPreviousFy);
                    Ext.ComponentQuery.query('#txtSumFtcPaidCurrentFy')[0].setValue(dctbForeignTax.TotalFtcPaidCurrentFy);
                    Ext.ComponentQuery.query('#txtSumFtcUsedCurrentFy')[0].setValue(dctbForeignTax.TotalFtcUsedCurrentFy);


                    // LoadFTCC FTCC Details
                    /*
                    var grd = Ext.ComponentQuery.query('#grdForeignTaxCreditClaimDetail')[0];
                    var store  = Ext.getStore('DCTBForeignTaxDetails');
                    store.add(dctbForeignTax.ForeignTaxDetails); 
                    grd.bindStore(store);
                    console.log(store);
                    */

                    var hdnFTCC_Action = Ext.ComponentQuery.query('#hdnFTCC_Action')[0];
                    if(hdnFTCC_Action.getValue() !== "D")
                    hdnFTCC_Action.setValue(dctbForeignTax.Action);

                    var grd = Ext.ComponentQuery.query('#grdForeignTaxCreditClaimDetail')[0];
                    var store  = Ext.getStore('DCTBForeignTaxDetails');
                    // var sum = 0;
                    var  SumFtcRemPreviousFy = 0 ;
                    var  SumFtcPaidCurrentFy = 0 ;
                    var  SumFtcUsedCurrentFy = 0 ;
                    var txtSumFtcRemPreviousFy = Ext.ComponentQuery.query('#txtSumFtcRemPreviousFy')[0];
                    var txtSumFtcPaidCurrentFy = Ext.ComponentQuery.query('#txtSumFtcPaidCurrentFy')[0];
                    var txtSumFtcUsedCurrentFy = Ext.ComponentQuery.query('#txtSumFtcUsedCurrentFy')[0];

                    store.add(dctbForeignTax.ForeignTaxDetails);

                    store.each(function (rec) {     
                        var rAmount1 = rec.get('FtcRemPreviousFy') === ""? null:rec.get('FtcRemPreviousFy');
                        var rAmount2 = rec.get('FtcPaidCurrentFy') === ""? null:rec.get('FtcPaidCurrentFy');
                        var rAmount3 = rec.get('FtcUsedCurrentFy') === ""? null:rec.get('FtcUsedCurrentFy');

                        rec.data.FtcRemPreviousFy = rAmount1;
                        rec.data.FtcPaidCurrentFy = rAmount2;
                        rec.data.FtcUsedCurrentFy = rAmount3;

                        var rAmount4 = (rAmount1 === null)?0:rAmount1;
                        var rAmount5 = (rAmount2 === null)?0:rAmount2;
                        var rAmount6 = (rAmount3 === null)?0:rAmount3;

                        rec.data.FtcRemPreviousFy = rAmount4;
                        rec.data.FtcPaidCurrentFy = rAmount5;
                        rec.data.FtcUsedCurrentFy = rAmount6;

                        if(rec.data.FtcRemPreviousFy !== "" || rec.data.FtcPaidCurrentFy !== ""|| rec.data.FtcUsedCurrentFy !== "")
                        {
                            SumFtcRemPreviousFy = parseFloat(SumFtcRemPreviousFy) + parseFloat(rec.data.FtcRemPreviousFy); 
                            SumFtcPaidCurrentFy = parseFloat(SumFtcPaidCurrentFy) + parseFloat(rec.data.FtcPaidCurrentFy);
                            SumFtcUsedCurrentFy = parseFloat(SumFtcUsedCurrentFy) + parseFloat(rec.data.FtcUsedCurrentFy);
                        }

                    });

                    grd.bindStore(store);
                    //alert(sum);
                    txtSumFtcRemPreviousFy.setValue(SumFtcRemPreviousFy);
                    txtSumFtcPaidCurrentFy.setValue(SumFtcPaidCurrentFy);
                    txtSumFtcUsedCurrentFy.setValue(SumFtcUsedCurrentFy);



                    if(obj.message === "F" || dctbForeignTax.RecordStatus === "F") 
                    {

                        btnFTCC_Delete.setDisabled(true);
                        btnFTCC_Save.setDisabled(true);
                        btnFTCC_submit.setDisabled(true);
                        btn_AddFTCCDetail.setDisabled(true);
                        this.ReadOnlyControl(objParam);

                        msg("WARNING","This Record is already Finalized !!!");

                        return;                
                    }

                },
                failure: function ( result, request ) {
                    Ext.Msg.show({
                        title: 'Failure',
                        msg: 'ERROR OCURRED !!!' ,
                        buttons: Ext.MessageBox.OK,
                        icon:Ext.Msg.ERROR
                    });
                }
            });                    

        }

    },

    onTxtFtcUsedCurrentFyChange: function(field, newValue, oldValue, eOpts) {
        this.TotFTCC();
    },

    onTxtFtcRemPreviousFyChange: function(field, newValue, oldValue, eOpts) {
        this.TotFTCC();
    },

    onTxtFtcPaidCurrentFyChange: function(field, newValue, oldValue, eOpts) {
        this.TotFTCC();
    },

    onPnlForeignTaxCreditClaimAfterRender: function(component, eOpts) {

        var objParam = Ext.ComponentQuery.query('#pnlForeignTaxCreditClaim')[0];

        if(objParam.extraParam)
        {
            var param = objParam.extraParam.params;
            var tranNo = param.tranNo;


            this.LoadForeignTaxCreditClaimByTranNo(tranNo);
            this.ReadOnlyControl(objParam);




            return;
        }
    },

    SaveForeignTaxCreditClaim: function(recordStatus) {
        var me = this;
        var loadMsg = "";
        var count = 0;
        var errorMsg = "";

        var txtFTCC_PanNo = Ext.ComponentQuery.query('#txtFTCC_PanNo')[0].getValue(); 
        var ddlFTCCActType = Ext.ComponentQuery.query('#ddlFTCCActType')[0].getValue();
        var txtFTCC_FiscalYear =  Ext.ComponentQuery.query('#txtFTCC_FiscalYear')[0].getValue();
        var txtFTCC_ClainDate = Ext.ComponentQuery.query('#txtFTCC_ClainDate')[0].getValue();
        var hdnFTCCTranNo = Ext.ComponentQuery.query('#hdnFTCCTranNo')[0].getValue();
        var hdnFTCC_Office_Code = Ext.ComponentQuery.query('#hdnFTCC_Office_Code')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#hdnFTCC_Office_Code')[0].getValue();
        var txtSumFtcRemPreviousFy = Ext.ComponentQuery.query('#txtSumFtcRemPreviousFy')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtSumFtcRemPreviousFy')[0].getValue();
        var txtSumFtcPaidCurrentFy = Ext.ComponentQuery.query('#txtSumFtcPaidCurrentFy')[0].getValue() === "" ?null:Ext.ComponentQuery.query('#txtSumFtcPaidCurrentFy')[0].getValue();
        var txtSumFtcUsedCurrentFy = Ext.ComponentQuery.query('#txtSumFtcUsedCurrentFy')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtSumFtcUsedCurrentFy')[0].getValue();
        var action = Ext.ComponentQuery.query('#hdnFTCC_Action')[0].getValue();


        if(txtFTCC_PanNo === "" || txtFTCC_PanNo === null)
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया स्था . ले . नं . भर्नुहोस् !!!";

        }

        if(ddlFTCCActType === "" || ddlFTCCActType === null)
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया खाताको किसिम  भर्नुहोस् !!!";

        }

        if(txtFTCC_FiscalYear === "" || txtFTCC_FiscalYear === null)
        {

            count++; 
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया आ.ब. छान्नुहोस्!!! ";

        }

        if(count >0)
        {
            msg("WARNING",errorMsg);
            return false;
        }


        if(action == "E")
        {
            loadMsg = "Updating ...";
        }
        else
        {
            loadMsg = "Saving ...";
        }


        var strDCTBForeignTaxDetails = Ext.getStore('DCTBForeignTaxDetails');

        strDCTBForeignTaxDetails.clearFilter();

        var dCTBForeignTaxDetails = "";
        var dCTBForeignTax = "";


        if(strDCTBForeignTaxDetails.getCount() > 0)
        {
            dCTBForeignTaxDetails = getJson(strDCTBForeignTaxDetails); 

            strDCTBForeignTaxDetails.filter(function(item){
                return item.get("Action")!= 'D';
            });
        }

        var SubmissionNo={
            SubmissionNumber:'',
            Username:'',
            Password:'',
            ContactNo:'',
            Emailid:'',
            submittedFor:'',
            SubmittedYN:'N',
            SubmittedDate:'',
            TranNo:'0',
            Address:'',
            RegOffice:'',
            Action:'A',
            PAN:txtFTCC_PanNo,
            FiscalYear:txtFTCC_FiscalYear
        };


        dCTBForeignTax = { 
            AssessmentNo:Ext.ComponentQuery.query('#dispForeignTaxCreditClaim_submissionNo')[0].getValue()!==null?Ext.ComponentQuery.query('#dispForeignTaxCreditClaim_submissionNo')[0].getValue():0,
            PAN:txtFTCC_PanNo,
            AccType:ddlFTCCActType,     
            FiscalYear:txtFTCC_FiscalYear, 
            ForCrCl:null, 
            OfficeCode:hdnFTCC_Office_Code,
            AssessmentDate:txtFTCC_ClainDate,  
            TotalFtcRemPreviousFy:txtSumFtcRemPreviousFy !== ""?txtSumFtcRemPreviousFy:null, 
            TotalFtcPaidCurrentFy:txtSumFtcPaidCurrentFy !== ""?txtSumFtcPaidCurrentFy:null, 
            TotalFtcUsedCurrentFy:txtSumFtcUsedCurrentFy !== ""?txtSumFtcUsedCurrentFy:null,
            RecordStatus:recordStatus,
            Terminal:'',
            TranDate:'',
            UserName:'',
            TranNo:hdnFTCCTranNo !== ""?hdnFTCCTranNo:null,
            Source:'FTCC',
            Action:action!== ""?action:"",
            ForeignTaxDetails:dCTBForeignTaxDetails !== ""?dCTBForeignTaxDetails:null,
            SubmissionNo:SubmissionNo
        };

        var waitSave = watiMsg(loadMsg);

        //console.log();

        //------------------------------------------------------
        // NB: Posting Data to Server
        //------------------------------------------------------

        Ext.Ajax.request({
            url:"../Handlers/IncomeTax/D03/DCTBForeignTaxHandler.ashx?method=SaveDCTBForeignTax",
            params:{dCTBForeignTax:JSON.stringify(dCTBForeignTax)},
            success: function ( result, request ) {

                waitSave.hide();

                var obj = Ext.decode(result.responseText);
                var dctbForeignTax=obj.root;
                msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);

                if(obj.success === "false") return;
                me.ClearForeignTaxCreditClaim();



            },
            failure: function ( result, request ) {

                waitSave.hide();

                var errMsg = "Error in " + loadMsg;

                msg("FAILURE",errMsg);
                return;
            }

        });

    },

    ClearForeignTaxCreditClaim: function() {

        Ext.ComponentQuery.query('#txtFTCC_ASSESSMENTNO')[0].setValue("");
        Ext.ComponentQuery.query('#dispForeignTaxCreditClaim_submissionNo')[0].setValue("");


        Ext.ComponentQuery.query('#txtFTCC_PanNo')[0].setValue(""); 
        Ext.ComponentQuery.query('#txtFTCC_PanNo')[0].clearInvalid(); 
        Ext.ComponentQuery.query('#ddlFTCCActType')[0].setValue("");
        Ext.ComponentQuery.query('#ddlFTCCActType')[0].clearInvalid("");
        Ext.ComponentQuery.query('#txtFTCC_FiscalYear')[0].setValue("");
        Ext.ComponentQuery.query('#txtFTCC_FiscalYear')[0].clearInvalid("");
        Ext.ComponentQuery.query('#txtFTCC_ClainDate')[0].setValue("");
        Ext.ComponentQuery.query('#txtFTCC_ClainDate')[0].clearInvalid("");
        Ext.ComponentQuery.query('#hdnFTCCTranNo')[0].setValue("");
        Ext.ComponentQuery.query('#hdnFTCC_Office_Code')[0].setValue("");
        Ext.ComponentQuery.query('#txtSumFtcRemPreviousFy')[0].setValue("");
        Ext.ComponentQuery.query('#txtSumFtcPaidCurrentFy')[0].setValue(""); 
        Ext.ComponentQuery.query('#txtSumFtcUsedCurrentFy')[0].setValue("");
        Ext.ComponentQuery.query('#hdnFTCC_Action')[0].setValue("");
        Ext.ComponentQuery.query('#hdnlblForeignTaxCreditClaimAction')[0].setValue("");

        //claer Taxpayer Info
        Ext.ComponentQuery.query('#hdnFTCC_Office_Code')[0].setValue("");
        Ext.ComponentQuery.query('#ForeignTaxCreditClaim_IROName')[0].setValue("");
        Ext.ComponentQuery.query('#txtFTCC_Name')[0].setValue("");
        Ext.ComponentQuery.query('#txtFTCC_HouseNo')[0].setValue("");
        Ext.ComponentQuery.query('#txtFTCC_WardNo')[0].setValue("");
        Ext.ComponentQuery.query('#txtFTCC_ToleName')[0].setValue("");
        Ext.ComponentQuery.query('#rdl_FTCC_Metro_Mun')[0].setValue(false);
        Ext.ComponentQuery.query('#rdl_FTCC_Sub_Metro_Mun')[0].setValue(false);
        Ext.ComponentQuery.query('#rdl_FTCC_Mun')[0].setValue(false);
        Ext.ComponentQuery.query('#rdl_FTCC_VDC')[0].setValue(false);
        Ext.ComponentQuery.query('#txtFTCC_VDCName')[0].setValue("");
        Ext.ComponentQuery.query('#txtFTCC_DistrictName')[0].setValue("");
        Ext.ComponentQuery.query('#txtFTCC_Phone')[0].setValue("");
        //Ext.ComponentQuery.query('#txtFTCC_Mobile')[0].setValue(true);
        Ext.ComponentQuery.query('#txtFTCC_Email')[0].setValue("");
        Ext.ComponentQuery.query('#FTCC_TpOfficeType')[0].setValue("");

        Ext.getStore('DCTBForeignTaxDetails').loadData([],false);

        var btnFTCC_Save = Ext.ComponentQuery.query("#btnFTCC_Save")[0];
        var btnFTCC_submit = Ext.ComponentQuery.query("#btnFTCC_submit")[0];
        var btnFTCC_Delete = Ext.ComponentQuery.query("#btnFTCC_Delete")[0];
        btnFTCC_Delete.setDisabled(false);
        btnFTCC_Save.setDisabled(false);
        btnFTCC_submit.setDisabled(false);
















    },

    TotFTCC: function() {
        /*


        //Parent TextBox
        var txtSumFtcRemPreviousFy = Ext.ComponentQuery.query('#txtSumFtcRemPreviousFy')[0];
        var txtSumFtcPaidCurrentFy = Ext.ComponentQuery.query('#txtSumFtcPaidCurrentFy')[0];
        var txtSumFtcUsedCurrentFy = Ext.ComponentQuery.query('#txtSumFtcUsedCurrentFy')[0];

        //Child TextBox
        var txtFtcRemPreviousFy = Ext.ComponentQuery.query('#txtFtcRemPreviousFy')[0].getValue();
        var txtFtcPaidCurrentFy = Ext.ComponentQuery.query('#txtFtcPaidCurrentFy')[0].getValue();
        var txtFtcUsedCurrentFy = Ext.ComponentQuery.query('#txtFtcUsedCurrentFy')[0].getValue();

        var grdIn = Ext.ComponentQuery.query('#grdForeignTaxCreditClaimDetail')[0];
        var store = Ext.getStore('DCTBForeignTaxDetails');

        var totFtcRemPreviousFy = 0; 
        var totFtcPaidCurrentFy = 0;
        var totFtcUsedCurrentFy = 0;
        store.each(function(rec,idx){

            var ftcRemPreviousFy  = (rec.data.FtcRemPreviousFy === "" || rec.data.FtcRemPreviousFy === null)?0:rec.data.FtcRemPreviousFy;
            var ftcPaidCurrentFy  = (rec.data.FtcPaidCurrentFy === "" || rec.data.FtcPaidCurrentFy === null)?0:rec.data.FtcPaidCurrentFy;
            var ftcUsedCurrentFy  = (rec.data.FtcUsedCurrentFy === "" || rec.data.FtcUsedCurrentFy === null)?0:rec.data.FtcUsedCurrentFy;

            totFtcRemPreviousFy = parseFloat(ftcRemPreviousFy) + parseFloat(totFtcRemPreviousFy);
            totFtcPaidCurrentFy = parseFloat(ftcPaidCurrentFy) + parseFloat(totFtcPaidCurrentFy);
            totFtcUsedCurrentFy = parseFloat(ftcUsedCurrentFy) + parseFloat(totFtcUsedCurrentFy);

        });

        txtFtcRemPreviousFy = (txtFtcRemPreviousFy === "" ||txtFtcRemPreviousFy === null)?0:txtFtcRemPreviousFy;
        txtFtcPaidCurrentFy = (txtFtcPaidCurrentFy === "" ||txtFtcPaidCurrentFy === null)?0:txtFtcPaidCurrentFy;
        txtFtcUsedCurrentFy = (txtFtcUsedCurrentFy === "" ||txtFtcUsedCurrentFy === null)?0:txtFtcUsedCurrentFy;


        var grandTotFtcRemPreviousFy = 0; 
        var grandTotFtcPaidCurrentFy = 0;
        var grandTotFtcUsedCurrentFy = 0;

        grandTotFtcRemPreviousFy = parseFloat(totFtcRemPreviousFy) + parseFloat(txtFtcRemPreviousFy);
        grandTotFtcPaidCurrentFy = parseFloat(totFtcPaidCurrentFy) + parseFloat(txtFtcPaidCurrentFy);
        grandTotFtcUsedCurrentFy = parseFloat(totFtcUsedCurrentFy) + parseFloat(txtFtcUsedCurrentFy);

        grdIn.bindStore(store);
        txtSumFtcRemPreviousFy.setValue(grandTotFtcRemPreviousFy); 
        txtSumFtcPaidCurrentFy.setValue(grandTotFtcPaidCurrentFy);  
        txtSumFtcUsedCurrentFy.setValue(grandTotFtcUsedCurrentFy);
        */

        var grd = Ext.ComponentQuery.query('#grdForeignTaxCreditClaimDetail')[0];
        var store = grd.getStore();
        var selectedRow = grd.getSelectionModel();
        var record = grd.getSelectionModel().getSelection()[0];

        var txtFtcRemPreviousFy = Ext.ComponentQuery.query('#txtFtcRemPreviousFy')[0].getValue();
        var txtFtcPaidCurrentFy = Ext.ComponentQuery.query('#txtFtcPaidCurrentFy')[0].getValue();
        var txtFtcUsedCurrentFy = Ext.ComponentQuery.query('#txtFtcUsedCurrentFy')[0].getValue();

        var finAmount1 = Ext.ComponentQuery.query('#txtSumFtcRemPreviousFy')[0];
        var finAmount2 = Ext.ComponentQuery.query('#txtSumFtcPaidCurrentFy')[0];
        var finAmount3 = Ext.ComponentQuery.query('#txtSumFtcUsedCurrentFy')[0];


        var mAmount1 = (txtFtcRemPreviousFy === "")?0:txtFtcRemPreviousFy;
        var mAmount2 = (txtFtcPaidCurrentFy === "")?0:txtFtcPaidCurrentFy;
        var mAmount3 = (txtFtcUsedCurrentFy === "")?0:txtFtcUsedCurrentFy;

        var totAmount1 = parseFloat(mAmount1);
        var totAmount2 = parseFloat(mAmount2);
        var totAmount3 = parseFloat(mAmount3);

        Ext.ComponentQuery.query('#txtFtcRemPreviousFy')[0].setValue(totAmount1);
        Ext.ComponentQuery.query('#txtFtcPaidCurrentFy')[0].setValue(totAmount2);
        Ext.ComponentQuery.query('#txtFtcUsedCurrentFy')[0].setValue(totAmount3);

        finAmount1.setValue("");
        finAmount2.setValue("");
        finAmount3.setValue("");

        //This code sum numbers in certain column
        var sum1 = 0;
        var sum2 = 0;
        var sum3 = 0;

        var rowIdx = store.indexOf(record);
        var idx = 0;


        store.each(function (rec) {     

            if(rec.get('FtcRemPreviousFy') !=="" && rowIdx !== idx)
            {
                sum1 = parseFloat(sum1) + parseFloat(rec.get('FtcRemPreviousFy')); 
                sum2 = parseFloat(sum2) + parseFloat(rec.get('FtcPaidCurrentFy')); 
                sum3 = parseFloat(sum3) + parseFloat(rec.get('FtcUsedCurrentFy')); 
            }

            idx++;


        });

        var overallTot1 = parseFloat(sum1) + parseFloat(totAmount1);
        var overallTot2 = parseFloat(sum2) + parseFloat(totAmount2);
        var overallTot3 = parseFloat(sum3) + parseFloat(totAmount3);

        finAmount1.setValue(overallTot1);
        finAmount2.setValue(overallTot2);
        finAmount3.setValue(overallTot3);































    },

    ForeignTaxCreditClaimTaxpayerInfo: function() {
        var offCode = Ext.ComponentQuery.query('#ForeignTaxCreditClaimLoginOffice')[0].getValue();
        var pan = Ext.ComponentQuery.query('#txtFTCC_PanNo')[0].getValue();
        var acctType = Ext.ComponentQuery.query('#ddlFTCCActType')[0].getValue();
        LoadTaxpayerInfoWithValidPan(pan,acctType,function(data){
            var taxpayer = data.root.Taxpayer;
            var address = taxpayer.BusinessAddress.Address;
            var office = taxpayer.Office;

            if(taxpayer.AcctStatus === "D")
            {
                msg("WARNING","PAN is Deactivated !!!");
                return;
            }
            if(offCode != office.OfficeCode)
            {
                msg("WARNING","PAN is not Registered in this office !!!");

                return;
            }

            Ext.ComponentQuery.query('#txtFTCC_PanNo')[0].setValue(pan);
            //Ext.ComponentQuery.query('#txtFTCC_PanNo')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#ddlFTCCActType')[0].setValue(acctType);
            // Ext.ComponentQuery.query('#ddlFTCCActType')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#hdnFTCC_Office_Code')[0].setValue(office.OfficeCode);
            Ext.ComponentQuery.query('#ForeignTaxCreditClaim_IROName')[0].setValue(office.OfficeNameNepali);
            Ext.ComponentQuery.query('#txtFTCC_Name')[0].setValue(taxpayer.Name);
            Ext.ComponentQuery.query('#txtFTCC_Name')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtFTCC_HouseNo')[0].setValue(address.HouseNo);
            Ext.ComponentQuery.query('#txtFTCC_HouseNo')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtFTCC_WardNo')[0].setValue(address.WardNo);
            Ext.ComponentQuery.query('#txtFTCC_WardNo')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtFTCC_ToleName')[0].setValue(address.StreetName);
            Ext.ComponentQuery.query('#txtFTCC_ToleName')[0].setReadOnly(true);

            if(address.LocationType=='MM')
            {
                Ext.ComponentQuery.query('#rdl_FTCC_Metro_Mun')[0].setValue(true);
            }
            else if(address.LocationType=='SM')
            {
                Ext.ComponentQuery.query('#rdl_FTCC_Sub_Metro_Mun')[0].setValue(true);
            }
            else if(address.LocationType=='MN')
            {
                Ext.ComponentQuery.query('#rdl_FTCC_Mun')[0].setValue(true);
            }
            else if(address.LocationType=='VD')
            {
                Ext.ComponentQuery.query('#rdl_FTCC_VDC')[0].setValue(true);
            }

            Ext.ComponentQuery.query('#txtFTCC_VDCName')[0].setValue(address.VdcTown);
            Ext.ComponentQuery.query('#txtFTCC_VDCName')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtFTCC_DistrictName')[0].setValue(address.DistrictNameNep);
            Ext.ComponentQuery.query('#txtFTCC_DistrictName')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtFTCC_Phone')[0].setValue(address.Telephone);
            Ext.ComponentQuery.query('#txtFTCC_Phone')[0].setReadOnly(true);
            //Ext.ComponentQuery.query('#txtFTCC_Mobile')[0].setValue(true);
            Ext.ComponentQuery.query('#txtFTCC_Email')[0].setValue(address.Email);
            Ext.ComponentQuery.query('#txtFTCC_Email')[0].setReadOnly(true);
            if(taxpayer.AcctStatus==='A')
            Ext.ComponentQuery.query('#FTCC_TpOfficeType')[0].setValue('सक्रिय');




        });
    },

    childValid: function() {
        /*
        var TotaltxtSumFtcRemPreviousFy = Ext.ComponentQuery.query('#txtSumFtcRemPreviousFy')[0];
        var TotaltxtSumFtcPaidCurrentFy = Ext.ComponentQuery.query('#txtSumFtcPaidCurrentFy')[0];
        var TotaltxtSumFtcUsedCurrentFy = Ext.ComponentQuery.query('#txtSumFtcUsedCurrentFy')[0];

        var TotalSumFtcRemPreviousFyAmt = TotaltxtSumFtcRemPreviousFy.getValue()!==''?TotaltxtSumFtcRemPreviousFy.getValue():0;
        var TotalSumFtcPaidCurrentFyAmt = TotaltxtSumFtcPaidCurrentFy.getValue()!==''?TotaltxtSumFtcPaidCurrentFy.getValue():0;
        var TotalSumFtcUsedCurrentFyAmt = TotaltxtSumFtcUsedCurrentFy.getValue()!==''?TotaltxtSumFtcUsedCurrentFy.getValue():0;


        var index = e.rowIdx;
        var items = e.store.data.items;
        var newRecord = editor.context.newValues;
        var count = 0;
        var message = "";

        if(newRecord.CountryCode === '' )
        {
        count++;
        message = message + count +")" + "आय स्रोतको मुलुक छान्नुहोस्  <br/>" ;   

        }



        if(newRecord.FtcRemPreviousFy !== '')
        {

        if(isNaN(newRecord.FtcRemPreviousFy))
        {
        count++;
        message = message + count +")"+"  गलत रकम भयो!!!.<br/>" ;  
        }
        else
        {
        TotalSumFtcRemPreviousFyAmt = Number(TotalSumFtcRemPreviousFyAmt)+ Number(newRecord.FtcRemPreviousFy);

        }
        }
        else
        {
        count++;
        message = message + count +")"+"गत आयबर्ष सम्मको मिलान गर्न बांकी विदेशमा तिरेको कर भर्नुहोस् !!!<br/>" ;   

        }

        if(newRecord.FtcUsedCurrentFy !== '')
        {

        if(isNaN(newRecord.FtcUsedCurrentFy))
        {
        count++;
        message = message + count +")"+"  गलत रकम भयो!!!.<br/>" ;  
        }
        else
        {
        TotalSumFtcUsedCurrentFyAmt = Number(TotalSumFtcUsedCurrentFyAmt)+ Number(newRecord.FtcUsedCurrentFy);

        }
        }
        else
        {
        count++;
        message = message + count +")"+" यस आयबर्षमा विदेशी कर दावी भर्नुहोस्!!!<br/>" ;   

        }

        if(newRecord.FtcPaidCurrentFy !== '')
        {

        if(isNaN(newRecord.FtcPaidCurrentFy))
        {
        count++;
        message = message + count +")"+"  गलत रकम भयो!!!.<br/>" ;  
        }
        else
        {
        TotalSumFtcPaidCurrentFyAmt = Number(TotalSumFtcPaidCurrentFyAmt)+ Number(newRecord.FtcPaidCurrentFy);

        }
        }
        else
        {
        count++;
        message = message + count +")"+" यस आयबर्षमा विदेशमा तिरेको कर भर्नुहोस् !!!<br/>" ;   

        }


        e.cancel = count>0;

        if(e.cancel)
        {
        Ext.MessageBox.alert('Warning',message);
        }
        else
        {
        items[index].data.Action = newRecord.Action === ''?'':'E';

        }

        TotaltxtSumFtcRemPreviousFy.setValue(TotalSumFtcRemPreviousFyAmt);
        TotaltxtSumFtcPaidCurrentFy.setValue(TotalSumFtcPaidCurrentFyAmt);
        TotaltxtSumFtcUsedCurrentFy.setValue(TotalSumFtcUsedCurrentFyAmt);


        */

























    },

    LoadForeignTaxCreditClaimByTranNo: function(tranNo) {
        var me=this;
        Ext.getStore('DCTBForeignTaxDetails').loadData([],false);

        //var txtFTCC_ASSESSMENTNO = Ext.ComponentQuery.query('#txtFTCC_ASSESSMENTNO')[0].getValue();
        //Ext.ComponentQuery.query('#dispForeignTaxCreditClaim_submissionNo')[0].setValue(txtFTCC_ASSESSMENTNO);
        Ext.Ajax.request({
            url: '../Handlers/IncomeTax/D03/DCTBForeignTaxHandler.ashx',
            params: {
                method:'GetDCTBForeignTaxByTranNo',tranNo:tranNo,
                id: 1
            },
            success: function(response){
                /*
                var obj = Ext.decode( response.responseText);
                console.log(obj);
                var dctbForeignTax = obj.root;
                var taxpayer = dctbForeignTax.Taxpayer;
                var office = taxpayer.Office;
                var address = taxpayer.BusinessAddress.Address;
                */
                var obj =Ext.decode( response.responseText);
                var btnFTCC_Save = Ext.ComponentQuery.query("#btnFTCC_Save")[0];
                var btnFTCC_submit = Ext.ComponentQuery.query("#btnFTCC_submit")[0];
                var btnFTCC_Delete = Ext.ComponentQuery.query("#btnFTCC_Delete")[0];
                var btn_AddFTCCDetail = Ext.ComponentQuery.query('#btn_AddFTCCDetail')[0];
                var cntFTCC_button = Ext.ComponentQuery.query('#cntFTCC_button')[0];


                if(obj.success === "false")
                {   

                    if(obj.message === "D") 
                    {
                        btnFTCC_Save.setDisabled(true);
                        btnFTCC_submit.setDisabled(true);
                        btnFTCC_Delete.setDisabled(true);
                        btn_AddFTCCDetail.setDisabled(true);
                        cntFTCC_button.setDisabled(true);
                        msg("WARNING","This Record is already Deleted !!!");
                        return;            
                    }

                    else
                    {
                        msg("WARNING",obj.message);
                        return;
                    }
                }



                var dctbForeignTax = obj.root;
                var taxpayer = dctbForeignTax.Taxpayer;
                var office = taxpayer.Office;
                var address = taxpayer.BusinessAddress.Address;


                console.log(dctbForeignTax);
                //Ext.ComponentQuery.query('#hdnFTCC_Office_Code')[0].setValue(office.OfficeCode);
                Ext.ComponentQuery.query('#ForeignTaxCreditClaim_IROName')[0].setValue(office.OfficeNameNepali);
                Ext.ComponentQuery.query('#txtFTCC_Name')[0].setValue(taxpayer.Name);
                Ext.ComponentQuery.query('#txtFTCC_Name')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#txtFTCC_HouseNo')[0].setValue(address.HouseNo);
                Ext.ComponentQuery.query('#txtFTCC_HouseNo')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#txtFTCC_WardNo')[0].setValue(address.WardNo);
                Ext.ComponentQuery.query('#txtFTCC_WardNo')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#txtFTCC_ToleName')[0].setValue(address.StreetName);
                Ext.ComponentQuery.query('#txtFTCC_ToleName')[0].setReadOnly(true);

                if(address.LocationType == 'MM')
                {
                    Ext.ComponentQuery.query('#rdl_FTCC_Metro_Mun')[0].setValue(true);
                }
                else if(address.LocationType == 'SM')
                {
                    Ext.ComponentQuery.query('#rdl_FTCC_Sub_Metro_Mun')[0].setValue(true);
                }
                else if(address.LocationType == 'MN')
                {
                    Ext.ComponentQuery.query('#rdl_FTCC_Mun')[0].setValue(true);
                }
                else if(address.LocationType == 'VD')
                {
                    Ext.ComponentQuery.query('#rdl_FTCC_VDC')[0].setValue(true);
                }

                Ext.ComponentQuery.query('#txtFTCC_VDCName')[0].setValue(address.VdcTown);
                Ext.ComponentQuery.query('#txtFTCC_VDCName')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#txtFTCC_DistrictName')[0].setValue(address.DistrictNameNep);
                Ext.ComponentQuery.query('#txtFTCC_DistrictName')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#txtFTCC_Phone')[0].setValue(address.Telephone);
                Ext.ComponentQuery.query('#txtFTCC_Phone')[0].setReadOnly(true);
                //Ext.ComponentQuery.query('#txtFTCC_Mobile')[0].setValue(true);
                Ext.ComponentQuery.query('#txtFTCC_Email')[0].setValue(address.Email);
                Ext.ComponentQuery.query('#txtFTCC_Email')[0].setReadOnly(true);
                if(taxpayer.AcctStatus === 'A')
                Ext.ComponentQuery.query('#FTCC_TpOfficeType')[0].setValue('सक्रिय');


                //LoadFTCC
                Ext.ComponentQuery.query('#txtFTCC_PanNo')[0].setValue(dctbForeignTax.PAN);
                Ext.ComponentQuery.query('#ddlFTCCActType')[0].setValue(dctbForeignTax.AccType);
                Ext.ComponentQuery.query('#txtFTCC_FiscalYear')[0].setValue(dctbForeignTax.FiscalYear);
                Ext.ComponentQuery.query('#txtFTCC_ClainDate')[0].setValue(dctbForeignTax.AssessmentDate);
                Ext.ComponentQuery.query('#hdnFTCCTranNo')[0].setValue(dctbForeignTax.TranNo);
                Ext.ComponentQuery.query('#hdnFTCC_Office_Code')[0].getValue(dctbForeignTax.OfficeCode);
                Ext.ComponentQuery.query('#txtSumFtcRemPreviousFy')[0].setValue(dctbForeignTax.TotalFtcRemPreviousFy);
                Ext.ComponentQuery.query('#txtSumFtcPaidCurrentFy')[0].setValue(dctbForeignTax.TotalFtcPaidCurrentFy);
                Ext.ComponentQuery.query('#txtSumFtcUsedCurrentFy')[0].setValue(dctbForeignTax.TotalFtcUsedCurrentFy);


                // LoadFTCC FTCC Details
                /*
                var grd = Ext.ComponentQuery.query('#grdForeignTaxCreditClaimDetail')[0];
                var store  = Ext.getStore('DCTBForeignTaxDetails');
                store.add(dctbForeignTax.ForeignTaxDetails); 
                grd.bindStore(store);
                console.log(store);
                */

                var hdnFTCC_Action = Ext.ComponentQuery.query('#hdnFTCC_Action')[0];
                if(hdnFTCC_Action.getValue() !== "D")
                hdnFTCC_Action.setValue(dctbForeignTax.Action);
                Ext.getStore('DCTBForeignTaxDetails').loadData([],false);
                var grd = Ext.ComponentQuery.query('#grdForeignTaxCreditClaimDetail')[0];
                var store  = Ext.getStore('DCTBForeignTaxDetails');
                // var sum = 0;
                var  SumFtcRemPreviousFy = 0 ;
                var  SumFtcPaidCurrentFy = 0 ;
                var  SumFtcUsedCurrentFy = 0 ;
                var txtSumFtcRemPreviousFy = Ext.ComponentQuery.query('#txtSumFtcRemPreviousFy')[0];
                var txtSumFtcPaidCurrentFy = Ext.ComponentQuery.query('#txtSumFtcPaidCurrentFy')[0];
                var txtSumFtcUsedCurrentFy = Ext.ComponentQuery.query('#txtSumFtcUsedCurrentFy')[0];

                store.add(dctbForeignTax.ForeignTaxDetails);

                store.each(function (rec) {     
                    var rAmount1 = rec.get('FtcRemPreviousFy') === ""? null:rec.get('FtcRemPreviousFy');
                    var rAmount2 = rec.get('FtcPaidCurrentFy') === ""? null:rec.get('FtcPaidCurrentFy');
                    var rAmount3 = rec.get('FtcUsedCurrentFy') === ""? null:rec.get('FtcUsedCurrentFy');

                    rec.data.FtcRemPreviousFy = rAmount1;
                    rec.data.FtcPaidCurrentFy = rAmount2;
                    rec.data.FtcUsedCurrentFy = rAmount3;

                    var rAmount4 = (rAmount1 === null)?0:rAmount1;
                    var rAmount5 = (rAmount2 === null)?0:rAmount2;
                    var rAmount6 = (rAmount3 === null)?0:rAmount3;

                    rec.data.FtcRemPreviousFy = rAmount4;
                    rec.data.FtcPaidCurrentFy = rAmount5;
                    rec.data.FtcUsedCurrentFy = rAmount6;

                    if(rec.data.FtcRemPreviousFy !== "" || rec.data.FtcPaidCurrentFy !== ""|| rec.data.FtcUsedCurrentFy !== "")
                    {
                        SumFtcRemPreviousFy = parseFloat(SumFtcRemPreviousFy) + parseFloat(rec.data.FtcRemPreviousFy); 
                        SumFtcPaidCurrentFy = parseFloat(SumFtcPaidCurrentFy) + parseFloat(rec.data.FtcPaidCurrentFy);
                        SumFtcUsedCurrentFy = parseFloat(SumFtcUsedCurrentFy) + parseFloat(rec.data.FtcUsedCurrentFy);
                    }

                });

                grd.bindStore(store);
                //alert(sum);
                txtSumFtcRemPreviousFy.setValue(SumFtcRemPreviousFy);
                txtSumFtcPaidCurrentFy.setValue(SumFtcPaidCurrentFy);
                txtSumFtcUsedCurrentFy.setValue(SumFtcUsedCurrentFy);



                if(obj.message === "F" || dctbForeignTax.RecordStatus === "F") 
                {

                    btnFTCC_Delete.setDisabled(true);
                    btnFTCC_Save.setDisabled(true);
                    btnFTCC_submit.setDisabled(true);
                    btn_AddFTCCDetail.setDisabled(true);
                    cntFTCC_button.setDisabled(true);
                    msg("WARNING","This Record is already Finalized !!!");

                    return;                
                }

            },
            failure: function ( result, request ) {
                Ext.Msg.show({
                    title: 'Failure',
                    msg: 'ERROR OCURRED !!!' ,
                    buttons: Ext.MessageBox.OK,
                    icon:Ext.Msg.ERROR
                });
            }
        });                    



    },

    ReadOnlyControl: function( ParentName ) {
        ParentName.query('.field,.combo').forEach(function(c){c.setReadOnly(true);});
        ParentName.query('.grid').forEach(function(c){ c.on('beforeedit', function(editor, e) { return false;});});
    },

    init: function(application) {
        this.control({
            "#ddlFTCCActType": {
                change: this.onDdlFTCCActTypeChange
            },
            "#btn_AddFTCCDetail": {
                click: this.onBtn_AddFTCCDetailClick
            },
            "#btnFTCC_Save": {
                click: this.onBtnFTCC_SaveClick
            },
            "#grdForeignTaxCreditClaimDetail": {
                beforerender: this.onGrdForeignTaxCreditClaimDetailBeforeRender
            },
            "#btnFTCC_Edit": {
                click: this.onBtnFTCC_EditClick
            },
            "#btnFTCC_Delete": {
                click: this.onBtnFTCC_DeleteClick
            },
            "#btnFTCC_Cancel": {
                click: this.onBtnFTCC_CancelClick
            },
            "#btnFTCC_submit": {
                click: this.onBtnFTCC_submitClick
            },
            "#txtFTCC_ASSESSMENTNO": {
                keypress: this.onTxtFTCC_ASSESSMENTNOKeypress
            },
            "#txtFtcUsedCurrentFy": {
                change: this.onTxtFtcUsedCurrentFyChange
            },
            "#txtFtcRemPreviousFy": {
                change: this.onTxtFtcRemPreviousFyChange
            },
            "#txtFtcPaidCurrentFy": {
                change: this.onTxtFtcPaidCurrentFyChange
            },
            "#pnlForeignTaxCreditClaim": {
                afterrender: this.onPnlForeignTaxCreditClaimAfterRender
            }
        });
    }

});
