/*
 * File: app/controller/PublicClientEntry.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.PublicClientEntry', {
    extend: 'Ext.app.Controller',

    stores: [
        'EmployeeSearchShortStore',
        'OccupationStore',
        'CasteDetailStore',
        'ReferenceShortStore',
        'GenderRefShortStore',
        'AccForRefShortStore',
        'NomineeRelationRefShortStore',
        'MinorRelationRefShortStore',
        'MemberCodeShortStore',
        'GroupMemberStore',
        'PublicClientEntrySearchStore'
    ],

    onChkGroupBasedClientChange: function(field, newValue, oldValue, eOpts) {
        var chkGrpBasedClient = Ext.ComponentQuery.query('#chkGrpBasedClient')[0].getValue()?"Y":"N";
        if(chkGrpBasedClient==='Y'){
            Ext.ComponentQuery.query('#txtClientNo')[0].show();
        }

        else{
            Ext.ComponentQuery.query('#txtClientNo')[0].hide();
        }
    },

    onTxtEmpCodeAfterRender: function(component, eOpts) {
        component.getEl().on('dblclick', function(){
             var winPopup = Ext.create('MyApp.view.SelectEmpPopup',{

                });

                winPopup.extraParam={param:null};
                winPopup.show();
          });

    },

    onChkMinorChange: function(field, newValue, oldValue, eOpts) {
        var chkMin = Ext.ComponentQuery.query('#chkMinor')[0].getValue()?"Y":"N";
        if(chkMin==='Y'){
            Ext.ComponentQuery.query('#txtMinorName')[0].enable();
            Ext.ComponentQuery.query('#ddlMinorRelation')[0].enable();
        }

        else{
            Ext.ComponentQuery.query('#txtMinorName')[0].disable();
            Ext.ComponentQuery.query('#ddlMinorRelation')[0].disable();
        }
    },

    onBtnCreateMemberClick: function(button, e, eOpts) {
         var objPub={
              RefClientNo : Ext.ComponentQuery.query('#txtClientNo')[0].getValue(),
         MembershipDate : Ext.ComponentQuery.query('#txtMemberDateAD')[0].getValue(),
         Address : Ext.ComponentQuery.query('#txtAddress')[0].getValue(),
         //MaritalStatus : Ext.ComponentQuery.query('#')[0].getValue(),
         FatherName : Ext.ComponentQuery.query('#txtFatherName')[0].getValue(),
         //SpouseName : Ext.ComponentQuery.query('#')[0].getValue(),
         //BirthYear : Ext.ComponentQuery.query('#')[0].getValue(),
         //NoBoyChild : Ext.ComponentQuery.query('#')[0].getValue(),
         //NoGirlChild : Ext.ComponentQuery.query('#')[0].getValue(),
         NomineeName : Ext.ComponentQuery.query('#txtNomineeName')[0].getValue(),
         NomineeRelation : Ext.ComponentQuery.query('#ddlNomineeRelation')[0].getValue(),
         IdDocumentType : Ext.ComponentQuery.query('#ddlIdentityType')[0].getValue(),
         IdDocumentNo : Ext.ComponentQuery.query('#txtIdentityNo')[0].getValue(),
         MemberType : Ext.ComponentQuery.query('#ddlAccFor')[0].getValue(),
         EmployeeId : Ext.ComponentQuery.query('#txtEmpCode')[0].getValue(),
         CasteCode : Ext.ComponentQuery.query('#ddlCaste')[0].getValue(),
         Fname : Ext.ComponentQuery.query('#txtFirstName')[0].getValue(),
         Lname : Ext.ComponentQuery.query('#txtLastName')[0].getValue(),
         //MembershipCloseDate : Ext.ComponentQuery.query('#')[0].getValue(),
         PostalAddress : Ext.ComponentQuery.query('#txtPostalAddress')[0].getValue(),
         Gender : Ext.ComponentQuery.query('#ddlGender')[0].getValue(),
         OccupationCode : Ext.ComponentQuery.query('#ddlOccupation')[0].getValue(),
         //EducationCode : Ext.ComponentQuery.query('#')[0].getValue(),
         Active : 'Y',
         //ChildrenNo : Ext.ComponentQuery.query('#')[0].getValue(),
         //ReasonForInactive : Ext.ComponentQuery.query('#')[0].getValue(),
         //ImagePath : Ext.ComponentQuery.query('#')[0].getValue(),
         TranOfficeCode : getOfficeCode(),
             //FixedCollectionAmount : Ext.ComponentQuery.query('#')[0].getValue(),
         //ThirdPartyData : Ext.ComponentQuery.query('#')[0].getValue(),
         Dob : Ext.ComponentQuery.query('#txtDobAD')[0].getValue(),
         TelephoneNo : Ext.ComponentQuery.query('#txtTelephoneNo')[0].getValue(),
         MobileNo : Ext.ComponentQuery.query('#txtMobileNo')[0].getValue(),
         FaxNo : Ext.ComponentQuery.query('#txtFaxNo')[0].getValue(),
         //JointImagePath : Ext.ComponentQuery.query('#')[0].getValue(),
         GrandFatherName : Ext.ComponentQuery.query('#txtGrandFatherName')[0].getValue(),
         MinorYN : Ext.ComponentQuery.query('#chkMinor')[0].getValue()?"Y":"N",
         MinorName : Ext.ComponentQuery.query('#txtMinorName')[0].getValue(),
         MinorRelation : Ext.ComponentQuery.query('#ddlMinorRelation')[0].getValue(),
         EmailAddress : Ext.ComponentQuery.query('#txtEmail')[0].getValue(),
         //FingerPrintLeft : Ext.ComponentQuery.query('#')[0].getValue(),
         //FingerPrintRight : Ext.ComponentQuery.query('#')[0].getValue(),
         User1 : getCurrentUser(),
         OutFiscalYear:getFiscalYear(),
         //OutClientNo: ,
         OutClientCode:Ext.ComponentQuery.query('#txtMemberId')[0].getValue(),
         AutoAcOpen : Ext.ComponentQuery.query('#chkCreateAutoAcc')[0].getValue(),
         InsertUpdate : 'I',


         };
          var waitSave = watiMsg('Saving. Please wait ...');
        Ext.Ajax.request({
             url:'../Handlers/Finance/Transaction/PublicSavingTransaction/PublicMemberHandler.ashx',
             params:{method:'SavePublicMember',publicMember:JSON.stringify(objPub)},
             success: function ( result, request ) {
        waitSave.hide();
                  var out = Ext.decode(result.responseText);
        				if(out.success==='true'){
        					msg('SUCCESS',out.message);
        						}

        				else{msg('FAILURE',out.message);


                  }
             },
             failure: function(form, action) {
        waitSave.hide();var out=Ext.decode(response.responseText);msg('FAILURE',out.message);     }
        });
    },

    onBtnUpdateMemberClick: function(button, e, eOpts) {
        var a=Ext.ComponentQuery.query('#grdPublicClientEntrySearch')[0];
        var objPub={
         RefClientNo : Ext.ComponentQuery.query('#txtClientNo')[0].getValue(),
         MembershipDate : Ext.ComponentQuery.query('#txtMemberDateAD')[0].getValue(),
         Address : Ext.ComponentQuery.query('#txtAddress')[0].getValue(),
         //MaritalStatus : Ext.ComponentQuery.query('#')[0].getValue(),
         FatherName : Ext.ComponentQuery.query('#txtFatherName')[0].getValue(),
         //SpouseName : Ext.ComponentQuery.query('#')[0].getValue(),
         //BirthYear : Ext.ComponentQuery.query('#')[0].getValue(),
         //NoBoyChild : Ext.ComponentQuery.query('#')[0].getValue(),
         //NoGirlChild : Ext.ComponentQuery.query('#')[0].getValue(),
         NomineeName : Ext.ComponentQuery.query('#txtNomineeName')[0].getValue(),
         NomineeRelation : Ext.ComponentQuery.query('#ddlNomineeRelation')[0].getValue(),
         IdDocumentType : Ext.ComponentQuery.query('#ddlIdentityType')[0].getValue(),
         IdDocumentNo : Ext.ComponentQuery.query('#txtIdentityNo')[0].getValue(),
         MemberType : Ext.ComponentQuery.query('#ddlAccFor')[0].getValue(),
         EmployeeId : Ext.ComponentQuery.query('#txtEmpCode')[0].getValue(),
         CasteCode : Ext.ComponentQuery.query('#ddlCaste')[0].getValue(),
         Fname : Ext.ComponentQuery.query('#txtFirstName')[0].getValue(),
         Lname : Ext.ComponentQuery.query('#txtLastName')[0].getValue(),
         //MembershipCloseDate : Ext.ComponentQuery.query('#')[0].getValue(),
         PostalAddress : Ext.ComponentQuery.query('#txtPostalAddress')[0].getValue(),
         Gender : Ext.ComponentQuery.query('#ddlGender')[0].getValue(),
         OccupationCode : Ext.ComponentQuery.query('#ddlOccupation')[0].getValue(),
         //EducationCode : Ext.ComponentQuery.query('#')[0].getValue(),
         Active : 'Y',
         //ChildrenNo : Ext.ComponentQuery.query('#')[0].getValue(),
         //ReasonForInactive : Ext.ComponentQuery.query('#')[0].getValue(),
         //ImagePath : Ext.ComponentQuery.query('#')[0].getValue(),
         TranOfficeCode : getOfficeCode(),
             //FixedCollectionAmount : Ext.ComponentQuery.query('#')[0].getValue(),
         //ThirdPartyData : Ext.ComponentQuery.query('#')[0].getValue(),
         Dob : Ext.ComponentQuery.query('#txtDobAD')[0].getValue(),
         TelephoneNo : Ext.ComponentQuery.query('#txtTelephoneNo')[0].getValue(),
         MobileNo : Ext.ComponentQuery.query('#txtMobileNo')[0].getValue(),
         FaxNo : Ext.ComponentQuery.query('#txtFaxNo')[0].getValue(),
         //JointImagePath : Ext.ComponentQuery.query('#')[0].getValue(),
         GrandFatherName : Ext.ComponentQuery.query('#txtGrandFatherName')[0].getValue(),
         MinorYN : Ext.ComponentQuery.query('#chkMinor')[0].getValue()?"Y":"N",
         MinorName : Ext.ComponentQuery.query('#txtMinorName')[0].getValue(),
         MinorRelation : Ext.ComponentQuery.query('#ddlMinorRelation')[0].getValue(),
         EmailAddress : Ext.ComponentQuery.query('#txtEmail')[0].getValue(),
         //FingerPrintLeft : Ext.ComponentQuery.query('#')[0].getValue(),
         //FingerPrintRight : Ext.ComponentQuery.query('#')[0].getValue(),
         User1 : getCurrentUser(),
         OutFiscalYear:getFiscalYear(),
         OutClientNo: a.ClientNo,//Ext.ComponentQuery.query('#txtClientNoForUpdate')[0].getValue() ,
         OutClientCode:Ext.ComponentQuery.query('#txtMemberId')[0].getValue(),
         AutoAcOpen : Ext.ComponentQuery.query('#chkCreateAutoAcc')[0].getValue(),
         InsertUpdate : 'U',


         };
          var waitSave = watiMsg('Saving. Please wait ...');
        Ext.Ajax.request({
             url:'../Handlers/Finance/Transaction/PublicSavingTransaction/PublicMemberHandler.ashx',
             params:{method:'SavePublicMember',publicMember:JSON.stringify(objPub)},
             success: function ( result, request ) {
        waitSave.hide();
                  var out = Ext.decode(result.responseText);
        				if(out.success==='true'){
        					msg('SUCCESS',out.message);
        						}

        				else{msg('FAILURE',out.message);


                  }
             },
             failure: function(form, action) {
        waitSave.hide();var out=Ext.decode(response.responseText);msg('FAILURE',out.message);     }
        });
    },

    onTxtMemberCodeAfterRender: function(component, eOpts) {
        component.getEl().on('dblclick', function(){
             var winPopup = Ext.create('MyApp.view.SelectMemberPopup',{

                });

                winPopup.extraParam={param:null};
                winPopup.show();
          });

    },

    onBtnSearchClick: function(button, e, eOpts) {
        var waitSave = watiMsg('Loading Data. Please wait ...');
        Ext.Ajax.request({
            url:'../Handlers/Finance/Transaction/PublicSavingTransaction/PublicClientDetailHandler.ashx',
            params:{method:'GetPubClientDetail', OfficeCode:getOfficeCode(),
                    MemberCode: Ext.ComponentQuery.query('#txtMemberCode')[0].getValue(),
                    MemberName: Ext.ComponentQuery.query('#txtMemberName')[0].getValue(),
                    MemDateFrom : Ext.ComponentQuery.query('#txtMemDateFromBS')[0].getValue(),
                    MemDateTo : Ext.ComponentQuery.query('#txtMemDateToBS')[0].getValue()

                   },
            success: function ( result, request ) {

                var obj = Ext.decode(result.responseText);
                if(obj.success === 'true'){
                    //console.log("Resu",obj.root);
                    var store =Ext.getStore('PublicClientEntrySearchStore');
                    store.removeAll();
                    store.add(obj.root);


                }else{msg('FAILURE','Could Not Load Data');}
                waitSave.hide();
            },
            failure: function(form, action) {
                msg("FAILURE","Could Not Load Data"); waitSave.hide();   }
        });

    },

    onFrmPublicClientEntryAfterRender: function(component, eOpts) {
        var waitSave = watiMsg('Loading Data. Please wait ...');
        Ext.ComponentQuery.query('#txtMemberDateAD')[0].setValue(getMisDateAD());
        Ext.ComponentQuery.query('#txtMemberDateBS')[0].setValue(getMisDateBS());
        Ext.ComponentQuery.query('#txtMemDateFromBS')[0].setValue(getMisDateBS());
        Ext.ComponentQuery.query('#txtMemDateToBS')[0].setValue(getMisDateBS());

        var publicClientEntrySearchStore=Ext.getStore('PublicClientEntrySearchStore');
        publicClientEntrySearchStore.removeAll();

        //GET FOR OCCUPATION
        Ext.Ajax.request({
            url:'../Handlers/GeneralMasterParameters/Maintenance/OccupationHandler.ashx',
            params:{method:'GetOccupationLov', OccupationDesc: null
                   },
            success: function ( result, request ) {

                var obj = Ext.decode(result.responseText);
                if(obj.success === 'true'){
                    //console.log("Resu",obj.root);
                    var store =Ext.getStore('OccupationStore');
                    store.removeAll();
                    store.add(obj.root);


                }else{msg('FAILURE','Could Not Load Data');}
            },
            failure: function(form, action) {
                msg("FAILURE","Could Not Load Data");    }
        });

        //GET FOR CASTE
        Ext.Ajax.request({
            url:'../Handlers/GeneralMasterParameters/Maintenance/CasteDetailHandler.ashx',
            params:{method:'GetCastes', CasteDesc: null
                   },
            success: function ( result, request ) {

                var obj = Ext.decode(result.responseText);
                if(obj.success === 'true'){
                    //console.log("Resu",obj.root);
                    var store =Ext.getStore('CasteDetailStore');
                    store.removeAll();
                    store.add(obj.root);


                }else{msg('FAILURE','Could Not Load Data');}
            },
            failure: function(form, action) {
                msg("FAILURE","Could Not Load Data");    }
        });

        //GET FOR IDENTITY TYPE
        Ext.Ajax.request({
                            url:'../Handlers/GeneralMasterParameters/References/MsRefrenceCodeDetailsHandler.ashx',
                            params:{method:'GetReferenceDetailListShort',referenceCode:'ID_DOCUMENT_TYPE'
                },
                            success: function ( result, request ) {

                                var obj = Ext.decode(result.responseText);
                                if(obj.success === 'true'){
                                    //console.log("Resu",obj.root);
                                    var store =Ext.getStore('ReferenceShortStore');
                                    store.removeAll();
                                    store.add(obj.root);



                                }else{msg('FAILURE','Could Not Load Data');}
                            },
                            failure: function(form, action) {
                                msg("FAILURE","Could Not Load Data");    }
                        });


        //GET FOR GENDER
        Ext.Ajax.request({
                            url:'../Handlers/GeneralMasterParameters/References/MsRefrenceCodeDetailsHandler.ashx',
                            params:{method:'GetReferenceDetailListShort',referenceCode:'GENDER'
                },
                            success: function ( result, request ) {

                                var obj = Ext.decode(result.responseText);
                                if(obj.success === 'true'){
                                    //console.log("Resu",obj.root);
                                    var store =Ext.getStore('GenderRefShortStore');
                                    store.removeAll();
                                    store.add(obj.root);



                                }else{msg('FAILURE','Could Not Load Data');}
                            },
                            failure: function(form, action) {
                                msg("FAILURE","Could Not Load Data");    }
                        });
        //GET FOR Account For
        Ext.Ajax.request({
                            url:'../Handlers/GeneralMasterParameters/References/MsRefrenceCodeDetailsHandler.ashx',
                            params:{method:'GetReferenceDetailListShort',referenceCode:'ACCOUNT_FOR'
                },
                            success: function ( result, request ) {

                                var obj = Ext.decode(result.responseText);
                                if(obj.success === 'true'){
                                    //console.log("Accfor",obj.root);
                                    var store =Ext.getStore('AccForRefShortStore');
                                    store.removeAll();
                                    store.add(obj.root);
                                    Ext.ComponentQuery.query('#ddlAccFor')[0].select('P');


                                }else{msg('FAILURE','Could Not Load Data');}
                            },
                            failure: function(form, action) {
                                msg("FAILURE","Could Not Load Data");    }
                        });
        //GET FOR Nominee Relation
        Ext.Ajax.request({
                            url:'../Handlers/GeneralMasterParameters/References/MsRefrenceCodeDetailsHandler.ashx',
                            params:{method:'GetReferenceDetailListShort',referenceCode:'NOMINEE_RELATION'
                },
                            success: function ( result, request ) {

                                var obj = Ext.decode(result.responseText);
                                if(obj.success === 'true'){
                                    //console.log("Resu",obj.root);
                                    var store =Ext.getStore('NomineeRelationRefShortStore');
                                    store.removeAll();
                                    store.add(obj.root);



                                }else{msg('FAILURE','Could Not Load Data');}
                            },
                            failure: function(form, action) {
                                msg("FAILURE","Could Not Load Data");    }
                        });
        //GET FOR Minor Relation
        Ext.Ajax.request({
                            url:'../Handlers/GeneralMasterParameters/References/MsRefrenceCodeDetailsHandler.ashx',
                            params:{method:'GetReferenceDetailListShort',referenceCode:'NOMINEE_RELATION'
                },
                            success: function ( result, request ) {

                                var obj = Ext.decode(result.responseText);
                                if(obj.success === 'true'){
                                    //console.log("Resu",obj.root);
                                    var store =Ext.getStore('MinorRelationRefShortStore');
                                    store.removeAll();
                                    store.add(obj.root);
                                    waitSave.hide();


                                }else{msg('FAILURE','Could Not Load Data');}
                            },
                            failure: function(form, action) {
                                msg("FAILURE","Could Not Load Data");    }
                        });
    },

    onTxtClientNoAfterRender: function(component, eOpts) {
        component.getEl().on('dblclick', function(){
             var winPopup = Ext.create('MyApp.view.SelectGroupMemberPopup',{

                });

                winPopup.extraParam={param:null};
                winPopup.show();
          });

    },

    init: function(application) {
        this.control({
            "#chkGrpBasedClient": {
                change: this.onChkGroupBasedClientChange
            },
            "#txtEmpCode": {
                afterrender: this.onTxtEmpCodeAfterRender
            },
            "#chkMinor": {
                change: this.onChkMinorChange
            },
            "#btnCreateMember": {
                click: this.onBtnCreateMemberClick
            },
            "#btnUpdateMember": {
                click: this.onBtnUpdateMemberClick
            },
            "#txtMemberCode": {
                afterrender: this.onTxtMemberCodeAfterRender
            },
            "#btnSearch": {
                click: this.onBtnSearchClick
            },
            "#frmPublicClientEntry": {
                afterrender: this.onFrmPublicClientEntryAfterRender
            },
            "#txtClientNo": {
                afterrender: this.onTxtClientNoAfterRender
            }
        });
    }

});
