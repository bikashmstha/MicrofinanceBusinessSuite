/*
 * File: app/view/MFSavingWithdrawal.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MFSavingWithdrawal', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Ext.form.Label',
        'Ext.Img',
        'Ext.button.Button',
        'Ext.form.FieldSet',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Column'
    ],

    frame: true,
    title: 'MF Saving Account Withdraw',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    itemId: 'frmSavingWithdrawal',
                    bodyPadding: 10,
                    layout: {
                        type: 'table',
                        columns: 3
                    },
                    items: [
                        {
                            xtype: 'container',
                            colspan: 2,
                            height: 135,
                            layout: {
                                type: 'table',
                                columns: 3
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtWithdrawDateBS',
                                    fieldLabel: 'Withdraw Date (B.S)',
                                    labelWidth: 120,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;'
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 1,
                                    itemId: 'txtWithdrawDateAD',
                                    margin: '0 0 0 10',
                                    fieldLabel: 'Withdraw Date(A.D)',
                                    labelWidth: 145,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;'
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 2,
                                    itemId: 'ddlSavingProduct',
                                    fieldLabel: 'Saving Product',
                                    labelWidth: 120,
                                    fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                                    emptyText: '---Select---',
                                    displayField: 'ProductName',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'SavingProductShortStore',
                                    valueField: 'ProductCode'
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 3,
                                    itemId: 'ddlCenter',
                                    margin: '0 0 0 10',
                                    fieldLabel: 'Center',
                                    labelWidth: 145,
                                    fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                                    emptyText: '---Select---',
                                    displayField: 'CenterName',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'CenterCodeStore',
                                    valueField: 'CenterCode',
                                    listeners: {
                                        select: {
                                            fn: me.onDdlCenterCodeSelect,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtSavingAccountNumber',
                                    fieldLabel: 'Saving Account No.',
                                    labelWidth: 120,
                                    fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                                    size: 64,
                                    listeners: {
                                        afterrender: {
                                            fn: me.onTxtSavingAccountNumberAfterRender,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'label'
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 3,
                                    itemId: 'txtMemberName',
                                    fieldLabel: 'Member Name',
                                    labelWidth: 120,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;',
                                    size: 64
                                },
                                {
                                    xtype: 'combobox',
                                    itemId: 'ddlEmpName',
                                    fieldLabel: 'Emp Name',
                                    labelWidth: 120,
                                    fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                                    size: 40,
                                    displayField: 'EmpName',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'EmployeeSearchShortStore',
                                    valueField: 'EmpId'
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            colspan: 1,
                            margin: '0 0 0 15',
                            layout: {
                                type: 'table',
                                columns: 1
                            },
                            items: [
                                {
                                    xtype: 'label',
                                    height: 15,
                                    text: 'Member Photo:'
                                },
                                {
                                    xtype: 'image',
                                    height: 150,
                                    width: 150
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            colspan: 2,
                            height: 187,
                            layout: {
                                type: 'table',
                                columns: 3
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    colspan: 2,
                                    itemId: 'ddlContraAccount',
                                    fieldLabel: 'Contra Account',
                                    labelWidth: 120,
                                    fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                                    size: 40,
                                    displayField: 'AccountDesc',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'ContraAccountSearchShortStore',
                                    valueField: 'AccountCode'
                                },
                                {
                                    xtype: 'label'
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtCurrentBalance',
                                    fieldLabel: 'Current Balance',
                                    labelWidth: 120,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;'
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 1,
                                    itemId: 'txtWithdrawAmountLimit',
                                    margin: '0 0 0 10',
                                    fieldLabel: 'Withdrawal Amount Limit',
                                    labelWidth: 145,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;'
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtPaidAmount',
                                    fieldLabel: 'Paid Amount',
                                    labelWidth: 120
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtChequeNo',
                                    margin: '0 0 0 10',
                                    fieldLabel: 'Cheque No.',
                                    labelWidth: 145
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtPayeeName',
                                    fieldLabel: 'Payee Name',
                                    labelWidth: 120,
                                    size: 64
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            margin: '0 0 0 15',
                            layout: {
                                type: 'table',
                                columns: 1
                            },
                            items: [
                                {
                                    xtype: 'label',
                                    text: 'Signature Verify:'
                                },
                                {
                                    xtype: 'image',
                                    height: 150,
                                    width: 150
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            colspan: 3,
                            height: 30,
                            layout: {
                                type: 'hbox',
                                align: 'stretch',
                                pack: 'center'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    itemId: 'btnWithdraw',
                                    text: 'Withdraw',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnWithdrawClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'btnUpdate',
                                    text: 'Update',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnUpdateClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    margins: '0 0 0 10',
                                    itemId: 'btnDelete',
                                    text: 'Delete',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnDeleteClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            colspan: 3,
                            height: 30,
                            margin: '10 0 0 0',
                            layout: {
                                type: 'hbox',
                                align: 'stretch',
                                pack: 'center'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    itemId: 'btnGotoSavingDeposit',
                                    text: 'Go To Saving Deposit'
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            colspan: 3,
                            title: 'Search',
                            layout: {
                                type: 'table',
                                columns: 3
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtSearchWithdrawDateFromBS',
                                    fieldLabel: 'Withdraw Date From (B.S)',
                                    labelWidth: 150
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtSearchWithdrawDateToBS',
                                    margin: '0 0 0 10',
                                    fieldLabel: 'Withdraw Date To (B.S)',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'combobox',
                                    itemId: 'ddlSearchSavingAccountNo',
                                    fieldLabel: 'Saving Account No',
                                    labelWidth: 150,
                                    fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                                    size: 40,
                                    displayField: 'SavingAccountNo',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'SavingAccountNumberSearchStore',
                                    valueField: 'SavingAccountNo',
                                    listeners: {
                                        focus: {
                                            fn: me.onDdlSearchSavingAccountNoFocus,
                                            scope: me
                                        },
                                        select: {
                                            fn: me.onDdlSearchSavingAccountNoSelect,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtSearchMemberName',
                                    margin: '0 0 0 10',
                                    fieldLabel: 'Member Name',
                                    labelWidth: 140,
                                    size: 40
                                },
                                {
                                    xtype: 'container',
                                    colspan: 3,
                                    height: 30,
                                    layout: {
                                        type: 'hbox',
                                        align: 'stretch',
                                        pack: 'center'
                                    },
                                    items: [
                                        {
                                            xtype: 'button',
                                            itemId: 'btnSearchWithdraw',
                                            text: 'Search',
                                            listeners: {
                                                click: {
                                                    fn: me.onBtnSearchWithdrawClick,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'textfield',
                            hidden: true,
                            itemId: 'hdnAccountNumber',
                            fieldLabel: 'Label'
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFrmSavingWithdrawalAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'gridpanel',
                    itemId: 'grdSavingAccountWithdraw',
                    store: 'SavingAccountWithdrawDetailStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'WithdrawalNo',
                            text: 'Withdrawal No'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'SavingAccountNo',
                            text: 'Saving Account No'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'ClientName',
                            text: 'Client Name'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'ProductName',
                            text: 'Product Name'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'AccountStatus',
                            text: 'Account Status'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'VoucherNo',
                            text: 'Voucher No'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'ChequeNo',
                            text: 'Cheque No'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'ContraAccount',
                            text: 'Contra Account'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'AccountNo',
                            text: 'Account No'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'PayeeName',
                            text: 'Payee Name'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'PenaltyAmount',
                            text: 'Penalty Amount'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'SavingProductCode',
                            text: 'Saving Product Code'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'ClientNo',
                            text: 'Client No'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'Remarks',
                            text: 'Remarks'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'ContraAcNo',
                            text: 'ContraAcNo'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'AccountDesc',
                            text: 'AccountDesc'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'CurrentBalance',
                            text: 'CurrentBalance'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'TranOfficeCode',
                            text: 'TranOfficeCode'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'WithdrawAmount',
                            text: 'WithdrawAmount'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'WithdrawDate',
                            text: 'WithdrawDate'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'WithdrawDateBs',
                            text: 'WithdrawDateBs'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'WithdrawType',
                            text: 'WithdrawType'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'ImagePath',
                            text: 'ImagePath'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'JointImagePath',
                            text: 'JointImagePath'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'WithdrawLimit',
                            text: 'WithdrawLimit'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'AccountOperationType',
                            text: 'AccountOperationType'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'CenterCode',
                            text: 'CenterCode'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'CenterName',
                            text: 'CenterName'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'Signature1Path',
                            text: 'Signature1Path'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onDdlCenterCodeSelect: function(combo, records, eOpts) {
        Ext.ComponentQuery.query('#ddlEmpName')[0].setValue(records[0].data.EmployeeId);

    },

    onTxtSavingAccountNumberAfterRender: function(component, eOpts) {
        component.getEl().on('dblclick', function(){
             var winPopup = Ext.create('MyApp.view.SelectSavingWithdrawAccountNumberPopup',{

                });

                winPopup.extraParam={param:null};
                winPopup.show();
          });
    },

    onBtnWithdrawClick: function(button, e, eOpts) {
        var savingWithdrawalObj={
        AccountNo:Ext.ComponentQuery.query('#hdnAccountNumber')[0].getValue(),
        WithdrawDate:Ext.ComponentQuery.query('#txtWithdrawDateAD')[0].getValue(),
        WithdrawAmount:Ext.ComponentQuery.query('#txtPaidAmount')[0].getValue(),
        ChequeNo:Ext.ComponentQuery.query('#txtChequeNo')[0].getValue(),
        PayeeName:Ext.ComponentQuery.query('#txtPayeeName')[0].getValue(),
        ContraAccount:Ext.ComponentQuery.query('#ddlContraAccount')[0].getValue(),
        Remarks:null,
        VoucherNo:null,
        WithdrawType:'N',
        MaxWithdrawAmount:Ext.ComponentQuery.query('#txtWithdrawAmountLimit')[0].getValue(),
        TranOfficeCode:Ext.get('offCode').dom.innerHTML,
        CreatedBy:getCurrentUser(),
        Action:'I',
        };


        var waitSave = watiMsg("Withdrawing Saving Account .Please wait ...");
        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/SavingTransaction/MfSavingWithdrawHandler.ashx',
            params: {
                method:'Save',
                savingWithdraw:JSON.stringify(savingWithdrawalObj)
            },
            success: function ( response, request ) {
                         waitSave.hide();
                            var out=Ext.decode(response.responseText);
                            console.log(out);

                            if(out.success==="true")
                                {
                                   msg("SUCCESS",out.message);
                              }
                                else
                                    {
                                        msg("FAILURE",out.message);
                                    }
                            },
                            failure: function ( result, request ) {
                                waitSave.hide();
                                var out=Ext.decode(response.responseText);
                                msg("FAILURE",out.message);
                            }

                });

    },

    onBtnUpdateClick: function(button, e, eOpts) {
        var savingWithdrawalObj={
        AccountNo:Ext.ComponentQuery.query('#hdnAccountNumber')[0].getValue(),
        WithdrawDate:Ext.ComponentQuery.query('#txtWithdrawDateAD')[0].getValue(),
        WithdrawAmount:Ext.ComponentQuery.query('#txtPaidAmount')[0].getValue(),
        ChequeNo:Ext.ComponentQuery.query('#txtChequeNo')[0].getValue(),
        PayeeName:Ext.ComponentQuery.query('#txtPayeeName')[0].getValue(),
        ContraAccount:Ext.ComponentQuery.query('#ddlContraAccount')[0].getValue(),
        Remarks:null,
        VoucherNo:null,
        WithdrawType:'N',
        MaxWithdrawAmount:Ext.ComponentQuery.query('#txtWithdrawAmountLimit')[0].getValue(),
        TranOfficeCode:Ext.get('offCode').dom.innerHTML,
        CreatedBy:getCurrentUser(),
        Action:'U',
        };


        var waitSave = watiMsg("Withdrawing Saving Account .Please wait ...");
        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/SavingTransaction/MfSavingWithdrawHandler.ashx',
            params: {
                method:'Save',
                savingWithdraw:JSON.stringify(savingWithdrawalObj)
            },
            success: function ( response, request ) {
                         waitSave.hide();
                            var out=Ext.decode(response.responseText);
                            console.log(out);

                            if(out.success==="true")
                                {
                                   msg("SUCCESS",out.message);
                              }
                                else
                                    {
                                        msg("FAILURE",out.message);
                                    }
                            },
                            failure: function ( result, request ) {
                                waitSave.hide();
                                var out=Ext.decode(response.responseText);
                                msg("FAILURE",out.message);
                            }

                });

    },

    onBtnDeleteClick: function(button, e, eOpts) {
        var savingWithdrawalObj={
        AccountNo:Ext.ComponentQuery.query('#hdnAccountNumber')[0].getValue(),
        WithdrawDate:Ext.ComponentQuery.query('#txtWithdrawDateAD')[0].getValue(),
        WithdrawAmount:Ext.ComponentQuery.query('#txtPaidAmount')[0].getValue(),
        ChequeNo:Ext.ComponentQuery.query('#txtChequeNo')[0].getValue(),
        PayeeName:Ext.ComponentQuery.query('#txtPayeeName')[0].getValue(),
        ContraAccount:Ext.ComponentQuery.query('#ddlContraAccount')[0].getValue(),
        Remarks:null,
        VoucherNo:null,
        WithdrawType:'N',
        MaxWithdrawAmount:Ext.ComponentQuery.query('#txtWithdrawAmountLimit')[0].getValue(),
        TranOfficeCode:Ext.get('offCode').dom.innerHTML,
        CreatedBy:getCurrentUser(),
        Action:'D',
        };


        var waitSave = watiMsg("Withdrawing Saving Account .Please wait ...");
        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/SavingTransaction/MfSavingWithdrawHandler.ashx',
            params: {
                method:'Save',
                savingWithdraw:JSON.stringify(savingWithdrawalObj)
            },
            success: function ( response, request ) {
                         waitSave.hide();
                            var out=Ext.decode(response.responseText);
                            console.log(out);

                            if(out.success==="true")
                                {
                                   msg("SUCCESS",out.message);
                              }
                                else
                                    {
                                        msg("FAILURE",out.message);
                                    }
                            },
                            failure: function ( result, request ) {
                                waitSave.hide();
                                var out=Ext.decode(response.responseText);
                                msg("FAILURE",out.message);
                            }

                });

    },

    onDdlSearchSavingAccountNoFocus: function(component, e, eOpts) {
        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/SavingTransaction/ClientSavingAccountHandler.ashx',
            params: {
                method:'GetMemberAccountOpen',
                offCode:getOfficeCode(),
                memberName:null
            },
            success: function(response){


                var obj = Ext.decode(response.responseText);



                if(obj.success === "true")
                {

                    var store=Ext.getStore('SavingAccountNumberSearchStore');
                    store.removeAll();
                    store.add(obj.root);


                }
                else
                {
                    msg("FAILURE",obj.message);
                }
            }
        });
    },

    onDdlSearchSavingAccountNoSelect: function(combo, records, eOpts) {
        Ext.ComponentQuery.query('#txtSearchMemberName')[0].setValue(records[0].data.ClientName);

    },

    onBtnSearchWithdrawClick: function(button, e, eOpts) {
        var accountWithdrawDateFromBS=Ext.ComponentQuery.query('#txtSearchWithdrawDateFromBS')[0].getValue();
        var accountWithdrawDateToBS=Ext.ComponentQuery.query('#txtSearchWithdrawDateToBS')[0].getValue();
        var savingAccountNo=Ext.ComponentQuery.query('#ddlSearchSavingAccountNo')[0].getValue();
        var memberName=Ext.ComponentQuery.query('#txtSearchMemberName')[0].getValue();


        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/SavingTransaction/MfWithdrawlDetailHandler.ashx',
            params: {
                method:'GetMfWithdrawDetail',
                offCode:getOfficeCode(),
                withdrawlNo:null,
                savingAccountNo:savingAccountNo,
                clientName:memberName,
                fromDate:null,
                toDate:null,


            },
            success: function(response){


        var obj = Ext.decode(response.responseText);

                                console.log('resp',response);



              if(obj.success === "true")
                        {

                            var store=Ext.getStore('SavingAccountWithdrawDetailStore');
                            store.removeAll();
                            store.add(obj.root);

                        }
                        else
                        {

                            msg("FAILURE",obj.message);
                        }

            }
        });
    },

    onFrmSavingWithdrawalAfterRender: function(component, eOpts) {
        Ext.ComponentQuery.query('#txtWithdrawDateBS')[0].setValue(getMisDateBS());
        Ext.ComponentQuery.query('#txtWithdrawDateAD')[0].setValue(getMisDateAD());
        Ext.ComponentQuery.query('#txtSearchWithdrawDateFromBS')[0].setValue(getMisDateBS());
        Ext.ComponentQuery.query('#txtSearchWithdrawDateToBS')[0].setValue(getMisDateBS());



        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/SavingTransaction/ProductForWithdrawlHandler.ashx',
            params: {
                method:'GetProductForWithDrawl',
                productName:null,

            },
            success: function(response){


                var obj = Ext.decode(response.responseText);



                if(obj.success === "true")
                {

                    var store=Ext.getStore('SavingProductShortStore');
                    store.removeAll();
                    store.add(obj.root);

                }
                else
                {
                    msg("FAILURE",obj.message);
                }
            }
        });


        var centerObj={
            InstituteCode:Ext.get('offCode').dom.innerHTML,
            CenterCode:null

        };
        Ext.Ajax.request({
            url: '../Handlers/Finance/Maintenance/CenterLovHandler.ashx',
            params: {
                method:'Search',
                centerlov:JSON.stringify(centerObj)

            },
            success: function(response){


                var obj = Ext.decode(response.responseText);



                if(obj.success === "true")
                {

                    var store=Ext.getStore('CenterCodeStore');
                    store.removeAll();
                    store.add(obj.root);



                }
                else
                {
                    msg("FAILURE",obj.message);
                }
            }
        });

        Ext.Ajax.request({
            url: '../Handlers/Supervisor/EmployeeHandler.ashx',
            params: {
                method:'GetFieldAssistants',
                officeCode:Ext.get('offCode').dom.innerHTML,
                empName:null,

            },
            success: function(response){


                var obj = Ext.decode(response.responseText);



                if(obj.success === "true")
                {

                    var store=Ext.getStore('EmployeeSearchShortStore');
                    store.removeAll();
                    store.add(obj.root);


                }
                else
                {
                    msg("FAILURE",obj.message);
                }
            }
        });


        Ext.Ajax.request({
            url: '../Handlers/Finance/Maintenance/AccountHeadEntryHandler.ashx',
            params: {
                method:'GetContraAccount',
                offCode:Ext.get('offCode').dom.innerHTML,
                accountDesc:null,

            },
            success: function(response){


                var obj = Ext.decode(response.responseText);



                if(obj.success === "true")
                {

                    var store=Ext.getStore('ContraAccountSearchShortStore');
                    store.removeAll();
                    store.add(obj.root);
                    Ext.ComponentQuery.query('#ddlContraAccount')[0].select('100000021000002');




                }
                else
                {
                    msg("FAILURE",obj.message);
                }
            }
        });
    }

});