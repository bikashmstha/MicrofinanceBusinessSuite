/*
 * File: app/view/PANSearchCriteria.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.PANSearchCriteria', {
    extend: 'Ext.panel.Panel',

    frame: true,
    itemId: 'PanSearchCriteriaForm',
    autoScroll: true,
    title: 'PAN Search Criteria',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    itemId: 'frmPANSearchCriteria',
                    bodyPadding: 10,
                    items: [
                        {
                            xtype: 'combobox',
                            anchor: '100%',
                            itemId: 'cmbOffice',
                            maxWidth: 400,
                            fieldLabel: 'Office',
                            emptyText: '--Select--',
                            displayField: 'OfficeNameEnglish',
                            queryMode: 'local',
                            store: 'PanSrchOfficeStore',
                            valueField: 'OfficeCode'
                        },
                        {
                            xtype: 'fieldcontainer',
                            height: 76,
                            width: 714,
                            layout: {
                                type: 'column'
                            },
                            fieldLabel: 'Tax Payer Name',
                            items: [
                                {
                                    xtype: 'label',
                                    height: 24,
                                    margin: '20 0 0 0',
                                    width: 74,
                                    text: 'Nepali:'
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtTaxPlayerFNameNepali',
                                    width: 174,
                                    fieldLabel: 'First',
                                    labelAlign: 'top',
                                    labelStyle: 'text-align:center',
                                    enableKeyEvents: true,
                                    listeners: {
                                        keyup: {
                                            fn: me.onTxtTaxPlayerFNameNepaliKeyup,
                                            scope: me
                                        },
                                        focus: {
                                            fn: me.onTxtTaxPlayerFNameNepaliFocus,
                                            scope: me
                                        },
                                        keypress: {
                                            fn: me.onTxtTaxPlayerFNameNepaliKeypress,
                                            scope: me
                                        },
                                        change: {
                                            fn: me.onTxtTaxPlayerFNameNepaliChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtTaxPlayerMNameNepali',
                                    width: 174,
                                    fieldLabel: 'Mid',
                                    labelAlign: 'top',
                                    labelStyle: 'text-align:center',
                                    enableKeyEvents: true,
                                    listeners: {
                                        keyup: {
                                            fn: me.onTxtTaxPlayerMNameNepaliKeyup,
                                            scope: me
                                        },
                                        focus: {
                                            fn: me.onTxtTaxPlayerMNameNepaliFocus,
                                            scope: me
                                        },
                                        keypress: {
                                            fn: me.onTxtTaxPlayerMNameNepaliKeypress,
                                            scope: me
                                        },
                                        change: {
                                            fn: me.onTxtTaxPlayerMNameNepaliChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtTaxPlayerLNameNepali',
                                    width: 175,
                                    fieldLabel: 'Last',
                                    labelAlign: 'top',
                                    labelStyle: 'text-align:center',
                                    enableKeyEvents: true,
                                    listeners: {
                                        keyup: {
                                            fn: me.onTxtTaxPlayerLNameNepaliKeyup,
                                            scope: me
                                        },
                                        focus: {
                                            fn: me.onTxtTaxPlayerLNameNepaliFocus,
                                            scope: me
                                        },
                                        keypress: {
                                            fn: me.onTxtTaxPlayerLNameNepaliKeypress,
                                            scope: me
                                        },
                                        change: {
                                            fn: me.onTxtTaxPlayerLNameNepaliChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtTaxPlayerFNameEnglish',
                                    margin: '0,0,0,0',
                                    width: 250,
                                    fieldLabel: 'English',
                                    labelWidth: 68
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtTaxPlayerMNameEnglish',
                                    width: 174,
                                    fieldLabel: '',
                                    labelAlign: 'top'
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtTaxPlayerLNameEnglish',
                                    width: 174,
                                    fieldLabel: '',
                                    labelAlign: 'top'
                                }
                            ]
                        },
                        {
                            xtype: 'fieldcontainer',
                            height: 57,
                            fieldLabel: 'Trade Name ',
                            items: [
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtTradeNameNepali',
                                    width: 504,
                                    fieldLabel: 'Nepali',
                                    labelWidth: 70,
                                    enableKeyEvents: true,
                                    listeners: {
                                        keyup: {
                                            fn: me.onTxtTradeNameNepaliKeyup,
                                            scope: me
                                        },
                                        focus: {
                                            fn: me.onTxtTradeNameNepaliFocus,
                                            scope: me
                                        },
                                        keypress: {
                                            fn: me.onTxtTradeNameNepaliKeypress,
                                            scope: me
                                        },
                                        change: {
                                            fn: me.onTxtTradeNameNepaliChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtTradeNameEnglish',
                                    width: 504,
                                    fieldLabel: 'English',
                                    labelWidth: 70
                                }
                            ]
                        },
                        {
                            xtype: 'combobox',
                            anchor: '100%',
                            itemId: 'cmbDistrict',
                            maxWidth: 300,
                            fieldLabel: 'District',
                            emptyText: '--Select--',
                            displayField: 'DistrictNameEn',
                            queryMode: 'local',
                            store: 'PanSrchDistrictStore',
                            valueField: 'DistrictCode'
                        },
                        {
                            xtype: 'container',
                            height: 29,
                            width: 730,
                            layout: {
                                type: 'column'
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    itemId: 'cmbBusCat',
                                    width: 300,
                                    fieldLabel: 'Bus.Cat.',
                                    emptyText: '--Select--',
                                    displayField: 'BusCategoryDescEng',
                                    queryMode: 'local',
                                    store: 'PANSearchBusCategoryStore',
                                    valueField: 'BusCategoryId',
                                    listeners: {
                                        select: {
                                            fn: me.onCmbBusCatSelect,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    itemId: 'cmbSubBusCat',
                                    width: 400,
                                    fieldLabel: 'Bus.Sub.Cat.',
                                    emptyText: '--Select--',
                                    displayField: 'BusSubCategoryDescEng',
                                    queryMode: 'local',
                                    store: 'PANSearchBusSubCategoryStore',
                                    valueField: 'BusSubCategoryId'
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            height: 26,
                            style: 'text-align:right',
                            width: 615,
                            items: [
                                {
                                    xtype: 'button',
                                    margin: '0 0 0 10',
                                    width: 74,
                                    text: 'Search',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick1,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    width: 79,
                                    text: 'Clear',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            height: 248,
                            itemId: 'gridPan',
                            width: 711,
                            autoScroll: false,
                            title: 'Search Result',
                            store: 'PANSearchGridStore',
                            viewConfig: {

                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return '<span style="text-decoration:underline;color:blue">'+value+'</span>';
                                    },
                                    dataIndex: 'PAN',
                                    text: 'PAN'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 200,
                                    dataIndex: 'TradeName',
                                    text: 'Trade Name '
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 200,
                                    dataIndex: 'TaxPayerName',
                                    text: 'TaxPayer Name'
                                }
                            ],
                            plugins: [
                                Ext.create('Ext.grid.plugin.CellEditing', {
                                    ptype: 'cellediting',
                                    clicksToEdit: 1,
                                    listeners: {
                                        beforeedit: {
                                            fn: me.onGridcelleditingpluginBeforeEdit,
                                            scope: me
                                        }
                                    }
                                })
                            ]
                        }
                    ]
                },
                {
                    xtype: 'hiddenfield',
                    itemId: 'hdnPan',
                    fieldLabel: 'Label'
                },
                {
                    xtype: 'hiddenfield',
                    itemId: 'hdntaxPayer',
                    fieldLabel: 'Label'
                },
                {
                    xtype: 'hiddenfield',
                    itemId: 'hdntradName',
                    fieldLabel: 'Label'
                }
            ]
        });

        me.callParent(arguments);
    },

    onTxtTaxPlayerFNameNepaliKeyup: function(textfield, e, options) {
        if(textfield.getValue().substring(0,9) === "undefined")
        {

            textfield.setValue(textfield.getValue().substring(9,textfield.getValue().length + 8));
        }

        else 
        {
            if((e.keyCode >= 8 &&  e.keyCode <= 27) || (e.keyCode >= 32 &&  e.keyCode <= 46) ||
            e.keyCode === 91 || e.keyCode == 93 || e.keyCode === 144 || e.keyCode === 145 || 
            (e.keyCode >= 112 &&  e.keyCode <= 123)|| e.keyCode === 190 || e.keyCode === 188 || 
            e.keyCode === 61)
            {

                textfield.setValue(textfield.getValue().substring(0,textfield.getValue().length));
            }
            else if (e.keyCode >= 96 &&  e.keyCode <= 105)

            {
                textfield.setValue(textfield.getValue().substring(0,textfield.getValue().length-1));
            }
        }
    },

    onTxtTaxPlayerFNameNepaliFocus: function(field, options) {
        var val =field.value;
        field.setValue(val);
    },

    onTxtTaxPlayerFNameNepaliKeypress: function(textfield, e, options) {
        return charCodeForPCSFont(e, textfield);
    },

    onTxtTaxPlayerFNameNepaliChange: function(field, newValue, oldValue, options) {
        var ch = field.value.substring(field.value.length -1, field.value.length).charCodeAt(0);

        if((ch === "NaN") || (((ch <= 255) && (ch > 32)) && 
        (!((ch === 40) || (ch === 41) || (ch === 44)  || (ch === 46) || (ch === 61)))))
        {
            field.setValue(field.value.substring(0,field.value.length-1));
        }

        var ch1 = field.value.substring( field.value.length -2, field.value.length-1).charCodeAt(0);

        //console.log('charcode',ch1,ch);

        if ((ch1 === 46) && (ch === 61))
        {
            field.setValue(field.value.substring(0,field.value.length-1));
        }
        if ((ch1 === 2404) && (ch === 46))
        {
            field.setValue(field.value.substring(0,field.value.length-1));
        }

        if ((ch1 === 2366) && (ch === 93))
        {
            field.setValue(field.value.substring(0,field.value.length-2)+"à¥‹");
        }
        if ((ch1 === 2366) && (ch === 125))
        {
            field.setValue(field.value.substring(0,field.value.length-2)+"à¥Œ");
        }
    },

    onTxtTaxPlayerMNameNepaliKeyup: function(textfield, e, options) {
        if(textfield.getValue().substring(0,9) === "undefined")
        {

            textfield.setValue(textfield.getValue().substring(9,textfield.getValue().length + 8));
        }

        else 
        {
            if((e.keyCode >= 8 &&  e.keyCode <= 27) || (e.keyCode >= 32 &&  e.keyCode <= 46) ||
            e.keyCode === 91 || e.keyCode == 93 || e.keyCode === 144 || e.keyCode === 145 || 
            (e.keyCode >= 112 &&  e.keyCode <= 123)|| e.keyCode === 190 || e.keyCode === 188 || 
            e.keyCode === 61)
            {

                textfield.setValue(textfield.getValue().substring(0,textfield.getValue().length));
            }
            else if (e.keyCode >= 96 &&  e.keyCode <= 105)

            {
                textfield.setValue(textfield.getValue().substring(0,textfield.getValue().length-1));
            }
        }
    },

    onTxtTaxPlayerMNameNepaliFocus: function(field, options) {
        var val =field.value;
        field.setValue(val);
    },

    onTxtTaxPlayerMNameNepaliKeypress: function(textfield, e, options) {
        return charCodeForPCSFont(e, textfield);
    },

    onTxtTaxPlayerMNameNepaliChange: function(field, newValue, oldValue, options) {
        var ch = field.value.substring(field.value.length -1, field.value.length).charCodeAt(0);

        if((ch === "NaN") || (((ch <= 255) && (ch > 32)) && 
        (!((ch === 40) || (ch === 41) || (ch === 44)  || (ch === 46) || (ch === 61)))))
        {
            field.setValue(field.value.substring(0,field.value.length-1));
        }

        var ch1 = field.value.substring( field.value.length -2, field.value.length-1).charCodeAt(0);

        //console.log('charcode',ch1,ch);

        if ((ch1 === 46) && (ch === 61))
        {
            field.setValue(field.value.substring(0,field.value.length-1));
        }
        if ((ch1 === 2404) && (ch === 46))
        {
            field.setValue(field.value.substring(0,field.value.length-1));
        }

        if ((ch1 === 2366) && (ch === 93))
        {
            field.setValue(field.value.substring(0,field.value.length-2)+"à¥‹");
        }
        if ((ch1 === 2366) && (ch === 125))
        {
            field.setValue(field.value.substring(0,field.value.length-2)+"à¥Œ");
        }
    },

    onTxtTaxPlayerLNameNepaliKeyup: function(textfield, e, options) {
        if(textfield.getValue().substring(0,9) === "undefined")
        {

            textfield.setValue(textfield.getValue().substring(9,textfield.getValue().length + 8));
        }

        else 
        {
            if((e.keyCode >= 8 &&  e.keyCode <= 27) || (e.keyCode >= 32 &&  e.keyCode <= 46) ||
            e.keyCode === 91 || e.keyCode == 93 || e.keyCode === 144 || e.keyCode === 145 || 
            (e.keyCode >= 112 &&  e.keyCode <= 123)|| e.keyCode === 190 || e.keyCode === 188 || 
            e.keyCode === 61)
            {

                textfield.setValue(textfield.getValue().substring(0,textfield.getValue().length));
            }
            else if (e.keyCode >= 96 &&  e.keyCode <= 105)

            {
                textfield.setValue(textfield.getValue().substring(0,textfield.getValue().length-1));
            }
        }
    },

    onTxtTaxPlayerLNameNepaliFocus: function(field, options) {
        var val =field.value;
        field.setValue(val);
    },

    onTxtTaxPlayerLNameNepaliKeypress: function(textfield, e, options) {
        return charCodeForPCSFont(e, textfield);
    },

    onTxtTaxPlayerLNameNepaliChange: function(field, newValue, oldValue, options) {
        var ch = field.value.substring(field.value.length -1, field.value.length).charCodeAt(0);

        if((ch === "NaN") || (((ch <= 255) && (ch > 32)) && 
        (!((ch === 40) || (ch === 41) || (ch === 44)  || (ch === 46) || (ch === 61)))))
        {
            field.setValue(field.value.substring(0,field.value.length-1));
        }

        var ch1 = field.value.substring( field.value.length -2, field.value.length-1).charCodeAt(0);

        //console.log('charcode',ch1,ch);

        if ((ch1 === 46) && (ch === 61))
        {
            field.setValue(field.value.substring(0,field.value.length-1));
        }
        if ((ch1 === 2404) && (ch === 46))
        {
            field.setValue(field.value.substring(0,field.value.length-1));
        }

        if ((ch1 === 2366) && (ch === 93))
        {
            field.setValue(field.value.substring(0,field.value.length-2)+"à¥‹");
        }
        if ((ch1 === 2366) && (ch === 125))
        {
            field.setValue(field.value.substring(0,field.value.length-2)+"à¥Œ");
        }
    },

    onTxtTradeNameNepaliKeyup: function(textfield, e, options) {
        if(textfield.getValue().substring(0,9) === "undefined")
        {

            textfield.setValue(textfield.getValue().substring(9,textfield.getValue().length + 8));
        }

        else 
        {
            if((e.keyCode >= 8 &&  e.keyCode <= 27) || (e.keyCode >= 32 &&  e.keyCode <= 46) ||
            e.keyCode === 91 || e.keyCode == 93 || e.keyCode === 144 || e.keyCode === 145 || 
            (e.keyCode >= 112 &&  e.keyCode <= 123)|| e.keyCode === 190 || e.keyCode === 188 || 
            e.keyCode === 61)
            {

                textfield.setValue(textfield.getValue().substring(0,textfield.getValue().length));
            }
            else if (e.keyCode >= 96 &&  e.keyCode <= 105)

            {
                textfield.setValue(textfield.getValue().substring(0,textfield.getValue().length-1));
            }
        }
    },

    onTxtTradeNameNepaliFocus: function(field, options) {
        var val =field.value;
        field.setValue(val);
    },

    onTxtTradeNameNepaliKeypress: function(textfield, e, options) {
        return charCodeForPCSFont(e, textfield);
    },

    onTxtTradeNameNepaliChange: function(field, newValue, oldValue, options) {
        var ch = field.value.substring(field.value.length -1, field.value.length).charCodeAt(0);

        if((ch === "NaN") || (((ch <= 255) && (ch > 32)) && 
        (!((ch === 40) || (ch === 41) || (ch === 44)  || (ch === 46) || (ch === 61)))))
        {
            field.setValue(field.value.substring(0,field.value.length-1));
        }

        var ch1 = field.value.substring( field.value.length -2, field.value.length-1).charCodeAt(0);

        //console.log('charcode',ch1,ch);

        if ((ch1 === 46) && (ch === 61))
        {
            field.setValue(field.value.substring(0,field.value.length-1));
        }
        if ((ch1 === 2404) && (ch === 46))
        {
            field.setValue(field.value.substring(0,field.value.length-1));
        }

        if ((ch1 === 2366) && (ch === 93))
        {
            field.setValue(field.value.substring(0,field.value.length-2)+"à¥‹");
        }
        if ((ch1 === 2366) && (ch === 125))
        {
            field.setValue(field.value.substring(0,field.value.length-2)+"à¥Œ");
        }
    },

    onCmbBusCatSelect: function(combo, records, options) {
        //var st=Ext.getStore('PANSearchBusCategoryStore')

        var BusCatID=Ext.ComponentQuery.query('#cmbBusCat')[0].getValue();

        var str=Ext.getStore('PANSearchBusSubCategoryStore');

        str.removeAll();

        /*str.load({
        params:{categoryID:BusCatID}
        });*/


        Ext.Ajax.request
        ({

            url:'../Handlers/Common/BusSubCategoriesHandler.ashx?method=LoadBusSubCategories',
            params:{categoryID:BusCatID},

            success:function(response){
                console.log(response.responseText);
                var obj =Ext.decode(response.responseText);
                var row = obj.root;

                //str.add(row);

                str.loadData(row,true);
                Ext.ComponentQuery.query('#cmbSubBusCat')[0].reset();


            },
            failure:function()
            {
                msg('FAILURE',Ext.decode(response));

            }



        });







    },

    onButtonClick1: function(button, e, options) {


        var str=Ext.getStore('PANSearchGridStore');
        str.removeAll();
        var panSearchParamFields={
            paramofficeCode:Ext.ComponentQuery.query('#cmbOffice')[0].getValue(),
            paramTFNameNe:Ext.ComponentQuery.query('#txtTaxPlayerFNameNepali')[0].getValue(),
            paramTMNameNe:Ext.ComponentQuery.query('#txtTaxPlayerMNameNepali')[0].getValue(),
            paramTLNameNe:Ext.ComponentQuery.query('#txtTaxPlayerLNameNepali')[0].getValue(),
            paramTFNameEn:Ext.ComponentQuery.query('#txtTaxPlayerFNameEnglish')[0].getValue(),
            paramTMNameEn:Ext.ComponentQuery.query('#txtTaxPlayerMNameEnglish')[0].getValue(),
            paramTLNameEn:Ext.ComponentQuery.query('#txtTaxPlayerLNameEnglish')[0].getValue(),
            paramTradeNameNe:Ext.ComponentQuery.query('#txtTradeNameNepali')[0].getValue(),
            paramTradeNameEn:Ext.ComponentQuery.query('#txtTradeNameEnglish')[0].getValue(),
            paramDistrictCode:Ext.ComponentQuery.query('#cmbDistrict')[0].getValue(),
            paramBusCat:Ext.ComponentQuery.query('#cmbBusCat')[0].getValue(),
            paramBusSubCat:Ext.ComponentQuery.query('#cmbSubBusCat')[0].getValue()

        };

        var isFirst=false;
        if(Ext.ComponentQuery.query('#cmbOffice')[0].getValue()!==null)
        { 
            if(!isFirst)
            {

                isFirst=true;       
            }

        }

        if(Ext.ComponentQuery.query('#txtTaxPlayerFNameNepali')[0].getValue()!=='')
        {
            if(!isFirst)
            {

                isFirst=true;        
            }
        }
        if(Ext.ComponentQuery.query('#txtTaxPlayerMNameNepali')[0].getValue()!=='')
        {
            if(!isFirst)
            {

                isFirst=true;       
            }
        }
        if(Ext.ComponentQuery.query('#txtTaxPlayerLNameNepali')[0].getValue()!=='')
        { 
            if(!isFirst)
            {

                isFirst=true;       
            }
        }
        if(Ext.ComponentQuery.query('#txtTaxPlayerFNameEnglish')[0].getValue()!=='')
        {
            if(!isFirst)
            {

                isFirst=true;

            }
        }
        if(Ext.ComponentQuery.query('#txtTaxPlayerMNameEnglish')[0].getValue()!=='')
        {
            if(!isFirst)
            {

                isFirst=true;

            }
        }
        if(Ext.ComponentQuery.query('#txtTaxPlayerFNameEnglish')[0].getValue()!=='')
        {
            if(!isFirst)
            {

                isFirst=true;

            }

        }
        if(Ext.ComponentQuery.query('#txtTradeNameNepali')[0].getValue()!=='')
        {
            if(!isFirst)
            {

                isFirst=true;

            }

        }


        if(Ext.ComponentQuery.query('#txtTradeNameEnglish')[0].getValue()!=='')
        {
            if(!isFirst)
            {

                isFirst=true;

            }

        }

        if(Ext.ComponentQuery.query('#cmbDistrict')[0].getValue()!==null)
        {
            if(!isFirst)
            {

                isFirst=true;

            }
        }

        if(Ext.ComponentQuery.query('#cmbBusCat')[0].getValue()!==null)
        {
            if(!isFirst)
            {

                isFirst=true;

            }

        }
        if(Ext.ComponentQuery.query('#cmbSubBusCat')[0].getValue()!==null)
        {
            if(!isFirst)
            {

                isFirst=true;        
            }


        }

        if(isFirst===true)
        {
            var wait  = waitMsg('Searching ...');


            
Ext.Ajax.timeout = 450000;     Ext.Ajax.request
            ({

                url:'../Handlers/Search/PANSearchHandler.ashx?method=GetPANSearch',
                params:{panSearchParamFields:JSON.stringify(panSearchParamFields)},

                success:function(response){
                    wait.hide();
                    console.log(response.responseText);
                    var obj =Ext.decode(response.responseText);
                    var row = obj.root;  
                    console.log(row);
                    str.add(row);

                    //str.loadData(row,true);

                },
                failure:function(response)
                {
                    wait.hide();
                    //if(response===null || response.responseText==='Error')
                    // Msg('Request Time out Or an error occured!');
                    msg('FAILURE');
                    //msg('FAILURE',Ext.decode(response));

                }



            });   
        }
        else
        {
            msg('Select at least one search criteria!');
        }
    },

    onButtonClick: function(button, e, options) {
        Ext.ComponentQuery.query('#txtTaxPlayerFNameNepali')[0].reset();
        Ext.ComponentQuery.query('#cmbOffice')[0].reset();
        Ext.ComponentQuery.query('#txtTaxPlayerMNameNepali')[0].reset();
        Ext.ComponentQuery.query('#txtTaxPlayerLNameNepali')[0].reset();
        Ext.ComponentQuery.query('#txtTaxPlayerFNameNepali')[0].reset();
        Ext.ComponentQuery.query('#txtTaxPlayerFNameEnglish')[0].reset();
        Ext.ComponentQuery.query('#txtTaxPlayerMNameEnglish')[0].reset();
        Ext.ComponentQuery.query('#txtTaxPlayerLNameEnglish')[0].reset();
        Ext.ComponentQuery.query('#txtTradeNameNepali')[0].reset();
        Ext.ComponentQuery.query('#txtTradeNameEnglish')[0].reset();
        Ext.ComponentQuery.query('#cmbDistrict')[0].reset();
        Ext.ComponentQuery.query('#cmbBusCat')[0].reset();
        Ext.ComponentQuery.query('#cmbSubBusCat')[0].reset();
        Ext.ComponentQuery.query('#gridPan')[0].store.removeAll();


    },

    onGridcelleditingpluginBeforeEdit: function(e, options) {
        //console.log('e',e);
        //console.log('options',options);
        var pan=e.record.data.PAN;
        var TaxPayerName=e.record.data.TaxPayerName;
        var tradeName=e.record.data.TradeName;
        var otherBussiness=e.record.data.PAN;
        //console.log(pan);

        Ext.ComponentQuery.query('#hdnPan')[0].setValue(pan);
        Ext.ComponentQuery.query('#hdntaxPayer')[0].setValue(TaxPayerName);
        Ext.ComponentQuery.query('#hdntradName')[0].setValue(tradeName);
        //Ext.ComponentQuery.query('#hdnBussiness')[0].setValue(tradeNameNepali);

        if(e.colIdx===0)
        {
            var wait  = waitMsg('Searching ...');
            var panSearchPopUpWin = Ext.create('MyApp.view.PanSearchPopUpWin',{
                autoScroll: true,
                width:800,
                height:500,
                renderTo: document.body
            });     

            panSearchPopUpWin.Pan=pan;
            panSearchPopUpWin.show();

            var checkPan=Ext.ComponentQuery.query('#hdnPan')[0].getValue();
            var checkTaxPayerNameNepali=Ext.ComponentQuery.query('#hdntaxPayer')[0].getValue();
            var checkTradNameNepali=Ext.ComponentQuery.query('#hdntradName')[0].getValue();
            //var checkBussiness=Ext.ComponentQuery.query('#hdnBussiness')[0].getValue();


            Ext.ComponentQuery.query('#pan')[0].setValue(checkPan);
            Ext.ComponentQuery.query('#taxPayerName')[0].setValue(checkTaxPayerNameNepali);
            Ext.ComponentQuery.query('#tradeName')[0].setValue(checkTradNameNepali);
            //Ext.ComponentQuery.query('#otherBussiness')[0].setValue(checkPan); 





            Ext.Ajax.request({

                url:'../Handlers/Search/PANSearchAddressHandler.ashx?method=GetPANSearchAddress',
                params:{panSearchAddressParamFields:checkPan
                },

                success: function(response){    
                    //  waitMsg.hide();

                    var obj =Ext.decode(response.responseText);
                    // console.log(obj);
                    var row = obj.root;

                    var arrayOfStrings = row.split('_,_');
                    var wardNo=arrayOfStrings[1];
                    var street=arrayOfStrings[2];
                    var city=arrayOfStrings[3];
                    var district=arrayOfStrings[9];

                    Ext.ComponentQuery.query('#wardNoPermanent')[0].setValue(wardNo);
                    Ext.ComponentQuery.query('#cityPermanent')[0].setValue(city);
                    Ext.ComponentQuery.query('#streetPermanent')[0].setValue(street);
                    Ext.ComponentQuery.query('#districtPermanent')[0].setValue(district);

                },

                failure:function(response)
                {			
                    // waitMsg.hide();
                    msg('FAILURE',Ext.decode(response));
                }
            });
            var strRegDetail=Ext.getStore('PANSearchRegDetails');
            strRegDetail.removeAll();

            Ext.Ajax.request({     
                url:'../Handlers/Search/PANSearchRegistrationDetailHandler.ashx?method=GetPANSearchRegDetails',
                params:{paramPAN:checkPan
                },

                success: function(response){    
                    //  waitMsg.hide();

                    var obj =Ext.decode(response.responseText);
                    //console.log(obj);
                    var row = obj.root;  
                    //strRegDetail.add(row);
                    strRegDetail.loadData(row,true);

                },

                failure:function(response)
                {			
                    // waitMsg.hide();
                    msg('FAILURE',Ext.decode(response));
                }
            });


            var strOutstanding=Ext.getStore('PANSearchOutstandingAsaDate');
            strOutstanding.removeAll();
            Ext.Ajax.request({     
                url:'../Handlers/Search/PANSearchOutstandingHandler.ashx?method=GetPANSearchOutstanding',
                params:{paramPAN:checkPan
                },

                success: function(response){    
                    //  waitMsg.hide();
                    wait.hide();
                    var obj =Ext.decode(response.responseText);
                    console.log(obj);
                    var row = obj.root;  
                    // strRegDetail.add(row);
                    strOutstanding.loadData(row);

                },

                failure:function(response)
                {		
                    wait.hide();
                    // waitMsg.hide();
                    msg('FAILURE',Ext.decode(response));
                }
            });


        }
        else
        {

            return;
        }

    }

});