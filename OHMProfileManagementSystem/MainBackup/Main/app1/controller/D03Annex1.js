/*
 * File: app/controller/D03Annex1.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.D03Annex1', {
    extend: 'Ext.app.Controller',

    stores: [
        'OfficeBankInfo',
        'EstPaymentMode',
        'AnnexGroup0',
        'DedItemsD03',
        'TaxSlabD03',
        'DCTBAnnex'
    ],

    onPnlD03Annex1AfterRender: function(component, eOpts) {
        var me = this;

        var txtFiscalYear = Ext.ComponentQuery.query("#txtFiscalYearAnx1")[0];
        var txtSubNo = Ext.ComponentQuery.query("#txtSubNoAnx1")[0];
        var cboTaxPayer = Ext.ComponentQuery.query("#txtTaxCatAnx1")[0];
        var param = me.validateParam();

        txtFiscalYear.setValue(param.fiscalYear);
        txtSubNo.setValue(param.submissionNo);
        cboTaxPayer.setValue(param.taxpayerCat);
        //param.taxpayerCat

        if(param.action === "E")
        { 
            //------------------------------------------------------
            // NB: Retrive Data from Server For Update
            //------------------------------------------------------
            me.loadDataForUpdate(param);   
        }
        else{ 
            me.loadAnnexLk(param);

        }


        //----------------------------------------------------------------
        // NB: Return to SetAnnex	
        //----------------------------------------------------------------
        if(param.from === "MV")
        {
            var annexD03 = me.getController('MyApp.controller.SetAnnexD03');
            var el = Ext.get('lnkRedirectTopAnx1');

            el.on('click', function(e,t,eOpts){

                Ext.Msg.confirm('Confirm Action', 'के तपाई पछाडि गएर अनुसुची तय गर्न चाहनुहुन्छ?', function(btn) {
                    if(btn == 'yes'){        

                        param.action ="";
                        annexD03.redirectToAnnexD03(param);
                    }
                }, this);
            });
        }



    },

    onGrdInclusionD03Anx1AfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdInclusionD03Anx1')[0];

        grid.columns[1].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();


            var annexType = "";   

            if(value === 5 || value === "B")
            {    annexType = "Business";
            }
            else if(value === 6 || value === "R")
            {
                annexType = "Renumeration";
            }
            else if(value === 7 || value === "I")
            {
                annexType = "Investment";
            }
            else if(value === 8 || value === "A")
            {
                annexType = "Asset Disposal";
            }
            return '<input type=\"textbox\" name=\"txtIN'+ id  +'\" value=\"'+ annexType  +'\"  style=\"height:23px;width:90px;\" readonly=true />';

        };

        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            return '<input type=\"textbox\" name=\"txtIN'+ id  +'\" value=\"'+ value  +'\"  style=\"height:23px;width:90px;\" readonly=true />';

        };


        grid.columns[3].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            return '<input type=\"textbox\" name=\"txtIN'+ id  +'\" value=\"'+ value  +'\"  style=\"height:23px;width:90px;\" readonly=true />';


        };

        grid.columns[4].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            return '<input type=\"textbox\" name=\"txtIN'+ id  +'\" value=\"'+ value  +'\"  style=\"height:23px;width:90px;text-align:right\" readonly=true />';

        };

        grid.columns[5].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            return '<input type=\"textbox\" name=\"txtIN'+ id  +'\" value=\"'+ value  +'\"  style=\"height:23px;width:90px;text-align:right\" readonly=true />';

        };

        grid.columns[6].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            return '<input type=\"textbox\" name=\"txtIN'+ id  +'\" value=\"'+ value  +'\"  style=\"height:23px;width:90px;text-align:right\" readonly=true />';

        };

        grid.columns[7].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            Ext.Function.defer(function(){
                var txtBox = ""; 

                txtBox = new Ext.form.TextField({
                    id:"txtIN"+rowIndex+"Anx1",
                    itemId:"txtIN"+rowIndex+"Anx1",
                    value: value,
                    renderTo: id,
                    height: 22,
                    width:90,
                    fieldCls: 'TxtRight',
                    maskRe: /[0-9]/,
                    maxLength: 10,
                    //readOnly:true,
                    enableKeyEvents: true
                });

                txtBox.on('keyup', function(textfield,e){

                    if(e.keyCode === 13)
                    {
                        var row = grid.getStore().getAt(rowIndex).data;
                        var newValue = textfield.lastValue;

                        newValue = (newValue === "" || newValue === null)?0:newValue; 
                        row.RetirementFund = newValue;

                        me.reArrangeData(grid.getStore());

                        var txtSumTaxableIncome = Ext.ComponentQuery.query('#txtSumTaxableIncomeAnx1')[0];
                        var txtDedTotIncomeTax = Ext.ComponentQuery.query('#txtDedTotIncomeTaxAnx1')[0];

                        txtDedTotIncomeTax.setValue(txtSumTaxableIncome.getValue());
                        me.calculate();
                    }

                }, this);

            },25);

            return '<div id="' + id +'"></div>';

        };

        grid.columns[8].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            Ext.Function.defer(function(){
                var txtBox = ""; 

                txtBox = new Ext.form.TextField({
                    id:"txtIN"+rowIndex+"Anx1",
                    itemId:"txtIN"+rowIndex+"Anx1",
                    value: value,
                    renderTo: id,
                    height: 22,
                    width:90,
                    fieldCls: 'TxtRight',
                    maskRe: /[0-9]/,
                    maxLength: 10,
                    enableKeyEvents: true
                });

                //        txtBox.on('keypress', function(textfield,e){
                txtBox.on('keyup', function(textfield,e){

                    if(e.keyCode === 13)
                    {
                        var row = grid.getStore().getAt(rowIndex).data;
                        var newValue = textfield.lastValue;

                        newValue = (newValue === "" || newValue === null)?0:newValue; 
                        row.Donation = newValue;

                        me.reArrangeData(grid.getStore());

                        var txtSumTaxableIncome = Ext.ComponentQuery.query('#txtSumTaxableIncomeAnx1')[0];
                        var txtDedTotIncomeTax = Ext.ComponentQuery.query('#txtDedTotIncomeTaxAnx1')[0];

                        txtDedTotIncomeTax.setValue(txtSumTaxableIncome.getValue());
                        me.calculate();
                    }

                }, this);

            },25);

            return '<div id="' + id +'"></div>';

        };

        grid.columns[9].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            return '<input type=\"textbox\" name=\"txtIN'+ id  +'\" value=\"'+ value  +'\"  style=\"height:23px;width:90px;text-align:right\" readonly=true  />';

        };


        grid.columns[10].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            return '<input type=\"textbox\" name=\"txtIN'+ id  +'\" value=\"'+ value  +'\"  style=\"height:23px;width:90px;text-align:right\" readonly=true />';

        };


        grid.columns[11].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            return '<input type=\"textbox\" name=\"txtIN'+ id  +'\" value=\"'+ value  +'\"  style=\"height:23px;width:90px;text-align:right\" readonly=true  />';
        };



        grid.columns[12].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            Ext.Function.defer(function(){
                var txtBox = ""; 

                txtBox = new Ext.form.TextField({
                    id:"txtIN"+rowIndex+"Anx1",
                    itemId:"txtIN"+rowIndex+"Anx1",
                    value: value,
                    renderTo: id,
                    height: 22,
                    width:90,
                    fieldCls: 'TxtRight',
                    maskRe: /[0-9]/,
                    maxLength: 10,
                    readOnly:true,
                    enableKeyEvents: true
                });

            },25);

            return '<div id="' + id +'"></div>';

        };


        grid.columns[13].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            return '<input type=\"textbox\" name=\"txtIN'+ id  +'\" value=\"'+ value  +'\"  style=\"height:23px;width:90px;text-align:right\" readonly=true  />';

        };
    },

    onLblRedirectAnx1Click: function(label) {
        var me = this;

        Ext.Msg.confirm('Confirm Action', 'के तपाई पछाडि गएर अनुसुची तय गर्न चाहनुहुन्छ?', function(btn) {
            if(btn == 'yes'){        

                var annexD03 = me.getController('MyApp.controller.SetAnnexD03');

                var param = me.validateParam();
                param.action ="";

                annexD03.redirectToAnnexD03(param);
            }
        }, this);

    },

    onGrdTaxSlabD03AfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdTaxSlabD03')[0];

        grid.columns[0].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            return '<input type=\"textbox\" name=\"txtAmount'+ rowIndex  +'Slab\" value=\"'+ value  +'\"  style=\"height:23px;width:90px;text-align:right\" />';


        };

        grid.columns[1].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            return '<input type=\"textbox\" name=\"txtRate'+ rowIndex  +'Slab\" value=\"'+ value  +'\"  style=\"height:23px;width:90px;text-align:right\" />';

        };

        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            return '<input type=\"textbox\" name=\"txtTaxAmount'+ rowIndex  +'Slab\" value=\"'+ value  +'\"  style=\"height:23px;width:90px;text-align:right\" />';


        };
    },

    onGrdAssessableIncomeAnx1AfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdAssessableIncomeAnx1')[0];

        grid.columns[0].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = rowIndex + 1;

            return  getNumUnicode(id.toString())+ ". ";

        };


        grid.columns[1].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {


            return value;

        };

        grid.columns[3].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            var itemID = "";

            if(rowIndex === 0)
            {

                var txtSumTaxableIncome = Ext.ComponentQuery.query('#txtSumTaxableIncomeAnx1')[0];
                value = txtSumTaxableIncome.getValue();
                itemID = "txtDedTotIncomeTaxAnx1";
            }
            else
            {
                itemID = "txtAssIN"+rowIndex+"Anx1";
            }


            if(rowIndex !== 1)
            {
                Ext.Function.defer(function(){
                    var txtBox = "";            


                    if(rowIndex === 0)
                    {
                        txtBox = new Ext.form.TextField({
                            id:itemID,
                            itemId:itemID,
                            value:   value,
                            renderTo: id,
                            height: 22,
                            width:90,
                            fieldCls: 'TxtRight',
                            maskRe: /[0-9]/,
                            maxLength: 10,                           
                            readOnly:true,
                            enableKeyEvents: true
                        });

                    }
                    else
                    {
                        txtBox = new Ext.form.TextField({
                            id:itemID,
                            itemId:itemID,
                            value:   value,
                            renderTo: id,
                            height: 22,
                            width:90,
                            fieldCls: 'TxtRight',
                            maskRe: /[0-9]/,
                            maxLength: 10,
                            enableKeyEvents: true
                        });

                        //txtBox.on('keyup', function(e){
                        txtBox.on('keypress', function(textfield,e,eOpts){

                            if(e.keyCode === 13 || e.keyCode === 9)
                            {
                                me.calculate();
                            }

                        }, this);
                    }

                },25);


            }

            return '<div id="' + id +'"></div>';


        };
    },

    onTxtSection119Anx1Keyup: function(textfield, e, eOpts) {
        var me = this;
        me.calAssessmentCharge();
    },

    onTxtSection118Anx1Keyup: function(textfield, e, eOpts) {
        var me = this;
        me.calAssessmentCharge();
    },

    onTxtSection117Anx1Keyup: function(textfield, e, eOpts) {
        var me = this;
        me.calAssessmentCharge();
    },

    onTxtUptoDateAnx1Keypress: function(textfield, e, eOpts) {
        var me = this;
        var txtSection117 = Ext.ComponentQuery.query('#txtSection117Anx1')[0];
        var txtSection118 = Ext.ComponentQuery.query('#txtSection118Anx1')[0];
        var txtSection119 = Ext.ComponentQuery.query('#txtSection119Anx1')[0];


        if(e.keyCode === 13 || e.keyCode === 9)
        {
            txtSection117.setValue("10");
            txtSection118.setValue("20");
            txtSection119.setValue("30");

            me.calAssessmentCharge();
        }
    },

    onGridpanelAfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdTaxAnx1')[0];

        grid.columns[0].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            return value;

        };

        grid.columns[1].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            var itemID = "";

            itemID = "txtTax"+rowIndex+"Anx1";    

            Ext.Function.defer(function(){
                var txtBox = "";

                txtBox = new Ext.form.TextField({
                    id:itemID,
                    itemId:itemID,
                    value:   value,
                    renderTo: id,
                    height: 22,
                    width:90,
                    maskRe: /[0-9]/,
                    fieldCls: 'TxtRight',
                    maxLength: 10,
                    enableKeyEvents: true
                });

                txtBox.on('keyup', function(e){
                    me.calNetTaxLiability();

                }, this);

            },25);


            return '<div id="' + id +'"></div>';


        };
    },

    onBtnSubmitAnx1Click: function(button, e, eOpts) {
        var me = this;
        var strTaxRateLiab = Ext.getStore("TaxSlabD03");

        var assessment = null;
        var assmtDetail = null;
        var deductibles = null;
        var taxRateLiabilities = null;
        var chargePenalty = null;
        var chargePenDetail = null;

        var action = "";
        var pan = "";
        var offCode = "";
        var fiscalYear = Ext.ComponentQuery.query("#txtFiscalYearAnx1")[0].getValue();
        var subNo = Ext.ComponentQuery.query("#txtSubNoAnx1")[0].getValue();

        var totalPayableTax = Ext.ComponentQuery.query('#txtAssessmentChargeAnx1')[0].getValue();
        var totalTaxLiability = Ext.ComponentQuery.query('#txtTotTaxLiabilityAnx1')[0].getValue();
        var taxIncomeAFTDe = Ext.ComponentQuery.query('#txtDedTotalAnx1')[0].getValue();
        var taxAFTDe = Ext.ComponentQuery.query('#txtNetTaxLiabilityAnx1')[0].getValue();
        var dateUpto = Ext.ComponentQuery.query('#txtUptoDateAnx1')[0].getValue();

        var param = me.validateParam();

        pan     = param.pan;
        offCode = param.offCode;

        if(param.action === "E")
        {
            action  = param.action;
        }

        //---------------------------------------------------------------------------------------
        // NB: ChargePentalty and ChargePenalty Detail
        //---------------------------------------------------------------------------------------
        chargePenalty = {
            OffCode :offCode,
            BatchType :"",
            ChargeNo :subNo,
            ChargeDate :""  ,         
            Pan :pan,
            FiscalYear :fiscalYear,
            TotalAmount:totalPayableTax,
            ReceiptShipmentDate :"",
            ReceiptShipmentMode :"",
            OfficerCode :"",
            RecordStatus :"",
            Terminal:"", 
            TranDate :"",
            UserName :"",         
            Action :action,
            ChargePenaltyDetails:null
        };

        chargePenalty.ChargePenaltyDetails = me.getChargPenDetail(chargePenalty,action);


        //---------------------------------------------------------------------------------------
        // NB: Tax Deductibles
        //---------------------------------------------------------------------------------------
        //deductibles = me.getDeductibles(action);
        deductibles = me.getDeductibles("A");

        //---------------------------------------------------------------------------------------
        // NB: TaxRate Liablities
        //---------------------------------------------------------------------------------------
        if(strTaxRateLiab.getCount() > 0)
        {
            taxRateLiabilities = getJson(strTaxRateLiab);
        }

        //---------------------------------------------------------------------------------------
        // NB: Assessment Detail
        //---------------------------------------------------------------------------------------
        assmtDetail = me.getAssmtDetail(action);


        //---------------------------------------------------------------------------------------
        // NB: Assessment
        //---------------------------------------------------------------------------------------
        assessment = {  OffCode:offCode,
            Pan:pan,
            FiscalYear:fiscalYear,
            AssessmentNo:subNo,
            TotalTaxLiability:(totalTaxLiability === "" || totalTaxLiability === null)?0:totalTaxLiability,
            TotalPayableTax:(totalPayableTax === "" || totalPayableTax === null)?0:totalPayableTax,
            TaxIncomeAFTDe:(taxIncomeAFTDe === "" || taxIncomeAFTDe === null)?0:taxIncomeAFTDe,
            TaxAFTDe:(taxAFTDe === "" || taxAFTDe === null)?0:taxAFTDe,
            DateUpto:dateUpto,
            AssmtDetailChildDOne:assmtDetail,
            Deductibles:deductibles,
            TaxRateLiabilities:taxRateLiabilities,
            ChargePenalty:chargePenalty,
            Action:action
        };


        //---------------------------------------------------------------------------------------
        // NB: Saving Annex-1 Details
        //---------------------------------------------------------------------------------------
        var wait  = waitMsg('Saving ...');
        Ext.Ajax.request({
            url:'../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=SaveUpdateAssmtForAnnex',
            params:{assmt:JSON.stringify(assessment)},
            success:function(result, request)
            {
                var obj = Ext.decode(result.responseText);   

                wait.hide();        

                if(param.action === "" || param.action === "A")
                {      

                    var btnSubmit = Ext.ComponentQuery.query("#btnSubmitAnx1")[0];
                    var annexD03 = me.getController('MyApp.controller.SetAnnexD03');            

                    param.action = "E";                
                    btnSubmit.setText("Update Annex 1");
                    annexD03.loadAnxSummary(subNo);

                }


                msg(obj.success === "true" ?"SUCCESS":"WARNING",obj.message); 
            },

            failure:function(result, request){
                wait.hide();
                msg('ERROR OCURRED !!!', 'Error');                 
            }

        });
    },

    onLblRedirectAnx1Click: function(label) {
        var me = this;

        Ext.Msg.confirm('Confirm Action', 'के तपाई पछाडि गएर अनुसुची तय गर्न चाहनुहुन्छ?', function(btn) {
            if(btn == 'yes'){        

                var annexD03 = me.getController('MyApp.controller.SetAnnexD03');

                var param = me.validateParam();
                param.action ="";

                annexD03.redirectToAnnexD03(param);
            }
        }, this);

    },

    createTextBox: function(txtID,value) {
        var id = Ext.id();

        Ext.Function.defer(function(){
            var txtBox = ""; 

            txtBox = new Ext.form.TextField({
                id:"txtIN1Anx1",
                itemId:"txtIN1Anx1",
                value: null,
                renderTo: id,
                height: 22,
                width:100,
                fieldCls: 'TxtRight',
                maskRe: /[0-9]/,
                maxLength: 10,
                readOnly:true,
                enableKeyEvents: true
            });

        },25);

        return '<div id="' + id +'"></div>';
    },

    onLaunch: function() {
        var me = this;
        var annexD03 = me.getController('MyApp.controller.SetAnnexD03');
        var param = me.validateParam();
        var el = Ext.get('lnkRedirectTopAnx1');

        el.on('click', function(e,t,eOpts){

            Ext.Msg.confirm('Confirm Action', 'के तपाई पछाडि गएर अनुसुची तय गर्न चाहनुहुन्छ?', function(btn) {
                if(btn == 'yes'){        

                    param.action ="";
                    annexD03.redirectToAnnexD03(param);
                }
            }, this);
        });
    },

    reArrangeData: function(store) {
        var grdIn = Ext.ComponentQuery.query('#grdInclusionD03Anx1')[0];

        var sumCol4 =0;
        var sumCol5 =0;
        var sumCol6 =0;
        var sumCol7 =0;
        var sumCol8 =0;
        var sumCol9 =0;

        store.each(function(rec,idx){

            var taxableIncome = 0;
            var effRate = 0;

            var col4  = (rec.data.TotalInclusion === "" || rec.data.TotalInclusion === null)?0:rec.data.TotalInclusion;

            if(rec.data.AnnexID == "R" || rec.data.AnnexID == "6")
            {
                rec.data.TotalInclusion = col4;
                rec.data.IncomeLoss = col4;
                rec.data.NetIncomeLoss = col4;
            }

            var col5  = (rec.data.IncomeLoss === "" || rec.data.IncomeLoss === null)?0:rec.data.IncomeLoss;
            var col6  = (rec.data.NetIncomeLoss === "" || rec.data.NetIncomeLoss === null)?0:rec.data.NetIncomeLoss;
            var col7  = (rec.data.RetirementFund === "" || rec.data.RetirementFund === null)?0:rec.data.RetirementFund;
            var col8  = (rec.data.Donation === "" || rec.data.Donation === null)?0:rec.data.Donation;
            var col10 = (rec.data.RateApplicable === "" || rec.data.RateApplicable === null)?0:rec.data.RateApplicable;
            var col12 = (rec.data.Discount === "" || rec.data.Discount === null)?0:rec.data.Discount;
            var col13 = rec.data.EffectiveTaxRate;

            if(col5 < 0)
            {
                col6 = 0;
            }

            rec.data.TotalInclusion = col4;
            rec.data.IncomeLoss = col5;
            rec.data.NetIncomeLoss = col6;
            rec.data.RetirementFund = col7;
            rec.data.Donation = col8;
            rec.data.RateApplicable = col10;
            rec.data.Discount = col12;
            rec.data.EffectiveTaxRate = col13;


            //---------------------------------------------------------------
            // NB: TaxableIncome (col6-col7-col8)
            //---------------------------------------------------------------
            taxableIncome = parseFloat(col6) - parseFloat(col7) - parseFloat(col8);

            //---------------------------------------------------------------
            // NB: EffectiveRate (col10-col12)
            //----------------------------------------------------------------
            effRate = parseFloat(col10) - parseFloat(col12);

            rec.data.TaxableIncome = taxableIncome;
            rec.data.EffectiveTaxRate = effRate;

            var totInclusion = (rec.data.TotalInclusion === "" || rec.data.TotalInclusion === null)?0:rec.data.TotalInclusion;
            var incomeLoss = (rec.data.IncomeLoss === "" || rec.data.IncomeLoss === null)?0:rec.data.IncomeLoss;
            var netIncomeLoss = (rec.data.NetIncomeLoss === "" || rec.data.NetIncomeLoss === null)?0:rec.data.NetIncomeLoss;
            var retirementFund = (rec.data.RetirementFund === "" || rec.data.RetirementFund === null)?0:rec.data.RetirementFund;
            var donation = (rec.data.Donation === "" || rec.data.Donation === null)?0:rec.data.Donation;
            // taxableIncome = (rec.data.TaxableIncome === "" || rec.data.TaxableIncome === null)?0:rec.data.TaxableIncome;

            //---------------------------------------------------------------
            // NB: Sum Calculation
            //---------------------------------------------------------------
            sumCol4 = parseFloat(sumCol4) + parseFloat(totInclusion); 
            sumCol5 = parseFloat(sumCol5) + parseFloat(incomeLoss); 
            sumCol6 = parseFloat(sumCol6) + parseFloat(netIncomeLoss); 
            sumCol7 = parseFloat(sumCol7) + parseFloat(retirementFund); 
            sumCol8 = parseFloat(sumCol8) + parseFloat(donation); 
            sumCol9 = parseFloat(sumCol9) + parseFloat(taxableIncome); 
        });

        grdIn.bindStore(store);

        var txtSumTotInclusion = Ext.ComponentQuery.query('#txtSumTotalInclusionAnx1')[0];
        var txtSumIncomeLoss = Ext.ComponentQuery.query('#txtSumIncomeLossAnx1')[0];
        var txtSumNetIncomeLoss = Ext.ComponentQuery.query('#txtSumNetIncomeLossAnx1')[0];
        var txtSumRetirement = Ext.ComponentQuery.query('#txtSumRetirementFundAnx1')[0];
        var txtSumDonation = Ext.ComponentQuery.query('#txtSumDonationAnx1')[0];
        var txtSumTaxableIncome = Ext.ComponentQuery.query('#txtSumTaxableIncomeAnx1')[0];

        //var txtDedTotIncomeTaxAnx = Ext.ComponentQuery.query('#txtDedTotIncomeTaxAnx1')[0];
        var txtDedTotal = Ext.ComponentQuery.query('#txtDedTotalAnx1')[0];

        txtSumTotInclusion.setValue(sumCol4);
        txtSumIncomeLoss.setValue(sumCol5);
        txtSumNetIncomeLoss.setValue(sumCol6);
        txtSumRetirement.setValue(sumCol7);
        txtSumDonation.setValue(sumCol8);
        txtSumTaxableIncome.setValue(sumCol9);

        //txtDedTotIncomeTaxAnx.setValue(sumCol9);
        txtDedTotal.setValue(sumCol9);
    },

    loadSlab: function() {
        var me = this;
        var txtDedTotal = Ext.ComponentQuery.query('#txtDedTotalAnx1')[0];
        var strTaxSlab = Ext.getStore("TaxSlabD03");

        var param = me.validateParam();

        strTaxSlab.load(
        {
            params:{taxCatID:param.taxpayerCat,fiscalYear:param.fiscalYear,amount:txtDedTotal.getValue()},
            //params:{taxCatID:"A1-1-1",fiscalYear:param.fiscalYear,amount:txtDedTotal.getValue()},
            //params:{taxCatID:"A1-1-1",fiscalYear:param.fiscalYear,amount:"898000"},
            scope:this,
            callback: function(records, operation, success){
                if(success){

                    me.reOrderTaxSlab(strTaxSlab);
                    me.calTax(strTaxSlab);            
                    me.calNetTaxLiability();
                }
            }
        });

    },

    reOrderTaxSlab: function(strTaxSlab) {
        //----------------------------------------------------------------------------
        // NB: Recalculate Tax Slab
        //----------------------------------------------------------------------------
        var store = Ext.getStore("DCTBAnnex");

        store.each(function(rec,idx){

            if(rec.data.EffectiveTaxRate !== null)
            {
                var recIdx = -1;

                recIdx = strTaxSlab.findBy(        
                function(record, id){
                    if(record.get('RateCode') === rec.data.EffectiveTaxRate){
                        return true;  // a record with this data exists
                    }
                    return false;  // there is no record in the store with this data
                });

                if(recIdx === -1)
                {
                    strTaxSlab.add({AmountRange: rec.data.TaxableIncome,
                        RateCode: rec.data.EffectiveTaxRate,
                        TaxLiability: null,
                    AssessableIncome:null});
                }
                else
                {
                    //----------------------------------------------------------------------------
                    //NB: If matched , then Setting the greater value
                    //----------------------------------------------------------------------------

                    var row = strTaxSlab.getAt(recIdx).data;

                    var taxable = rec.data.TaxableIncome === "" || rec.data.TaxableIncome === null?0:parseFloat(rec.data.TaxableIncome);

                    var amtRange = row.AmountRange === "" || row.AmountRange === null?0:parseFloat(row.AmountRange);

                    var newAmt = taxable + amtRange;


                    row.AmountRange = newAmt;

                    /*
                    if(rec.data.TaxableIncome > row.AmountRange)
                    {
                    row.AmountRange = rec.data.TaxableIncome;

                    }
                    */

                }
            }


        });


        strTaxSlab.sort('RateCode','ASC');



        //----------------------------------------------------------------------------
        // NB: Recalculate Tax Slab
        //----------------------------------------------------------------------------

        /*
        var store = Ext.getStore("DCTBAnnex");

        store.each(function(rec,idx){

        if(rec.data.EffectiveTaxRate !== null)
        {
        var recIdx = -1;

        recIdx = strTaxSlab.findBy(        
        function(record, id){
        if(record.get('RateCode') === rec.data.EffectiveTaxRate){
        return true;  // a record with this data exists
        }
        return false;  // there is no record in the store with this data
        });

        if(recIdx === -1)
        {
        strTaxSlab.add({AmountRange: rec.data.TaxableIncome,
        RateCode: rec.data.EffectiveTaxRate,
        TaxLiability: null,
        AssessableIncome:null});
        }
        }


        });

        */
    },

    calTax: function(strTaxSlab) {
        var grdTaxSlab = Ext.ComponentQuery.query('#grdTaxSlabD03')[0];

        var txtTotAssessableIncome = Ext.ComponentQuery.query('#txtTotAssessableIncomeAnx1')[0];
        var txtTotTaxLiability = Ext.ComponentQuery.query('#txtTotTaxLiabilityAnx1')[0];

        var taxableAmount = Ext.ComponentQuery.query('#txtDedTotalAnx1')[0].getValue();
        taxableAmount = (taxableAmount === "" || taxableAmount === null)?0:taxableAmount; 

        //taxableAmount="898000";

        if(taxableAmount > -1)
        {
            var sumAssIncome =0;
            var sumTaxLiab =0;

            var i= 0;

            strTaxSlab.each(function(rec,idx){

                if(taxableAmount > -1)
                {
                    var assessableIncome = null;
                    var taxLiability = null;
                    var amtRange = (rec.data.AmountRange === "" || rec.data.AmountRange === null)?0:rec.data.AmountRange;
                    var rateCode = (rec.data.RateCode === "" || rec.data.RateCode === null)?0:rec.data.RateCode;


                    if(taxableAmount > amtRange)
                    {
                        assessableIncome = amtRange;
                        taxableAmount = parseFloat(taxableAmount) - parseFloat(amtRange);
                    }
                    else
                    {
                        assessableIncome = parseFloat(taxableAmount);
                        taxableAmount = -1;
                    }

                    taxLiability = parseFloat(assessableIncome) * parseFloat(rateCode)/100;

                    rec.data.AssessableIncome = assessableIncome;
                    rec.data.TaxLiability = taxLiability;

                    sumAssIncome = parseFloat(sumAssIncome) + parseFloat(assessableIncome); 
                    sumTaxLiab = parseFloat(sumTaxLiab) + parseFloat(taxLiability); 
                }
                else
                {            
                    var removeIdx = parseFloat(idx) - parseFloat(i) ;
                    strTaxSlab.removeAt(removeIdx);
                    i++;             
                }
            });    

            grdTaxSlab.bindStore(strTaxSlab); 

            txtTotAssessableIncome.setValue(sumAssIncome);
            txtTotTaxLiability.setValue(sumTaxLiab);  

            //------------------------------------------------
            // NB: Filter the out of range datas
            //------------------------------------------------
            /*
            alert("before filter !");
            strTaxSlab.filter(function(item){
            //return (item.get("AssessableIncome") != "" || item.get("AssessableIncome") != null);
            return (item.TaxLiability !== null);
        });
        */
    }

    },

    calculate: function() {
        var me = this;
        var grandSum = 0;
        var sum = 0;

        var txtDedTotalAnx = Ext.ComponentQuery.query('#txtDedTotalAnx1')[0];
        var dedTotIncomeTax = Ext.ComponentQuery.query('#txtDedTotIncomeTaxAnx1')[0].getValue();

        //var grid = Ext.ComponentQuery.query('#grdAssessableIncomeAnx1')[0];
        //var store = grid.getStore();
        var strDedItems = Ext.getStore("DedItemsD03");

        var len = strDedItems.getCount();

        for(var i=2;i<len;i++){

            var id = "#txtAssIN" + i + "Anx1";
            var val = Ext.ComponentQuery.query(id)[0].getValue();
            var row = strDedItems.getAt(i).data;

            val = (val === "")?0:val;
            row.ItemValue = val === null?0:val;
            sum = parseFloat(sum) + parseFloat(val);
        }

        dedTotIncomeTax = dedTotIncomeTax === null?0:dedTotIncomeTax;

        grandSum = parseFloat(sum) + parseFloat(dedTotIncomeTax);

        txtDedTotalAnx.setValue(grandSum);

        me.loadSlab();
    },

    loadDeductibleItems: function() {
        var strDedItems = Ext.getStore("DedItemsD03");

        var strDedItemsTax = null;

        strDedItemsTax = deepCloneStore(strDedItems,"DedItemsTax");
        strDedItemsTax.loadData([],false);

        strDedItems.load(
        {
            params:{},
            scope:this,
            callback: function(records, operation, success){
                if(success){

                    var row1 =  {
                        ItemID:'1',
                        ItemDescNep:'जम्मा कर योग्य आय ',
                        ItemDescEng:'1.',
                        ItemValue:'',
                        DeductFrom:'Assessable Income'
                    };

                    var row2 =  {
                        ItemID:'2',
                        ItemDescNep:'कट्टी रकम',
                        ItemDescEng:'2.',
                        ItemValue:'',
                        DeductFrom:'Assessable Income'
                    };

                    strDedItems.add(row1);
                    strDedItems.add(row2);

                    strDedItems.sort('ItemID','ASC');

                    //-----------------------------------------------------------------------------
                    for(var i =0;i< records.length;i++)
                    {

                        var row = records[i].data;


                        if(row.DeductFrom == "Tax")
                        {
                            strDedItemsTax.add(row);
                        }

                    }          

                    //-----------------------------------------------------------------------------
                    //var strDedItemsTax = null;

                    //strDedItemsTax = deepCloneStore(strDedItems,"DedItemsTax");

                    strDedItems.filter('DeductFrom',"Assessable Income");
                    //strDedItemsTax.filter('DeductFrom',"Tax");

                    if(strDedItemsTax.getCount() > 0)
                    {            
                        var grdTaxAnx = Ext.ComponentQuery.query("#grdTaxAnx1")[0];
                        grdTaxAnx.store = strDedItemsTax;
                        grdTaxAnx.bindStore(strDedItemsTax);
                    }
                    else
                    {
                        msg("WARNING","Error in loading Deductible !!!");
                    }

                }
            }
        });
    },

    calNetTaxLiability: function() {
        var me = this;
        var netTaxLiability = 0;
        var sum = 0;

        var totTaxLiability = Ext.ComponentQuery.query('#txtTotTaxLiabilityAnx1')[0].getValue();
        var txtNetTaxLiability = Ext.ComponentQuery.query('#txtNetTaxLiabilityAnx1')[0];

        var grid = Ext.ComponentQuery.query('#grdTaxAnx1')[0];
        var store = grid.getStore();
        var len = store.getCount();

        for(var i=0;i<len;i++){

            var id = "#txtTax" + i + "Anx1";
            var val = Ext.ComponentQuery.query(id)[0].getValue();
            var row = store.getAt(i).data;

            val = (val === "")?0:val;
            row.ItemValue = val === 0?null:val;
            sum = parseFloat(sum) + parseFloat(val);
        }

        totTaxLiability = (totTaxLiability === "" || totTaxLiability === null)?0:totTaxLiability;
        netTaxLiability =  parseFloat(totTaxLiability) - parseFloat(sum);
        txtNetTaxLiability.setValue(netTaxLiability);

        me.calAssessmentCharge();
    },

    calAssessmentCharge: function() {
        var netTaxLiability = Ext.ComponentQuery.query('#txtNetTaxLiabilityAnx1')[0].getValue();
        var section117 = Ext.ComponentQuery.query('#txtSection117Anx1')[0].getValue();
        var section118 = Ext.ComponentQuery.query('#txtSection118Anx1')[0].getValue();
        var section119 = Ext.ComponentQuery.query('#txtSection119Anx1')[0].getValue();

        var txtAssessmentChargeAnx = Ext.ComponentQuery.query('#txtAssessmentChargeAnx1')[0];

        var sum = 0;

        netTaxLiability = (netTaxLiability === "" || netTaxLiability === null)?0:netTaxLiability;
        section117 = (section117 === "" || section117 === null)?0:section117;
        section118 = (section118 === "" || section118 === null)?0:section118;
        section119 = (section119 === "" || section119 === null)?0:section119;


        sum = parseFloat(netTaxLiability) + parseFloat(section117) + parseFloat(section118) + parseFloat(section119);

        txtAssessmentChargeAnx.setValue(sum);

        /*
        txtAssessmentChargeAnx1


        txtUptoDateAnx1
        txtSection117Anx1
        txtSection118Anx1
        txtSection119Anx1

        */
    },

    getChargPenDetail: function(arg,action) {
        var chargePenDetail = null;

        var section117 = Ext.ComponentQuery.query('#txtSection117Anx1')[0].getValue();
        var section118 = Ext.ComponentQuery.query('#txtSection118Anx1')[0].getValue();
        var section119 = Ext.ComponentQuery.query('#txtSection119Anx1')[0].getValue();

        section117 = (section117 === "" || section117 === null)?0:section117;
        section118 = (section118 === "" || section118 === null)?0:section118;
        section119 = (section119 === "" || section119 === null)?0:section119;

        chargePenDetail = [
        {
            OffCode :arg.OffCode,
            BatchType :"SA",
            ChargeNo :arg.ChargeNo,
            ChargeDate :"",
            Amount :section117,
            RecordStatus :"",
            Terminal :"",
            TranDate :"",
            UserName :"",
            Action :action,
            Pan :arg.Pan,
            SectionNo:"117" 
        },
        {
            OffCode :arg.OffCode,
            BatchType :"SA",
            ChargeNo :arg.ChargeNo,
            ChargeDate :"",
            Amount :section118,
            RecordStatus :"",
            Terminal :"",
            TranDate :"",
            UserName :"",
            Action :action,
            Pan :arg.Pan,
            SectionNo:"118" 
        },
        {
            OffCode :arg.OffCode,
            BatchType :"SA",
            ChargeNo :arg.ChargeNo,
            ChargeDate :"",
            Amount :section119,
            RecordStatus :"",
            Terminal :"",
            TranDate :"",
            UserName :"",
            Action :action,
            Pan :arg.Pan,
            SectionNo:"119" 
        }];


        return chargePenDetail;
    },

    getAssmtDetail: function(action) {
        var grid = Ext.ComponentQuery.query('#grdInclusionD03Anx1')[0];
        var store = grid.getStore();
        var assmtDetail = [];

        var totInclusion = Ext.ComponentQuery.query('#txtSumTotalInclusionAnx1')[0].getValue();
        var incomeLoss = Ext.ComponentQuery.query('#txtSumIncomeLossAnx1')[0].getValue();
        var netIncomeLoss = Ext.ComponentQuery.query('#txtSumNetIncomeLossAnx1')[0].getValue();
        var retirementFund = Ext.ComponentQuery.query('#txtSumRetirementFundAnx1')[0].getValue();
        var donation = Ext.ComponentQuery.query('#txtSumDonationAnx1')[0].getValue();
        var taxableIncome = Ext.ComponentQuery.query('#txtSumTaxableIncomeAnx1')[0].getValue();

        //------------------------------------------------------------
        // NB: Total
        //------------------------------------------------------------

        var assessmentNo = Ext.ComponentQuery.query('#txtSubNoAnx1')[0].getValue();
        var taxCatId = Ext.ComponentQuery.query('#txtTaxCatAnx1')[0].getValue();
        var netAssessable = Ext.ComponentQuery.query('#txtDedTotalAnx1')[0].getValue();
        var assessDetailSn = 0;

        var total ={
            AssessmentNo:assessmentNo,        
            AssessDetailSn:0,
            MTCFromDate:"", 
            TaxCatId:taxCatId,
            CountryCode:"",        
            Inclusions:totInclusion ===""?null:totInclusion,
            Expenses:null,         
            AssessableIncome:netIncomeLoss ===""?null:netIncomeLoss,    
            IncomeGainLoss:incomeLoss ===""?null:incomeLoss,
            MsDisCatFromDate:"",
            DiscCatId:"",
            Concessions:null,    
            NetTaxLiability:null,
            RecordStatus:"",
            Terminal:"",
            TranDate:"",
            UserName:"",
            NetAssessable:netAssessable ===""?null:netAssessable,    
            Retirement_Contrib:retirementFund ===""?null:retirementFund,    
            Donation:donation ===""?null:donation,    
            AssessbleInAfterConsession:taxableIncome ===""?null:taxableIncome,
            AnnexId:"1",
            RateApplicable:null,
            Action:action,
            ReturnDocType:"T",
            AnnexIDSno:null
        };

        assmtDetail.push(total);

        //------------------------------------------------------------
        // NB: Detail
        //------------------------------------------------------------

        store.each(function(rec,idx){

            console.log("rec",rec);

            var returnDocType = "";

            if(rec.data.AnnexID === 5)
            {
                returnDocType = "B";
            }
            else if(rec.data.AnnexID === 6)
            {
                returnDocType = "R";
            }
            else if(rec.data.AnnexID === 7)
            {
                returnDocType = "I";
            }
            else if(rec.data.AnnexID === 8)
            {
                returnDocType = "A";
            }

            if(action === "E")
            {
                assessDetailSn = rec.data.AssessDetailSn;
            }
            else
            {
                assessDetailSn = idx+1;
            }


            row ={

                AssessmentNo:assessmentNo,        
                AssessDetailSn:assessDetailSn,
                MTCFromDate:rec.data.MtcFromDate, 
                TaxCatId:rec.data.TaxCatID,
                CountryCode:rec.data.CountryCode,        
                Inclusions:rec.data.TotalInclusion ===""?null:rec.data.TotalInclusion,
                Expenses:rec.data.TotalDeductibleExp ===""?null:rec.data.TotalDeductibleExp,         
                AssessableIncome:rec.data.NetIncomeLoss ===""?null:rec.data.NetIncomeLoss,    
                IncomeGainLoss:rec.data.IncomeLoss ===""?null:rec.data.IncomeLoss,
                MsDisCatFromDate:rec.data.MsDisCatFromDate,
                DiscCatId:rec.data.DiscCatID,
                Concessions:rec.data.Discount ===""?null:rec.data.Discount,    
                NetTaxLiability:null,
                RecordStatus:"",
                Terminal:"",
                TranDate:"",
                UserName:"",
                NetAssessable:null,
                Retirement_Contrib:rec.data.RetirementFund ===""?null:rec.data.RetirementFund,    
                Donation:rec.data.Donation ===""?null:rec.data.Donation,    
                //AssessbleInAfterConsession:rec.data.AssIncomeAftConcession ===""?null:rec.data.AssIncomeAftConcession,
                AssessbleInAfterConsession:rec.data.TaxableIncome ===""?null:rec.data.TaxableIncome,
                AnnexId:"1",
                RateApplicable:rec.data.RateApplicable,
                Action:action,
                ReturnDocType:returnDocType,
                AnnexIDSno:rec.data.AnnexIDSno
            };

            assmtDetail.push(row);
        });

        return assmtDetail;
    },

    getDeductibles: function(action) {
        var strDedItems = Ext.getStore("DedItemsD03");
        var strDedItemsTax = Ext.getStore("DedItemsTax");

        var deductible = [];

        strDedItems.each(function(rec,idx){

            if(rec.data.ItemID > 2)
            {
                row ={
                    ItemID:parseInt(rec.data.ItemID)-2,
                    Amount:rec.data.ItemValue === ""?null:rec.data.ItemValue,
                    DeductFrom:rec.data.DeductFrom,
                    Action:action
                };

                deductible.push(row);
            }
        });

        strDedItemsTax.each(function(rec,idx){

            row ={
                ItemID:parseInt(rec.data.ItemID)-2,
                Amount:rec.data.ItemValue === ""?null:rec.data.ItemValue,
                DeductFrom:rec.data.DeductFrom,
                Action:action
            };

            deductible.push(row);
        });

        return deductible;
    },

    validateParam: function() {
        var me = this;
        var view = Ext.ComponentQuery.query('#pnlD03Annex1')[0];
        var user = me.getController('MyApp.controller.LoginSecurity');  
        var param = "";

        if(view.extraParam === null)
        {
            user.clearSession();

            return;

        }
        else
        {
            return view.extraParam;
        }
    },

    setAssmtDetail: function(result) {
        var me = this;
        var store = Ext.getStore("DCTBAnnex");
        store.loadData([],false);

        for (var key in result)
        {
            if (result.hasOwnProperty(key))
            {

                if(result[key].AssessDetailSn > 0)
                {
                    row ={

                        AssessmentNo:result[key].AssessmentNo,  
                        AnnexIDSno:result[key].AssessDetailSn,
                        MtcFromDate:result[key].MTCFromDate, 
                        TaxCatID:result[key].TaxCatId,
                        CountryCode:result[key].CountryCode,        
                        TotalInclusion:result[key].Inclusions ===""?null:result[key].Inclusions,
                        TotalDeductibleExp: result[key].Expenses ===""?null:result[key].Expenses,         
                        NetIncomeLoss:result[key].AssessableIncome ===""?null:result[key].AssessableIncome,    
                        IncomeLoss:result[key].IncomeGainLoss ===""?null:result[key].IncomeGainLoss,
                        MsDisCatFromDate:result[key].MsDisCatFromDate,
                        DiscCatID:result[key].DiscCatId,
                        Discount:result[key].Concessions ===""?null:result[key].Concessions,    
                        RetirementFund:result[key].Retirement_Contrib ===""?null:result[key].Retirement_Contrib,    
                        Donation:result[key].Donation ===""?null:result[key].Donation,    
                        AssIncomeAftConcession:result[key].AssessbleInAfterConsession ===""?null:result[key].AssessbleInAfterConsession,
                        AnnexID :result[key].ReturnDocType,
                        ReturnDocType :result[key].ReturnDocType,
                        RateApplicable:result[key].RateApplicable

                    };

                    store.add(row);
                }
            }
        }


        me.reArrangeData(store);
        //me.loadDeductibleItems();

    },

    setChargPenDetail: function(result) {
        var txtSection117 = Ext.ComponentQuery.query('#txtSection117Anx1')[0];
        var txtSection118 = Ext.ComponentQuery.query('#txtSection118Anx1')[0];
        var txtSection119 = Ext.ComponentQuery.query('#txtSection119Anx1')[0];

        for (var key in result)
        {
            if (result.hasOwnProperty(key))
            {
                if(result[key].Amount !== null)
                {

                    if(result[key].SectionNo === "117")
                    {
                        txtSection117.setValue(result[key].Amount);
                    }
                    else if(result[key].SectionNo === "118")
                    {
                        txtSection118.setValue(result[key].Amount);
                    }
                    else if(result[key].SectionNo === "119")
                    {
                        txtSection119.setValue(result[key].Amount);
                    }
                }
            }
        }
    },

    setDeductibles: function(store) {
        var me = this;
        var strDedItems = Ext.getStore("DedItemsD03");

        var strDedItemsTax = null;

        strDedItemsTax = deepCloneStore(strDedItems,"DedItemsTax");
        strDedItemsTax.loadData([],false);

        strDedItems.load(
        {
            params:{},
            scope:this,
            callback: function(records, operation, success){
                if(success){

                    var row1 =  {
                        ItemID:'1',
                        ItemDescNep:'जम्मा कर योग्य आय ',
                        ItemDescEng:'1.',
                        ItemValue:'',
                        DeductFrom:'Assessable Income'
                    };

                    var row2 =  {
                        ItemID:'2',
                        ItemDescNep:'कट्टी रकम',
                        ItemDescEng:'2.',
                        ItemValue:'',
                        DeductFrom:'Assessable Income'
                    };

                    strDedItems.add(row1);
                    strDedItems.add(row2);

                    strDedItems.sort('ItemID','ASC');

                    //-----------------------------------------------------------
                    // NB: Set Deductible data for update
                    //-----------------------------------------------------------            

                    var sum = 0;

                    for(var i =0;i< records.length;i++)
                    {

                        var row = records[i].data;

                        var rowIdx = store.findBy(function(record, id){                            
                            var recID = parseInt(record.get('ItemID')) + 2;
                            //var recID = parseInt(record.get('ItemID'));
                            var rowID = row.ItemID;

                            if(recID == rowID)
                            {
                                var annexValue = null;
                                annexValue = record.get('Amount');

                                row.ItemValue = annexValue;

                                if(row.DeductFrom == "Assessable Income")
                                {
                                    sum = parseFloat(sum) + parseFloat(annexValue);
                                }                                       

                                return true ;  // a record with this data exists
                            }                    


                            return false;  // there is no record in the store with this data
                        });

                        if(row.DeductFrom == "Tax")
                        {
                            strDedItemsTax.add(row);
                        }

                    }          

                    strDedItems.filter('DeductFrom',"Assessable Income");

                    if(strDedItemsTax.getCount() > 0)
                    {            
                        var grdTaxAnx = Ext.ComponentQuery.query("#grdTaxAnx1")[0];
                        grdTaxAnx.store = strDedItemsTax;
                        grdTaxAnx.bindStore(strDedItemsTax);
                    }
                    else
                    {
                        msg("WARNING","Error in loading Deductible !!!");
                    }

                    //-----------------------------------------------------------------------------------
                    // NB: Calculate Total
                    //-----------------------------------------------------------------------------------
                    var grandSum = 0;
                    var txtDedTotalAnx = Ext.ComponentQuery.query('#txtDedTotalAnx1')[0];
                    var txtDedTotIncomeTaxAnx = Ext.ComponentQuery.query('#txtSumTaxableIncomeAnx1')[0];
                    var dedTotIncomeTax = txtDedTotIncomeTaxAnx.getValue();

                    dedTotIncomeTax = dedTotIncomeTax === null?0:dedTotIncomeTax;

                    grandSum = parseFloat(sum) + parseFloat(dedTotIncomeTax);

                    txtDedTotalAnx.setValue(grandSum);
                    me.loadSlab();


                    //-----------------------------------------------------------------------------------

                }
            }
        });
    },

    loadDataForUpdate: function(param) {
        var me = this;
        var wait = waitMsg("Please wait ...");
        var btnSubmit = Ext.ComponentQuery.query("#btnSubmitAnx1")[0];

        var store = Ext.getStore("DCTBAnnex");
        store.loadData([],false);

        btnSubmit.setText("Update Annex 1");

        Ext.Ajax.request({
            url:'../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=GetDCTBAssessmentForAnx1',
            params:{assessmentNo:param.submissionNo},
            success:function(result, request)
            {
                wait.hide();

                var obj = Ext.decode(result.responseText);    
                var data = obj.root;

                //console.log("upd Annex>>>",data);

                var store = Ext.getStore("DCTBAnnex");

                var txtTaxCat = Ext.ComponentQuery.query('#txtTaxCatAnx1')[0];
                var txtDateUpto = Ext.ComponentQuery.query('#txtUptoDateAnx1')[0];
                var assmtDetail = [];
                var chargePenDetail = [];       

                var strDeductibles = new Ext.data.Store({
                    fields: ['Action',
                    'Amount',
                    'AssessmentDate',
                    'AssessmentNo',
                    'DeductFrom',
                    'FiscalYear',
                    'ItemID',
                    'OffCode',
                    'Pan',
                    'RecordStatus',
                    'Terminal',
                    'TranDate',
                    'UserName' ],
                    storeId:'UpdDedAnx1'
                });


                strDeductibles.loadData([],false);        
                strDeductibles.add(data.Deductibles);

                assmtDetail = data.AssmtDetailChildDOne;
                txtTaxCat.setValue(data.TaxpayerCat);
                txtDateUpto.setValue(data.DateUpto);

                if(obj.root.DateUpto !== "")
                {
                    chargePenDetail = data.ChargePenalty.ChargePenaltyDetails; 
                }

                me.setAssmtDetail(assmtDetail);                 
                me.setChargPenDetail(chargePenDetail); 
                me.setDeductibles(strDeductibles);


            },
            failure:function(result, request){

                wait.hide();
                msg('ERROR OCURRED !!!', 'Error');                 
            }

        });

    },

    loadAnnexLk: function(param) {
        var me = this;
        var wait = waitMsg("Please wait ...");

        var store = Ext.getStore("DCTBAnnex");
        store.loadData([],false);

        //------------------------------------------------------
        // NB: Retrive Data from Server
        //------------------------------------------------------

        Ext.Ajax.request({
            url: '../Handlers/IncomeTax/D03/DCTBAnnexHandler.ashx?method=GetDCTBAnnexes',
            params:{assessmentNo:param.submissionNo,annexID:null},
            success: function ( result, request ) {

                wait.hide();        

                var obj = Ext.decode(result.responseText);        

                store.add(obj.root); 

                me.reArrangeData(store);
                me.loadSlab();
                me.loadDeductibleItems();

            },
            failure: function(form, action) {

                wait.hide();    
                msg("FAILURE","Error in Fetching data !!!");
            }

        });

    },

    init: function(application) {
        this.control({
            "#pnlD03Annex1": {
                afterrender: this.onPnlD03Annex1AfterRender
            },
            "#grdInclusionD03Anx1": {
                afterrender: this.onGrdInclusionD03Anx1AfterRender
            },
            "#lblRedirectAnx1": {
                click: this.onLblRedirectAnx1Click,
                click: this.onLblRedirectAnx1Click
            },
            "#grdTaxSlabD03": {
                afterrender: this.onGrdTaxSlabD03AfterRender
            },
            "#grdAssessableIncomeAnx1": {
                afterrender: this.onGrdAssessableIncomeAnx1AfterRender
            },
            "#txtSection119Anx1": {
                keyup: this.onTxtSection119Anx1Keyup
            },
            "#txtSection118Anx1": {
                keyup: this.onTxtSection118Anx1Keyup
            },
            "#txtSection117Anx1": {
                keyup: this.onTxtSection117Anx1Keyup
            },
            "#txtUptoDateAnx1": {
                keypress: this.onTxtUptoDateAnx1Keypress
            },
            "#grdTaxAnx1": {
                afterrender: this.onGridpanelAfterRender
            },
            "#btnSubmitAnx1": {
                click: this.onBtnSubmitAnx1Click
            }
        });
    }

});
