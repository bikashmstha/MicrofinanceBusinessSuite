/*
 * File: app/view/SelectGroupFieldAssistantsPopup.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.SelectGroupFieldAssistantsPopup', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.Text',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Column',
        'Ext.selection.RowModel'
    ],

    height: 500,
    itemId: 'SelectGroupFieldAssistantsPopup',
    width: 700,
    autoScroll: true,
    resizable: false,
    layout: 'fit',
    title: 'Select Field Assistants',
    maximizable: true,
    minimizable: true,
    modal: true,
    y: 80,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    autoScroll: true,
                    bodyPadding: 10,
                    title: '',
                    items: [
                        {
                            xtype: 'container',
                            layout: 'table',
                            items: [
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtSearchFieldAssistantId',
                                    fieldLabel: 'Field Assistant ID'
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtSearchFieldAssistantName',
                                    margin: '0 0 0 5',
                                    fieldLabel: 'Field Assistant Name',
                                    labelWidth: 120
                                },
                                {
                                    xtype: 'button',
                                    colspan: 2,
                                    itemId: 'btnSearchFieldAssistants',
                                    margin: '0 0 0 5',
                                    text: 'Search',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnSearchFieldAssistantsClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            itemId: 'grdSearchFieldAssistants',
                            title: '',
                            store: 'GroupFieldAssistantSearchStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    width: 116,
                                    dataIndex: 'FieldAssistantId',
                                    text: 'Field Assistant Id'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 488,
                                    dataIndex: 'FieldAssistantName',
                                    text: 'Field Assistant Name'
                                }
                            ],
                            selModel: Ext.create('Ext.selection.RowModel', {
                                listeners: {
                                    beforeselect: {
                                        fn: me.onRowModelBeforeSelect,
                                        scope: me
                                    }
                                }
                            })
                        }
                    ]
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onSelectGroupFieldAssistantsPopupAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onBtnSearchFieldAssistantsClick: function(button, e, eOpts) {

        var fieldAssistantId=Ext.ComponentQuery.query('#txtSearchFieldAssistantId')[0];
        var fieldAssistantName=Ext.ComponentQuery.query('#txtSearchFieldAssistantName')[0];
        var fieldAssistant={

            FieldAssistantId :fieldAssistantId.getValue(),
            FieldAssistantName: fieldAssistantName.getValue()

        };
        var waitSave = watiMsg('Loading Data. Please wait ...');
        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Common/FieldAssistantHandler.ashx',
            params: {
                method:'Search', fieldAssistant:JSON.stringify(fieldAssistant)
            },
            success: function(response){


            var obj = Ext.decode(response.responseText);


              if(obj.success === "true")
              {

                  var store=Ext.getStore('GroupFieldAssistantSearchStore');
                  store.removeAll();
                  store.add(obj.root);

              }
                else
                {

                    msg("FAILURE",obj.message);
                }

            waitSave.hide();

            }
        });
    },

    onRowModelBeforeSelect: function(rowmodel, record, index, eOpts) {
        Ext.MessageBox.confirm('Select', 'Are you sure ?', function(btn){

           if(btn === 'yes'){


               Ext.ComponentQuery.query('#txtFieldAssistantCode')[0].setValue(record.data.FieldAssistantId);
               Ext.ComponentQuery.query('#txtFieldAssistantName')[0].setValue(record.data.FieldAssistantName);


              // return true;
           }
           else
           {

           }
            var v=Ext.ComponentQuery.query('#SelectGroupFieldAssistantsPopup')[0];

            v.close();
        });

    },

    onSelectGroupFieldAssistantsPopupAfterRender: function(component, eOpts) {
        var store=Ext.getStore('GroupFieldAssistantSearchStore');
        store.removeAll();
    }

});