/*
 * File: app/controller/DocumentRegistration.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.DocumentRegistration', {
    extend: 'Ext.app.Controller',

    stores: [
        'DocRegUserStore',
        'DocRegSelUserStore',
        'DocRegRoleStore',
        'DocRegSelRoleStore',
        'DocRegKeyStore',
        'DocRegSelKeyStore'
    ],
    views: [
        'DocumentRegistration'
    ],

    onFrmDocRegAfterRender: function(component, eOpts) {
        var cntDRClassify = Ext.ComponentQuery.query("#cntDRClassify")[0];
        cntDRClassify.setVisible(false);
    },

    onRdDRClassifyChange: function(field, newValue, oldValue, eOpts) {
        var cntDRClassify = Ext.ComponentQuery.query("#cntDRClassify")[0];
        var rdDRStatus = Ext.ComponentQuery.query("#rdDRStatus")[0];

        if(field.getValue()===true)
        {
            rdDRStatus.setValue(false);
            cntDRClassify.setVisible(true);
        }

    },

    onRdDRStatusChange: function(field, newValue, oldValue, eOpts) {
        var cntDRClassify = Ext.ComponentQuery.query("#cntDRClassify")[0];
        var rdDRClassify = Ext.ComponentQuery.query("#rdDRClassify")[0];

        if(field.getValue()===true)
        {
            rdDRClassify.setValue(false);
            cntDRClassify.setVisible(false);
        }
    },

    onGrdDRUserListItemClick: function(dataview, record, item, index, e, eOpts) {
        var hdnDRUserIndex = Ext.ComponentQuery.query("#hdnDRUserIndex")[0];
        hdnDRUserIndex.setValue(index);
    },

    onBtnDRUserForwardClick: function(button, e, eOpts) {
        var DocRegSelUserStore = Ext.getStore('DocRegSelUserStore');
        var grid = Ext.ComponentQuery.query("#grdDRUserList")[0];
        var selected = grid.getSelectionModel().getSelection()[0];
        var hdnDRUserIndex = Ext.ComponentQuery.query("#hdnDRUserIndex")[0].getValue();
        var row = grid.store.getAt(hdnDRUserIndex);

        if(selected!==undefined)
        {
            DocRegSelUserStore.add({
                SelID:row.get('ID'),
                SelUser:row.get('User')
            });

        }
    },

    onBtnDRUserBackwardClick: function(button, e, eOpts) {
        var grid = Ext.ComponentQuery.query("#grdDRSelUser")[0];
        var selected = grid.getSelectionModel().getSelection()[0];
        var hdnDRUserIndex = Ext.ComponentQuery.query("#hdnDRUserIndex")[0].getValue();

        if(selected!==undefined)
        {
            grid.store.removeAt(hdnDRUserIndex);
        }
    },

    onGrdDRSelUserItemClick: function(dataview, record, item, index, e, eOpts) {
        var hdnDRUserIndex = Ext.ComponentQuery.query("#hdnDRUserIndex")[0];
        hdnDRUserIndex.setValue(index);
    },

    onGrdDRRoleListItemClick: function(dataview, record, item, index, e, eOpts) {
        var hdnDRRoleIndex = Ext.ComponentQuery.query("#hdnDRRoleIndex")[0];
        hdnDRRoleIndex.setValue(index);
    },

    onGrdDRSelRoleItemClick: function(dataview, record, item, index, e, eOpts) {
        var hdnDRRoleIndex = Ext.ComponentQuery.query("#hdnDRRoleIndex")[0];
        hdnDRRoleIndex.setValue(index);
    },

    onBtnDRRoleForwardClick: function(button, e, eOpts) {
        var DocRegSelRoleStore = Ext.getStore('DocRegSelRoleStore');
        var grid = Ext.ComponentQuery.query("#grdDRRoleList")[0];
        var selected = grid.getSelectionModel().getSelection()[0];
        var hdnDRRoleIndex = Ext.ComponentQuery.query("#hdnDRRoleIndex")[0].getValue();
        var row = grid.store.getAt(hdnDRRoleIndex);

        if(selected!==undefined)
        {
            DocRegSelRoleStore.add({
                SelID:row.get('ID'),
                SelRole:row.get('Role')
            });
        }
    },

    onBtnDRRoleBackwardClick: function(button, e, eOpts) {
        var grid = Ext.ComponentQuery.query("#grdDRSelRole")[0];
        var selected = grid.getSelectionModel().getSelection()[0];
        var hdnDRRoleIndex = Ext.ComponentQuery.query("#hdnDRRoleIndex")[0].getValue();

        if(selected!==undefined)
        {
            grid.store.removeAt(hdnDRRoleIndex);
        }
    },

    onBtnDRKeyBackwardClick: function(button, e, eOpts) {
        var grid = Ext.ComponentQuery.query("#grdDRSelKey")[0];
        var selected = grid.getSelectionModel().getSelection()[0];
        var hdnDRKeyIndex = Ext.ComponentQuery.query("#hdnDRKeyIndex")[0].getValue();

        if(selected!==undefined)
        {
            grid.store.removeAt(hdnDRKeyIndex);
        }
    },

    onBtnDRKeyForwardClick: function(button, e, eOpts) {
        var DocRegSelKeyStore = Ext.getStore('DocRegSelKeyStore');
        var grid = Ext.ComponentQuery.query("#grdDRKeyword")[0];
        var selected = grid.getSelectionModel().getSelection()[0];
        var hdnDRKeyIndex = Ext.ComponentQuery.query("#hdnDRKeyIndex")[0].getValue();
        var row = grid.store.getAt(hdnDRKeyIndex);

        if(selected!==undefined)
        {
            DocRegSelKeyStore.add({
                SelID:row.get('ID'),
                SelKey:row.get('Key')
            });
        }
    },

    onGrdDRKeywordItemClick: function(dataview, record, item, index, e, eOpts) {
        var hdnDRKeyIndex = Ext.ComponentQuery.query("#hdnDRKeyIndex")[0];
        hdnDRKeyIndex.setValue(index);
    },

    onGrdDRSelKeyItemClick: function(dataview, record, item, index, e, eOpts) {
        var hdnDRKeyIndex = Ext.ComponentQuery.query("#hdnDRKeyIndex")[0];
        hdnDRKeyIndex.setValue(index);
    },

    onBtnDRCancelClick: function(button, e, eOpts) {
        var txtDRDocSub = Ext.ComponentQuery.query("#txtDRDocSub")[0].setValue('');
        var txtarDRDocSumm = Ext.ComponentQuery.query("#txtarDRDocSumm")[0].setValue('');
        var rdDRStatus = Ext.ComponentQuery.query("#rdDRStatus")[0].setValue(true);
        var rdDRClassify = Ext.ComponentQuery.query("#rdDRClassify")[0].setValue(false);
        var cntDRClassify = Ext.ComponentQuery.query("#cntDRClassify")[0].setVisible(false);
        var grdDRSelUser = Ext.ComponentQuery.query("#grdDRSelUser")[0];
        grdDRSelUser.store.removeAll();
        var hdnDRUserIndex = Ext.ComponentQuery.query("#hdnDRUserIndex")[0].setValue('');
        var grdDRSelRole = Ext.ComponentQuery.query("#grdDRSelRole")[0];
        grdDRSelRole.store.removeAll();
        var hdnDRRoleIndex = Ext.ComponentQuery.query("#hdnDRRoleIndex")[0].setValue('');
        var grdDRSelKey = Ext.ComponentQuery.query("#grdDRSelKey")[0];
        grdDRSelKey.store.removeAll();
        var hdnDRKeyIndex = Ext.ComponentQuery.query("#hdnDRKeyIndex")[0].setValue('');
        var fupDRScanCC = Ext.ComponentQuery.query("#fupDRScanCC")[0].reset();
    },

    init: function(application) {
        this.control({
            "#frmDocReg": {
                afterrender: this.onFrmDocRegAfterRender
            },
            "#rdDRClassify": {
                change: this.onRdDRClassifyChange
            },
            "#rdDRStatus": {
                change: this.onRdDRStatusChange
            },
            "#grdDRUserList": {
                itemclick: this.onGrdDRUserListItemClick
            },
            "#btnDRUserForward": {
                click: this.onBtnDRUserForwardClick
            },
            "#btnDRUserBackward": {
                click: this.onBtnDRUserBackwardClick
            },
            "#grdDRSelUser": {
                itemclick: this.onGrdDRSelUserItemClick
            },
            "#grdDRRoleList": {
                itemclick: this.onGrdDRRoleListItemClick
            },
            "#grdDRSelRole": {
                itemclick: this.onGrdDRSelRoleItemClick
            },
            "#btnDRRoleForward": {
                click: this.onBtnDRRoleForwardClick
            },
            "#btnDRRoleBackward": {
                click: this.onBtnDRRoleBackwardClick
            },
            "#btnDRKeyBackward": {
                click: this.onBtnDRKeyBackwardClick
            },
            "#btnDRKeyForward": {
                click: this.onBtnDRKeyForwardClick
            },
            "#grdDRKeyword": {
                itemclick: this.onGrdDRKeywordItemClick
            },
            "#grdDRSelKey": {
                itemclick: this.onGrdDRSelKeyItemClick
            },
            "#btnDRCancel": {
                click: this.onBtnDRCancelClick
            }
        });
    }

});
