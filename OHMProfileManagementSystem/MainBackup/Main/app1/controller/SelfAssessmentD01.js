/*
 * File: app/controller/SelfAssessmentD01.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.SelfAssessmentD01', {
    extend: 'Ext.app.Controller',

    models: [
        'SelfAssessmentD01',
        'OfficeBankInfo',
        'EstPaymentMode',
        'RevenueAccounts',
        'RevenueAccountAnx10'
    ],
    stores: [
        'SelfAssessmentD01',
        'OfficeBankInfo',
        'EstPaymentMode',
        'RevenueAccountStore',
        'FiscalYear',
        'RevenueAccountAnx10'
    ],

    onPnlSelfAssessmentD01AfterRender: function(component, eOpts) {
        //console.log("param",Ext.ComponentQuery.query('#SelfAssessmentD01')[0]);
        var me=this;
        var view = Ext.ComponentQuery.query('#pnlSelfAssessmentD01')[0];
        console.log("viewSA",view);
        var param="";
        param=view.extraParam;
        console.log("view.extraPara>>>",view.extraPara);
        //console.log("view.extraParam.params",view.extraParam.params);

        if(view.extraParam===undefined)
        {
            var cboFiscalYearSADone=Ext.ComponentQuery.query('#cboFiscalYearSADone')[0];
            cboFiscalYearSADone.setReadOnly(true);

            txtSubmissionNoTest=Ext.ComponentQuery.query('#txtSubmissionNoTest')[0];
            txtSubmissionNoTest.setReadOnly(true);
            Ext.ComponentQuery.query('#imgSA')[0].hide(true);
            Ext.ComponentQuery.query('#txtAcctType')[0].setValue('10');
            var hdnActGrd = Ext.ComponentQuery.query('#hdnActGrd')[0];
            hdnActGrd.setValue('T');
            var offCode = Ext.get('offCode').dom.innerHTML;
            //alert(offCode);
            Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(offCode);


            var offCodes = Ext.ComponentQuery.query('#hdnOffCodeSADone')[0].getValue();


            var strBank = Ext.getStore('OfficeBankInfo');
            //var offCode = Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].getValue();
            strBank.load(
            {
                params:{officeCode:offCode}
            });


            var strRevenueAc = Ext.getStore("RevenueAccountAnx10");
            strRevenueAc.loadData([],false);
            strRevenueAc.load(
            {
                params:{acctType:"I",impOn:"SAD01"},
                scope:this,
                async:false,
                callback: function(records, operation, success){
                    if(success){

                    }}});

                    //console.log("strBank<<<",strBank);

                    if(Ext.ComponentQuery.query('#hdnTranNo')[0].setValue(''))
                    {
                        var strSADone=Ext.getStore('SelfAssessmentD01');
                        strSADone.removeAll();
                        strSADone.loadData([],false);
                    }
                    //-----Next Work Goes Here----------------------

                    var objParam = Ext.ComponentQuery.query('#pnlSelfAssessmentD01')[0];
                    if (!objParam.extraParam)
                    {
                        me.ReadOnlyControls("");
                        hdnActGrd.setValue("");
                        return;
                    }
                    //param = objParam.extraParam;

                    //var tranNo = param.tranNo;
                    //alert(tranNo);
                    me.LoadSAWithTranNo();
                    me.ReadOnlyControls("t");
                }


                //----NB: Here goes for Popup from Module Verification

                else
                {
                    var arg=view.extraParam.params;
                    if(param.params.from==="MV")
                    {
                        var tranNo=param.params.tranNo;
                        this.LoadSAD01DetailByTranNo(tranNo);

                    }
                    if(param.params.from==="AU")
                    {

                        me.LoadSAD01DetailForAU(arg);
                    }
                }


    },

    onTxtPanSTDoneKeypress: function(textfield, e, eOpts) {
        /*


        if(e.keyCode === 13)
        {

        //var cboFiscalYearSADone=Ext.ComponentQuery.query('#cboFiscalYearSADone')[0];
        // if(cboFiscalYearSADone.getValue()==="" || cboFiscalYearSADone.getValue()===null )
        //{
        //msg("WARNING","Please select 'Fiscal Year'");
        // return;
        // }
        // else
        //{
        this.loadTaxPayerDetailsUsingPan();
        //}


        }

        */
    },

    onBtnSaveSAClick: function(button, e, eOpts) {
        var txtInclusionSADone=Ext.ComponentQuery.query('#txtInclusionSADone')[0];
        var txtExpensesSADone=Ext.ComponentQuery.query('#txtExpensesSADone')[0];
        var txtAssessableIncomeSADone=Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0];


        var cboFiscalYearSADone=Ext.ComponentQuery.query('#cboFiscalYearSADone')[0];
        var txtSubmissionNoTest=Ext.ComponentQuery.query('#txtSubmissionNoTest')[0];
        var lblMessage=Ext.ComponentQuery.query('#lblMessage')[0];


        //if(lblMessage.text==="")
        //{
        // msg("WARNING","कृपया पुन लोगिन गर्नुहोस् !!!");
        //return;

        //}

        //if(txtSubmissionNoTest.getValue()==="" || txtSubmissionNoTest.getValue()===null)
        //{
        //msg("WARNING","कृपया सबमिसन न. भर्नुहोस् !!! ");
        //return;
        //}

        if(cboFiscalYearSADone.getValue()==="" || cboFiscalYearSADone.getValue()===null)
        {
            msg("WARNING","कृपया आयवर्ष छान्नुहोस् !!!",function(){cboFiscalYearSADone.focus();});
            return;
        }





        //Ext.ComponentQuery.query('#btnDelete')[0].enable(true);
        Ext.ComponentQuery.query('#btnEditSA')[0].enable(true);
        //Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);




        //if(txtExpensesSADone.getValue() === "")
        //{
        // msg("WARNING","कृपया 'कट्टी हुने रकम' भर्नुश");
        // return;
        //}
        if(Number(txtExpensesSADone.getValue()) > Number(txtInclusionSADone.getValue()))
        {
            msg("WARNING","कट्टी हुने रकम कारोबारको रकम भन्दा कम वा बराबर हुनु पर्छ!!!",function(){txtExpensesSADone.focus();});
            return;
        }
        else if(Number(txtAssessableIncomeSADone.getValue() > 200000))
        {
            msg("WARNING","आय २,००००० भन्दा बढी भएकोले  SAD01 भर्न पाउनु हुन्न !!!");
            return;
        }
        else
        {
            var Total=Number(txtInclusionSADone.getValue()) - Number(txtExpensesSADone.getValue());
            txtAssessableIncomeSADone.setValue(Number(Total));

            this.SaveSelfAssessmentDone('I');
        }





    },

    onBtnCancelSAClick: function(button, e, eOpts) {
        this.ClearSelfAssessmentDone();
        Ext.ComponentQuery.query('#lblMessage')[0].setText('');
        Ext.ComponentQuery.query('#imgSA')[0].hide(true);
        Ext.ComponentQuery.query('#btnEditSA')[0].enable(true);
        Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
        Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true);
        Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
        Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
        Ext.ComponentQuery.query('#btnPrintSA')[0].disable(true);
    },

    onGrdSADoneFourBeforeRender: function(component, eOpts) {
        var grid=Ext.ComponentQuery.query('#grdSADoneFour')[0];



        grid.columns[5].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";


            var items = Ext.getStore('OfficeBankInfo').data.items;

            //console.log("bankInfo",items);
            // alert("value>>"+value);

            //alert("len " + items.length);
            for(var i=0;i<items.length;i++)
            {
                //alert("bank>>" + items[i].data.BankBr);
                if(items[i].data.BankBr === value)
                {

                    temp=items[i].data.BankName;

                    break;
                }
            }

            //alert("temP>>" +temp);
            return temp;

        };




        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";

            var items = Ext.getStore('RevenueAccountAnx10').data.items;

            for(var i=0;i<items.length;i++)
            {
                if(items[i].data.AccountCode == value)
                {
                    temp=items[i].data.RevActWithCode;
                    break;
                }
            }

            return temp;


        };





        grid.columns[3].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";


            var items = Ext.getStore('EstPaymentMode').data.items;

            //console.log("bankInfo",items);
            //console.log("value",value);

            for(var i=0;i<items.length;i++)
            {
                if(items[i].data.EstPaymentModeID == value)
                {
                    temp=items[i].data.EstPaymentModeName;
                    break;
                }
            }

            return temp;

        };


    },

    onTxtPanSTDoneKeypress: function(textfield, e, eOpts) {
        if(e.keyCode === 13 || e.keyCode === 9)
        {

            this.PanCurrentOfficeTaxpayerInfo();


        }

    },

    onBtnEditSAClick: function(button, e, eOpts) {
        Ext.ComponentQuery.query('#hdnAction')[0].setValue('E');
        Ext.ComponentQuery.query('#lblMessage')[0].setText('Updating..........');
        Ext.ComponentQuery.query('#imgSA')[0].show(true);


        var submissionNo=Ext.ComponentQuery.query('#txtSubmissionNoTest')[0];

        submissionNo.setReadOnly(false);
        if(submissionNo.getValue().length === 0)
        {

            msg("INFORMATION","Updating  ... कृपया सबमिसन न. भर्नुहोस् !!! ");
            submissionNo.focus();

            return;
        }
        else
        {
            msg("INFORMATION","Updating  ...  !!! ");
            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(false);
            Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(false);
            Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(false);
            Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(false);


            Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
            Ext.ComponentQuery.query('#btnSaveSA')[0].enable(true);
            Ext.ComponentQuery.query('#btnEditSA')[0].enable(true);
            Ext.ComponentQuery.query('#btnSubmitSA')[0].enable(true);
            Ext.ComponentQuery.query('#btnDelete')[0].enable(true);
            Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
            Ext.ComponentQuery.query('#btnPrintSA')[0].disable(true);
            Ext.ComponentQuery.query('#btnCancelSA')[0].enable(true);



            return;
        }




        //-------------------------

        //Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(false);
        //Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(false);
        //Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setReadOnly(false);


        //Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
        //Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);
        //Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(false);
        //Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(false);
        //---------------------------
        /*

        var txtInclusionSADone=Ext.ComponentQuery.query('#txtInclusionSADone')[0];
        var txtExpensesSADone=Ext.ComponentQuery.query('#txtExpensesSADone')[0];
        var txtAssessableIncomeSADone=Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0];

        if(txtExpensesSADone.getValue() === "")
        {
        msg("WARNING","कृपया 'कट्टी हुने रकम' भर्नुश");
        return;
        }
        else if(Number(txtExpensesSADone.getValue()) > Number(txtInclusionSADone.getValue()))
        {
        msg("WARNING","कट्टी हुने रकम कारोबारको रकम भन्दा कम हुनु पर्छ");
        return;
        }
        else if(Number(txtExpensesSADone.getValue() > 200000))
        {
        msg("WARNING","कृपया शही 'कारोबारको रकम' भर्नुश");
        return;
        }
        else
        {
        var Total=Number(txtInclusionSADone.getValue()) - Number(txtExpensesSADone.getValue());
        txtAssessableIncomeSADone.setValue(Number(Total));
        }

        */
        /*

        if(Ext.ComponentQuery.query('#btnEditSA')[0].getText()==="Edit")
        {
        Ext.ComponentQuery.query('#hdnAction')[0].setValue('E');
        Ext.ComponentQuery.query('#btnEditSA')[0].setText('Update');
        }


        if(Ext.ComponentQuery.query('#btnEditSA')[0].getText()==="Update")
        {
        this.SaveSelfAssessmentDone('I');
        }
        *

    },

    loadTaxPayerDetailsUsingPan: function() {
        /**

        //---fields of One-----
        var txtPanSTDone =  Ext.ComponentQuery.query('#txtPanSTDone')[0];
        var txtNameSTDone = Ext.ComponentQuery.query('#txtNameSTDone')[0];
        var txtHouseNoSADone=Ext.ComponentQuery.query('#txtHouseNoSADone')[0];
        var txtWardSADone=Ext.ComponentQuery.query('#txtWardSADone')[0];
        var txtToleSADone=Ext.ComponentQuery.query('#txtToleSADone')[0];
        var txtMetroTypeSADone=Ext.ComponentQuery.query('#txtMetroTypeSADone')[0];
        var txtDistrictDone=Ext.ComponentQuery.query('#txtDistrictDone')[0];
        var txtPhoneSADone = Ext.ComponentQuery.query('#txtPhoneSADone')[0];
        var txtFaxSADone=Ext.ComponentQuery.query('#txtFaxSADone')[0];
        var txtEmailSADone=Ext.ComponentQuery.query('#txtEmailSADone')[0];

        //-------------------------


        //var txtJointAddressDone = Ext.ComponentQuery.query('#txtJointAddressDone')[0];

        //--fields of two-----------------
        var txtNameDtwo=Ext.ComponentQuery.query('#txtNameDtwo')[0];
        var txtHouseNoDtwo=Ext.ComponentQuery.query('#txtHouseNoDtwo')[0];
        var txtWardDtwo=Ext.ComponentQuery.query('#txtWardDtwo')[0];
        var txtToleDtwo=Ext.ComponentQuery.query('#txtToleDtwo')[0];


        var txtAddressDtwo=Ext.ComponentQuery.query('#txtAddressDtwo')[0];
        //var txtNameDtwo=Ext.ComponentQuery.query('#txtNameDtwo')[0];
        var txtAcctType=Ext.ComponentQuery.query('#txtAcctType')[0];
        var txtTSOsaDone=Ext.ComponentQuery.query('#txtTSOsaDone')[0];
        var txtMetroDtwo=Ext.ComponentQuery.query('#txtMetroDtwo')[0];
        var txtDistrictDtwo=Ext.ComponentQuery.query('#txtDistrictDtwo')[0];

        var hdnOfficeCodeSADone = Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0];
        var hdnMetroTypeSADone=Ext.ComponentQuery.query('#hdnMetroTypeSADone')[0];

        var rbtMMSADone=Ext.ComponentQuery.query('#rbtMMSADone')[0];



        var panno=txtPanSTDone.getValue();


        if(panno === "")
        {
            msg("WARNING","Please Enter PAN !!!");
            return;
        }


        **/



        /*LoadTaxpayerInfoWithValidPan(panno,function(data){

        var rec = data.root;

        txtNameSTDone.setValue(rec.Name);
        txtJointAddressDone.setValue(rec.Address);
        txtPhoneSADone.setValue(rec.Phone);
        txtFaxSADone.setValue(rec.FAX);
        txtPhoneSADone.setValue(rec.Phone);
        txtAddressDtwo.setValue(rec.Address);
        txtNameDtwo.setValue(rec.Name);







        });

        */


        /**

        LoadTaxpayerInfoWithValidPan(panno,txtAcctType.getValue(),function(data)
        {
        if(data.message==='')
        {
        var taxpayer = data.root.Taxpayer;
        var taddress =taxpayer.BusinessAddress.Address;
        var baddress=taxpayer.IndividualAddress.Address;

        console.log("taxpayer",+taxpayer);

        if(taxpayer.AcctStatus=='A')

        {
        // setting value in Individual fields

        txtNameSTDone.setValue(taxpayer.Name);
        txtHouseNoSADone.setValue(taddress.HouseNo);
        txtWardSADone.setValue(taddress.WardNo);
        txtToleSADone.setValue(taddress.StreetName);
        txtMetroTypeSADone.setValue(taddress.LocationType);

        //var txtMetroTypeSADoneValue="";




        //setting value in One--

        txtDistrictDone.setValue(taddress.DistrictNameNep);
        txtPhoneSADone.setValue(taddress.Telephone);
        txtFaxSADone.setValue(taddress.Fax);
        txtEmailSADone.setValue(taddress.Email);
        //-----------------------------------


        // setting value in two--------------
        txtNameDtwo.setValue(taxpayer.BusinessName);
        txtHouseNoDtwo.setValue(baddress.HouseNo);
        txtWardDtwo.setValue(baddress.WardNo);
        txtToleDtwo.setValue(baddress.StreetName);
        txtMetroDtwo.setValue(baddress.LocationType);
        if(txtMetroDtwo.getValue()==="MM")
        {
            hdnMetroTypeSADone.setValue('A1-1-7ka');
            rbtMMSADone.setValue(true);

        }

        if(txtMetroDtwo.getValue()==="SM")
        {
            hdnMetroTypeSADone.setValue('A1-1-7ka');
        }

        else if(txtMetroDtwo.getValue()==="MN")
        {
            hdnMetroTypeSADone.setValue('A1-1-7ka');
        }
        else if(txtMetroDtwo.getValue()==="VD")
        {
            hdnMetroTypeSADone.setValue('A1-1-7Ga');
        }



        txtDistrictDtwo.setValue(baddress.DistrictNameNep);









        }
        else
        {
        msg('INFO','Account Is Inactive');
        }
        }
        else
        {
        pan.focus(false,100);
        msg('INFO',data.message);


        }
        });







        LoadTaxpayerCurrentOfficeWithValidPanAccType(panno,txtAcctType.getValue(),function(data){

        var rec = data.root;
        var abc=Ext.ComponentQuery.query('#abc')[0];
        // alert(data.root);
        //abc.setValue(data.root.OfficeCode);

        //console.log(rec);
        if(rec.TaxpayerOffice.OfficeCode)
        {
        //---Value to INPUT -----------------------------------------------------------
        var cboFiscalYearSADone=Ext.ComponentQuery.query('#cboFiscalYearSADone')[0];
        //var txtSADoneIncome=Ext.ComponentQuery.query('#txtSADoneIncome')[0];
        var txtMetroTypeSADone=Ext.ComponentQuery.query('#txtMetroTypeSADone')[0];
        // ------------------------------------------------------------------------------


        // ------ Value to OUTPUT-------------------------------------------------------
        var txtSADoneFromDate=Ext.ComponentQuery.query('#txtSADoneFromDate')[0];
        var txtSumTaxLiabilitySADone=Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0];

        Ext.Ajax.request
        ({

        url:'../Handlers/IncomeTax/D01/ilkTaxRateHandler.ashx?method=GetilkTaxRate',
        // params:{fiscalYear_Tmp:cboFiscalYearSADone.getValue(), income_Tmp:txtSADoneIncome.getValue(), MetroTypeSADone:txtMetroTypeSADone.getValue()
        params:{fiscalYear_Tmp:cboFiscalYearSADone.getValue(), income_Tmp:1, MetroTypeSADone:hdnMetroTypeSADone.getValue()

        },

        success:function(response){
            console.log(response.responseText);
            var obj =Ext.decode(response.responseText);
            var row = obj.root;

            var date=row.DateNRate.split('&&')[0];
            var rate=row.DateNRate.split('&&')[1];

            txtSADoneFromDate.setValue(date);
            txtSumTaxLiabilitySADone.setValue(rate);

            console.log(date);
            console.log(rate);

            //alert(row);

        },





        failure:function()
        {
            msg('FAILURE',Ext.decode(response));

        }



        });


        }

        hdnOfficeCodeSADone.setValue(rec.TaxpayerOffice.OfficeCode);
        txtTSOsaDone.setValue(rec.TaxpayerOffice.Office);


        // Loading Office in Grid--------------------

        Ext.Ajax.request({
        url: '../HANDLERS/Common/OfficeBankInfoHandler.ashx?method=GetOfficeBankInfo',
        params:{officeCode:Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].getValue()},
        success: function ( result, request ) {
        //var combo=Ext.ComponentQuery.query('#ddlEst_Ret_Bank_Code')[0];
        var data = Ext.decode(result.responseText);
        // combo.store.loadData(data.root);
        Ext.getStore('OfficeBankInfo').loadData(data.root);

        },
        failure: function ( result, request ) {
        Ext.Msg.show({
            title: 'Failure',
            msg: 'ERROR OCURRED !!!' ,
            buttons: Ext.MessageBox.OK,
            icon:Ext.Msg.ERROR
        });
        }

        });

        //------------------------------------------









        });

        **/

    },

    GenerateSubmissionNo: function() {

        // for acctType,submittedFor generalization
        var newSubNum = "";
        var acctType ;
        var submittedFor ;

        var map = Ext.getCmp('CntSiteMapPath');
        var val = map.html;
        var arr = val.split(">>");
        var module = arr[arr.length-2].trim();
        //alert(module);
        var leaf = arr[arr.length-1].trim();
        //alert(leaf);

        if(("Value Added Tax System" === module) &&("Manual Vat Return Entry" === leaf))
        {
            acctType = "00";
            submittedFor = "VRET";

            //alert('actype is '+ acctType);
            //alert('submittedFor' + submittedFor);
        }

        else if(("Income Tax System" === module) && ("Estimate Return/Estimate Revision Return/Estimate Revision Notice" === leaf ))
        {
            acctType = "10";
            submittedFor = "INST";

        }
        else if(("Income Tax System" === module) && ("Manual Estimate Return/Estimate Revision Return/Estimate Revision Notice" === leaf ))
        {
            acctType = "10";
            submittedFor = "INST";

        }
        else if(("Income Tax System" === module) && ("SelfAssessmentD01" === leaf ))
        {
            acctType = "10";
            submittedFor = "ASS01";

        }

        //alert('actype is '+ acctType);
        //alert('submittedFor' + submittedFor);

        // above code is written by shanjeev

        //var validateForm=Ext.getCmp('frmVatReturnsSubNo');
        var form = button.up('form').getForm();

        var PAN=Ext.ComponentQuery.query('#txtPanSTDone')[0].getValue();

        var TPOFfice;
        var me=this;

        if(Ext.ComponentQuery.query('#txtPanSTDone')[0].getValue()!=='')
        {

            Ext.Ajax.request({
                url: '../Handlers/Registration/Taxpayer/TaxpayerHandler.ashx',
                params: {method:'ValidatePan',pan: Ext.ComponentQuery.query('#txtPanSTDone')[0].getValue()},
                async : false,
                success: function(response){
                    var JSONResponse=Ext.decode(response.responseText);
                    if(JSONResponse.success=='True')
                    {

                        //Get Taxpayer Current Office
                        Ext.Ajax.request({
                            url: '../Handlers/Registration/Taxpayer/TaxpayerHandler.ashx',
                            params: {
                                method:'GetTaxpayerCurrOffice',
                                pan: Ext.ComponentQuery.query('#txtPanSTDone')[0].getValue(),
                                acctType:acctType,
                                id: 1
                            },
                            async : false,
                            success: function(taxpayerCurrOffice){
                                TPOffice =Ext.decode( taxpayerCurrOffice.responseText);

                                if(JSON.stringify(TPOffice.root.Success)=='false')
                                {
                                    me.msg('INFO',TPOffice.root.Message);
                                }
                                else
                                {

                                    //Sets Login TBs Info
                                    var LoginTBs={
                                        SubmissionNo:'',
                                        Username:'',
                                        Password:'',
                                        PAN:PAN,
                                        Emailid:'',
                                        ContactNo:'',
                                        submittedFor:submittedFor,
                                        SubmittedYN:'N',
                                        SubmittedDate:Ext.decode(AppWakeUpJSON).root.NepaliDate,
                                        TranNo:'0',
                                        Address:'',
                                        RegOffice:TPOffice.root.TaxpayerOffice.OfficeCode,
                                        Action:''
                                    };

                                    //Form Submit

                                    if(form.isValid()){
                                        form.submit({
                                            url: '../Handlers/Vat/VatReturnsSubmissionNumberHandler.ashx',
                                            waitMsg: 'Generating Submission Number...',
                                            params:{method:'SaveVatReturnSubmissionNoBySessionUserPassword',LoginTBS:JSON.stringify(LoginTBs)},
                                            async : false,
                                            success: function(p1,p2) {
                                                Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setValue(p2.result.root);

                                                newSubNum = p2.result.root;
                                            },
                                            failure:function(fp, o) {
                                                me.msg('INFO','Error in Getting Submission Number');
                                            }
                                        });
                                    }


                                }

                            }
                        });
                    }
                    else
                    {
                        me.msg('INFO',JSONResponse.message);
                    }
                }
            });
        }


        return newSubNum;
    },

    SaveSelfAssessmentDone: function(Status) {
        var me = this;




        var hdnChargeDate117=Ext.ComponentQuery.query('#hdnChargeDate117')[0];
        var hdnChargeDate119=Ext.ComponentQuery.query('#hdnChargeDate119')[0];

        var txtPanSTDone=Ext.ComponentQuery.query('#txtPanSTDone')[0];
        var cboFiscalYearSADone=Ext.ComponentQuery.query('#cboFiscalYearSADone')[0];
        var txtSumTaxLiabilitySADone=Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0];
        var txtMetroTypeSADone=Ext.ComponentQuery.query('#txtMetroTypeSADone')[0];
        var txtTotalPayableTaxSADone=Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0];
        var txtSubmissionNoTest=Ext.ComponentQuery.query('#txtSubmissionNoTest')[0];
        var txtAcctType=Ext.ComponentQuery.query('#txtAcctType')[0];

        var hdnTaxId= Ext.ComponentQuery.query('#hdnTaxId')[0];

        //--Input for AssessmentDetailTable---------------------------
        var txtInclusionSADone=Ext.ComponentQuery.query('#txtInclusionSADone')[0];
        var txtExpensesSADone=Ext.ComponentQuery.query('#txtExpensesSADone')[0];
        var txtAssessableIncomeSADone=Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0];
        var hdnOfficeCodeSADone=Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].getValue();

        var hdnAction=Ext.ComponentQuery.query('#hdnAction')[0];
        var hdnAssmtDetailChildDOne=Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0];


        var action = hdnAction.getValue() === "" || hdnAction.getValue() === null?"A":hdnAction.getValue();





        //------------------------------------------------------------


        var txt117SADone=Ext.ComponentQuery.query('#txt117SADone')[0];
        var txt119SADone=Ext.ComponentQuery.query('#txt119SADone')[0];

        var assessment = "";
        var assChild = "";
        var chargePenaltyDetail="";
        var chargePenalty="";







        if(cboFiscalYearSADone.getValue()==="" || cboFiscalYearSADone.getValue()===null)
        {
            msg("WARNING","कृपया आयवर्ष छान्नुहोस् !!!");
            txtInclusionSADone.focus(true);
            return;
        }



        else if(Number(txtInclusionSADone.getValue() > 2000000))
        {
            msg("WARNING","कारोबार र २०,००००० भन्दा बढी भएकोले  SAD01 भर्न पाउनु हुन्न !!!",function(){txtExpensesSADone.focus();});
            return;
        }


        else if(Number(txtAssessableIncomeSADone.getValue() > 200000))
        {
            msg("WARNING","आय २,००००० भन्दा बढी भएकोले  SAD01 भर्न पाउनु हुन्न !!!");
            return;
        }



        var txtInclusionSADones=Ext.ComponentQuery.query('#txtInclusionSADone')[0].getValue();
        if(txtInclusionSADones.length===0)
        {
            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue('');
        }


        //var txtInclusionSADone=Ext.ComponentQuery.query('#txtInclusionSADone')[0];
        //var txtExpensesSADone=Ext.ComponentQuery.query('#txtExpensesSADone')[0];
        //var txtAssessableIncomeSADone=Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0];

        //if(txtExpensesSADone.getValue() === "")
        //{
        // msg("WARNING","कृपया 'कट्टी हुने रकम' भर्नुश");
        // return;
        //}
        else if(Number(txtExpensesSADone.getValue()) > Number(txtInclusionSADone.getValue()))
        {
            msg("WARNING","कट्टी हुने रकम कारोबारको रकम भन्दा कम वा बराबर हुनु पर्छ !!!",function(){txtExpensesSADone.focus();});
            return;
        }





        else
        {
            var Total=Number(txtInclusionSADone.getValue()) - Number(txtExpensesSADone.getValue());
            txtAssessableIncomeSADone.setValue(Number(Total));
        }



        var hdnaction=Ext.ComponentQuery.query('#hdnAction')[0].getValue();

        //----------------------------------
        var VoucherTbsLSTLST="";

        var grdSADone=Ext.getStore('SelfAssessmentD01');
        grdSADone.clearFilter();

        if(grdSADone.getCount() > 0)
        {
            VoucherTbsLSTLST = getJson(grdSADone);
        }





        if(txtSubmissionNoTest==="")
        {
            txtSubmissionNoTest =   me.GenerateSubmissionNo();
        }




        /////---------------------------------------------------------------------------------



        var hdnTotalAmount=Ext.ComponentQuery.query('#hdnTotalAmount')[0];


        var TotalAmount=Number(txt117SADone.getValue())+Number(txt119SADone.getValue());
        hdnTotalAmount.setValue(Number(TotalAmount));
        //-------------------------------------------------------------------------------
        var hdnAssmtdtlSn=Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0];
        var tranno=Ext.ComponentQuery.query('#hdnTranNo')[0].getValue();

        tranno = tranno=== ""?null:tranno;


        var ReturnDocType="";


        console.log("tranno>>",tranno);




        //--------for AU Editing--------------------------------------------------------------

        var view = Ext.ComponentQuery.query('#pnlSelfAssessmentD01')[0];
        var param="";
        param=view.extraParam;
        //console.log("paramAU&params",param.params);

        if(view.extraParam!==undefined)
        {

            if(param.params.from==="AU")
            {


                if(txtSubmissionNoTest !== "")
                {

                    assChild = [{
                        AssessmentNo:txtSubmissionNoTest.getValue(),
                        AssessDetailSn:hdnAssmtdtlSn.getValue()===""?null:hdnAssmtdtlSn.getValue(),
                        MTCFromDate:"",
                        TaxCatId:hdnTaxId.getValue(),
                        //RateApplicable:null,

                        CountryCode:"",
                        Inclusions:txtInclusionSADone.getValue()===""?null:txtInclusionSADone.getValue(),
                        Expenses:txtExpensesSADone.getValue()===""?null:txtExpensesSADone.getValue(),
                        AssessableIncome:txtAssessableIncomeSADone.getValue()===""?null:txtAssessableIncomeSADone.getValue(),
                        IncomeGainLoss:null,
                        MsDisCatFromDate:"",
                        DiscCatId:"",
                        Concessions:null,
                        NetTaxLiability:txtSumTaxLiabilitySADone.getValue()===""?null:txtSumTaxLiabilitySADone.getValue(),
                        RecordStatus:Status,
                        Terminal:"",
                        TranDate:"",
                        UserName:"",
                        NetAssessable:null,
                        Retirement_Contrib:null,
                        Donation:null,
                        AssessbleInAfterConsession:null,
                        AnnexId:null,
                        ReturnDocType:'DO1',
                        OffCodeAU:param.params.offCode,
                        RequestNo:param.params.requestNo,
                        Pan:txtPanSTDone.getValue(),
                        AcctType:txtAcctType.getValue(),
                        FiscalYear:cboFiscalYearSADone.getValue()

                    }];


                    //----for DCTB_CHARGE_PENALTY_DETAIL----------------------------------------

                    chargePenaltyDetail=[
                    {
                        Amount:txt117SADone.getValue(),
                        BatchType:'SA',
                        ChargeDate:hdnChargeDate117.getValue(),
                        ChargeNo:txtSubmissionNoTest.getValue(),
                        FiscalYear:cboFiscalYearSADone.getValue(),
                        OfficeCode:hdnOfficeCodeSADone,
                        Pan:txtPanSTDone.getValue(),
                        RecordStatus:Status,
                        SectionNo:'117',
                        Terminal:'',
                        TranDate:'',
                        UserName:'',
                        OffCodeAU:param.params.offCode,
                        RequestNo:param.params.requestNo,
                        AcctType:txtAcctType.getValue()




                    },
                    {

                        Amount:txt119SADone.getValue(),
                        BatchType:'SA',
                        ChargeDate:hdnChargeDate119.getValue(),
                        ChargeNo:txtSubmissionNoTest.getValue(),
                        FiscalYear:cboFiscalYearSADone.getValue(),
                        OfficeCode:hdnOfficeCodeSADone,
                        Pan:txtPanSTDone.getValue(),
                        RecordStatus:Status,
                        SectionNo:'119',
                        Terminal:'',
                        TranDate:'',
                        UserName:'',
                        OffCodeAU:param.params.offCode,
                        RequestNo:param.params.requestNo,
                        AcctType:txtAcctType.getValue()

                    }
                    ];

                    //--------------------------------------------------------------------------
                    //-----------ChargePenalty----------------------------------------------------------------

                    chargePenalty={

                        BatchType:'SA',
                        ChargeDate:'',
                        ChargeNo:txtSubmissionNoTest.getValue(),
                        FiscalYear:cboFiscalYearSADone.getValue(),
                        OffCode:hdnOfficeCodeSADone,
                        OfficerCode:'',
                        Pan:txtPanSTDone.getValue(),
                        ReceiptShipmentDate:"",
                        ReceiptShipmentMode:null ,
                        RecordStatus:Status,
                        Terminal:"",
                        TotalAmount:hdnTotalAmount.getValue()===""?null:hdnTotalAmount.getValue(),
                        TranDate:"",
                        UserName:"",
                        action:action,
                        OffCodeAU:param.params.offCode,
                        RequestNo:param.params.requestNo,
                        AcctType:txtAcctType.getValue()
                        //action :hdnAssmtDetailChildDOne.getValue()

                    };
                    //--------------------------------------------------------------------------------------------
                    var manualSubNo = {
                        SubmissionNumber:'',
                        Username:'',
                        Password:'',
                        ContactNo:'',
                        Emailid:'',
                        submittedFor:'',
                        SubmittedYN:'N',
                        SubmittedDate:'',
                        TranNo:'',
                        Address:'',
                        RegOffice:'',
                        Action:action,

                        //Action:hdnAssmtDetailChildDOne.getValue(),
                        PAN:txtPanSTDone.getValue(),
                        FiscalYear:cboFiscalYearSADone.getValue()
                    };


                    assessment = {

                        TotalPayableTax:txtTotalPayableTaxSADone.getValue() === ""?null:txtTotalPayableTaxSADone.getValue(),
                        MTCFromDate:"",
                        AssessmentFromDate:"",
                        OffCode:hdnOfficeCodeSADone,
                        Pan:txtPanSTDone.getValue(),
                        FiscalYear:cboFiscalYearSADone.getValue(),
                        AssessmentNo:txtSubmissionNoTest.getValue(),
                        SubmissionDate:"",
                        AssessmentDate:"",
                        ReturnDocType:'D01',
                        ExtendedReturnDate:"",
                        OfficerCode:"",
                        AuditorName:"",
                        AuditorLicenceNo:"",
                        DecisionType:"",
                        ReferenceNo:"",
                        ReferenceDate:"",
                        AssessmentToDate:"",
                        ClubbedYN:"",
                        ClubbedHasPan:"",
                        ClubbedName:"",
                        TotalTaxLiability:txtSumTaxLiabilitySADone.getValue()===""?null:txtSumTaxLiabilitySADone.getValue(),
                        PartOrFull:"",
                        Terminal:"",
                        Tran_Date:"",
                        UserName:"",
                        RecordStatus:Status,
                        AuditorPan:"",
                        ClubbedPan:"",
                        ReferenceFiscalYear:"",
                        TaxpayerCat:hdnTaxId.getValue(),
                        Attachment:"",
                        JpFiscalYear:"",
                        BusinessClose:"",
                        DateUpto:"",
                        TaxIncomeAFTDe:"",
                        TranNo:tranno,
                        AcctType:txtAcctType.getValue(),
                        AssessmentType:'SA',
                        //Action:hdnAssmtDetailChildDOne.getValue(),
                        Action:action,
                        // SubmissionNo:param.params.pks[0].data.Value,  //AssessmentNo  manualSubNo
                        SubmissionNo:manualSubNo,
                        OffCodeAU:param.params.offCode,
                        RequestNo:param.params.requestNo,



                        AssmtDetailChildDOne:assChild!==""?assChild:null,
                        VoucherTbsLSTLST:VoucherTbsLSTLST!== ""?VoucherTbsLSTLST:null,
                        ChargePenaltyDetail:chargePenaltyDetail!==""?chargePenaltyDetail:null,
                        ChargePenaltySA:chargePenalty!==""?chargePenalty:null

                    };



                    Ext.Ajax.request({

                        url:'../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=EditAssessmentSADoneForAU',

                        params:{assmtSADone:JSON.stringify(assessment)},
                        success:function(result, request)
                        {


                            var obj = Ext.decode(result.responseText);
                            msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);
                            Ext.ComponentQuery.query('#hdnAction')[0].setValue('E');
                            Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);




                            //-----------------------
                            me.ClearSelfAssessmentDone();

                            me.ReadOnlyControls('u');
                            //------------------------

                            Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
                            Ext.ComponentQuery.query('#btnEditSA')[0].enable(true);
                            Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true);
                            Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);


                            Ext.ComponentQuery.query('#lblMessage')[0].setText('');
                            Ext.ComponentQuery.query('#imgSA')[0].hide(true);




                            if(Ext.ComponentQuery.query('#hdnActionDisable')[0].getValue()==="Z")
                            {
                                Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
                            }
                            else
                            {
                                Ext.ComponentQuery.query('#btnEditSA')[0].enable(true);
                            }


                            if(obj.success === "false") return;

                        },

                        failure:function(result, request){
                            msg('ERROR OCURRED !!!', 'Error');
                        }


                    });


                }

                else
                {
                    msg("WARNING","Error in Generating Submission Number !");
                }


                //me.LoadSAD01DetailForAU(arg);
            }
        }
        //------------------------------------------------------------------------------------
        else
        {

            if(txtSubmissionNoTest !== "")
            {

                assChild = [{
                    AssessmentNo:txtSubmissionNoTest.getValue(),
                    AssessDetailSn:hdnAssmtdtlSn.getValue()===""?null:hdnAssmtdtlSn.getValue(),
                    MTCFromDate:"",
                    TaxCatId:hdnTaxId.getValue(),
                    //RateApplicable:null,

                    CountryCode:"",
                    Inclusions:txtInclusionSADone.getValue()===""?null:txtInclusionSADone.getValue(),
                    Expenses:txtExpensesSADone.getValue()===""?null:txtExpensesSADone.getValue(),
                    AssessableIncome:txtAssessableIncomeSADone.getValue()===""?null:txtAssessableIncomeSADone.getValue(),
                    IncomeGainLoss:null,
                    MsDisCatFromDate:"",
                    DiscCatId:"",
                    Concessions:null,
                    NetTaxLiability:txtSumTaxLiabilitySADone.getValue()===""?null:txtSumTaxLiabilitySADone.getValue(),
                    RecordStatus:Status,
                    Terminal:"",
                    TranDate:"",
                    UserName:"",
                    NetAssessable:null,
                    Retirement_Contrib:null,
                    Donation:null,
                    AssessbleInAfterConsession:null,
                    AnnexId:null,
                    ReturnDocType:'DO1'

                }];


                //----for DCTB_CHARGE_PENALTY_DETAIL----------------------------------------

                chargePenaltyDetail=[
                {
                    Amount:txt117SADone.getValue(),
                    BatchType:'SA',
                    ChargeDate:'',
                    ChargeNo:txtSubmissionNoTest.getValue(),
                    FiscalYear:cboFiscalYearSADone.getValue(),
                    OfficeCode:hdnOfficeCodeSADone,
                    Pan:txtPanSTDone.getValue(),
                    RecordStatus:Status,
                    SectionNo:'117',
                    Terminal:'',
                    TranDate:'',
                    UserName:''
                },
                {

                    Amount:txt119SADone.getValue(),
                    BatchType:'SA',
                    ChargeDate:'',
                    ChargeNo:txtSubmissionNoTest.getValue(),
                    FiscalYear:cboFiscalYearSADone.getValue(),
                    OfficeCode:hdnOfficeCodeSADone,
                    Pan:txtPanSTDone.getValue(),
                    RecordStatus:Status,
                    SectionNo:'119',
                    Terminal:'',
                    TranDate:'',
                    UserName:''

                }
                ];

                //--------------------------------------------------------------------------
                //-----------ChargePenalty----------------------------------------------------------------

                chargePenalty={

                    BatchType:'SA',
                    ChargeDate:'',
                    ChargeNo:txtSubmissionNoTest.getValue(),
                    FiscalYear:cboFiscalYearSADone.getValue(),
                    OffCode:hdnOfficeCodeSADone,
                    OfficerCode:'',
                    Pan:txtPanSTDone.getValue(),
                    ReceiptShipmentDate:"",
                    ReceiptShipmentMode:null ,
                    RecordStatus:Status,
                    Terminal:"",
                    TotalAmount:hdnTotalAmount.getValue()===""?null:hdnTotalAmount.getValue(),
                    TranDate:"",
                    UserName:"",
                    action:action
                    //action :hdnAssmtDetailChildDOne.getValue()

                };
                //--------------------------------------------------------------------------------------------
                var manualSubNo = {
                    SubmissionNumber:'',
                    Username:'',
                    Password:'',
                    ContactNo:'',
                    Emailid:'',
                    submittedFor:'',
                    SubmittedYN:'N',
                    SubmittedDate:'',
                    TranNo:'',
                    Address:'',
                    RegOffice:'',
                    Action:action,

                    //Action:hdnAssmtDetailChildDOne.getValue(),
                    PAN:txtPanSTDone.getValue(),
                    FiscalYear:cboFiscalYearSADone.getValue()
                };


                assessment = {

                    TotalPayableTax:txtTotalPayableTaxSADone.getValue() === ""?null:txtTotalPayableTaxSADone.getValue(),
                    MTCFromDate:"",
                    AssessmentFromDate:"",
                    OffCode:hdnOfficeCodeSADone,
                    Pan:txtPanSTDone.getValue(),
                    FiscalYear:cboFiscalYearSADone.getValue(),
                    AssessmentNo:txtSubmissionNoTest.getValue(),
                    SubmissionDate:"",
                    AssessmentDate:"",
                    ReturnDocType:'D01',
                    ExtendedReturnDate:"",
                    OfficerCode:"",
                    AuditorName:"",
                    AuditorLicenceNo:"",
                    DecisionType:"",
                    ReferenceNo:"",
                    ReferenceDate:"",
                    AssessmentToDate:"",
                    ClubbedYN:"",
                    ClubbedHasPan:"",
                    ClubbedName:"",
                    TotalTaxLiability:txtSumTaxLiabilitySADone.getValue()===""?null:txtSumTaxLiabilitySADone.getValue(),
                    PartOrFull:"",
                    Terminal:"",
                    Tran_Date:"",
                    UserName:"",
                    RecordStatus:Status,
                    AuditorPan:"",
                    ClubbedPan:"",
                    ReferenceFiscalYear:"",
                    TaxpayerCat:hdnTaxId.getValue(),
                    Attachment:"",
                    JpFiscalYear:"",
                    BusinessClose:"",
                    DateUpto:"",
                    TaxIncomeAFTDe:"",
                    TranNo:tranno,
                    AcctType:txtAcctType.getValue(),
                    AssessmentType:'SA',
                    //Action:hdnAssmtDetailChildDOne.getValue(),
                    Action:action,
                    SubmissionNo:manualSubNo,



                    AssmtDetailChildDOne:assChild!==""?assChild:null,
                    VoucherTbsLSTLST:VoucherTbsLSTLST!== ""?VoucherTbsLSTLST:null,
                    ChargePenaltyDetail:chargePenaltyDetail!==""?chargePenaltyDetail:null,
                    ChargePenaltySA:chargePenalty!==""?chargePenalty:null

                };

                var watiMsg=waitMsgSuresh('suresh saving');

                Ext.Ajax.request({

                    url:'../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=SaveAssessmentSADone',

                    params:{assmtSADone:JSON.stringify(assessment)},
                    success:function(result, request)
                    {
                        watiMsg.hide();

                        var obj = Ext.decode(result.responseText);
                        msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);
                        Ext.ComponentQuery.query('#hdnAction')[0].setValue('E');
                        Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);




                        //-----------------------
                        me.ClearSelfAssessmentDone();

                        me.ReadOnlyControls('u');
                        //------------------------

                        Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
                        Ext.ComponentQuery.query('#btnEditSA')[0].enable(true);
                        Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true);
                        Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);


                        Ext.ComponentQuery.query('#lblMessage')[0].setText('');
                        Ext.ComponentQuery.query('#imgSA')[0].hide(true);




                        if(Ext.ComponentQuery.query('#hdnActionDisable')[0].getValue()==="Z")
                        {
                            Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
                        }
                        else
                        {
                            Ext.ComponentQuery.query('#btnEditSA')[0].enable(true);
                        }


                        if(obj.success === "false") return;

                    },

                    failure:function(result, request){
                        msg('ERROR OCURRED !!!', 'Error');
                    }


                });


            }

            else
            {
                msg("WARNING","Error in Generating Submission Number !");
            }
        }
    },

    ClearSelfAssessmentDone: function(txt) {
        Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue("");
        Ext.ComponentQuery.query('#txtSADoneFromDate')[0].setValue("");

        Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue("");
        Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setValue("");

        Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue("");
        Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue("");
        Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue("");

        Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue("");
        Ext.ComponentQuery.query('#txt117SADone')[0].setValue("");
        Ext.ComponentQuery.query('#txt119SADone')[0].setValue("");

        Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue("");
        Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue("");
        Ext.ComponentQuery.query('#hdnUsernameSADone')[0].setValue("");

        Ext.ComponentQuery.query('#txtAcctType')[0].setValue("");
        Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue("");
        Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue("");
        Ext.ComponentQuery.query('#txtWardSADone')[0].setValue("");
        Ext.ComponentQuery.query('#txtToleSADone')[0].setValue("");
        Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue("");
        Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue("");
        Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue("");
        Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue("");
        Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue("");

        Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue("");
        Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue("");
        Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue("");
        Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue("");
        Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue("");
        Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue("");
        Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue('');




        Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);
        Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#rbdSM')[0].setValue(false);
        Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);
        Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);
        Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);




        Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(false);
        Ext.ComponentQuery.query('#rbdMMTwo')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(false);
        Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(false);
        Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(false);
        Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);



        if(txt==="R")
        {
            Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue("");
            Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtSADoneFromDate')[0].setValue("");
            Ext.ComponentQuery.query('#txtSADoneFromDate')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue("");
            Ext.ComponentQuery.query('#txtPanSTDone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setValue("");
            Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txt117SADone')[0].setValue("");
            Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txt119SADone')[0].setValue("");
            Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue("");
            Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#hdnUsernameSADone')[0].setValue("");
            Ext.ComponentQuery.query('#hdnUsernameSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtAcctType')[0].setValue("");
            Ext.ComponentQuery.query('#txtAcctType')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue("");
            Ext.ComponentQuery.query('#txtNameSTDone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtWardSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtWardSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtToleSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtToleSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue("");
            Ext.ComponentQuery.query('#txtDistrictDone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtPhoneSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtFaxSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtEmailSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtNameDtwo')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtWardDtwo')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtToleDtwo')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtMetroDtwo')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setReadOnly(true);
        }










        Ext.getStore('SelfAssessmentD01').loadData([],false);





    },

    PanCurrentOfficeTaxpayerInfo: function() {
        var me=this;
        var txtPanSTDone=Ext.ComponentQuery.query('#txtPanSTDone')[0];
        var offCode=Ext.get('offCode').dom.innerHTML;
        LoadTaxpayerInfoWithValidPan(txtPanSTDone.getValue(),'10',function(data){


            //console.log(data.root);
            // var taxpayer=data.root.Taxpayer;

            //var business=taxpayer.BusinessAddress;




            var taxpayer=obj.root.Taxpayer;
            var address=taxpayer.BusinessAddress.Address;
            var office=taxpayer.Office;
            var individual=taxpayer.IndividualAddress.Address;

            //console.log('Individual>>>',taxpayer);

            if(taxpayer.TaxpayerCategoryId==="B")

            {
                msg("WARNING","तपाईले SelfAssessmentD01 भर्न पाउनु हुन्न् !!! ");
                //me.ReadOnlyControls("t");
                me.ClearSelfAssessmentDone("R");

                Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);

                Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
                Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
                Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true);
                Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
                Ext.ComponentQuery.query('#btnDelete')[0].disable(true);

                var strSADone=Ext.getStore('SelfAssessmentD01');
                strSADone.removeAll();
                strSADone.loadData([],false);




            }
            else
            {





                if(taxpayer.AcctStatus === "D")
                {
                    msg("WARNING","PAN is Deactivated !!!");
                    return;
                }
                if(offCode != office.OfficeCode)
                {
                    msg("WARNING","PAN is not Registered in this office !!!");

                    return;
                }



                Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

                // Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
                // Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType);

                Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(address.Telephone);
                Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

                Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(address.HouseNo);
                Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(address.WardNo);
                Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(address.StreetName);
                Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(address.DistrictNameNep);
                Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(address.Fax);
                Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(address.Email);

                Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(address.VdcTown);
                Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
                Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



                if(address.LocationType=== "MM")
                {
                    Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                }

                else if(address.LocationType==="SM")
                {
                    Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                }

                else if(address.LocationType==="MN")
                {

                    Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
                }

                else
                {
                    Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

                }


                //---setting values in Two no field (Individual Address)-----

                Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.Name);
                Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(individual.HouseNo);
                Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(individual.WardNo);
                Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(individual.StreetName);
                Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(individual.DistrictNameNep);
                Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(individual.VdcTown);

                if(individual.LocationType==="MM")
                {
                    Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);
                }

                else if(individual.LocationType==="SM")
                {
                    Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
                }
                else if(individual.LocationType==="MN")
                {
                    Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
                }
                else
                {
                    Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
                }











                //---------------------
                Ext.Ajax.request({
                    url: '../HANDLERS/Common/OfficeBankInfoHandler.ashx?method=GetOfficeBankInfo',
                    params:{officeCode:office.OfficeCode},
                    success: function ( result, request ) {

                        var data = Ext.decode(result.responseText);
                        // combo.store.loadData(data.root);
                        Ext.getStore('OfficeBankInfo').loadData(data.root);

                    },
                    failure: function ( result, request ) {
                        Ext.Msg.show({
                            title: 'Failure',
                            msg: 'ERROR OCURRED !!!' ,
                            buttons: Ext.MessageBox.OK,
                            icon:Ext.Msg.ERROR
                        });
                    }

                });





            }

        });

    },

    LoadSAWithTranNo: function() {

        /*
        var objParam = Ext.ComponentQuery.query('#pnlSelfAssessmentD01')[0];

        var param = objParam.extraParam;
        console.log('paramaaaaa>>>>>>',param);
        var tranNo = param.tranNo;
        console.log('TranNo',tranNo);

        Ext.Ajax.request({
        url: '../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx',
        params: {
        method:'GetAssessmentDoneByTranNo',tranNo:tranNo

        },
        success: function(response){
        var obj =Ext.decode(response.responseText);
        console.log(obj);
        console.log('checking.....',obj.root);



        var strSADone=Ext.getStore('SelfAssessmentD01');
        strSADone.removeAll();
        strSADone.loadData([],false);


        console.log("yahoooo",obj.root);
        console.log("AssmtDetailChildDOne",obj.root.AssmtDetailChildDOne);

        //console.log("Expenses",obj.root.AssmtDetailChildDOne[0].Expenses);


        var taxpayer=obj.root.Taxpayer;
        console.log("taxpayer",taxpayer);
        var address=taxpayer.BusinessAddress.Address;
        var office=taxpayer.Office;
        var individual=taxpayer.IndividualAddress.Address;

        var grdVoucherLST=Ext.ComponentQuery.query('#grdSADoneFour')[0];
        grdVoucherLST.store.add(obj.root.VoucherTbsLSTLST);
        //console.log('TranNo>>>>',obj.root.TranNo);
        Ext.ComponentQuery.query('#hdnTranNo')[0].setValue(obj.root.TranNo);
        Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setValue(obj.root.AssessmentNo);





        //----------------------------------------------------------------------------------------------------
        if(obj.root.RecordStatus==="D")
        {
            msg("Info","यो बिबरण हटाईसकेको छ");

            Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue("");

            Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue("");
            Ext.ComponentQuery.query('#txtAcctType')[0].setValue("");

            Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue("");

            Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtWardSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtToleSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue("");
            Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue("");

            Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue("");
            Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue("");

            Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);
            Ext.ComponentQuery.query('#rbdSM')[0].setValue(false);
            Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);
            Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);

            //---setting values in Two no field (Individual Address)-----

            Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue("");

            Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(false);
            Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
            Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(false);

            Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(false);

            //--setting Values in three--
            Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue("");
            Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue("");

            Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue("");

            Ext.ComponentQuery.query('#txt117SADone')[0].setValue("");
            Ext.ComponentQuery.query('#txt119SADone')[0].setValue("");
            //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);

            var grdVoucherLSTa=Ext.ComponentQuery.query('#grdSADoneFour')[0];
            grdVoucherLSTa.store.removeAll();

            var SelfAssessmentD01=Ext.getStore('SelfAssessmentD01');
            SelfAssessmentD01.removeAll();

            SelfAssessmentD01.loadData([],false);





            Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
            Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
            Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
            Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true);
            Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
            Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
            Ext.ComponentQuery.query('#btnPrintSA')[0].disable(true);
            Ext.ComponentQuery.query('#btnCancelSA')[0].disable(true);
        }







        //-----------------------------------------------------------------------------------------------------


        else if(obj.root.RecordStatus==="V")
        {
            msg("Info","यो बिबरण रूजु भईसकेको छ");

            Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue("");

            Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue("");
            Ext.ComponentQuery.query('#txtAcctType')[0].setValue("");

            Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue("");

            Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtWardSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtToleSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue("");
            Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue("");

            Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue("");
            Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue("");

            Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);
            Ext.ComponentQuery.query('#rbdSM')[0].setValue(false);
            Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);
            Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);

            //---setting values in Two no field (Individual Address)-----

            Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue("");
            Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue("");

            Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(false);
            Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
            Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(false);

            Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(false);

            //--setting Values in three--
            Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue("");
            Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue("");

            Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue("");
            Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue("");

            Ext.ComponentQuery.query('#txt117SADone')[0].setValue("");
            Ext.ComponentQuery.query('#txt119SADone')[0].setValue("");
            //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);

            var grdVoucherLSTaa=Ext.ComponentQuery.query('#grdSADoneFour')[0];
            grdVoucherLSTaa.store.removeAll();

            var SelfAssessmentsD01=Ext.getStore('SelfAssessmentD01');
            SelfAssessmentsD01.removeAll();


            Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
            Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
            Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
            Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true);
            Ext.ComponentQuery.query('#btnDelete')[0].disable(true);
            Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
            Ext.ComponentQuery.query('#btnPrintSA')[0].disable(true);
            Ext.ComponentQuery.query('#btnCancelSA')[0].disable(true);

        }

        //-------------------------------------------------------------------------------------------------------



        else if(obj.root.RecordStatus==="F")
        {
            msg("Info","यो बिबरण परिबर्तन गर्न पाईनेछैन्");
            Ext.ComponentQuery.query('#hdnStatusForHide')[0].setValue("F");

            Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtPanSTDone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtAcctType')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtPhoneSADone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtNameSTDone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtWardSADone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtToleSADone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtDistrictDone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtFaxSADone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtEmailSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtTSOsaDone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setReadOnly(true);




            Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);
            Ext.ComponentQuery.query('#rbdSM')[0].setValue(false);
            Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);
            Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);





            // ----------------------------------------
            //---setting values in Two no field (Individual Address)-----

            Ext.ComponentQuery.query('#txtNameDtwo')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtWardDtwo')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtToleDtwo')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtMetroDtwo')[0].setReadOnly(true);


            //--setting Values in three--
            Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(true);







            Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

            Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
            Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType);

            Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(address.Telephone);
            Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

            Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(address.HouseNo);
            Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(address.WardNo);
            Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(address.StreetName);
            Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(address.DistrictNameNep);
            Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(address.Fax);
            Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(address.Email);

            Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(address.VdcTown);
            Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
            Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



            if(address.LocationType=== "MM")
            {
                Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
            }

            else if(address.LocationType==="SM")
            {
                Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
            }

            else if(address.LocationType==="MN")
            {

                Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
            }

            else
            {
                Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

            }


            //---setting values in Two no field (Individual Address)-----

            Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.Name);
            Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(individual.HouseNo);
            Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(individual.WardNo);
            Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(individual.StreetName);
            Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(individual.DistrictNameNep);
            Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(individual.VdcTown);

            if(individual.LocationType==="MM")
            {
                Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);
            }

            else if(individual.LocationType==="SM")
            {
                Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
            }
            else if(individual.LocationType==="MN")
            {
                Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
            }
            else
            {
                Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
            }



            //--setting Values in three--
            Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
            Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
            Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);

            Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(obj.root.TotalTaxLiability);
            Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);

            Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
            Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
            //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);


            Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
            Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
            Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
            Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true);


        }

        //----------------------------------------------------------------------------------------------------------

        else
        {


            Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

            Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
            Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType);

            Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(address.Telephone);
            Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

            Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(address.HouseNo);
            Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(address.WardNo);
            Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(address.StreetName);
            Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(address.DistrictNameNep);
            Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(address.Fax);
            Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(address.Email);

            Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(address.VdcTown);
            Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
            Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



            if(address.LocationType=== "MM")
            {
                Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
            }

            else if(address.LocationType==="SM")
            {
                Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
            }

            else if(address.LocationType==="MN")
            {

                Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
            }

            else
            {
                Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

            }


            //---setting values in Two no field (Individual Address)-----

            Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.Name);
            Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(individual.HouseNo);
            Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(individual.WardNo);
            Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(individual.StreetName);
            Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(individual.DistrictNameNep);
            Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(individual.VdcTown);

            if(individual.LocationType==="MM")
            {
                Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);
            }

            else if(individual.LocationType==="SM")
            {
                Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
            }
            else if(individual.LocationType==="MN")
            {
                Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
            }
            else
            {
                Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);
                Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
            }



            //--setting Values in three--
            if(obj.root.AssmtDetailChildDOne)
            {

                Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
                Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue("E");
                Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
                Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);
            }
            else
            {
                Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue('');
                Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
                Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
                Ext.ComponentQuery.query('#btnDelete')[0].disable(true);


            }
            Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
            Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(obj.root.TotalTaxLiability);
            Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);

            Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
            Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
            //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);

            Ext.ComponentQuery.query('#btnSaveSA')[0].enable(true);
            // Ext.ComponentQuery.query('#btnEditSA')[0].enable(true);
            Ext.ComponentQuery.query('#btnSubmitSA')[0].enable(true);
            // Ext.ComponentQuery.query('#btnDelete')[0].enable(true);
            // Ext.ComponentQuery.query('#btnVerifySA')[0].enable(true);
            Ext.ComponentQuery.query('#btnPrintSA')[0].enable(true);
            Ext.ComponentQuery.query('#btnCancelSA')[0].enable(true);





        }



        },
        failure: function ( result, request ) {
        Ext.Msg.show({
            title: 'Failure',
            msg: 'ERROR OCURRED !!!' ,
            buttons: Ext.MessageBox.OK,
            icon:Ext.Msg.ERROR
        });
        }
        });


        */
    },

    ReadOnlyControls: function(txt) {

        var cboFiscalYearSADone = Ext.ComponentQuery.query('#cboFiscalYearSADone')[0];
        var txtSADoneFromDate = Ext.ComponentQuery.query('#txtSADoneFromDate')[0];
        var txtPanSTDone = Ext.ComponentQuery.query('#txtPanSTDone')[0];
        var txtSubmissionNoTest =  Ext.ComponentQuery.query('#txtSubmissionNoTest')[0];
        var txtInclusionSADone = Ext.ComponentQuery.query('#txtInclusionSADone')[0];
        var txtExpensesSADone = Ext.ComponentQuery.query('#txtExpensesSADone')[0];
        var txtAssessableIncomeSADone = Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0];
        var txtSumTaxLiabilitySADone = Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0];
        var txt117SADone = Ext.ComponentQuery.query('#txt117SADone')[0];
        var txt119SADone = Ext.ComponentQuery.query('#txt119SADone')[0];
        var txtTotalPayableTaxSADone = Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0];
        var cntButton = Ext.ComponentQuery.query('#cntButtonSA')[0];
        var cntBack = Ext.ComponentQuery.query('#cntBackSA')[0];
        var btnAddSADone = Ext.ComponentQuery.query('#btnAddSADone')[0];

        if(txt === "t")
        {
            cboFiscalYearSADone.setReadOnly(true);
            txtSADoneFromDate.setReadOnly(true);
            txtPanSTDone.setReadOnly(true);
            txtSubmissionNoTest.setReadOnly(true);
            txtInclusionSADone.setReadOnly(true);
            txtExpensesSADone.setReadOnly(true);
            txtAssessableIncomeSADone.setReadOnly(true);
            txtSumTaxLiabilitySADone.setReadOnly(true);
            txt117SADone.setReadOnly(true);
            txt119SADone.setReadOnly(true);
            txtTotalPayableTaxSADone.setReadOnly(true);
            cntButton.setVisible(false);
            cntBack.setVisible(true);
            btnAddSADone.disable(true);

        }

        else if(txt==="u")
        {
            cboFiscalYearSADone.setReadOnly(true);
            txtSADoneFromDate.setReadOnly(true);
            txtPanSTDone.setReadOnly(true);
            txtSubmissionNoTest.setReadOnly(true);
            txtInclusionSADone.setReadOnly(true);
            txtExpensesSADone.setReadOnly(true);
            txtAssessableIncomeSADone.setReadOnly(true);
            txtSumTaxLiabilitySADone.setReadOnly(true);
            txt117SADone.setReadOnly(true);
            txt119SADone.setReadOnly(true);
            txtTotalPayableTaxSADone.setReadOnly(true);
            btnAddSADone.disable(true);
        }
        else
        {

            cboFiscalYearSADone.setReadOnly(false);
            txtSADoneFromDate.setReadOnly(false);
            txtPanSTDone.setReadOnly(false);
            //txtSubmissionNoTest.setReadOnly(false);
            txtInclusionSADone.setReadOnly(false);
            txtExpensesSADone.setReadOnly(false);
            txtAssessableIncomeSADone.setReadOnly(true);
            txtSumTaxLiabilitySADone.setReadOnly(true);
            txt117SADone.setReadOnly(false);
            txt119SADone.setReadOnly(false);
            txtTotalPayableTaxSADone.setReadOnly(true);
            cntButton.setVisible(true);
            cntBack.setVisible(false);
            btnAddSADone.enable(true);
        }

    },

    print: function(SUBMISSION_NO,PAN,ACCTYPE) {


        var param = { 'AssessmentNo':SUBMISSION_NO,'Pan':PAN,'AcctType':'10'};
        var url="../../../Reporting/IncomeTax/ReportHandlers/SelfAssessmentD01Reporting.ashx";
        var winOption="width=730,height=345,left=100,top=100,resizable=yes,scrollbars=yes";

        OpenWindowWithPost(url,winOption,"NewFile", param);
    },

    loadControls: function(data) {
        var me = this;

        var pnlSelfAssessment = Ext.ComponentQuery.query('#pnlSelfAssessmentD01')[0];
        var param = pnlSelfAssessment.extraParam;

        var taxpayer = data.root.Taxpayer;
        var address = taxpayer.BusinessAddress.Address;
        var office = taxpayer.Office;
        var individual=taxpayer.IndividualAddress.Address;

        Ext.ComponentQuery.query('#hdnTranNo')[0].setValue('');
        Ext.ComponentQuery.query('#hdnOffCodeSADone')[0].setValue(office.OfficeCode);

        Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);


        Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#txtPanSTDone')[0].setReadOnly(true);


        Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(param.pan);
        Ext.ComponentQuery.query('#txtAcctType')[0].setValue("10");
        Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(param.fiscalYear);
        Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setValue(param.submissionNo);
        Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(address.Telephone);
        Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

        Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(address.HouseNo);
        Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(address.WardNo);
        Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(address.StreetName);
        Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(address.DistrictNameNep);
        Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(address.Fax);
        Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(address.Email);

        Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(address.VdcTown);
        Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
        Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);


        if(address.LocationType=== "MM")
        {
            Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
            Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
        }

        else if(address.LocationType==="SM")
        {
            Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
            Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
        }

        else if(address.LocationType==="MN")
        {

            Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
            Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
        }

        else
        {
            Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
            Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

        }


        //======================================================================


        //---setting values in Two no field (Individual Address)-----

        Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.Name);
        Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(individual.HouseNo);
        Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(individual.WardNo);
        Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(individual.StreetName);
        Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(individual.DistrictNameNep);
        Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(individual.VdcTown);

        var strSADone=Ext.getStore('SelfAssessmentD01');
        strSADone.removeAll();
        strSADone.loadData([],false);

        Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
        Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);




        if(individual.LocationType==="MM")
        {
            Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);
        }

        else if(individual.LocationType==="SM")
        {
            Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
            Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
        }
        else if(individual.LocationType==="MN")
        {
            Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);
            Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
        }
        else
        {
            Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);
            Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
        }

        //------------------------------------------------------------------

        var offCode = office.OfficeCode;
        var strBank = Ext.getStore('OfficeBankInfo');

        var wait = waitMsg("Loading ...");
        strBank.load(
        {
            params:{officeCode:offCode},
            scope:this,
            async:false,
            callback: function(records, operation, success){

                if(success){

                    console.log("bank",strBank.data);

                    if(strBank.getCount() > 0)
                    {
                        wait.hide();

                        //-----Next Work Goes Here----------------------

                        var objParam = Ext.ComponentQuery.query('#pnlSelfAssessmentD01')[0];
                        if (!objParam.extraParam)
                        {
                            me.ReadOnlyControls("");
                            hdnActGrd.setValue("");
                            return;
                        }
                        me.LoadSAWithTranNo();
                        //me.ReadOnlyControls("t");
                    }
                    else
                    {
                        msg("WARNING","Error in loading bank lookup !!!",function(){wait.hide();});
                    }


                }
            }
        });


    },

    LoadSADOneDataForPrint: function() {
        var me=this;
        var submissionNo=Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].getValue();

        // Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
        Ext.ComponentQuery.query('#btnEditSA')[0].enable(true);



        Ext.Ajax.request({

            url:'../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=GetAssessment',
            params:{submissionNumber:submissionNo},
            success:function(response){
                var obj=Ext.decode(response.responseText);

                var row= obj.root;





                var strSADone=Ext.getStore('SelfAssessmentD01');
                strSADone.removeAll();
                strSADone.loadData([],false);


                console.log("yahoooo",obj.root);
                console.log("AssmtDetailChildDOne",obj.root.AssmtDetailChildDOne);

                //console.log("Expenses",obj.root.AssmtDetailChildDOne[0].Expenses);



                console.log("ASS01Testing",row);



                var taxpayer=obj.root.Taxpayer;
                var address=taxpayer.BusinessAddress.Address;
                var office=taxpayer.Office;
                var individual=taxpayer.IndividualAddress.Address;

                var grdVoucherLST=Ext.ComponentQuery.query('#grdSADoneFour')[0];
                grdVoucherLST.store.add(obj.root.VoucherTbsLSTLST);
                console.log('TranNo>>>>',obj.root.TranNo);
                Ext.ComponentQuery.query('#hdnTranNo')[0].setValue(obj.root.TranNo);






                Ext.ComponentQuery.query('#hdnAction')[0].setValue('E');


                Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

                Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
                Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType);

                Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(address.Telephone);
                Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

                Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(address.HouseNo);
                Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(address.WardNo);
                Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(address.StreetName);
                Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(address.DistrictNameNep);
                Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(address.Fax);
                Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(address.Email);

                Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(address.VdcTown);
                Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
                Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



                if(address.LocationType=== "MM")
                {
                    Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                }

                else if(address.LocationType==="SM")
                {
                    Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                }

                else if(address.LocationType==="MN")
                {

                    Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
                }

                else
                {
                    Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

                }


                //---setting values in Two no field (Individual Address)-----

                Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.Name);
                Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(individual.HouseNo);
                Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(individual.WardNo);
                Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(individual.StreetName);
                Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(individual.DistrictNameNep);
                Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(individual.VdcTown);

                if(individual.LocationType==="MM")
                {
                    Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);
                }

                else if(individual.LocationType==="SM")
                {
                    Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
                }
                else if(individual.LocationType==="MN")
                {
                    Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
                }
                else
                {
                    Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
                }



                //--setting Values in three--
                if(obj.root.AssmtDetailChildDOne)
                {

                    Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
                    Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue("E");
                    Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
                    Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);
                }
                else
                {
                    Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue('');
                    Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
                    Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
                    Ext.ComponentQuery.query('#btnDelete')[0].disable(true);


                }
                Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
                Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(obj.root.TotalTaxLiability);
                Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);

                Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
                Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
                //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);

                Ext.ComponentQuery.query('#btnSaveSA')[0].enable(true);
                Ext.ComponentQuery.query('#btnEditSA')[0].enable(true);
                Ext.ComponentQuery.query('#btnSubmitSA')[0].enable(true);
                Ext.ComponentQuery.query('#btnDelete')[0].enable(true);
                Ext.ComponentQuery.query('#btnVerifySA')[0].disable(true);
                Ext.ComponentQuery.query('#btnPrintSA')[0].enable(true);
                Ext.ComponentQuery.query('#btnCancelSA')[0].enable(true);


                me.print(submissionNo,obj.root.Pan,'10');

                //---------------------------


            },
            failure:function(response){}


        });



    },

    LoadSAD01DetailByTranNo: function(tranNo) {
        var wait  = waitMsg('Loading Preview ...');

        Ext.Ajax.request({

            url:'../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=GetAssessmentDoneByTranNo',
            params:{tranNo:tranNo},
            success:function(response){
                var obj=Ext.decode(response.responseText);

                var row= obj.root;
                wait.hide();
                console.log("sssssssssss",obj.root);


                Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setReadOnly(true);
                //Ext.ComponentQuery.query('#txtPanSTDone')[0].setReadOnly(true);




                var strSADone=Ext.getStore('SelfAssessmentD01');
                strSADone.removeAll();
                strSADone.loadData([],false);


                //console.log("yahoooo",obj.root);
                //console.log("AssmtDetailChildDOne",obj.root.AssmtDetailChildDOne);

                //console.log("Expenses",obj.root.AssmtDetailChildDOne[0].Expenses);



                //console.log("ASS01Testing",row);

                console.log("root>>",obj.root);

                var taxpayer=obj.root.Taxpayer;
                var address=taxpayer.BusinessAddress.Address;
                var office=taxpayer.Office;
                var individual = null;

                console.log("indv>>: " + taxpayer.IndividualAddress.Address);

                if(taxpayer.IndividualAddress !== undefined && taxpayer.IndividualAddress !== null)
                {
                    individual = taxpayer.IndividualAddress.Address;
                }



                var grdVoucherLST=Ext.ComponentQuery.query('#grdSADoneFour')[0];
                grdVoucherLST.store.add(obj.root.VoucherTbsLSTLST);
                console.log('TranNo>>>>',obj.root.TranNo);
                Ext.ComponentQuery.query('#hdnTranNo')[0].setValue(obj.root.TranNo);



                //----------------------------------------------------------------------------------------------------
                if(obj.root.RecordStatus==="D")
                {
                    msg("Info","यो बिबरण हटाईसकेको छ <br/ ");

                    Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue("");

                    Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtAcctType')[0].setValue("");

                    Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue("");

                    Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtWardSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtToleSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue("");

                    Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue("");
                    Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue("");

                    Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);
                    Ext.ComponentQuery.query('#rbdSM')[0].setValue(false);
                    Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);
                    Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);

                    //---setting values in Two no field (Individual Address)-----

                    Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue("");
                    Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue("");
                    Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue("");
                    Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue("");
                    Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue("");
                    Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue("");

                    Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(false);
                    Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(false);

                    Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(false);

                    //--setting Values in three--
                    Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue("");

                    Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue("");

                    Ext.ComponentQuery.query('#txt117SADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txt119SADone')[0].setValue("");
                    //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);

                    var grdVoucherLSTa=Ext.ComponentQuery.query('#grdSADoneFour')[0];
                    grdVoucherLSTa.store.removeAll();

                    var SelfAssessmentD01=Ext.getStore('SelfAssessmentD01');
                    SelfAssessmentD01.removeAll();

                    SelfAssessmentD01.loadData([],false);


                    Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(true);


                    Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);

                    Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(true);





                    Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
                    Ext.ComponentQuery.query('#btnSaveSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnEditSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnSubmitSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnDelete')[0].hide(true);
                    Ext.ComponentQuery.query('#btnVerifySA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnPrintSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnCancelSA')[0].hide(true);
                    Ext.ComponentQuery.query("#imgSA")[0].hide();
                }
                else if(obj.root.RecordStatus==="V")
                {
                    msg("Info","यो बिबरण रूजु भईसकेको छ <br/ ");

                    Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue("");

                    Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtAcctType')[0].setValue("");

                    Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue("");

                    Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtWardSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtToleSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue("");

                    Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue("");
                    Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue("");

                    Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);
                    Ext.ComponentQuery.query('#rbdSM')[0].setValue(false);
                    Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);
                    Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);

                    //---setting values in Two no field (Individual Address)-----

                    Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue("");
                    Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue("");
                    Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue("");
                    Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue("");
                    Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue("");
                    Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue("");

                    Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(false);
                    Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
                    Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(false);

                    Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(false);

                    //--setting Values in three--
                    Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue("");

                    Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue("");

                    Ext.ComponentQuery.query('#txt117SADone')[0].setValue("");
                    Ext.ComponentQuery.query('#txt119SADone')[0].setValue("");
                    //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);

                    var grdVoucherLSTaa=Ext.ComponentQuery.query('#grdSADoneFour')[0];
                    grdVoucherLSTaa.store.removeAll();

                    var SelfAssessmentsD01=Ext.getStore('SelfAssessmentD01');
                    SelfAssessmentsD01.removeAll();


                    Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(true);


                    Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);

                    Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(true);


                    Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
                    Ext.ComponentQuery.query('#btnSaveSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnEditSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnSubmitSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnDelete')[0].hide(true);
                    Ext.ComponentQuery.query('#btnVerifySA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnPrintSA')[0].dishideable(true);
                    Ext.ComponentQuery.query('#btnCancelSA')[0].hide(true);
                    Ext.ComponentQuery.query("#imgSA")[0].hide();

                }
                else if(obj.root.RecordStatus==="F")
                {
                    msg("Info","यो बिबरण परिबर्तन गर्न पाईनेछैन् <br/ ");
                    Ext.ComponentQuery.query('#hdnStatusForHide')[0].setValue("F");

                    Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);

                    Ext.ComponentQuery.query('#txtPanSTDone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtAcctType')[0].setReadOnly(true);

                    Ext.ComponentQuery.query('#txtPhoneSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtNameSTDone')[0].setReadOnly(true);

                    Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtWardSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtToleSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtDistrictDone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtFaxSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtEmailSADone')[0].setReadOnly(true);

                    Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtTSOsaDone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setReadOnly(true);




                    Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);
                    Ext.ComponentQuery.query('#rbdSM')[0].setValue(false);
                    Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);
                    Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);





                    // ----------------------------------------
                    //---setting values in Two no field (Individual Address)-----

                    Ext.ComponentQuery.query('#txtNameDtwo')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtWardDtwo')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtToleDtwo')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtMetroDtwo')[0].setReadOnly(true);


                    //--setting Values in three--
                    Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setReadOnly(true);

                    Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);

                    Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(true);







                    Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

                    Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
                    Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType);

                    Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(address.Telephone);
                    Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

                    Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(address.HouseNo);
                    Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(address.WardNo);
                    Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(address.StreetName);
                    Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(address.DistrictNameNep);
                    Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(address.Fax);
                    Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(address.Email);

                    Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(address.VdcTown);
                    Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
                    Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



                    if(address.LocationType=== "MM")
                    {
                        Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                    }

                    else if(address.LocationType==="SM")
                    {
                        Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                    }

                    else if(address.LocationType==="MN")
                    {

                        Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
                    }

                    else
                    {
                        Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

                    }


                    //---setting values in Two no field (Individual Address)-----

                    Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.Name);

                    if(individual !== undefined && individual !== null)
                    {
                        Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(individual.HouseNo);
                        Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(individual.WardNo);
                        Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(individual.StreetName);
                        Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(individual.DistrictNameNep);
                        Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(individual.VdcTown);

                        if(individual.LocationType==="MM")
                        {
                            Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);
                        }

                        else if(individual.LocationType==="SM")
                        {
                            Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
                            Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
                        }
                        else if(individual.LocationType==="MN")
                        {
                            Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);
                            Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
                        }
                    }
                    else
                    {
                        Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
                    }



                    //--setting Values in three--
                    Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
                    Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
                    Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);

                    Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
                    Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(obj.root.TotalTaxLiability);
                    Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);

                    Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
                    Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
                    //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);


                    Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
                    Ext.ComponentQuery.query('#btnSaveSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnEditSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnSubmitSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnPrintSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnDelete')[0].hide(true);
                    Ext.ComponentQuery.query('#btnVerifySA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnCancelSA')[0].hide(true);
                    Ext.ComponentQuery.query("#imgSA")[0].hide();




                }

                //----------------------------------------------------------------------------------------------------------

                else
                {     Ext.ComponentQuery.query('#hdnAction')[0].setValue('E');


                    Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

                    Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
                    Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType);

                    Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(address.Telephone);
                    Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

                    Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(address.HouseNo);
                    Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(address.WardNo);
                    Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(address.StreetName);
                    Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(address.DistrictNameNep);
                    Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(address.Fax);
                    Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(address.Email);

                    Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(address.VdcTown);
                    Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
                    Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



                    if(address.LocationType=== "MM")
                    {
                        Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                    }

                    else if(address.LocationType==="SM")
                    {
                        Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                    }

                    else if(address.LocationType==="MN")
                    {

                        Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
                    }

                    else
                    {
                        Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

                    }


                    //---setting values in Two no field (Individual Address)-----

                    Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.Name);



                    if(individual !== undefined && individual !== null)
                    {
                        Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(individual.HouseNo);
                        Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(individual.WardNo);
                        Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(individual.StreetName);
                        Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(individual.DistrictNameNep);
                        Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(individual.VdcTown);

                        if(individual.LocationType==="MM")
                        {
                            Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);
                        }

                        else if(individual.LocationType==="SM")
                        {
                            Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
                            Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
                        }
                        else if(individual.LocationType==="MN")
                        {
                            Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);
                            Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
                        }
                    }
                    else
                    {
                        Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
                    }



                    //--setting Values in three--
                    if(obj.root.AssmtDetailChildDOne)
                    {

                        Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
                        Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue("E");
                        Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
                        Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);
                    }
                    else
                    {
                        Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue('');
                        Ext.ComponentQuery.query('#btnEditSA')[0].hide(true);
                        Ext.ComponentQuery.query('#btnVerifySA')[0].hide(true);
                        Ext.ComponentQuery.query('#btnDelete')[0].hide(true);


                    }
                    Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
                    Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(obj.root.TotalTaxLiability);
                    Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);

                    Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
                    Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
                    //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);

                    Ext.ComponentQuery.query('#btnSaveSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnEditSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnSubmitSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnDelete')[0].hide(true);
                    Ext.ComponentQuery.query('#btnVerifySA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnPrintSA')[0].hide(true);
                    Ext.ComponentQuery.query('#btnCancelSA')[0].hide(true);
                    Ext.ComponentQuery.query("#imgSA")[0].hide();



                    Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(false);
                    Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(false);


                    Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);

                    Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(false);
                    Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(false);


                }

            },
            failure:function(response){}


        });

    },

    LoadSAD01DetailForAU: function(argument) {
        var offCode= Ext.get('offCode').dom.innerHTML;
        Ext.ComponentQuery.query('#txtAcctType')[0].setValue(offCode);

        console.log("argument",argument);



        var me = this;
        var wait  = waitMsg('Loading Preview ...');

        var actionAU     = "";
        var offCodeAU    = "";
        var requestNo    = "";
        var submissionNo = "";

        actionAU = argument.auAction;
        requestNo = argument.requestNo;
        offCodeAU = argument.offCode;
        submissionNo = argument.pks[0].data.Value;




        //Checking and Loading Values from AU *******************************
        Ext.Ajax.request({
            url:"../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=GetAssessmentD01ForAU" ,
            params:{offCodeAU:offCodeAU,requestNo:requestNo,submissionNo:submissionNo},
            async : false,
            success: function ( result, request ) {

                wait.hide();
                var obj = Ext.decode(result.responseText);
                var row=obj.root;

                var strSADone=Ext.getStore('SelfAssessmentD01');
                strSADone.removeAll();
                strSADone.loadData([],false);


                var grdVoucherLST=Ext.ComponentQuery.query('#grdSADoneFour')[0];
                grdVoucherLST.store.add(obj.root.VoucherTbsLSTLST);
                if(row)
                {

                    console.log("rowforAU",row);

                    var taxpayer=obj.root.Taxpayer;
                    var address=taxpayer.BusinessAddress.Address;
                    var office=taxpayer.Office;
                    var individual = null;



                    console.log('TranNo>>>>',obj.root.TranNo);
                    Ext.ComponentQuery.query('#hdnTranNo')[0].setValue(obj.root.TranNo);

                    console.log("indv>>: " + taxpayer.IndividualAddress.Address);

                    if(taxpayer.IndividualAddress !== undefined && taxpayer.IndividualAddress !== null)
                    {
                        individual = taxpayer.IndividualAddress.Address;
                    }


                    Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setValue(obj.root.AssessmentNo);

                    Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

                    Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
                    Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType);

                    Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(address.Telephone);
                    Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

                    Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(address.HouseNo);
                    Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(address.WardNo);
                    Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(address.StreetName);
                    Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(address.DistrictNameNep);
                    Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(address.Fax);
                    Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(address.Email);

                    Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(address.VdcTown);
                    Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
                    Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



                    if(address.LocationType=== "MM")
                    {
                        Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                    }

                    else if(address.LocationType==="SM")
                    {
                        Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                    }

                    else if(address.LocationType==="MN")
                    {

                        Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
                    }

                    else
                    {
                        Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

                    }


                    //---setting values in Two no field (Individual Address)-----

                    Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.Name);



                    if(individual !== undefined && individual !== null)
                    {
                        Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(individual.HouseNo);
                        Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(individual.WardNo);
                        Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(individual.StreetName);
                        Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(individual.DistrictNameNep);
                        Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(individual.VdcTown);

                        if(individual.LocationType==="MM")
                        {
                            Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);
                        }

                        else if(individual.LocationType==="SM")
                        {
                            Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
                            Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
                        }
                        else if(individual.LocationType==="MN")
                        {
                            Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);
                            Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
                        }
                    }
                    else
                    {
                        Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);
                        Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
                    }



                    //--setting Values in three--
                    if(obj.root.AssmtDetailChildDOne)
                    {

                        Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
                        Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue("E");
                        Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
                        Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);
                    }
                    else
                    {
                        Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue('');
                        Ext.ComponentQuery.query('#btnEditSA')[0].hide(true);
                        Ext.ComponentQuery.query('#btnVerifySA')[0].hide(true);
                        Ext.ComponentQuery.query('#btnDelete')[0].hide(true);


                    }
                    Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
                    Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(obj.root.TotalTaxLiability);
                    Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);

                    Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
                    Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
                    Ext.ComponentQuery.query('#hdnChargeDate117')[0].setValue(obj.root.ChargePenaltyDetail[0].ChargeDate);
                    Ext.ComponentQuery.query('#hdnChargeDate119')[0].setValue(obj.root.ChargePenaltyDetail[1].ChargeDate);


                    if(obj.root.RecordStatus==="F")
                    {
                        msg("Info","यो बिबरण परिबर्तन गर्न पाईनेछैन् <br/ ");
                        Ext.ComponentQuery.query('#hdnStatusForHide')[0].setValue("F");

                        Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setReadOnly(true);

                        Ext.ComponentQuery.query('#txtPanSTDone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtAcctType')[0].setReadOnly(true);

                        Ext.ComponentQuery.query('#txtPhoneSADone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtNameSTDone')[0].setReadOnly(true);

                        Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtWardSADone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtToleSADone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtDistrictDone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtFaxSADone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtEmailSADone')[0].setReadOnly(true);

                        Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtTSOsaDone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setReadOnly(true);




                        Ext.ComponentQuery.query('#rbdMM')[0].setValue(false);
                        Ext.ComponentQuery.query('#rbdSM')[0].setValue(false);
                        Ext.ComponentQuery.query('#rbdMN')[0].setValue(false);
                        Ext.ComponentQuery.query('#rbdVD')[0].setValue(false);





                        // ----------------------------------------
                        //---setting values in Two no field (Individual Address)-----

                        Ext.ComponentQuery.query('#txtNameDtwo')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtWardDtwo')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtToleDtwo')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtMetroDtwo')[0].setReadOnly(true);


                        //--setting Values in three--
                        Ext.ComponentQuery.query('#txtExpensesSADone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtInclusionSADone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setReadOnly(true);

                        Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setReadOnly(true);

                        Ext.ComponentQuery.query('#txt117SADone')[0].setReadOnly(true);
                        Ext.ComponentQuery.query('#txt119SADone')[0].setReadOnly(true);







                        Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

                        Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
                        Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType);

                        Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(address.Telephone);
                        Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

                        Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(address.HouseNo);
                        Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(address.WardNo);
                        Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(address.StreetName);
                        Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(address.DistrictNameNep);
                        Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(address.Fax);
                        Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(address.Email);

                        Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(address.VdcTown);
                        Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
                        Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



                        if(address.LocationType=== "MM")
                        {
                            Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
                            Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
                            Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                        }

                        else if(address.LocationType==="SM")
                        {
                            Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
                            Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
                            Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                        }

                        else if(address.LocationType==="MN")
                        {

                            Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
                            Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
                            Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
                        }

                        else
                        {
                            Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
                            Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
                            Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

                        }


                        //---setting values in Two no field (Individual Address)-----

                        Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.Name);

                        if(individual !== undefined && individual !== null)
                        {
                            Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(individual.HouseNo);
                            Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(individual.WardNo);
                            Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(individual.StreetName);
                            Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(individual.DistrictNameNep);
                            Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(individual.VdcTown);

                            if(individual.LocationType==="MM")
                            {
                                Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);
                            }

                            else if(individual.LocationType==="SM")
                            {
                                Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
                                Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
                            }
                            else if(individual.LocationType==="MN")
                            {
                                Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);
                                Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
                            }
                        }
                        else
                        {
                            Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);
                            Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
                        }



                        //--setting Values in three--
                        Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
                        Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
                        Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);

                        Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
                        Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(obj.root.TotalTaxLiability);
                        Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);

                        Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
                        Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
                        //Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].NetTaxLiability);

                        Ext.ComponentQuery.query('#lblMessage')[0].setText('');
                        Ext.ComponentQuery.query('#imgSA')[0].hide(true);


                        Ext.ComponentQuery.query('#btnAddSADone')[0].disable(true);
                        Ext.ComponentQuery.query('#btnSaveSA')[0].disable(true);
                        Ext.ComponentQuery.query('#btnEditSA')[0].disable(true);
                        Ext.ComponentQuery.query('#btnSubmitSA')[0].disable(true);
                        Ext.ComponentQuery.query('#btnPrintSA')[0].enable(true);
                        Ext.ComponentQuery.query('#btnDelete')[0].disable(true);




                    }






                }






                else

                {


                    Ext.Ajax.request({
                        url:"../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=SaveAssessmentD01AU" ,
                        params:{submissionNo:submissionNo,offCodeAU:offCodeAU,requestNo:requestNo},
                        async : false,
                        success: function ( result, request ) {

                            wait.hide();
                            var obj = Ext.decode(result.responseText);
                            //msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);

                            //--NB: Loading from AU---

                            Ext.Ajax.request({
                                url:"../Handlers/IncomeTax/D01/AssessmentSADoneHandler.ashx?method=GetAssessmentD01ForAU" ,
                                params:{offCodeAU:offCodeAU,requestNo:requestNo,submissionNo:submissionNo},
                                async : false,
                                success: function ( result, request ) {

                                    wait.hide();
                                    var obj = Ext.decode(result.responseText);
                                    var row=obj.root;
                                    console.log("rowforAU",row);

                                    var taxpayer=obj.root.Taxpayer;
                                    var address=taxpayer.BusinessAddress.Address;
                                    var office=taxpayer.Office;
                                    var individual = null;


                                    var strSADone=Ext.getStore('SelfAssessmentD01');
                                    strSADone.removeAll();
                                    strSADone.loadData([],false);


                                    var grdVoucherLST=Ext.ComponentQuery.query('#grdSADoneFour')[0];
                                    grdVoucherLST.store.add(obj.root.VoucherTbsLSTLST);
                                    console.log('TranNo>>>>',obj.root.TranNo);
                                    Ext.ComponentQuery.query('#hdnTranNo')[0].setValue(obj.root.TranNo);

                                    console.log("indv>>: " + taxpayer.IndividualAddress.Address);

                                    if(taxpayer.IndividualAddress !== undefined && taxpayer.IndividualAddress !== null)
                                    {
                                        individual = taxpayer.IndividualAddress.Address;
                                    }


                                    Ext.ComponentQuery.query('#txtSubmissionNoTest')[0].setValue(obj.root.AssessmentNo);

                                    Ext.ComponentQuery.query('#cboFiscalYearSADone')[0].setValue(obj.root.FiscalYear);

                                    Ext.ComponentQuery.query('#txtPanSTDone')[0].setValue(obj.root.Pan);
                                    Ext.ComponentQuery.query('#txtAcctType')[0].setValue(obj.root.AcctType);

                                    Ext.ComponentQuery.query('#txtPhoneSADone')[0].setValue(address.Telephone);
                                    Ext.ComponentQuery.query('#txtNameSTDone')[0].setValue(taxpayer.Name);

                                    Ext.ComponentQuery.query('#txtHouseNoSADone')[0].setValue(address.HouseNo);
                                    Ext.ComponentQuery.query('#txtWardSADone')[0].setValue(address.WardNo);
                                    Ext.ComponentQuery.query('#txtToleSADone')[0].setValue(address.StreetName);
                                    Ext.ComponentQuery.query('#txtDistrictDone')[0].setValue(address.DistrictNameNep);
                                    Ext.ComponentQuery.query('#txtFaxSADone')[0].setValue(address.Fax);
                                    Ext.ComponentQuery.query('#txtEmailSADone')[0].setValue(address.Email);

                                    Ext.ComponentQuery.query('#txtMetroTypeSADone')[0].setValue(address.VdcTown);
                                    Ext.ComponentQuery.query('#txtTSOsaDone')[0].setValue(office.OfficeNameNepali);
                                    Ext.ComponentQuery.query('#hdnOfficeCodeSADone')[0].setValue(office.OfficeCode);



                                    if(address.LocationType=== "MM")
                                    {
                                        Ext.ComponentQuery.query('#rbdMM')[0].setValue(true);
                                        Ext.ComponentQuery.query('#rbdMM')[0].setReadOnly(true);
                                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                                    }

                                    else if(address.LocationType==="SM")
                                    {
                                        Ext.ComponentQuery.query('#rbdSM')[0].setValue(true);
                                        Ext.ComponentQuery.query('#rbdSM')[0].setReadOnly(true);
                                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7ka');
                                    }

                                    else if(address.LocationType==="MN")
                                    {

                                        Ext.ComponentQuery.query('#rbdMN')[0].setValue(true);
                                        Ext.ComponentQuery.query('#rbdMN')[0].setReadOnly(true);
                                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7kha');
                                    }

                                    else
                                    {
                                        Ext.ComponentQuery.query('#rbdVD')[0].setValue(true);
                                        Ext.ComponentQuery.query('#rbdVD')[0].setReadOnly(true);
                                        Ext.ComponentQuery.query('#hdnTaxId')[0].setValue('A1-1-7Ga');

                                    }


                                    //---setting values in Two no field (Individual Address)-----

                                    Ext.ComponentQuery.query('#txtNameDtwo')[0].setValue(taxpayer.Name);



                                    if(individual !== undefined && individual !== null)
                                    {
                                        Ext.ComponentQuery.query('#txtHouseNoDtwo')[0].setValue(individual.HouseNo);
                                        Ext.ComponentQuery.query('#txtWardDtwo')[0].setValue(individual.WardNo);
                                        Ext.ComponentQuery.query('#txtToleDtwo')[0].setValue(individual.StreetName);
                                        Ext.ComponentQuery.query('#txtDistrictDtwo')[0].setValue(individual.DistrictNameNep);
                                        Ext.ComponentQuery.query('#txtMetroDtwo')[0].setValue(individual.VdcTown);

                                        if(individual.LocationType==="MM")
                                        {
                                            Ext.ComponentQuery.query('#rbdMMTwo')[0].setValue(true);
                                        }

                                        else if(individual.LocationType==="SM")
                                        {
                                            Ext.ComponentQuery.query('#rbdSMTwo')[0].setValue(true);
                                            Ext.ComponentQuery.query('#rbdSMTwo')[0].setReadOnly(true);
                                        }
                                        else if(individual.LocationType==="MN")
                                        {
                                            Ext.ComponentQuery.query('#rbdMNTwo')[0].setValue(true);
                                            Ext.ComponentQuery.query('#rbdMNTwo')[0].setReadOnly(true);
                                        }
                                    }
                                    else
                                    {
                                        Ext.ComponentQuery.query('#rbdVDTwo')[0].setValue(true);
                                        Ext.ComponentQuery.query('#rbdVDTwo')[0].setReadOnly(true);
                                    }



                                    //--setting Values in three--
                                    if(obj.root.AssmtDetailChildDOne)
                                    {
                                        Ext.ComponentQuery.query('#txtExpensesSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Expenses);
                                        Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue("E");
                                        Ext.ComponentQuery.query('#txtInclusionSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].Inclusions);
                                        Ext.ComponentQuery.query('#hdnAssmtdtlSn')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessDetailSn);
                                    }
                                    else
                                    {
                                        Ext.ComponentQuery.query('#hdnAssmtDetailChildDOne')[0].setValue('');
                                        Ext.ComponentQuery.query('#btnEditSA')[0].hide(true);
                                        Ext.ComponentQuery.query('#btnVerifySA')[0].hide(true);
                                        Ext.ComponentQuery.query('#btnDelete')[0].hide(true);


                                    }
                                    Ext.ComponentQuery.query('#txtAssessableIncomeSADone')[0].setValue(obj.root.AssmtDetailChildDOne[0].AssessableIncome);
                                    Ext.ComponentQuery.query('#txtSumTaxLiabilitySADone')[0].setValue(obj.root.TotalTaxLiability);
                                    Ext.ComponentQuery.query('#txtTotalPayableTaxSADone')[0].setValue(obj.root.TotalPayableTax);

                                    Ext.ComponentQuery.query('#txt117SADone')[0].setValue(obj.root.ChargePenaltyDetail[0].Amount);
                                    Ext.ComponentQuery.query('#txt119SADone')[0].setValue(obj.root.ChargePenaltyDetail[1].Amount);
                                    Ext.ComponentQuery.query('#hdnChargeDate117')[0].setValue(obj.root.ChargePenaltyDetail[0].ChargeDate);
                                    Ext.ComponentQuery.query('#hdnChargeDate119')[0].setValue(obj.root.ChargePenaltyDetail[1].ChargeDate);





                                },
                                failure:  function ( result, request ) {

                                    wait.hide();

                                    msg("FAILURE","Error in Saving data !!!");
                                }
                            });


                        },
                        failure:  function ( result, request ) {

                            wait.hide();

                            msg("FAILURE","Error in Saving data !!!");
                        }
                    });


                }




            },
            failure:  function ( result, request ) {

                wait.hide();

                msg("FAILURE","Error in Saving data !!!");
            }
        });


        //*******************************************************************




    },

    init: function(application) {
        this.control({
            "#pnlSelfAssessmentD01": {
                afterrender: this.onPnlSelfAssessmentD01AfterRender
            },
            "#txtPanSTDone": {
                keypress: this.onTxtPanSTDoneKeypress,
                keypress: this.onTxtPanSTDoneKeypress
            },
            "#btnSaveSA": {
                click: this.onBtnSaveSAClick
            },
            "#btnCancelSA": {
                click: this.onBtnCancelSAClick
            },
            "#grdSADoneFour": {
                beforerender: this.onGrdSADoneFourBeforeRender
            },
            "#btnEditSA": {
                click: this.onBtnEditSAClick
            }
        });
    }

});
