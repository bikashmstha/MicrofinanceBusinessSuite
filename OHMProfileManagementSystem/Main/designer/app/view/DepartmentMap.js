/*
 * File: app/view/DepartmentMap.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.DepartmentMap', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Action',
        'Ext.selection.RowModel',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.grid.plugin.RowEditing'
    ],

    frame: true,
    title: 'Department Map',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    itemId: 'frmDepartmentMap',
                    bodyPadding: 10,
                    items: [
                        {
                            xtype: 'combobox',
                            anchor: '100%',
                            itemId: 'ddlOffice',
                            maxWidth: 400,
                            width: 400,
                            fieldLabel: 'Office',
                            emptyText: '- - - Select Office - - -',
                            displayField: 'OfficeName',
                            forceSelection: true,
                            queryMode: 'local',
                            store: 'OfficeShortStore',
                            valueField: 'OfficeCode',
                            listeners: {
                                change: {
                                    fn: me.onDdlOfficeChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'gridpanel',
                            itemId: 'grdDepartment',
                            title: 'Departments',
                            store: 'DepartmentMapStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'InstituteCode',
                                    text: 'InstituteCode'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 312,
                                    dataIndex: 'DeptCode',
                                    text: 'DepartmentCode',
                                    editor: {
                                        xtype: 'combobox',
                                        itemId: 'ddlDepartmentCode',
                                        displayField: 'DeptName',
                                        forceSelection: true,
                                        queryMode: 'local',
                                        store: 'DepartmentShortStore',
                                        valueField: 'DeptCode'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Action',
                                    text: 'Action',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtAction',
                                        readOnly: true
                                    }
                                },
                                {
                                    xtype: 'actioncolumn',
                                    itemId: 'delDepartmentMap',
                                    items: [
                                        {
                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                var store = Ext.getStore('DepartmentMapStore');
                                                var grd =  Ext.ComponentQuery.query('#grdDepartment')[0];
                                                var row = store.getAt(rowIndex).data;

                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Department ?', function(btn) {
                                                    if(btn == 'yes'){

                                                        /*
                                                        nepaliDateConversion.FiscalYear, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_MONTH_CODE", nepaliDateConversion.MonthCode, OracleDbType.Int16, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_START_DATE", nepaliDateConversion.EnglishStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_START_DATE", nepaliDateConversion.NepaliStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_END_DATE", nepaliDateConversion.EnglishEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_END_DATE", nepaliDateConversion.NepaliEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_YEAR", nepaliDateConversion.NepaliYear, OracleDbType.Int16, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_PERIOD", nepaliDateConversion.NepaliPeriod, OracleDbType.Int16, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_NO_OF_DAYS_IN_MONTH", nepaliDateConversion.NoOfDays, OracleDbType.Int16, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_ON", nepaliDateConversion.CreatedOn, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_BY", nepaliDateConversion.CreatedBy, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_INSERT_UPDATE", nepaliDateConversion.Action, OracleDbType.Varchar2, ParameterDirection.Input));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_CODE", null, OracleDbType.Varchar2, ParameterDirection.Output));
                                                        paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_DESC", null, OracleDbType.
                                                        */
                                                        var rec={InstituteCode:row.InstituteCode,
                                                                DeptCode:row.DeptCode,
                                                            Action:'D'};

                                                        var wMsg='Deleting....';

                                                        var waitSave = watiMsg(wMsg);

                                                        Ext.Ajax.request({
                                                            url: '../Handlers/GeneralMasterParamters/Maintenance/DepartmentMapHandler.ashx',
                                                            params: {
                                                                method:'Save',
                                                                departmntMap:JSON.stringify(rec)
                                                            },
                                                            success: function(response){
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                console.log(out);

                                                                if(out.success==="true")
                                                                {
                                                                    var message=out.root;
                                                                    msg("SUCCESS",message.OutResultMessage,function(){
                                                                        grd.bindStore(store);
                                                                        store.removeAt(rowIndex);
                                                                    });



                                                                }
                                                                else
                                                                {
                                                                    msg("FAILURE",out.message);
                                                                }
                                                            },
                                                            failure: function ( result, request ) {
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                msg("FAILURE",out.message);
                                                            }

                                                        });



                                                        return true;
                                                    }
                                                });
                                            },
                                            icon: '../ITS/resources/images/icons/cancel.png'
                                        }
                                    ]
                                }
                            ],
                            selModel: Ext.create('Ext.selection.RowModel', {

                            }),
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    items: [
                                        {
                                            xtype: 'button',
                                            itemId: 'btnAddDepartmentMap',
                                            text: 'Add Office Department',
                                            listeners: {
                                                click: {
                                                    fn: me.onBtnAddDepartmentMapClick,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }
                            ],
                            plugins: [
                                Ext.create('Ext.grid.plugin.RowEditing', {
                                    listeners: {
                                        validateedit: {
                                            fn: me.onRowEditingValidateedit,
                                            scope: me
                                        },
                                        canceledit: {
                                            fn: me.onRowEditingCanceledit,
                                            scope: me
                                        }
                                    }
                                })
                            ],
                            listeners: {
                                beforerender: {
                                    fn: me.onGrdDepartmentBeforeRender,
                                    scope: me
                                }
                            }
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFrmDepartmentMapAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onDdlOfficeChange: function(field, newValue, oldValue, eOpts) {
        var store=Ext.getStore('DepartmentMapStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/DepartmentMapHandler.ashx',
            params: {
                method:'GetOfficeDepartment',officeCode:field.getValue()
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onBtnAddDepartmentMapClick: function(button, e, eOpts) {
        var office=Ext.ComponentQuery.query('#ddlOffice')[0];
        if(office.getValue()===''||office.getValue()===null)
            {
                msg('WARNING','Please, Select Office');
                return;
            }
        var store =Ext.getStore('DepartmentMapStore');
        var rec={InstituteCode:'',
                 DeptCode:'',
                 Action:'I'};
        store.add(rec);

    },

    onRowEditingValidateedit: function(editor, e, eOpts) {
        var errMsg='';
        var office=Ext.ComponentQuery.query('#ddlOffice')[0];
        var department=Ext.ComponentQuery.query('#ddlDepartmentCode')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];

        if(department.getValue()===null ||department.getValue()==="")
            {
                errMsg+="Please, Select Department";
            }


        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }
        /*
        p_category_no                               IN           NUMBER,
                                         p_category_desc                             IN           VARCHAR2,
                                         p_category_initial                          IN           VARCHAR2,
                                         p_tran_office_code                          IN           VARCHAR2,       */

        var rec={InstituteCode:office.getValue(),
                 DeptCode:department.getValue(),
                 Action:action.getValue()};



        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updating....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/GeneralMasterParameters/Maintenance/DepartmentMapHandler.ashx',
                    params: {
                        method:'Save',
                        departmentMap:JSON.stringify(rec)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdDepartment')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });




                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit: function(editor, e, eOpts) {

    },

    onGrdDepartmentBeforeRender: function(component, eOpts) {
        var grid = Ext.ComponentQuery.query('#grdDepartment')[0];

                grid.columns[1].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
                    var temp="";


                    var items=Ext.getStore('DepartmentShortStore').data.items;


                    for(var i=0;i<items.length;i++)
                    {

                        if(items[i].data.DeptCode==value)
                        {
                            temp=items[i].data.DeptName;
                            break;
                        }
                    }


                    return temp;
                };
    },

    onFrmDepartmentMapAfterRender: function(component, eOpts) {
        var store=Ext.getStore('OfficeShortStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Office/OfficeHandler.ashx',
            params: {
                method:'GetOfficeShort'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            store.removeAll();
            store.add(data.root);


        }
        });


        var deptStore=Ext.getStore('DepartmentShortStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/DepartmentHandler.ashx',
            params: {
                method:'GetDepartmentShort'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            deptStore.removeAll();
            deptStore.add(data.root);


        }
        });
    }

});