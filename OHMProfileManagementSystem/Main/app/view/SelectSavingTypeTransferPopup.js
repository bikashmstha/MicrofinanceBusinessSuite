/*
 * File: app/view/SelectSavingTypeTransferPopup.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.SelectSavingTypeTransferPopup', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.selection.RowModel',
        'Ext.grid.column.Column'
    ],

    height: 500,
    itemId: 'SelectSavingTypeTransferPopup',
    width: 750,
    autoScroll: true,
    title: 'Select Member',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'container',
                    items: [
                        {
                            xtype: 'gridpanel',
                            itemId: 'grdSearchSavingType',
                            width: '',
                            title: '',
                            store: 'SavingTypeStore',
                            selModel: Ext.create('Ext.selection.RowModel', {
                                listeners: {
                                    beforeselect: {
                                        fn: me.onRowModelBeforeSelect,
                                        scope: me
                                    }
                                }
                            }),
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    width: 110,
                                    dataIndex: 'SavingAccountNo',
                                    text: 'Saving Account No'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'ProductCode',
                                    text: 'Product Code'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 149,
                                    dataIndex: 'ProductName',
                                    text: 'Product Name'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 112,
                                    dataIndex: 'AccountOpenDate',
                                    text: 'Account Open Date'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 131,
                                    dataIndex: 'AccountOpenDate_Bs',
                                    text: 'Account Open Date_Bs'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'AccountNo',
                                    text: 'Account No'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    hidden: true,
                                    dataIndex: 'RowCount',
                                    text: 'Row Count'
                                }
                            ]
                        }
                    ]
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onSelectSavingTypeTransferPopupAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onRowModelBeforeSelect: function(rowmodel, record, index, eOpts) {
        Ext.MessageBox.confirm('Select', 'Are you sure ?', function(btn){

           if(btn === 'yes'){
               //console.log('record',record);

               Ext.ComponentQuery.query('#txtFromSavingTypeCode')[0].setValue(record.data.ProductCode);
               Ext.ComponentQuery.query('#txtFromSavingTypeDesc')[0].setValue(record.data.ProductName);
               Ext.ComponentQuery.query('#txtFromOpenDateBS')[0].setValue(record.data.AccountOpenDate_Bs);
               Ext.ComponentQuery.query('#txtFromOpenDateAD')[0].setValue(record.data.AccountOpenDate);
               Ext.ComponentQuery.query('#txtFromAccNo')[0].setValue(record.data.SavingAccountNo);


              // return true;
           }
           else
           {

           }
            var v = Ext.ComponentQuery.query('#SelectSavingTypeTransferPopup')[0];

            v.close();
        });

    },

    onSelectSavingTypeTransferPopupAfterRender: function(component, eOpts) {
        var waitSave = watiMsg('Loading Data. Please wait ...');
        Ext.Ajax.request({
            url:'../Handlers/Finance/Transaction/EditTransaction/SavingTransferFromAccountHandler.ashx',
            params:{method:'GetSavTransferFrmAcc', OfficeCode:getOfficeCode(),
                    CenterCode: Ext.ComponentQuery.query('#txtSavingFromCenterCode')[0].getValue(),
                    ClientNo:Ext.ComponentQuery.query('#txtSavingFromMemberCode')[0].ClientNo
                   },
            success: function ( result, request ) {

                var obj = Ext.decode(result.responseText);
                if(obj.success === 'true'){
                    //console.log("Resu",obj.root);
                    var store =Ext.getStore('SavingTypeStore');
                    store.removeAll();
                    store.add(obj.root);
                    waitSave.hide();

                }else{msg('FAILURE','Could Not Load Data');}
            },
            failure: function(form, action) {
                msg("FAILURE","Could Not Load Data");    }
        });

    }

});