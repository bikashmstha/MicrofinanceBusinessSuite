/*
 * File: app/controller/VatReturns.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.VatReturns', {
    extend: 'Ext.app.Controller',

    stores: [
        'FilingPeriodStore',
        'ReferenceBasisStore'
    ],

    onTxtTaxYearBlur: function(component, e, eOpts) {
        var me=this;
        var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
        if(taxyear===null)
        {
            return;
        }

        //VALIDATING TAX YEAR
        ValidateTaxyear(taxyear,function(invalidMsg){
            if(invalidMsg!=='')
            {
                msg('INFO',invalidMsg);
                Ext.ComponentQuery.query('#hdnVTaxyear')[0].setValue('INVALID');

                return;
            }
            else
            {
                Ext.ComponentQuery.query('#hdnVTaxyear')[0].setValue('');
            }
        });
        //ENDS VALIDATING TAX YEAR



    },

    onDdlFilingPeriodChange: function(field, newValue, oldValue, eOpts) {
        var combo=Ext.ComponentQuery.query("#ddlFilingPeriod")[0];
        var v = combo.getValue(); 

        var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
        var pan=Ext.ComponentQuery.query("#txtPan")[0].getValue();

        if(pan===''||pan===null)
        {
            msg('INFO', 'कृपया पहिला प्यान भर्नुहोला।');
            combo.setValue('');
            return;
        }

        if(taxyear==='0'||taxyear===null)
        {
            msg('INFO', 'कृपया पहिला कर बर्ष भर्नुहोला।');
            combo.setValue('');
            return;
        }

        if(v===''||v===null)
        {
            return;
        }

        //LOADING PERIOD AS PER FILE PERIOD
        var record = combo.findRecord(combo.valueField || combo.displayField, v); 
        var index = combo.store.indexOf(record);

        var ddlPeriod=Ext.ComponentQuery.query("#ddlPeriod")[0];
        ddlPeriod.setValue('');

        ddlPeriod.store.loadData(record.data.Period);
        //ENDS LOADING PERIOD


    },

    onDdlPeriodChange: function(field, newValue, oldValue, eOpts) {

        var me=this;
        var filePer=Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue();
        var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
        var period=Ext.ComponentQuery.query("#ddlPeriod")[0].getValue();
        var pan=Ext.ComponentQuery.query("#txtPan")[0].getValue();
        var acctType=Ext.ComponentQuery.query("#txtAccountType")[0].getValue();
        var message='';
        if(period==='')
        {
            return;
        }

        if(period<1||period>12)
        {
            return;
        }
        if(pan===''||pan===null)
        {
            message+= '<BR>* कृपया पहिला प्यान भर्नुहोला।';

        }
        if(taxyear==='0'||taxyear===null)
        {
            message+= '<BR>* कृपया पहिला कर वर्ष भर्नुहोला।';

        }


        if(Ext.ComponentQuery.query('#hdnVTaxyear')[0].getValue()==='INVALID')
        {
            message+='<BR>* तपाईले भर्नु भएको कर वर्ष मिलेन।';

        }

        if(message!=='')
        {
            Ext.ComponentQuery.query("#ddlPeriod")[0].setValue('');
            msg('INFO',message);
            return;
        }

        //VALIDATING YEAR MONTH DESCRIPTION


        Ext.Ajax.request({
            url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
            params: {
                method:'GetFilePerEndDate',
                filePeriod: filePer,
                taxyear:taxyear,
                period:period
            },
            success: function(response){

                //console.log(response.responseText);
                var endDate=Ext.decode(response.responseText);
                if(endDate.message==='')
                {
                    msg('INFO','* तपाईंले भर्नुभएको फाइलिंग पिरियड मिलेन।');
                    Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].setValue('INVALID');
                    return;

                }




                var me=this;
                var filePer=Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue();
                var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
                var period=Ext.ComponentQuery.query("#ddlPeriod")[0].getValue();
                var pan=Ext.ComponentQuery.query("#txtPan")[0].getValue();
                var acctType=Ext.ComponentQuery.query("#txtAccountType")[0].getValue();
                var registrationDate=Ext.ComponentQuery.query('#hdnRegistrationDate')[0].getValue();


                //VALIDATING YEAR MONTH DESCRIPTION
                ValidateFilingPeriod(pan,acctType,filePer,taxyear,period,registrationDate,function(errMessage){
                    if(errMessage!=='')
                    {
                        msg('INFO',errMessage);
                        Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].setValue('INVALID');
                        return;
                    }
                    else
                    {
                        if(endDate.message>Ext.get('nepDate').dom.innerHTML)
                        {
                            msg('INFO','* यो अवधिलाई फाईल गर्ने बेला भएको छैन।');
                            Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].setValue('INVALID');
                            return;
                        }
                        else
                        {
                            Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].setValue('VALID');
                        }
                    }
                });



            }
        });


    },

    onTxtVatOnSaleChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        me.CalculateTotalDebit(Ext.ComponentQuery.query("#txtVatOnSale")[0].getValue(), Ext.ComponentQuery.query("#txtAdjDebit")[0].getValue());







    },

    onTxtVatOnSaleBlur: function(component, e, eOpts) {
        /*var me=this;
        var startDate;
        var endDate;
        var date;
        var retDate='';
        var rateNDate;
        var rateStartPeriod;
        var rateEndPeriod;
        var deviationAllowedRate;


        var filePer=Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue();
        var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
        var period=Ext.ComponentQuery.query("#ddlPeriod")[0].getValue();


        var message='';


        //CHECKING FILE PERIOD, TAX YEAR, PERIOD
        if(filePer===null)
        {
            message+='\nFile Period Cannot Be Empty';
        }
        if(taxyear===null)
        {
            message+='\nTax Year Cannot Be Empty';
        }

        if(period===null)
        {
            message+='\nPeriod Cannot Be Empty';
        }

        if(message!=='')
        {
            me.msg('INFO',message);
            return;
        }


        var taxableSale=Ext.ComponentQuery.query('#txtTaxableSale')[0].getValue();
        var vatOnSale=Ext.ComponentQuery.query('#txtVatOnSale')[0].getValue();


        retDate=me.GetStartOrEndDate(filePer,taxyear,period,'S');


        if(retDate!=='')
        {

            //GET RATE AT THE START OF THE PERIOD
            rateNDate=me.GetRate('VATRATE',retDate);
            rateStartPeriod=rateNDate.split('&&')[0];

            endDate=rateNDate.split('&&')[1];

            //GET DEVIATION RATE
            deviationAllowedRate=me.GetRate('ALDIFFDR',retDate).split('&&')[0];


            if(endDate!='9999.99.99')
            {
                //GET RATE AT THE END OF THE PERIOD    
                retDate=endDate.split('.')[0]+'.'+endDate.split('.')[1]+'.'+(Number(endDate.split('.')[2])+1);
                rateEndPeriod=GetRate('VATRATE',retDate);
            }
            else
            {
                //CHECK VALIDITY FOR VAT ON SALE
                var negativeDev=Number(vatOnSale)-Number(deviationAllowedRate);
                var positiveDev=Number(vatOnSale)+Number(deviationAllowedRate);
                var estTax=Number(taxableSale)*Number(rateStartPeriod)/100;

                if(Number(estTax)<Number(negativeDev)||Number(estTax)>Number(positiveDev))
                {
                    me.msg('ERROR','Invalid Vat On Sale');
                }


            }



            /* Ext.Ajax.request({
            url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
            params: {
            method:'GetRate',field:'VATRATE',date:startDate,
            id: 1
            },
            success: function(response){
            var TaxpayerInfo =Ext.decode( response.responseText);
            console.log(TaxpayerInfo);


            if{}

            }
            });

            }*/
    },

    onTxtVatOnPurchaseChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        var vatOnPurchase="0";
        var vatOnPurI="0";
        var adjCredit="0";

        vatOnPurchase=Ext.ComponentQuery.query("#txtVatOnPurchase")[0].getValue();
        vatOnPurI=Ext.ComponentQuery.query("#txtVatOnPurI")[0].getValue();
        adjCredit=Ext.ComponentQuery.query("#txtAdjCredit")[0].getValue();

        me.CalculateTotalCredit(vatOnPurchase,vatOnPurI,adjCredit);


    },

    onTxtVatOnPurIChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        var vatOnPurchase="0";
        var vatOnPurI="0";
        var adjCredit="0";

        vatOnPurchase=Ext.ComponentQuery.query("#txtVatOnPurchase")[0].getValue();
        vatOnPurI=Ext.ComponentQuery.query("#txtVatOnPurI")[0].getValue();
        adjCredit=Ext.ComponentQuery.query("#txtAdjCredit")[0].getValue();

        me.CalculateTotalCredit(vatOnPurchase,vatOnPurI,adjCredit);
    },

    onTxtTotalCreditChange: function(field, newValue, oldValue, eOpts) {
        var diff=this.CalculateVatDueTM(Number(Ext.ComponentQuery.query("#txtTotalCredit")[0].getValue()),Number(Ext.ComponentQuery.query("#txtTotalDebit")[0].getValue()));
    },

    onTxtTotalDebitChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        var diff=me.CalculateVatDueTM(Number(Ext.ComponentQuery.query("#txtTotalCredit")[0].getValue()),Number(Ext.ComponentQuery.query("#txtTotalDebit")[0].getValue()));

    },

    onTxtAdjCreditChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        var vatOnPurchase="0";
        var vatOnPurI="0";
        var adjCredit="0";

        vatOnPurchase=Ext.ComponentQuery.query("#txtVatOnPurchase")[0].getValue();
        vatOnPurI=Ext.ComponentQuery.query("#txtVatOnPurI")[0].getValue();
        adjCredit=Ext.ComponentQuery.query("#txtAdjCredit")[0].getValue();

        me.CalculateTotalCredit(vatOnPurchase,vatOnPurI,adjCredit);
    },

    onTxtAdjDebitChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        me.CalculateTotalDebit(Ext.ComponentQuery.query("#txtVatOnSale")[0].getValue(), Ext.ComponentQuery.query("#txtAdjDebit")[0].getValue());
    },

    onTxtVatDueTMChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        me.CalculateVatDue(Ext.ComponentQuery.query("#txtVatDueTM")[0].getValue(),Ext.ComponentQuery.query("#txtCreditBF")[0].getValue());
    },

    onTxtCreditBFChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        me.CalculateVatDue(Ext.ComponentQuery.query("#txtVatDueTM")[0].getValue(),Ext.ComponentQuery.query("#txtCreditBF")[0].getValue());
    },

    onBtnAddVoucherClick: function(button, e, eOpts) {
        var store=Ext.getStore('VoucherDetailsStore');
        var grid=Ext.getCmp('grdVoucherDetails');

        var SubmissionNo=Ext.ComponentQuery.query("#txtSNo")[0].getValue();
        var RecDate=Ext.ComponentQuery.query("#txtPaymentDate")[0].value;
        var AcctType=Ext.ComponentQuery.query('#txtAccountType')[0].value;
        var BankAcct=Ext.ComponentQuery.query("#ddlAccount")[0].getValue();
        var Account=Ext.ComponentQuery.query("#ddlAccount")[0].rawValue;
        var PaymentMode=Ext.ComponentQuery.query("#ddlPaymentMode")[0].getValue();
        var PaymentModeDesc=Ext.ComponentQuery.query("#ddlPaymentMode")[0].rawValue;
        var RVNumber=Ext.ComponentQuery.query("#txtReceiptNumber")[0].value;
        var OffCode='OF';
        var Office="OFFICE";
        var BankCode=Ext.ComponentQuery.query("#ddlSubmittedIRO")[0].getValue();
        var Bank=Ext.ComponentQuery.query("#ddlSubmittedIRO")[0].rawValue;
        var BranchCode=Ext.ComponentQuery.query("#ddlBranch")[0].getValue();
        var Amount=Ext.ComponentQuery.query("#txtVatAmount")[0].value;



        //Add or Edit To Voucher Details Grid
        if (grid.getSelectionModel().hasSelection())
        {
            var r = Ext.ComponentQuery.query('#grdVoucherDetails')[0].getSelectionModel().getSelection();
            r[0].set('AcctType',AcctType);
            r[0].set('TranDate','TranDate');
            r[0].set('RecDate',RecDate);
            r[0].set('VoucherNo',RVNumber);
            r[0].set('Amount',Amount);
            r[0].set('OffCode',OffCode);
            r[0].set('Office',Office);
            r[0].set('BankCode',BankCode);
            r[0].set('OffCode',Office);
            r[0].set('PmTypeCode',PaymentMode);
            r[0].set('PaymentMode',PaymentModeDesc);
            r[0].set('BankAcct',BankAcct);
            r[0].set('Account',Account);


            var action=r[0].get('Action');
            if(action==='O' || action=='E')
            {
                alert(action);
                //r[0].set('SeqNo',);
                r[0].set('Action','E');
            }
            Ext.ComponentQuery.query('#grdVoucherDetails')[0].getSelectionModel().select(null);
            return false;

        }
        else
        {
            store.add({'SubmissionNo': SubmissionNo,
                'SeqNo': '0',
                'AcctType': AcctType,
                'TranDate': 'TranDate',
                'RecDate': RecDate,
                'VoucherNo': RVNumber,
                'Amount': Amount,
                'OffCode': OffCode,
                'Office':Office,
                'BankCode': BankCode,
                'Bank':Bank,
                'PmTypeCode': PaymentMode,
                'PaymentMode':PaymentModeDesc,
                'BankAcct':BankAcct,
                'Account':Account,
            'Action': 'A'});
        }


        //Ext.ComponentQuery.query("#txtPaymentDate")[0].reset();
        Ext.ComponentQuery.query("#txtVatAmount")[0].reset();


    },

    onGrdVoucherDetailsSelect: function(rowmodel, record, index, eOpts) {
        /* if (Model1.getSelectionModel().getSelections().length == 1 ) {
        record = Model1.store.getAt(Model1.getStore().indexOf(Model1.getSelectionModel().getSelected()))
        }*/


        if(index>=0)
        {
            var grid=Ext.getCmp('grdVoucherDetails');
            //var grid = Ext.getCmp('grdVoucherDetails').getSelectionModel().getSelection()[index];
            //alert(grid);
            var store = grid.getStore();
            Ext.ComponentQuery.query("#txtPaymentDate")[0].setValue(store.getAt(index).get('RecDate'));
            Ext.ComponentQuery.query("#txtVatAmount")[0].setValue(store.getAt(index).get('Amount'));
            Ext.ComponentQuery.query("#ddlAccount")[0].setValue(store.getAt(index).get('BankAcct'));
            Ext.ComponentQuery.query("#ddlPaymentMode")[0].setValue(store.getAt(index).get('PmTypeCode'));
            Ext.ComponentQuery.query("#txtReceiptNumber")[0].setValue(store.getAt(index).get('VoucherNo'));
            Ext.ComponentQuery.query("#ddlSubmittedIRO")[0].setValue(store.getAt(index).get('BankCode'));
            //Ext.ComponentQuery.query("#ddlBranch")[0].setValue(store.getAt(index).get('BankAcct'));
        }

    },

    onDdlPaymentModeChange: function(field, newValue, oldValue, eOpts) {
        //var store=Ext.getStore('OfficeOrBankStore');
        Ext.ComponentQuery.query("#ddlSubmittedIRO")[0].clearValue();

        if(newValue=='CS')
        {
            Ext.ComponentQuery.query("#lblReceiptVoucherNo")[0].setValue("Receipt No");
            Ext.ComponentQuery.query("#lblOfficeBank")[0].setValue('Office');
            Ext.ComponentQuery.query("#ddlSubmittedIRO")[0].bindStore(Ext.getStore('OfficeStore'));
            Ext.ComponentQuery.query("#ddlSubmittedIRO")[0].displayField='DisplayField';
            Ext.ComponentQuery.query("#ddlSubmittedIRO")[0].valueField='ValueField';

        }
        else
        {
            Ext.ComponentQuery.query("#lblReceiptVoucherNo")[0].setValue("Voucher No");
            Ext.ComponentQuery.query("#lblOfficeBank")[0].setValue('Bank');
            Ext.ComponentQuery.query("#ddlSubmittedIRO")[0].bindStore(Ext.getStore('BankStore'));
            Ext.ComponentQuery.query("#ddlSubmittedIRO")[0].store=Ext.getStore('BankStore');
            Ext.ComponentQuery.query("#ddlSubmittedIRO")[0].displayField='DisplayField';
            Ext.ComponentQuery.query("#ddlSubmittedIRO")[0].valueField='ValueField';

        }

    },

    onTxtRefClaimAmtBlur: function(component, e, eOpts) {
        var me=this;
        var refClaimAmt=Ext.ComponentQuery.query("#txtRefClaimAmt")[0].getValue();
        var vatDue=Ext.ComponentQuery.query("#txtVatDue")[0].getValue();


        var refBasis=Ext.ComponentQuery.query("#ddlReferenceBasis");
        vatDue=vatDue===null?0:-vatDue;
        if(refClaimAmt>0)
        {
            if(refClaimAmt>vatDue)
            {

                msg('INFO','कर फिर्ता माग गरिएको रकम जम्मा क्रेडिट भन्दा बढी हुनुहुन्न।');
                Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setVisible(false);
                return;
            }
        }


        if(Number(refClaimAmt)>0)
        {
            Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setVisible(true);
        }
        else
        {
            Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setVisible(false);
        }






    },

    onTxtRefClaimAmtChange: function(field, newValue, oldValue, eOpts) {
        var refClaimAmt=Ext.ComponentQuery.query("#txtRefClaimAmt")[0].getValue();
        var refBasis=Ext.ComponentQuery.query("#ddlReferenceBasis")[0];


        if(Number(refClaimAmt)>0)
        {
            Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setVisible(true);

        }
        else
        {
            Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setVisible(false);
            refBasis.setValue('');
        }

    },

    onBtnSaveVatReturnsClick: function(button, e, eOpts) {
        var strMessage='';

        if(Ext.ComponentQuery.query("#hfAction")[0].getValue()=='S')
        {
            msg('INFO','* तपाईंले यो विवरण बुझाइसक्नु भयो।<BR><BR>तपाईंले यो विवरण फेरि सच्याउन सक्नहुन्न।');
            return;
        }

        var pan=Ext.ComponentQuery.query("#txtPan")[0].getValue();

        var filePer=Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue()?Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue():'';
        var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
        var period=Ext.ComponentQuery.query("#ddlPeriod")[0].getValue()?Ext.ComponentQuery.query("#ddlPeriod")[0].getValue():'';


        //Validating Pan
        if(pan===''||pan===null)
        {
            strMessage+='<BR>* तपाईंले प्यान अनिबार्य रूपमा भर्नु पर्नेछ।';
        }
        else
        {
            var isValid=ValidatePan(pan,'00');
            if(isValid===false)
            {
                strMessage+='<BR>* तपाईंले भर्नु भएको प्यान नं मिलेन।';
                //return;
            }
        }

        //Validating Taxyear
        if(taxyear===''|| taxyear===null)
        {
            strMessage+='<BR>* कर वर्ष अनिवार्य रूपमा भर्नु पर्नेछ।';
        }
        else
        {
            if(Ext.ComponentQuery.query('#hdnVTaxyear')[0].getValue()==='INVALID')
            {
                strMessage+='<BR>* तपाईंले भर्नु भएको कर वर्ष मिलेन।';
            }
        }

        if(filePer===''||filePer===null)
        {
            strMessage+='<BR>* मा.\\ चौ. \\ व्दै अनिवार्य रूपमा भर्नु पर्नेछ।';
        }

        if(period===''||period===null)
        {
            strMessage+='<BR>* अवधी अनिवार्य रूपमा भर्नु पर्नेछ।';
        }


        if(Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].getValue()==='INVALID')
        {
            strMessage+='<BR>* तपाईंले भर्नुभएको फाइलिंग अवधि मिलेन।';
        }


        if(strMessage!=='')
        {
            msg('INFO',strMessage);
            return;
        }


        var me=this;
        //var VoucherDetailsJson=this.getJson(Ext.getStore('VoucherDetailsStore'));

        //SETTING VAT RETURNS ATTRIBUTES
        var objVatReturns={
            SubmissionNumber:Ext.ComponentQuery.query("#lblSubmissionNo")[0].getValue(),
            AcctType : Ext.ComponentQuery.query("#txtAccountType")[0].getValue(),
            TaxYear : Number(Ext.ComponentQuery.query("#txtTaxYear")[0].getValue()),
            FilePer : Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue(),
            Period : Number(Ext.ComponentQuery.query("#ddlPeriod")[0].getValue()),
            RecDate : Ext.get('nepDate').dom.innerHTML,
            TaxableSale : Number(Ext.ComponentQuery.query("#txtTaxableSale")[0].getValue()),
            VATOnSale : Number(Ext.ComponentQuery.query("#txtVatOnSale")[0].getValue()),
            VATOnPur : Number(Ext.ComponentQuery.query("#txtVatOnPurchase")[0].getValue()),
            TaxablePurI : Number(Ext.ComponentQuery.query("#txtTaxablePurI")[0].getValue()),
            VATOnPurI : Number(Ext.ComponentQuery.query("#txtVatOnPurI")[0].getValue()),
            ExemptSale : Number(Ext.ComponentQuery.query("#txtExemptSale")[0].getValue()),
            TaxablePurchase : Number(Ext.ComponentQuery.query("#txtTaxablePurchase")[0].getValue()),
            ExemptPur : Number(Ext.ComponentQuery.query("#txtExemptPurchase")[0].getValue()),
            ExemptPurI : Number(Ext.ComponentQuery.query("#txtExemptPurI")[0].getValue()),
            CreditBF : Number(Ext.ComponentQuery.query("#txtCreditBF")[0].getValue()),
            TDStockAmount : 0,
            TDStockTax : 0,
            AdjCredit : Number(Ext.ComponentQuery.query("#txtAdjCredit")[0].getValue()),
            AdjDebit : Number(Ext.ComponentQuery.query("#txtAdjDebit")[0].getValue()),
            Export : Number(Ext.ComponentQuery.query("#txtExport")[0].getValue()),
            Penalty : 0,
            Interest : 0,
            TotalCredit : Number(Ext.ComponentQuery.query("#txtTotalCredit")[0].getValue()),
            TotalDebit : Number(Ext.ComponentQuery.query("#txtTotalDebit")[0].getValue()),
            TotalVatTM : Number(Ext.ComponentQuery.query("#txtVatDueTM")[0].getValue()),
            VATDue : Number(Ext.ComponentQuery.query("#txtVatDue")[0].getValue()),
            RefClaimAmt : Number(Ext.ComponentQuery.query("#txtRefClaimAmt")[0].getValue()),
            TranDate : Ext.get('nepDate').dom.innerHTML,
            RTType : 'RT',
            OffCode : Ext.get('offCode').dom.innerHTML,
            BatchNo : '',
            UserID : '',
            RBID : Ext.ComponentQuery.query("#ddlReferenceBasis")[0].getValue(),
            Action : Ext.ComponentQuery.query("#hfAction")[0].getValue()
        };
        //ENDS SETTING VAT RETURNS ATTRIBUTES

        var frm=Ext.getCmp('frmVatReturns');

        var form = button.up('form').getForm();
        if(form)
        {
            //console.log(form);
        }


        var arr=[];

        if(form.isValid()){

            form.submit({
                url: '../Handlers/Vat/VatReturnsHandler.ashx',
                waitMsg: 'Saving Vat Returns...',
                params:{method:'SaveVatReturns',
                vatReturns:JSON.stringify(objVatReturns)},
                success: function(p1, o) {

                    var JSONResponse=Ext.decode(o.response.responseText);
                    if(JSONResponse.success=='True')
                    {  
                        Ext.Msg.show({
                            title:'INFO',
                            msg: '* तपाईंको विवरण सफलतापुर्ण सेभ भयो।<BR>कृपया सब्मिसन नं टिप्नु होला।<BR><BR>तपाईको सब्मिसन नं : <B STYLE="COLOR:RED">'+Ext.ComponentQuery.query("#lblSubmissionNo")[0].getValue()+'<\B>',
                            buttons: Ext.Msg.OK,
                            fn: function (btn){
                                if(btn=='ok'){     
                                    //RESET DEFAULTS

                                    //var fp=Ext.ComponentQuery.query('#frmVatReturns')[0];
                                    //fp.getForm().reset();


                                    Ext.ComponentQuery.query("#hfAction")[0].setValue('E');
                                    //var txtAcctType=Ext.ComponentQuery.query("#txtAccountType")[0];
                                    //txtAcctType.setValue('00');

                                }
                            }
                        });

                    }
                    else
                    {
                        msg('INFO','Failed Saving Vat Returns');
                    }
                },
                failure:function(fp, o) {
                    alert("err");
                }
            });
        }

    },

    onBtnSubmitVatReturnsClick: function(button, e, eOpts) {
        var me=this;

        var strDec=Ext.ComponentQuery.query('#chkDec')[0];

        if(strDec.getValue()===false)
        {
            msg('INFO', 'यो विवरण साँचो हो भन्ने विवरण चेक गर्नुहोस्।');
            return;
        }

        if(Ext.ComponentQuery.query("#hfAction")[0].getValue()=='S')
        {
            msg('INFO','* तपाईंले यो विवरण बुझाइसक्नु भयो।<BR><BR>तपाईंले यो विवरण फेरि बुझाउन सक्नहुन्न।');
            return;
        }

        var submissionNo=Ext.ComponentQuery.query("#lblSubmissionNo")[0].getValue();
        var filePer=Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue()?Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue():'';
        var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
        var period=Ext.ComponentQuery.query("#ddlPeriod")[0].getValue()?Ext.ComponentQuery.query("#ddlPeriod")[0].getValue():'';
        var pan=Ext.ComponentQuery.query("#txtPan")[0].getValue();
        var acctType=Ext.ComponentQuery.query("#txtAccountType")[0].getValue();
        var registrationDate=Ext.ComponentQuery.query('#hdnRegistrationDate')[0].getValue();
        var strMessage='';


        //Validating Pan
        if(pan===''||pan===null)
        {
            strMessage+='<BR>* तपाईंले प्यान अनिबार्य रूपमा भर्नु पर्नेछ।';
        }
        else
        {
            var isValid=ValidatePan(pan,'00');
            if(isValid===false)
            {
                strMessage+='<BR>* तपाईंले भर्नु भएको प्यान नं मिलेन।';
                //return;
            }
        }

        //Validating Taxyear
        if(taxyear===''|| taxyear===null)
        {
            strMessage+='<BR>* कर वर्ष अनिवार्य रूपमा भर्नु पर्नेछ।';
        }
        else
        {
            if(Ext.ComponentQuery.query('#hdnVTaxyear')[0].getValue()==='INVALID')
            {
                strMessage+='<BR>* तपाईंले भर्नु भएको कर वर्ष मिलेन।';
            }
        }

        if(filePer===''||filePer===null)
        {
            strMessage+='<BR>* मा.\\ चौ. \\ व्दै अनिवार्य रूपमा भर्नु पर्नेछ।';
        }

        if(period===''||period===null)
        {
            strMessage+='<BR>* अवधी अनिवार्य रूपमा भर्नु पर्नेछ।';
        }


        if(Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].getValue()==='INVALID')
        {
            strMessage+='<BR>* तपाईंले भर्नुभएको फाइलिंग पिरियड मिलेन।';
        }



        var refClaimAmt=Ext.ComponentQuery.query("#txtRefClaimAmt")[0].getValue();
        var vatDue=Ext.ComponentQuery.query("#txtVatDue")[0].getValue();


        var refBasis=Ext.ComponentQuery.query("#ddlReferenceBasis");
        vatDue=vatDue===null?0:-vatDue;
        if(refClaimAmt>0)
        {
            if(refClaimAmt>vatDue)
            {

                strMessage+='कर फिर्ता माग गरिएको रकम जम्मा क्रेडिट भन्दा बढी हुनुहुन्न।';
                Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setVisible(false);

            }
        }



        if(strMessage!=='')
        {
            msg('INFO',strMessage);
            return;
        }



        //******************************************* VALIDATING FILING PERIOD *******************************************
        /*Ext.Ajax.request({
        url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
        params: {
        method:'GetFilePerEndDate',
        filePeriod: filePer,
        taxyear:taxyear,
        period:period
        },
        success: function(response){

        var endDate=Ext.decode(response.responseText);
        Ext.Ajax.request({
        url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
        params: {
        method:'GetFilePeriod',
        pan: pan,
        acctType:acctType,
        date:endDate.root
        },
        success: function(p1){
        var fp =Ext.decode(p1.responseText);


        if(fp.success!='True')
        {
        me.msg('INFO',fp.message);
        }
        else
        {

        if(fp.message!=Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue())
        {
        strMessage+='Invalid Filing Period';
        }
        }
        }
        });

        }
        });*/



        /*ValidateFilingPeriod(pan,acctType,filePer,taxyear,period,registrationDate,function(errMessage){
        if(errMessage!=='')
        {
        //msg('INFO',errMessage);
        strMessage+=errMessage;
        msg('INFO',strMessage);
        //return;
    }
    else if(strMessage!=='')
    {
        msg('INFO',strMessage);
        return;
    }
    else
    {*/

        //***************************************************************************************************
        //***************************************************************************************************
        //***************************Save Vat Returns********************************************************
        //***************************************************************************************************
        //***************************************************************************************************

        //var VoucherDetailsJson=this.getJson(Ext.getStore('VoucherDetailsStore'));

        var objVatReturns={
            SubmissionNumber:Ext.ComponentQuery.query("#lblSubmissionNo")[0].getValue(),
            AcctType : Ext.ComponentQuery.query("#txtAccountType")[0].getValue(),
            TaxYear : Number(Ext.ComponentQuery.query("#txtTaxYear")[0].getValue()),
            FilePer : Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue(),
            Period : Number(Ext.ComponentQuery.query("#ddlPeriod")[0].getValue()),
            RecDate : Ext.get('nepDate').dom.innerHTML,
            TaxableSale : Number(Ext.ComponentQuery.query("#txtTaxableSale")[0].getValue()),
            VATOnSale : Number(Ext.ComponentQuery.query("#txtVatOnSale")[0].getValue()),
            VATOnPur : Number(Ext.ComponentQuery.query("#txtVatOnPurchase")[0].getValue()),
            TaxablePurI : Number(Ext.ComponentQuery.query("#txtTaxablePurI")[0].getValue()),
            VATOnPurI : Number(Ext.ComponentQuery.query("#txtVatOnPurI")[0].getValue()),
            ExemptSale : Number(Ext.ComponentQuery.query("#txtExemptSale")[0].getValue()),
            TaxablePurchase : Number(Ext.ComponentQuery.query("#txtTaxablePurchase")[0].getValue()),
            ExemptPur : Number(Ext.ComponentQuery.query("#txtExemptPurchase")[0].getValue()),
            ExemptPurI : Number(Ext.ComponentQuery.query("#txtExemptPurI")[0].getValue()),
            CreditBF : Number(Ext.ComponentQuery.query("#txtCreditBF")[0].getValue()),
            TDStockAmount : 0,
            TDStockTax : 0,
            AdjCredit : Number(Ext.ComponentQuery.query("#txtAdjCredit")[0].getValue()),
            AdjDebit : Number(Ext.ComponentQuery.query("#txtAdjDebit")[0].getValue()),
            Export : Number(Ext.ComponentQuery.query("#txtExport")[0].getValue()),
            Penalty : 0,
            Interest : 0,
            TotalCredit : Number(Ext.ComponentQuery.query("#txtTotalCredit")[0].getValue()),
            TotalDebit : Number(Ext.ComponentQuery.query("#txtTotalDebit")[0].getValue()),
            TotalVatTM : Number(Ext.ComponentQuery.query("#txtVatDueTM")[0].getValue()),
            VATDue : Number(Ext.ComponentQuery.query("#txtVatDue")[0].getValue()),
            RefClaimAmt : Number(Ext.ComponentQuery.query("#txtRefClaimAmt")[0].getValue()),
            TranDate : Ext.get('nepDate').dom.innerHTML,
            RTType : 'RT',
            OffCode : Ext.get('offCode').dom.innerHTML,
            BatchNo : '',
            UserID : '',
            RBID : Ext.ComponentQuery.query("#ddlReferenceBasis")[0].getValue(),
            Action : Ext.ComponentQuery.query("#hfAction")[0].getValue()
        };


        //SETTING LOGIN TBS ATTRIBUTES
        var LoginTBs={
            SubmissionNumber:submissionNo,
            Username:'',
            Password:'',
            PAN:pan,
            Emailid:'',
            ContactNo:'',
            submittedFor:'VRET',
            SubmittedYN:'Y',
            SubmittedDate:Ext.decode(AppWakeUpJSON).root.NepaliDate,
            TranNo:'0',
            Address:'',
            RegOffice:'0',
            VatReturns:objVatReturns,
            Action:Ext.ComponentQuery.query("#hfAction")[0].getValue()
        };
        //ENDS SETTING LOGIN TBS ATTRIBUTES


        var frm=Ext.getCmp('frmVatReturns');

        var form = button.up('form').getForm();
        if(form)
        {
            //console.log(form);
        }


        if(form.isValid()){
            Ext.Msg.show({
                title:'INFO',
                msg: 'एकचोटि बुझाइसकेपछि तपाईंले यो विवरणमा सच्चाउन सक्नुहुन्न। <BR> तपाईं यो विवरण बुझाउन चाहनुहुन्छ?',
                buttons: Ext.Msg.YESNO,
                fn: function (btn){
                    if(btn=='yes'){     
                        Ext.Ajax.request({
                            url: '../Handlers/VAT/VatReturnsSubmissionNumberHandler.ashx',
                            params: {
                                method:'ValidateEVatReturns',
                                LoginTBS: JSON.stringify(LoginTBs)
                            },
                            success: function(response){
                                var JSONResponse=Ext.decode(response.responseText);

                                if(JSONResponse.success=='true')
                                {
                                    var resp=JSONResponse.root.split('&&');

                                    if(resp.length==3)
                                    {

                                        errCode=JSONResponse.root.split('&&')[0];
                                        errDesc=JSONResponse.root.split('&&')[1];
                                        submissionNo=JSONResponse.root.split('&&')[2];

                                        msg('INFO','तपाईंले बुझाउनु भएको विवरणमा निम्न प्रकारका गलतीहरु छन्।<BR>कृपया विवरण बुझाउनको लागि गलतीहरू सच्चयाउनु होला।<BR>तपाईको विवरणमा गलतीहरू..<BR><BR>'+errDesc);
                                    }
                                    else
                                    {
                                        submissionNo=JSONResponse.root.split('&&')[0];
                                        msg('INFO','तपाईंको विवरण सब्मित भयो।<BR>तपाईको सब्मिसन नं : <B STYLE="COLOR:RED">'+submissionNo+'<\B>');

                                        //var fp=Ext.ComponentQuery.query('#frmVatReturns')[0];
                                        //fp.getForm().reset();

                                        //RESET DEFAULTS
                                        Ext.ComponentQuery.query("#hfAction")[0].setValue('S');
                                        var txtAcctType=Ext.ComponentQuery.query("#txtAccountType")[0];
                                        txtAcctType.setValue('00');
                                        Ext.ComponentQuery.query("#rtStatus")[0].setValue('S');
                                        Ext.ComponentQuery.query("#hfRTStatus")[0].setValue('Y');
                                    }
                                }
                            }
                        });
                    }
                    else{
                        return;
                    }
                },
                icon: Ext.Msg.INFO
            });

        }

        //***************************************************************************************************
        //***************************************************************************************************
        //***************************************************************************************************
        //***************************************************************************************************
        //***************************************************************************************************

        /*    }


        });*/



        /*if(strMessage!=='')
        {
        msg('INFO',strMessage);
        return;
        }

        strMessage='';

        */

    },

    onTxtVatDueChange: function(field, newValue, oldValue, eOpts) {
        var vatDue=Ext.ComponentQuery.query('#txtVatDue')[0];
        if(vatDue.getValue()>0)
        {
            Ext.ComponentQuery.query('#txtRefClaimAmt')[0].disable();
            Ext.ComponentQuery.query('#txtRefClaimAmt')[0].setValue('0');
        }
        else
        {
            Ext.ComponentQuery.query('#txtRefClaimAmt')[0].enable();
        }

    },

    onVatReturnsAfterRender: function(component, eOpts) {
        var me=this;

        var strRB = Ext.getStore('ReferenceBasisStore');
        strRB.load();

        $(document).ready(function(){

            $('tr').has('.exclude').children('td').css({backgroundColor:'#DFE9F6',border:0});
            $('tr').has('.exclude').css({backgroundColor:'#DFE9F6',border:0});
            $('.tablegrid .x-table-layout').css({border:0});
        }
        );


        var objParam = Ext.ComponentQuery.query('#VatReturns')[0];

        if (objParam.extraParam)
        {
            me.LoadVatReturnsByTran(objParam.extraParam.params.tranNo,objParam.extraParam.params.pan);
            Ext.ComponentQuery.query('#btnSaveVatReturns')[0].hide();
            Ext.ComponentQuery.query('#btnSubmitVatReturns')[0].hide();
            Ext.ComponentQuery.query('#btnPrint')[0].hide();
            Ext.ComponentQuery.query('#btnVerify')[0].hide();
            Ext.ComponentQuery.query('#chkDec')[0].hide();
        }

    },

    onDdlFilingPeriodKeyup: function(textfield, e, eOpts) {
        var filingPeriod=Ext.ComponentQuery.query('#ddlFilingPeriod')[0];

        switch(e.keyCode)
        {
            case(e.M):
            filingPeriod.setValue('M');
            break;
            case(e.T):
            filingPeriod.setValue('T');
            break;
            case(e.B):
            filingPeriod.setValue('B');
            break;
            default:
            filingPeriod.setValue("");
            return;
        }
    },

    onDdlPeriodKeyup: function(textfield, e, eOpts) {
        //console.log(e);
        var period=Ext.ComponentQuery.query('#ddlPeriod')[0];
        switch(e.keyCode)
        {
            case(e.ONE):
            period.setValue('1');
            break;
            case(e.TWO):
            period.setValue('2');
            break;
            case(e.THREE):
            period.setValue('3');
            break;
            case(e.FOUR):
            period.setValue('4');
            break;
            case(e.FIVE):
            period.setValue('5');
            break;

            case(e.SIX):
            period.setValue('6');
            break;

            case(e.SEVEN):
            period.setValue('7');
            break;

            case(e.EIGHT):
            period.setValue('8');
            break;

            case(e.NINE):
            period.setValue('9');
            break;

            case(e.TEN):
            period.setValue('10');
            break;

            case(e.ELEVEN):
            period.setValue('11');
            break;

            case(e.TWELVE):
            period.setValue('12');
            break;
            default:
            period.setValue("");
            return;
        }
        /*
        if(e.keyCode==e.ONE)
        {
        period.setValue('1');
        }
        else if(e.TWO==e.keyCode)
        {
        period.setValue('2');
        }
        else if(e.THREE==e.keyCode)
        {
        period.setValue('3');
        }
        else if (e.FOUR==e.keyCode)
        {
        period.setValue('4');
        }
        else if (e.FIVE==e.keyCode)
        {
        period.setValue('5');
        }
        else if (e.SIX==e.keyCode)
        {
        period.setValue('6');
        }
        else if (e.SEVEN==e.keyCode)
        {
        period.setValue('7');
        }
        else if (e.EIGHT==e.keyCode)
        {
        period.setValue('8');
        }
        else if (e.NINE==e.keyCode)
        {
        period.setValue('9');
        }
        else if (e.TEN==e.keyCode)
        {
        period.setValue('10');
        }
        else if (e.ELEVEN==e.keyCode)
        {
        period.setValue('11');
        }
        else if (e.TWELVE==e.keyCode)
        {
        period.setValue('12');
        }
        */
    },

    onBtnPrintClick: function(button, e, eOpts) {
        var userActivity={
            ApplicationID:'VAT',
            ModuleID:'VRETURN',
            UserID:'ITS',
            Action:'PRINT'
        };

        LogUserActivity(userActivity);

        var param = { 
            'SubmissionNo' : Ext.ComponentQuery.query('#lblSubmissionNo')[0].getValue()
        };

        var url="../Reporting/Vat/ReportHandlers/Returns/VatReturnsReporthandler.ashx";
        var winOption="width=730,height=345,left=100,top=100,resizable=yes,scrollbars=yes";
        OpenWindowWithPost(url,winOption,"NewFile", param);

    },

    onBtnVerifyClick: function(button, e, eOpts) {
        var rtStatus=Ext.ComponentQuery.query("#hfRTStatus")[0].getValue();

        if(rtStatus!='Y')
        {
            msg('INFO','Return Not Submitted.<BR>Please, Submit the Return Before going for Verification Process');
            return;
        }

        var submissionNo=Ext.ComponentQuery.query('#lblSubmissionNo')[0].getValue();
        var pan=Ext.ComponentQuery.query('#txtPan')[0].getValue();
        var acctType=Ext.ComponentQuery.query('#txtAccountType')[0].getValue();
        var taxyear=Ext.ComponentQuery.query('#txtTaxYear')[0].getValue();
        var filePer=Ext.ComponentQuery.query('#ddlFilingPeriod')[0].getValue();
        var period=Ext.ComponentQuery.query('#ddlPeriod')[0].getValue();

        var uiConfig = {menuLink:'EVatReturnsVerification',
                pageTitle:'Verify Vat Returns'
            };

        DynamicUI(uiConfig,function(){
            Ext.ComponentQuery.query('#hfApplication')[0].setValue('VAT');
            Ext.ComponentQuery.query('#hfModule')[0].setValue('VRET');
            Ext.ComponentQuery.query('#lblSubmissionNo')[0].setValue(submissionNo);
            Ext.ComponentQuery.query('#lblPan')[0].setValue(pan);
            Ext.ComponentQuery.query('#hfAccountType')[0].setValue(acctType);
            Ext.ComponentQuery.query('#hfTaxyear')[0].setValue(taxyear);
            Ext.ComponentQuery.query('#hfFilePer')[0].setValue(filePer);
            Ext.ComponentQuery.query('#hfPeriod')[0].setValue(period);
        });
    },

    GetStartOrEndDate: function(filePer, taxyear, Period, StartOrEndDate) {
        var retDate;
        var method;

        if(StartOrEndDate=='S')
        {
            method="GetFilePerStartDate";
        }
        else
        {
            method="GetFilePerEndDate";
        }



        Ext.Ajax.request({
            url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
            params: {
                method:method,
                filePeriod: filePer,
                taxyear:taxyear,
                period:Period
            },
            async:false,
            success: function(response){
                var date=Ext.decode(response.responseText);
                retDate=date.message;
            }
        });

        return retDate;

    },

    GetRate: function(field, date) {
        var rate;

        Ext.Ajax.request({
            url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
            params: {
                method:'GetRate',
                acctType:Ext.ComponentQuery.query('#txtAccountType')[0].value,
                field: field,
                date:date
            },
            async:false,
            success: function(response){
                rate=Ext.decode(response.responseText);


            }
        });
        return rate.message;
    },

    CalculateTotalCredit: function(amtVatOnPurchase, amtVatOnPurI, amtAdjCredit) {
        //alert(Number(amtVatOnPurI));
        //alert(Number(amtVatOnPurchase));
        Ext.ComponentQuery.query("#txtTotalCredit")[0].setValue(Number(amtVatOnPurchase)+Number(amtVatOnPurI)+Number(amtAdjCredit));
    },

    CalculateVatDueTM: function(amtTotalCredit, amtTotalDebit) {

        Ext.ComponentQuery.query("#txtVatDueTM")[0].setValue(Number(amtTotalDebit)-Number(amtTotalCredit));
    },

    CalculateTotalDebit: function(amtVatOnSale, amtAdjDebit) {
        //alert(amtVatOnSale);
        //alert(amtAdjDebit);
        Ext.ComponentQuery.query("#txtTotalDebit")[0].setValue(Number(amtVatOnSale)+Number(amtAdjDebit));
    },

    CalculateVatDue: function(amtVatDueTM, amtCreditBF) {
        Ext.ComponentQuery.query("#txtVatDue")[0].setValue(Number(amtVatDueTM)-Number(amtCreditBF));
    },

    SetTaxpayerInfo: function(TaxpayerInfo) {
        Ext.ComponentQuery.query("#lblTaxpayerName")[0].setValue(TaxpayerInfo.root.Name);
        Ext.ComponentQuery.query("#lblTaxpayerAddress")[0].setValue(TaxpayerInfo.root.Address);
        Ext.ComponentQuery.query("#lblTaxpayerPhoneNo")[0].setValue(TaxpayerInfo.root.Phone);
        Ext.ComponentQuery.query("#lblTaxpayerFax")[0].setValue(TaxpayerInfo.root.Fax);
    },

    getJson: function(store) {
        /*var myItems = store.getRange();
        var myJson = [];

        for (var i in myItems)
        {
        myJson.push(myItems[i].data);
        }
        return myJson;*/
    },

    msg: function(title, message) {
        var rqdIcon = Ext.MessageBox.INFO;

        if(title == "FAILURE")
        rqdIcon = Ext.Msg.ERROR;
        else if(title == "WARNING")
        rqdIcon = Ext.Msg.WARNING;

        Ext.Msg.show({
            title: title,
            msg: message ,
            buttons: Ext.MessageBox.OK,
            icon: rqdIcon
        });
    },

    getval: function(asd) {
        var myVar='';

        Ext.Ajax.request({
            url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
            params: {
                method:asd.method,
                filePeriod:asd. filePer,
                taxyear:asd.taxyear,
                period:asd.Period
            },
            success: function(response){
                date=Ext.decode(response.responseText);
                myVar= date.root;

            }
        });

        return myVar;
    },

    GetCreditBF: function(pan, acctType, taxyear, fileper, period) {

        var creditBF;
        Ext.Ajax.request({
            url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
            params: {
                method:'GetCreditBF',
                pan:pan,
                acctType:acctType,
                taxyear:taxyear,
                fileper: fileper,
                period:period
            },
            async:false,
            success: function(response){
                var rt=Ext.decode(response.responseText);
                creditBF=rt.message;
            }
        });

        return creditBF;
    },

    ValidateTaxyear: function(callback) {

        var currDate=null;
        var isValid='true';

        //var ret;
        Ext.Ajax.request({
            url: '../Handlers/Common/DateHandler.ashx?method=GetDates',
            params:{},
            success: function (result, request ) {
                currDate=result.responseText;

                var currentYear=Ext.decode(currDate).root.NepaliDate.split('.')[0];
                var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
                if(taxyear<2054 || taxyear>currentYear)
                {
                    isValid='false';
                }

                callback(isValid);



            }
        });
    },

    LoadVatReturns: function(submissionNo) {
        //LOAD VAT RETURNS DETAILS
        Ext.Ajax.request({
            url: '../Handlers/Vat/VatReturnsHandler.ashx?method=GetVatReturn',
            params: {SubNo:submissionNo
            },
            success: function(response){
                var TaxpayerInfo =Ext.decode( response.responseText);
                if(TaxpayerInfo.root!=='')
                {
                    Ext.ComponentQuery.query('#lblSubmissionNo')[0].setValue(submissionNo);

                    //Set Taxpayer Year Month Details
                    Ext.ComponentQuery.query("#txtAccountType")[0].setValue('00');
                    Ext.ComponentQuery.query("#txtTaxYear")[0].setValue(TaxpayerInfo.root.TaxYear);
                    Ext.ComponentQuery.query("#ddlFilingPeriod")[0].setValue(TaxpayerInfo.root.FilePer);
                    Ext.ComponentQuery.query("#ddlPeriod")[0].setValue(TaxpayerInfo.root.Period);


                    //Set Taxpayer Transaction Details
                    Ext.ComponentQuery.query("#txtTaxableSale")[0].setValue(TaxpayerInfo.root.TaxableSale);
                    Ext.ComponentQuery.query("#txtVatOnSale")[0].setValue(TaxpayerInfo.root.VATOnSale);
                    Ext.ComponentQuery.query("#txtExport")[0].setValue(TaxpayerInfo.root.Export);
                    Ext.ComponentQuery.query("#txtExemptSale")[0].setValue(TaxpayerInfo.root.ExemptSale);
                    Ext.ComponentQuery.query("#txtTaxablePurchase")[0].setValue(TaxpayerInfo.root.TaxablePurchase);
                    Ext.ComponentQuery.query("#txtVatOnPurchase")[0].setValue(TaxpayerInfo.root.VATOnPur);
                    Ext.ComponentQuery.query("#txtTaxablePurI")[0].setValue(TaxpayerInfo.root.TaxablePurI);
                    Ext.ComponentQuery.query("#txtVatOnPurI")[0].setValue(TaxpayerInfo.root.VATOnPurI);
                    Ext.ComponentQuery.query("#txtExemptPurchase")[0].setValue(TaxpayerInfo.root.ExemptPur);
                    Ext.ComponentQuery.query("#txtExemptPurI")[0].setValue(TaxpayerInfo.root.ExemptPurI);
                    Ext.ComponentQuery.query("#txtAdjCredit")[0].setValue(TaxpayerInfo.root.AdjCredit);
                    Ext.ComponentQuery.query("#txtAdjDebit")[0].setValue(TaxpayerInfo.root.AdjDebit);
                    Ext.ComponentQuery.query("#txtCreditBF")[0].setValue(TaxpayerInfo.root.CreditBF);
                    Ext.ComponentQuery.query("#txtRefClaimAmt")[0].setValue(TaxpayerInfo.root.RefClaimAmt);
                    Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setValue(TaxpayerInfo.root.RBID);
                    //Ext.ComponentQuery.query('#txtRecDate')[0].setValue(TaxpayerInfo.root.RecDate);
                    //Ext.getCmp("hfMVRAction").setValue(TaxpayerInfo.root.Action);
                }       
                else
                {
                    //Ext.getCmp("hfMVRAction").setValue("A");

                }
            }
        });
    },

    LoadVatReturnsByTran: function(tranNo, pan) {
        Ext.ComponentQuery.query('#txtPan')[0].setValue(pan);
        Ext.ComponentQuery.query('#txtAccountType')[0].setValue('00');

        //LOAD VAT RETURNS DETAILS
        Ext.Ajax.request({
            url: '../Handlers/Vat/VatReturnsHandler.ashx?method=GetVatReturnByTranNo',
            params: {tranNo:tranNo
            },
            success: function(response){
                var returnsInfo =Ext.decode( response.responseText);

                if(returnsInfo.root!=='')
                {
                    Ext.ComponentQuery.query('#lblMVRValidationMsg')[0].setVisible(true);
                    console.log(returnsInfo);

                    if(returnsInfo.root.Status=='V')
                    {

                        Ext.ComponentQuery.query('#lblMVRValidationMsg')[0].setText('This Record Has Already Been Verified');
                    }
                    else
                    {
                        Ext.ComponentQuery.query('#lblMVRValidationMsg')[0].setText('This Record Is Not Verified Yet.....');
                    }
                    //LOAD TAXPAYER INFO    
                    Ext.Ajax.request({
                        url: '../Handlers/Registration/Taxpayer/TaxpayerHandler.ashx',
                        params: {
                            method:'GetTaxPayer',pan:pan,
                            acctType:'00'
                        },
                        success: function(response){
                            var obj =Ext.decode( response.responseText);

                            var taxpayer=obj.root.Taxpayer;
                            var address=taxpayer.BusinessAddress.Address;
                            var office=taxpayer.Office;


                            //Sets TaxPayer's Info
                            Ext.get('offCode').dom.innerHTML=office.OfficeCode;
                            Ext.ComponentQuery.query('#lblSubmissionNo')[0].setValue(returnsInfo.root.SubmissionNumber);
                            Ext.ComponentQuery.query("#lblTaxpayerName")[0].setValue(taxpayer.Name);
                            Ext.ComponentQuery.query("#lblTaxpayerAddress")[0].setValue(address.DistrictNameNep+' / '+address.StreetName);
                            Ext.ComponentQuery.query("#lblTaxpayerPhoneNo")[0].setValue(address.Phone);
                            Ext.ComponentQuery.query("#lblTaxpayerFax")[0].setValue(address.Phone);
                            Ext.ComponentQuery.query('#hdnRegistrationDate')[0].setValue(taxpayer.RegistrationDate);


                            //Set Taxpayer Year Month Details
                            Ext.ComponentQuery.query("#txtTaxYear")[0].setValue(returnsInfo.root.TaxYear);
                            Ext.ComponentQuery.query("#ddlFilingPeriod")[0].setValue(returnsInfo.root.FilePer);
                            Ext.ComponentQuery.query("#ddlPeriod")[0].setValue(returnsInfo.root.Period);



                            //Set Taxpayer Transaction Details
                            Ext.ComponentQuery.query("#txtTaxableSale")[0].setValue(returnsInfo.root.TaxableSale);
                            Ext.ComponentQuery.query("#txtVatOnSale")[0].setValue(returnsInfo.root.VATOnSale);
                            Ext.ComponentQuery.query("#txtExport")[0].setValue(returnsInfo.root.Export);
                            Ext.ComponentQuery.query("#txtExemptSale")[0].setValue(returnsInfo.root.ExemptSale);
                            Ext.ComponentQuery.query("#txtTaxablePurchase")[0].setValue(returnsInfo.root.TaxablePurchase);
                            Ext.ComponentQuery.query("#txtVatOnPurchase")[0].setValue(returnsInfo.root.VATOnPur);
                            Ext.ComponentQuery.query("#txtTaxablePurI")[0].setValue(returnsInfo.root.TaxablePurI);
                            Ext.ComponentQuery.query("#txtVatOnPurI")[0].setValue(returnsInfo.root.VATOnPurI);
                            Ext.ComponentQuery.query("#txtExemptPurchase")[0].setValue(returnsInfo.root.ExemptPur);
                            Ext.ComponentQuery.query("#txtExemptPurI")[0].setValue(returnsInfo.root.ExemptPurI);
                            Ext.ComponentQuery.query("#txtAdjCredit")[0].setValue(returnsInfo.root.AdjCredit);
                            Ext.ComponentQuery.query("#txtAdjDebit")[0].setValue(returnsInfo.root.AdjDebit);
                            Ext.ComponentQuery.query("#txtCreditBF")[0].setValue(returnsInfo.root.CreditBF);
                            Ext.ComponentQuery.query("#txtRefClaimAmt")[0].setValue(returnsInfo.root.RefClaimAmt);
                            Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setValue(returnsInfo.root.RBID);

                        }
                    });

                }
            }
        });
    },

    init: function(application) {
        this.control({
            "#txtTaxYear": {
                blur: this.onTxtTaxYearBlur
            },
            "#ddlFilingPeriod": {
                change: this.onDdlFilingPeriodChange,
                keyup: this.onDdlFilingPeriodKeyup
            },
            "#ddlPeriod": {
                change: this.onDdlPeriodChange,
                keyup: this.onDdlPeriodKeyup
            },
            "#txtVatOnSale": {
                change: this.onTxtVatOnSaleChange,
                blur: this.onTxtVatOnSaleBlur
            },
            "#txtVatOnPurchase": {
                change: this.onTxtVatOnPurchaseChange
            },
            "#txtVatOnPurI": {
                change: this.onTxtVatOnPurIChange
            },
            "#txtTotalCredit": {
                change: this.onTxtTotalCreditChange
            },
            "#txtTotalDebit": {
                change: this.onTxtTotalDebitChange
            },
            "#txtAdjCredit": {
                change: this.onTxtAdjCreditChange
            },
            "#txtAdjDebit": {
                change: this.onTxtAdjDebitChange
            },
            "#txtVatDueTM": {
                change: this.onTxtVatDueTMChange
            },
            "#txtCreditBF": {
                change: this.onTxtCreditBFChange
            },
            "#btnAddVoucher": {
                click: this.onBtnAddVoucherClick
            },
            "#grdVoucherDetails": {
                select: this.onGrdVoucherDetailsSelect
            },
            "#ddlPaymentMode": {
                change: this.onDdlPaymentModeChange
            },
            "#txtRefClaimAmt": {
                blur: this.onTxtRefClaimAmtBlur,
                change: this.onTxtRefClaimAmtChange
            },
            "#btnSaveVatReturns": {
                click: this.onBtnSaveVatReturnsClick
            },
            "#btnSubmitVatReturns": {
                click: this.onBtnSubmitVatReturnsClick
            },
            "#txtVatDue": {
                change: this.onTxtVatDueChange
            },
            "#VatReturns": {
                afterrender: this.onVatReturnsAfterRender
            },
            "#btnPrint": {
                click: this.onBtnPrintClick
            },
            "#btnVerify": {
                click: this.onBtnVerifyClick
            }
        });
    }

});
