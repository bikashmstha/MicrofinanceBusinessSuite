/*
 * File: app/view/CSCenterCodePopUp.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.CSCenterCodePopUp', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.form.Panel',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Column',
        'Ext.selection.RowModel'
    ],

    height: 500,
    itemId: 'pnlSelectCenterCode',
    width: 700,
    autoScroll: true,
    title: 'Select Center Code',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    itemId: 'frmSelectCenterCode',
                    bodyPadding: 10,
                    title: '',
                    items: [
                        {
                            xtype: 'gridpanel',
                            itemId: 'grdSelectOfficeType',
                            width: '',
                            title: '',
                            store: 'CSCenterCodePopUpStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'CenterCode',
                                    text: 'CenterCode'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 150,
                                    dataIndex: 'CenterFundAmount',
                                    text: 'CenterFundAmount'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 250,
                                    dataIndex: 'CenterName',
                                    text: 'CenterName'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 150,
                                    dataIndex: 'CollectionSheetNo',
                                    text: 'CollectionSheetNo'
                                }
                            ],
                            selModel: Ext.create('Ext.selection.RowModel', {
                                listeners: {
                                    beforeselect: {
                                        fn: me.onRowModelBeforeSelect,
                                        scope: me
                                    }
                                }
                            })
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFrmSelectCenterCodeAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onRowModelBeforeSelect: function(rowmodel, record, index, eOpts) {
        Ext.MessageBox.confirm('Select', 'Are you sure ?', function(btn){

                   if(btn === 'yes'){
                       console.log('record',record);

                       Ext.ComponentQuery.query('#txtCenterCode')[0].setValue(record.data.CenterCode);
                       Ext.ComponentQuery.query('#txtCenterName')[0].setValue(record.data.CenterName);
                        Ext.ComponentQuery.query('#txtCollectionSheetNo')[0].setValue(record.data.CollectionSheetNo);
                       Ext.ComponentQuery.query('#txtAdvanceRecAmount')[0].setValue(record.data.CenterFundAmount);
                        Ext.ComponentQuery.query('#txtCollectionDateBS')[0].setValue(record.data.CollectionDateBs);
                      // Ext.ComponentQuery.query('#txtCollectionDateAD')[0].setValue(record.data.CenterName);



                      }
                     var v=Ext.ComponentQuery.query('#pnlSelectCenterCode')[0];

                    v.close();
                });
    },

    onFrmSelectCenterCodeAfterRender: function(component, eOpts) {
        var date='26-Jan-2014';
        var offCode=Ext.get('offCode').dom.innerHTML;
        //var offCode='01020';
        var centerName='';

                Ext.Ajax.request
                ({
                    url:'../Handlers/Finance/Transaction/CollectionSheetTransaction/OnlineCollectionCenterHandler.ashx?method=GetOnlineCenters',
                    params:{date:date,offCode:offCode,centerName:centerName},
                    success: function ( result, request ) {


                        var obj = Ext.decode(result.responseText);

                        if(obj.success === "false")
                        {
                            msg("WARNING",obj.message);
                            return;
                        }
                        var data = obj.root;
                         var storeUser = Ext.getStore('CSCenterCodePopUpStore');
                         storeUser.removeAll();
                          storeUser.add(data);

                    },
                    failure: function ( result, request ) {


                        msg("FAILURE","Error in Fetching Data !!!");
                    }
                });

    }

});