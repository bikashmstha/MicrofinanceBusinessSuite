/*
 * File: app/controller/RefundPaymentsPreview.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.RefundPaymentsPreview', {
    extend: 'Ext.app.Controller',

    stores: [
        'FilingPeriodStore',
        'Period',
        'OfficeBankInfo'
    ],

    onRefundCloseAfterRender: function(component, eOpts) {
        var me = this;
        var param = null;
        var view = Ext.ComponentQuery.query('#RefundPaymentsPreview')[0];


        if(!view.extraParam)
        {   

            msg("FAILURE","Error in Preview of RefundPayments !!!");

            return;

        }


        var wait  = watiMsg('Loading Preview ...');

        var accountType = "00";


        var officeCode = Ext.get('offCode').dom.innerHTML;
        var currentDate = Ext.get('nepDate').dom.innerHTML;
        var tranNo = view.extraParam.params.tranNo;

        Ext.Ajax.request({
            url:"../Handlers/VAT/RefundPayments/RefundPaymentsHandler2.ashx?method=GetRefundPaymentsByTranNo" ,
            params:{tranNo:tranNo},
            success: function ( result, request ) {            

                wait.hide();          

                var obj = Ext.decode(result.responseText);

                if(obj.success === "true")
                {            
                    var strBank = Ext.getStore("OfficeBankInfo");


                    var data = obj.root;


                    var strFilPeriod = Ext.getStore("FilingPeriodStore");                
                    var idxFile = strFilPeriod.find('FilPeriod',data.FilPeriod);
                    var recFile = strFilPeriod.getAt(idxFile);

                    var strPeriod = Ext.getStore("Period");  
                    strPeriod.loadData(recFile.data.Period);
                    var idxPeriod = strPeriod.find('Period',data.Period);
                    var recPeriod = strPeriod.getAt(idxPeriod);    
                    Ext.ComponentQuery.query('#txtOfficeCodeRpp')[0].setValue(officeCode);    
                    Ext.ComponentQuery.query('#txtAccTypeRpp')[0].setValue("00");

                    Ext.ComponentQuery.query('#txtFilePer')[0].setValue(recFile.data.FilPeriodDesc);
                    Ext.ComponentQuery.query('#txtPeriodRpp')[0].setValue(recPeriod.data.PeriodDesc);

                    Ext.ComponentQuery.query('#txtPanRpp')[0].setValue(data.Pan);
                    Ext.ComponentQuery.query('#txtTaxYearRpp')[0].setValue(data.TaxYear);
                    Ext.ComponentQuery.query('#txtAmountClaimedRpp')[0].setValue(data.AmountClaimed);

                    Ext.ComponentQuery.query('#txtAcceptedAmountRpp')[0].setValue(data.AcceptedAmount);
                    Ext.ComponentQuery.query('#txtPayDedAmountRpp')[0].setValue(data.PayDedAmount);
                    Ext.ComponentQuery.query('#txtChequeAmountRpp')[0].setValue(data.ChequeAmount);                
                    Ext.ComponentQuery.query('#txtRefCloseDate')[0].setValue(data.RefCloseDate);
                    Ext.ComponentQuery.query('#txtChequeNumberRpp')[0].setValue(data.ChequeNumber);
                    Ext.ComponentQuery.query('#txtChequeDateRpp')[0].setValue(data.ChequeDate);

                    Ext.ComponentQuery.query('#txtUserIDRpp')[0].setValue(data.UserID);
                    Ext.ComponentQuery.query('#txtTranDateRpp')[0].setValue(data.TranDate);            
                    Ext.ComponentQuery.query('#txtUserIDRpp')[0].setValue(data.OfficerName); 

                    strBank.load(
                    {
                        params:{officeCode:officeCode },scope:this,
                        callback: function(records, operation, success){
                            if(success){


                                var txtBank = Ext.ComponentQuery.query('#txtBankCodeRpp')[0];


                                if(strBank.getCount() > 0)
                                {

                                    var record = strBank.findRecord("BankBr",data.BankCode);                            

                                    txtBank.setValue(record.data.BankName);

                                    //console.log("record>>",record);
                                }
                            }
                        }
                    });


                    var view = Ext.ComponentQuery.query('#RefundPaymentsPreview')[0];            
                    view.query('.field').forEach(function(c){c.setReadOnly(true);});

                }
                else
                {
                    msg("FAILURE",obj.message);
                }

            },
            failure:  function ( result, request ) { 

                wait.hide();            
                button.up('window').close();

                msg("FAILURE","Error in Fetching data !!!");
            }
        });
    },

    init: function(application) {
        this.control({
            "#RefundPaymentsPreview": {
                afterrender: this.onRefundCloseAfterRender
            }
        });
    }

});
