/*
 * File: app/view/GeneralDefinitions.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.GeneralDefinitions', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.form.Panel',
        'Ext.tab.Panel',
        'Ext.tab.Tab',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.selection.RowModel',
        'Ext.grid.plugin.RowEditing',
        'Ext.grid.column.Action',
        'Ext.toolbar.Toolbar',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Checkbox'
    ],

    frame: true,
    title: 'General Definitions',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    id: 'frmGeneralDefinitions',
                    itemId: 'frmGeneralDefinitions',
                    bodyPadding: 10,
                    items: [
                        {
                            xtype: 'tabpanel',
                            activeTab: 0,
                            items: [
                                {
                                    xtype: 'panel',
                                    title: 'Naration Detail',
                                    tabConfig: {
                                        xtype: 'tab',
                                        listeners: {
                                            click: {
                                                fn: me.onTabClick,
                                                scope: me
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'gridpanel',
                                            itemId: 'grdNarrations',
                                            padding: '10 0 0 0',
                                            store: 'NarrationStore',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'NarrationCode',
                                                    text: 'Narration Code',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtNarrationCode'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    width: 250,
                                                    dataIndex: 'NarrationDesc',
                                                    text: 'Narration Description',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtNarrationDesc'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'Action',
                                                    text: 'Action',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtAction',
                                                        readOnly: true
                                                    }
                                                },
                                                {
                                                    xtype: 'actioncolumn',
                                                    items: [
                                                        {
                                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                                var store = Ext.getStore('NarrationStore');
                                                                var grd =  Ext.ComponentQuery.query('#grdNarrations')[0];
                                                                var row = store.getAt(rowIndex).data;

                                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Narration ?', function(btn) {
                                                                    if(btn == 'yes'){

                                                                        var narration={
                                                                            NarrationCode:row.NarrationCode,
                                                                            NarrationDesc:row.NarrationDesc,
                                                                            Action:'D'
                                                                        };


                                                                        var wMsg='Deleting....';

                                                                        var waitSave = watiMsg(wMsg);

                                                                        Ext.Ajax.request({
                                                                            url: '../Handlers/Maintenance/GeneralDefinitions/NarrationHandler.ashx',
                                                                            params: {
                                                                                method:'SaveNarration',
                                                                                narration:JSON.stringify(narration)
                                                                            },
                                                                            success: function(response){
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                console.log(out);

                                                                                if(out.success==="true")
                                                                                {
                                                                                    var message=out.root;
                                                                                    if(message.OutResultCode==="SUCCESS")
                                                                                    {
                                                                                        msg("SUCCESS",message.OutResultMessage,function(){
                                                                                            grd.bindStore(store);
                                                                                            store.removeAt(rowIndex);
                                                                                        });



                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        msg("FAILURE",message.OutResultMessage);
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    msg("FAILURE",out.message);
                                                                                }
                                                                            },
                                                                            failure: function ( result, request ) {
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                msg("FAILURE",out.message);
                                                                            }

                                                                        });



                                                                        return true;
                                                                    }
                                                                });
                                                            },
                                                            icon: '../ITS/resources/images/icons/cancel.png'
                                                        }
                                                    ]
                                                }
                                            ],
                                            selModel: Ext.create('Ext.selection.RowModel', {

                                            }),
                                            plugins: [
                                                Ext.create('Ext.grid.plugin.RowEditing', {
                                                    listeners: {
                                                        edit: {
                                                            fn: me.onRowEditingEdit,
                                                            scope: me
                                                        },
                                                        validateedit: {
                                                            fn: me.onRowEditingValidateedit,
                                                            scope: me
                                                        },
                                                        canceledit: {
                                                            fn: me.onRowEditingCanceledit,
                                                            scope: me
                                                        }
                                                    }
                                                })
                                            ],
                                            dockedItems: [
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'bottom',
                                                    items: [
                                                        {
                                                            xtype: 'button',
                                                            itemId: 'btnAddNarration',
                                                            text: 'Add Narration',
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onBtnAddNarrationClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype: 'panel',
                                    title: 'Nepal Date Conersion',
                                    tabConfig: {
                                        xtype: 'tab',
                                        listeners: {
                                            click: {
                                                fn: me.onTabClick1,
                                                scope: me
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'gridpanel',
                                            itemId: 'grdNepaliDateConversion',
                                            padding: '10 0 0 0',
                                            store: 'NepaliDateConversionStore',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'FiscalYear',
                                                    text: 'Fiscal Year',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtFiscalYear'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'MonthCode',
                                                    text: 'Month Code',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtMonthCode'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'EnglishStartDate',
                                                    text: 'English Start Date',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtEnglishStartDate'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'NepaliStartDate',
                                                    text: 'Nepali Start Date',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtNepaliStartDate'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'EnglishEndDate',
                                                    text: 'English End Date',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtEnglishEndDate'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'NepaliEndDate',
                                                    text: 'Nepali End Date',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtNepaliEndDate'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'NepaliYear',
                                                    text: 'Nepali Year',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtNepaliYear'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'NepaliPeriod',
                                                    text: 'Nepali Period',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtNepaliPeriod'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'NoOfDays',
                                                    text: 'No. Of Days',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtNoOfDays'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'Action',
                                                    text: 'Action',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtAction'
                                                    }
                                                },
                                                {
                                                    xtype: 'actioncolumn',
                                                    itemId: 'colDelNepaliDateConversion',
                                                    icon: '../ITS/resources/images/icons/cancel.png',
                                                    items: [
                                                        {
                                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                                var store = Ext.getStore('NepaliDateConversionStore');
                                                                var grd =  Ext.ComponentQuery.query('#grdNepaliDateConversion')[0];
                                                                var row = store.getAt(rowIndex).data;

                                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Nepali Date Conversion ?', function(btn) {
                                                                    if(btn == 'yes'){

                                                                        var nepaliDateConversion={
                                                                            FiscalYear:row.FiscalYear,
                                                                            MonthCode:row.MonthCode,
                                                                            EnglishStartDate:row.EnglishStartDate,
                                                                            NepaliStartDate:row.NepaliStartDate,
                                                                            EnglishEndDate:row.EnglishEndDate,
                                                                            NepaliEndDate:row.NepaliEndDate,
                                                                            NepaliYear:row.NepaliYear,
                                                                            NepaliPeriod:row.NepaliPeriod,
                                                                            NoOfDays:row.NoOfDays,
                                                                            CreatedOn:'',
                                                                            CreatedBy:getCurrentUser(),
                                                                            Action:'D'
                                                                        };


                                                                        var wMsg='Deleting....';

                                                                        var waitSave = watiMsg(wMsg);

                                                                        Ext.Ajax.request({
                                                                            url: '../Handlers/Maintenance/GeneralDefinitions/NepaliDateConversionHandler.ashx',
                                                                            params: {
                                                                                method:'SaveNepaliDateConversion',
                                                                                nepaliDateConversion:JSON.stringify(nepaliDateConversion)
                                                                            },
                                                                            success: function(response){
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                console.log(out);

                                                                                if(out.success==="true")
                                                                                {
                                                                                    var message=out.root;
                                                                                    if(message.OutResultCode==="SUCCESS")
                                                                                    {
                                                                                        msg("SUCCESS",message.OutResultMessage,function(){
                                                                                            grd.bindStore(store);
                                                                                            store.removeAt(rowIndex);
                                                                                        });



                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        msg("FAILURE",message.OutResultMessage);
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    msg("FAILURE",out.message);
                                                                                }
                                                                            },
                                                                            failure: function ( result, request ) {
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                msg("FAILURE",out.message);
                                                                            }

                                                                        });



                                                                        return true;
                                                                    }
                                                                });
                                                            },
                                                            icon: '../ITS/resources/images/icons/cancel.png'
                                                        }
                                                    ]
                                                }
                                            ],
                                            selModel: Ext.create('Ext.selection.RowModel', {

                                            }),
                                            plugins: [
                                                Ext.create('Ext.grid.plugin.RowEditing', {
                                                    listeners: {
                                                        validateedit: {
                                                            fn: me.onRowEditingValidateedit1,
                                                            scope: me
                                                        },
                                                        canceledit: {
                                                            fn: me.onRowEditingCanceledit1,
                                                            scope: me
                                                        }
                                                    }
                                                })
                                            ],
                                            dockedItems: [
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'top',
                                                    items: [
                                                        {
                                                            xtype: 'button',
                                                            itemId: 'btnAddNepaliDateConversion',
                                                            text: 'Add New Nepali Date Conversion',
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onBtnAddNepaliDateConversionClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype: 'panel',
                                    title: 'Generate Date of Fiscal Year',
                                    tabConfig: {
                                        xtype: 'tab',
                                        listeners: {
                                            click: {
                                                fn: me.onTabClick7,
                                                scope: me
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            itemId: 'ddlFiscalYear',
                                            maxWidth: 280,
                                            width: 280,
                                            fieldLabel: 'Fiscal Year',
                                            emptyText: '- - - Select Fiscal Year - - -',
                                            displayField: 'FiscalYear',
                                            queryMode: 'local',
                                            store: 'NepaliFiscalYearStore',
                                            valueField: 'FiscalYear'
                                        },
                                        {
                                            xtype: 'button',
                                            itemId: 'btnGenerateDateOfNepaliFiscalYear',
                                            padding: 5,
                                            text: 'Generate Date of Above Fiscal Year',
                                            listeners: {
                                                click: {
                                                    fn: me.onBtnGenerateDateOfNepaliFiscalYearClick,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'panel',
                                    title: 'Generate Date of English Year',
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            itemId: 'ddlEnglishFiscalYear',
                                            fieldLabel: 'English Year'
                                        },
                                        {
                                            xtype: 'button',
                                            itemId: 'btnGenerateDateOfEnglishFiscalYear',
                                            padding: 5,
                                            text: 'Generate Date of Above English Year',
                                            listeners: {
                                                click: {
                                                    fn: me.onBtnGenerateDateOfEnglishFiscalYearClick,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'panel',
                                    title: 'Nepali Fiscal Year Setup',
                                    tabConfig: {
                                        xtype: 'tab',
                                        listeners: {
                                            click: {
                                                fn: me.onTabClick2,
                                                scope: me
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'gridpanel',
                                            itemId: 'grdNepaliFiscalYear',
                                            padding: '10 0 0 0',
                                            store: 'NepaliFiscalYearStore',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'FiscalYear',
                                                    text: 'Fiscal Year',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtFiscalYear'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'StartDateBS',
                                                    text: 'Start Date BS',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtStartDateBS'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'StartDate',
                                                    text: 'Start Date',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtStartDate'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'EndDateBS',
                                                    text: 'End Date BS',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtEndDateBS'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'EndDate',
                                                    text: 'End Date',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtEndDate'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'Action',
                                                    text: 'Action',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtAction'
                                                    }
                                                },
                                                {
                                                    xtype: 'actioncolumn',
                                                    itemId: 'colDelNepaliFiscalYear',
                                                    items: [
                                                        {
                                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                                var store = Ext.getStore('NepaliFiscalYearStore');
                                                                var grd =  Ext.ComponentQuery.query('#grdNepaliFiscalYear')[0];
                                                                var row = store.getAt(rowIndex).data;

                                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Fiscal Year ?', function(btn) {
                                                                    if(btn == 'yes'){

                                                                        /*
                                                                        nepaliDateConversion.FiscalYear, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                        paramList.Add(SqlHelper.GetOraParam(":P_MONTH_CODE", nepaliDateConversion.MonthCode, OracleDbType.Int16, ParameterDirection.Input));
                                                                        paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_START_DATE", nepaliDateConversion.EnglishStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                        paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_START_DATE", nepaliDateConversion.NepaliStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                        paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_END_DATE", nepaliDateConversion.EnglishEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                        paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_END_DATE", nepaliDateConversion.NepaliEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                        paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_YEAR", nepaliDateConversion.NepaliYear, OracleDbType.Int16, ParameterDirection.Input));
                                                                        paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_PERIOD", nepaliDateConversion.NepaliPeriod, OracleDbType.Int16, ParameterDirection.Input));
                                                                        paramList.Add(SqlHelper.GetOraParam(":P_NO_OF_DAYS_IN_MONTH", nepaliDateConversion.NoOfDays, OracleDbType.Int16, ParameterDirection.Input));
                                                                        paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_ON", nepaliDateConversion.CreatedOn, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                        paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_BY", nepaliDateConversion.CreatedBy, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                        paramList.Add(SqlHelper.GetOraParam(":P_INSERT_UPDATE", nepaliDateConversion.Action, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                        paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_CODE", null, OracleDbType.Varchar2, ParameterDirection.Output));
                                                                        paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_DESC", null, OracleDbType.
                                                                        */
                                                                        var nepaliFiscalYear={
                                                                            FiscalYear:row.FiscalYear,
                                                                            MonthCode:row.MonthCode,
                                                                            EnglishStartDate:row.EnglishStartDate,
                                                                            NepaliStartDate:row.NepaliStartDate,
                                                                            EnglishEndDate:row.EnglishEndDate,
                                                                            NepaliEndDate:row.NepaliEndDate,
                                                                            NepaliYear:row.NepaliYear,
                                                                            NepaliPeriod:row.NepaliPeriod,
                                                                            NoOfDays:row.NoOfDays,
                                                                            CreatedOn:'',
                                                                            CreatedBy:getCurrentUser(),
                                                                            Action:'D'
                                                                        };


                                                                        var wMsg='Deleting....';

                                                                        var waitSave = watiMsg(wMsg);

                                                                        Ext.Ajax.request({
                                                                            url: '../Handlers/Maintenance/GeneralDefinitions/NepaliFiscalYearHandler.ashx',
                                                                            params: {
                                                                                method:'SaveNepaliFiscalYear',
                                                                                nepaliFiscalYear:JSON.stringify(nepaliFiscalYear)
                                                                            },
                                                                            success: function(response){
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                console.log(out);

                                                                                if(out.success==="true")
                                                                                {
                                                                                    var message=out.root;
                                                                                    if(message.OutResultCode==="SUCCESS")
                                                                                    {
                                                                                        msg("SUCCESS",message.OutResultMessage,function(){
                                                                                            grd.bindStore(store);
                                                                                            store.removeAt(rowIndex);
                                                                                        });



                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        msg("FAILURE",message.OutResultMessage);
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    msg("FAILURE",out.message);
                                                                                }
                                                                            },
                                                                            failure: function ( result, request ) {
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                msg("FAILURE",out.message);
                                                                            }

                                                                        });



                                                                        return true;
                                                                    }
                                                                });
                                                            },
                                                            icon: '../ITS/resources/images/icons/cancel.png'
                                                        }
                                                    ]
                                                }
                                            ],
                                            plugins: [
                                                Ext.create('Ext.grid.plugin.RowEditing', {
                                                    listeners: {
                                                        validateedit: {
                                                            fn: me.onRowEditingValidateedit2,
                                                            scope: me
                                                        },
                                                        canceledit: {
                                                            fn: me.onRowEditingCanceledit2,
                                                            scope: me
                                                        }
                                                    }
                                                })
                                            ],
                                            dockedItems: [
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'top',
                                                    items: [
                                                        {
                                                            xtype: 'button',
                                                            itemId: 'btnAddNepaliFiscalYear',
                                                            text: 'Add Nepali Fiscal Year',
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onBtnAddNepaliFiscalYearClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype: 'panel',
                                    title: 'Installment Period Setup',
                                    tabConfig: {
                                        xtype: 'tab',
                                        listeners: {
                                            click: {
                                                fn: me.onTabClick3,
                                                scope: me
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'gridpanel',
                                            itemId: 'grdInstallmentPeriod',
                                            padding: '10 0 0 0',
                                            store: 'InstallmentPeriodStore',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'InstallmentPeriods',
                                                    text: 'Installment Period',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtInstallmentPeriod'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    width: 200,
                                                    dataIndex: 'InstallmentPeriodDesc',
                                                    text: 'Installment Period Description',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtInstallmentPeriodDescription'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'InstallmentPeriodType',
                                                    text: 'Period Type',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtPeriodType'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'MaxGraceDays',
                                                    text: 'Max Grace Days',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtMaxGraceDays'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'InstallmentType',
                                                    text: 'Installment Type',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtInstallmentType'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'Active',
                                                    text: 'Status',
                                                    editor: {
                                                        xtype: 'checkboxfield',
                                                        itemId: 'chkActive'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'Action',
                                                    text: 'Action',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtAction'
                                                    }
                                                },
                                                {
                                                    xtype: 'actioncolumn',
                                                    itemId: 'colDelInstallmentPeriod',
                                                    icon: '../ITS/resources/images/icons/cancel.png',
                                                    items: [
                                                        {
                                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                                var store = Ext.getStore('InstallmentPeriodStore');
                                                                var grd =  Ext.ComponentQuery.query('#grdInstallmentPeriod')[0];
                                                                var row = store.getAt(rowIndex).data;

                                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Narration ?', function(btn) {
                                                                    if(btn == 'yes'){

                                                                        console.log('rec.active',row.active);
                                                                        var installmentPeriod={
                                                                            InstallmentPeriods:row.InstallmentPeriods,
                                                                            InstallmentPeriodDesc:row.InstallmentPeriodDesc,
                                                                            InstallmentPeriodType:row.InstallmentPeriodType,
                                                                            InstallmentType:row.InstallmentType,
                                                                            MaxGraceDays:row.MaxGraceDays,
                                                                            CreatedDate:'',
                                                                            CreatedBy:getCurrentUser(),
                                                                            Active:row.active===true?'Y':'N',
                                                                            Action:'D'
                                                                        };


                                                                        var wMsg='Deleting....';

                                                                        var waitSave = watiMsg(wMsg);

                                                                        Ext.Ajax.request({
                                                                            url: '../Handlers/Maintenance/GeneralDefinitions/InstallmentPeriodHandler.ashx',
                                                                            params: {
                                                                                method:'SaveInstallmentPeriod',
                                                                                installmentPeriod:JSON.stringify(installmentPeriod)
                                                                            },
                                                                            success: function(response){
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                console.log(out);

                                                                                if(out.success==="true")
                                                                                {
                                                                                    var message=out.root;
                                                                                    if(message.OutResultCode==="SUCCESS")
                                                                                    {
                                                                                        msg("SUCCESS",message.OutResultMessage,function(){
                                                                                            grd.bindStore(store);
                                                                                            store.removeAt(rowIndex);
                                                                                        });



                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        msg("FAILURE",message.OutResultMessage);
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    msg("FAILURE",out.message);
                                                                                }
                                                                            },
                                                                            failure: function ( result, request ) {
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                msg("FAILURE",out.message);
                                                                            }

                                                                        });



                                                                        return true;
                                                                    }
                                                                });
                                                            },
                                                            icon: '../ITS/resources/images/icons/cancel.png'
                                                        }
                                                    ]
                                                }
                                            ],
                                            plugins: [
                                                Ext.create('Ext.grid.plugin.RowEditing', {
                                                    listeners: {
                                                        validateedit: {
                                                            fn: me.onRowEditingValidateedit3,
                                                            scope: me
                                                        },
                                                        canceledit: {
                                                            fn: me.onRowEditingCanceledit3,
                                                            scope: me
                                                        }
                                                    }
                                                })
                                            ],
                                            dockedItems: [
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'top',
                                                    items: [
                                                        {
                                                            xtype: 'button',
                                                            itemId: 'btnAddInstallmentPeriod',
                                                            text: 'Add Installment Period',
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onBtnAddInstallmentPeriodClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype: 'panel',
                                    title: 'Loan Period',
                                    tabConfig: {
                                        xtype: 'tab',
                                        listeners: {
                                            click: {
                                                fn: me.onTabClick4,
                                                scope: me
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'gridpanel',
                                            itemId: 'grdLoanPeriod',
                                            padding: '10 0 0 0',
                                            store: 'LoanPeriodStore',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'LoanPeriods',
                                                    text: 'Loan Period',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtLoanPeriod'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'LoanPeriodDesc',
                                                    text: 'Loan Period Desc',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtLoanPeriodDesc'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'LoanPeriodType',
                                                    text: 'Period Type',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtPeriodType'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'Active',
                                                    text: 'Active',
                                                    editor: {
                                                        xtype: 'checkboxfield',
                                                        itemId: 'chkActive'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'Action',
                                                    text: 'Action',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtAction'
                                                    }
                                                },
                                                {
                                                    xtype: 'actioncolumn',
                                                    itemId: 'colDelLoanPeriod',
                                                    icon: '../ITS/resources/images/icons/cancel.png',
                                                    items: [
                                                        {
                                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                                var store = Ext.getStore('LoanPeriodStore');
                                                                var grd =  Ext.ComponentQuery.query('#grdLoanPeriod')[0];
                                                                var row = store.getAt(rowIndex).data;

                                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Narration ?', function(btn) {
                                                                    if(btn == 'yes'){



                                                                        var loanPeriod={
                                                                            LoanPeriods:row.LoanPeriods,
                                                                            LoanPeriodDesc:row.LoanPeriodDesc,
                                                                            LoanPeriodType:row.LoanPeriodType,
                                                                            //LoanPeriodTypeDet:loanPeriodTypeDet.getValue(),
                                                                            CreatedDate:'',
                                                                            CreatedBy:'',
                                                                            Active:row.Active===true?'Y':'N',
                                                                            Action:'D'
                                                                        };


                                                                        var wMsg='Deleting....';

                                                                        var waitSave = watiMsg(wMsg);

                                                                        Ext.Ajax.request({
                                                                            url: '../Handlers/Maintenance/GeneralDefinitions/loanPeriodHandler.ashx',
                                                                            params: {
                                                                                method:'SaveLoanPeriod',
                                                                                loanPeriod:JSON.stringify(loanPeriod)
                                                                            },
                                                                            success: function(response){
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                console.log(out);

                                                                                if(out.success==="true")
                                                                                {
                                                                                    var message=out.root;
                                                                                    if(message.OutResultCode==="SUCCESS")
                                                                                    {
                                                                                        msg("SUCCESS",message.OutResultMessage,function(){
                                                                                            grd.bindStore(store);
                                                                                            store.removeAt(rowIndex);
                                                                                        });



                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        msg("FAILURE",message.OutResultMessage);
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    msg("FAILURE",out.message);
                                                                                }
                                                                            },
                                                                            failure: function ( result, request ) {
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                msg("FAILURE",out.message);
                                                                            }

                                                                        });



                                                                        return true;
                                                                    }
                                                                });
                                                            },
                                                            icon: '../ITS/resources/images/icons/cancel.png'
                                                        }
                                                    ]
                                                }
                                            ],
                                            dockedItems: [
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'top',
                                                    items: [
                                                        {
                                                            xtype: 'button',
                                                            itemId: 'btnLoanPeriod',
                                                            text: 'Add Loan Period',
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onBtnLoanPeriodClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ],
                                            plugins: [
                                                Ext.create('Ext.grid.plugin.RowEditing', {
                                                    listeners: {
                                                        validateedit: {
                                                            fn: me.onRowEditingValidateedit6,
                                                            scope: me
                                                        },
                                                        canceledit: {
                                                            fn: me.onRowEditingCanceledit6,
                                                            scope: me
                                                        }
                                                    }
                                                })
                                            ],
                                            selModel: Ext.create('Ext.selection.RowModel', {

                                            })
                                        }
                                    ]
                                },
                                {
                                    xtype: 'panel',
                                    padding: '10 0 0 0',
                                    title: 'Loan and Installment Period Map',
                                    tabConfig: {
                                        xtype: 'tab',
                                        listeners: {
                                            click: {
                                                fn: me.onTabClick5,
                                                scope: me
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'gridpanel',
                                            itemId: 'grdLoanInstallmentPeriodMap',
                                            store: 'LoanInstallmentPeriodMapStore',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'InstallmentPeriod',
                                                    text: 'Installment Period',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtInstallmentPeriod'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'InstallmentPeriodType',
                                                    text: 'Installment Type',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtInstallmentType'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'LoanPeriod',
                                                    text: 'Loan Period',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtLoanPeriod'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'LoanPeriodType',
                                                    text: 'Loan Period Type',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtLoanPeriodType'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'NoOfInstallment',
                                                    text: 'No. Of Installment',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtNoOfInstallment'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'Active',
                                                    text: 'Active',
                                                    editor: {
                                                        xtype: 'checkboxfield',
                                                        itemId: 'chkActive'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'Action',
                                                    text: 'Action',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtAction'
                                                    }
                                                },
                                                {
                                                    xtype: 'actioncolumn',
                                                    itemId: 'colDelLoanInstallmentPeriodMap',
                                                    icon: '../ITS/resources/images/icons/cancel.png',
                                                    items: [
                                                        {
                                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                                var store = Ext.getStore('LoanInstallmentPeriodMapStore');
                                                                var grd =  Ext.ComponentQuery.query('#grdLoanInstallmentPeriodMap')[0];
                                                                var row = store.getAt(rowIndex).data;

                                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Loan InstallmentPeriodMap ?', function(btn) {
                                                                    if(btn == 'yes'){

                                                                        var loanInstallmentPeriodMap={InstallmentPeriod:row.InstallmentPeriod,
                                                                                InstallmentPeriodType:row.InstallmentPeriodType,
                                                                                //InstallmentPeriodTypeDet:'',
                                                                                LoanPeriod:row.LoanPeriod,
                                                                                LoanPeriodType:row.LoanPeriodType,
                                                                                //LoanPeriodTypeDet:'',
                                                                                NoOfInstallment:row.NoOfInstallment,
                                                                                Active:row.active===true?'Y':'N',
                                                                                CreatedDate:'A',
                                                                                CreatedBy:getCurrentUser(),
                                                                                Action:'D'
                                                                            };


                                                                        var wMsg='Deleting....';

                                                                        var waitSave = watiMsg(wMsg);

                                                                        Ext.Ajax.request({
                                                                            url: '../Handlers/Maintenance/GeneralDefinitions/LoanInstallmentPeriodMapHandler.ashx',
                                                                            params: {
                                                                                method:'SaveLoanInstallmentPeriodMap',
                                                                                loanInstallmentPeriodMap:JSON.stringify(loanInstallmentPeriodMap)
                                                                            },
                                                                            success: function(response){
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                console.log(out);

                                                                                if(out.success==="true")
                                                                                {
                                                                                    var message=out.root;
                                                                                    if(message.OutResultCode==="SUCCESS")
                                                                                    {
                                                                                        msg("SUCCESS",message.OutResultMessage,function(){
                                                                                            grd.bindStore(store);
                                                                                            store.removeAt(rowIndex);
                                                                                        });



                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        msg("FAILURE",message.OutResultMessage);
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    msg("FAILURE",out.message);
                                                                                }
                                                                            },
                                                                            failure: function ( result, request ) {
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                msg("FAILURE",out.message);
                                                                            }

                                                                        });



                                                                        return true;
                                                                    }
                                                                });
                                                            },
                                                            icon: '../ITS/resources/images/icons/cancel.png'
                                                        }
                                                    ]
                                                }
                                            ],
                                            plugins: [
                                                Ext.create('Ext.grid.plugin.RowEditing', {
                                                    listeners: {
                                                        validateedit: {
                                                            fn: me.onRowEditingValidateedit4,
                                                            scope: me
                                                        },
                                                        canceledit: {
                                                            fn: me.onRowEditingCanceledit4,
                                                            scope: me
                                                        }
                                                    }
                                                })
                                            ],
                                            dockedItems: [
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'top',
                                                    items: [
                                                        {
                                                            xtype: 'button',
                                                            itemId: 'btnLoanInstallmentPeriodMap',
                                                            text: 'Add Loan Installment Period Map',
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onBtnLoanInstallmentPeriodMapClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ],
                                            selModel: Ext.create('Ext.selection.RowModel', {

                                            })
                                        }
                                    ]
                                },
                                {
                                    xtype: 'panel',
                                    title: 'Loan Period And Product Map',
                                    tabConfig: {
                                        xtype: 'tab',
                                        listeners: {
                                            click: {
                                                fn: me.onTabClick6,
                                                scope: me
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'gridpanel',
                                            itemId: 'grdLoanPeriodProductMap',
                                            padding: '10 0 0 0',
                                            store: 'LoanPeriodProductMapStore',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'LoanPeriod',
                                                    text: 'Loan Period',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtLoanPeriod'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'LoanPeriodType',
                                                    text: 'Loan Period Type',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtLoanPeriodType'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'LoanProductCode',
                                                    text: 'Product Code',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtProductCode'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'Description',
                                                    text: 'Description',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtDescription'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'DisplaySequence',
                                                    text: 'Display Sequence',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtDisplaySeq'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'Active',
                                                    text: 'Active',
                                                    editor: {
                                                        xtype: 'checkboxfield',
                                                        itemId: 'chkActive'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'Action',
                                                    text: 'Action',
                                                    editor: {
                                                        xtype: 'textfield',
                                                        itemId: 'txtAction'
                                                    }
                                                },
                                                {
                                                    xtype: 'actioncolumn',
                                                    itemId: 'colDelLoanPeriodProductMap',
                                                    icon: '../ITS/resources/images/icons/cancel.png',
                                                    items: [
                                                        {
                                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                                var store = Ext.getStore('LoanPeriodProductMapStore');
                                                                var grd =  Ext.ComponentQuery.query('#grdLoanPeriodProductMap')[0];
                                                                var row = store.getAt(rowIndex).data;

                                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Product Period Map ?', function(btn) {
                                                                    if(btn == 'yes'){

                                                                        var loanProductPeriodMap={
                                                                            LoanPeriod:row.LoanPeriod,
                                                                            LoanPeriodType:row.LoanPeriodType,
                                                                            //LoanPeriodTypeDet:row.LoanPeriodTypeDet,
                                                                            LoanProductCode:row.LoanProductCode,
                                                                            Description:row.Description,
                                                                            DisplaySequence:row.DisplaySequence,
                                                                            Active:row.Active===true?'Y':'N',
                                                                            CreatedDate:'',
                                                                            CreatedBy:'',
                                                                            Action:'D'
                                                                        };

                                                                        var wMsg='Deleting....';

                                                                        var waitSave = watiMsg(wMsg);

                                                                        Ext.Ajax.request({
                                                                            url: '../Handlers/Maintenance/GeneralDefinitions/LoanProductPeriodMapHandler.ashx',
                                                                            params: {
                                                                                method:'SaveLoanProductPeriodMap',
                                                                                loanProductPeriodMap:JSON.stringify(loanProductPeriodMap)
                                                                            },
                                                                            success: function(response){
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                console.log(out);

                                                                                if(out.success==="true")
                                                                                {
                                                                                    var message=out.root;
                                                                                    if(message.OutResultCode==="SUCCESS")
                                                                                    {
                                                                                        msg("SUCCESS",message.OutResultMessage,function(){
                                                                                            grd.bindStore(store);
                                                                                            store.removeAt(rowIndex);
                                                                                        });



                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        msg("FAILURE",message.OutResultMessage);
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    msg("FAILURE",out.message);
                                                                                }
                                                                            },
                                                                            failure: function ( result, request ) {
                                                                                waitSave.hide();
                                                                                var out=Ext.decode(response.responseText);
                                                                                msg("FAILURE",out.message);
                                                                            }

                                                                        });



                                                                        return true;
                                                                    }
                                                                });
                                                            },
                                                            icon: '../ITS/resources/images/icons/cancel.png'
                                                        }
                                                    ]
                                                }
                                            ],
                                            plugins: [
                                                Ext.create('Ext.grid.plugin.RowEditing', {
                                                    listeners: {
                                                        validateedit: {
                                                            fn: me.onRowEditingValidateedit5,
                                                            scope: me
                                                        },
                                                        canceledit: {
                                                            fn: me.onRowEditingCanceledit5,
                                                            scope: me
                                                        }
                                                    }
                                                })
                                            ],
                                            dockedItems: [
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'top',
                                                    items: [
                                                        {
                                                            xtype: 'button',
                                                            itemId: 'btnLoanPeriodProductMap',
                                                            text: 'Add Loan Product Period Map',
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onBtnLoanPeriodProductMapClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ],
                                            selModel: Ext.create('Ext.selection.RowModel', {

                                            })
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    /*  */
    onTabClick: function(button, e, eOpts) {
        var store=Ext.getStore('NarrationStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Maintenance/GeneralDefinitions/NarrationHandler.ashx',
            params: {
                method:'GetNarrations'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onRowEditingEdit: function(editor, e, eOpts) {

    },

    onRowEditingValidateedit: function(editor, e, eOpts) {
        var errMsg='';
        var narrationCode=Ext.ComponentQuery.query('#txtNarrationCode')[0];
        var narrationDesc=Ext.ComponentQuery.query('#txtNarrationDesc')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];

        if(narrationCode.getValue()===null ||narrationCode.getValue()==="")
            {
                errMsg+="Please,Enter Narration Code";
            }
        if(narrationDesc.getValue()===null ||narrationDesc.getValue()==="")
            {
                errMsg+="Please,Enter Narration Description";
            }
        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }


        var narration={
            NarrationCode:narrationCode.getValue(),
            NarrationDesc:narrationDesc.getValue(),
            Action:action.getValue()
        };

        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updting....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Maintenance/GeneralDefinitions/NarrationHandler.ashx',
                    params: {
                        method:'SaveNarration',
                        narration:JSON.stringify(narration)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdNarrations')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit: function(editor, e, eOpts) {

    },

    onBtnAddNarrationClick: function(button, e, eOpts) {
        var store =Ext.getStore('NarrationStore');
        var rec={NarrationCode:'',
                        NarrationDesc:'',
                        Action:'I'};
        store.add(rec);
    },

    onTabClick1: function(button, e, eOpts) {
        var store=Ext.getStore('NepaliDateConversionStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Maintenance/GeneralDefinitions/NepaliDateConversionHandler.ashx',
            params: {
                method:'GetNepaliDateConversion'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onRowEditingValidateedit1: function(editor, e, eOpts) {
        var errMsg='';
        var fiscalYear=Ext.ComponentQuery.query('#txtFiscalYear')[0];
        var monthCode=Ext.ComponentQuery.query('#txtMonthCode')[0];
        var englishStartDate=Ext.ComponentQuery.query('#txtEnglishStartDate')[0];
        var nepaliStartDate=Ext.ComponentQuery.query('#txtNepaliStartDate')[0];
        var englishEndDate=Ext.ComponentQuery.query('#txtEnglishStartDate')[0];
        var nepaliEndDate=Ext.ComponentQuery.query('#txtNepaliEndDate')[0];
        var nepaliYear=Ext.ComponentQuery.query('#txtNepaliYear')[0];
        var nepaliPeriod=Ext.ComponentQuery.query('#txtNepaliPeriod')[0];
        var noOfDays=Ext.ComponentQuery.query('#txtNoOfDays')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];

        /*if(narrationCode.getValue()===null ||narrationCode.getValue()==="")
            {
                errMsg+="Please,Enter Narration Code";
            }
        if(narrationDesc.getValue()===null ||narrationDesc.getValue()==="")
            {
                errMsg+="Please,Enter Narration Description";
            }
        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }*/


         var nepaliDateConversion={
                    FiscalYear:fiscalYear.getValue(),
                    MonthCode:monthCode.getValue(),
                    EnglishStartDate:englishStartDate.getValue(),
                    NepaliStartDate:nepaliStartDate.getValue(),
                    EnglishEndDate:englishEndDate.getValue(),
                    NepaliEndDate:nepaliEndDate.getValue(),
                    NepaliYear:nepaliYear.getValue(),
                    NepaliPeriod:nepaliPeriod.getValue(),
                    NoOfDays:noOfDays.getValue(),
                    CreatedOn:'',
                    CreatedBy:getCurrentUser(),
                    Action:action.getValue()
                };
        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updting....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Maintenance/GeneralDefinitions/NepaliDateConversionHandler.ashx',
                    params: {
                        method:'SaveNepaliDateConversion',
                        nepaliDateConversion:JSON.stringify(nepaliDateConversion)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdNepaliDateConversion')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit1: function(editor, e, eOpts) {

    },

    onBtnAddNepaliDateConversionClick: function(button, e, eOpts) {

        var store =Ext.getStore('NepaliDateConversionStore');
        var rec={
                    FiscalYear:'',
                    MonthCode:'',
                    EnglishStartDate:'',
                    NepaliStartDate:'',
                    EnglishEndDate:'',
                    NepaliEndDate:'',
                    NepaliYear:'',
                    NepaliPeriod:'',
                    NoOfDays:'',
                    CreatedOn:'',
                    CreatedBy:'',
                    Action:'I'
                };
        store.add(rec);
    },

    onTabClick7: function(button, e, eOpts) {
        var store=Ext.getStore('NepaliFiscalYearStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Maintenance/GeneralDefinitions/NepaliFiscalYearHandler.ashx',
            params: {
                method:'GetNepaliFiscalYear'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onBtnGenerateDateOfNepaliFiscalYearClick: function(button, e, eOpts) {
        var errMsg='';
        var fiscalYear=Ext.ComponentQuery.query('#ddlNepaliFiscalYear')[0];

        if(fiscalYear.getValue()===null ||fiscalYear.getValue()==="")
            {
                errMsg+="Please,Select Fiscal Years";
            }
        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }



        var wMsg='Generating....';

        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Maintenance/GeneralDefinitions/GeneralDefinitionsUtilityHandler.ashx',
                    params: {
                        method:'GenerateDateOfNepaliFiscalYear',
                        fiscalYear:fiscalYear.getValue()
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });
    },

    onBtnGenerateDateOfEnglishFiscalYearClick: function(button, e, eOpts) {
        var errMsg='';
        var fiscalYear=Ext.ComponentQuery.query('#ddlEnglishFiscalYear')[0];

        if(fiscalYear.getValue()===null ||fiscalYear.getValue()==="")
            {
                errMsg+="Please,Select Fiscal Years Code";
            }
        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }



        var wMsg='Generating....';

        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Maintenance/GeneralDefinitions/GeneralDefinitionsUtilityHandler.ashx',
                    params: {
                        method:'GenerateDateOfEnglishFiscalYear',
                        fiscalYear:fiscalYear.getValue()
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onTabClick2: function(button, e, eOpts) {
        var store=Ext.getStore('NepaliFiscalYearStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Maintenance/GeneralDefinitions/NepaliFiscalYearHandler.ashx',
            params: {
                method:'GetNepaliFiscalYear'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onRowEditingValidateedit2: function(editor, e, eOpts) {
        var errMsg='';
        var fiscalYear=Ext.ComponentQuery.query('#txtFiscalYear')[0];
        var startDateBS=Ext.ComponentQuery.query('#txtStartDateBS')[0];
        var startDate=Ext.ComponentQuery.query('#txtStartDate')[0];
        var endDateBS=Ext.ComponentQuery.query('#txtEndDateBS')[0];
        var endDate=Ext.ComponentQuery.query('#txtEndDate')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];

        if(fiscalYear.getValue()===null ||fiscalYear.getValue()==="")
            {
                errMsg+="Please,Enter Narration Code";
            }
        if(startDateBS.getValue()===null ||startDateBS.getValue()==="")
            {
                errMsg+="Please,Enter Narration Description";
            }
        if(startDate.getValue()===null ||startDate.getValue()==="")
            {
                errMsg+="Please,Enter Narration Code";
            }
        if(endDateBS.getValue()===null ||endDateBS.getValue()==="")
            {
                errMsg+="Please,Enter Narration Description";
            }
        if(endDate.getValue()===null ||endDate.getValue()==="")
            {
                errMsg+="Please,Enter Narration Code";
            }
        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }

        var nepaliFiscalYear={
            FiscalYear:fiscalYear.getValue(),
            StartDate:startDate.getValue(),
            StartDateBS:startDateBS.getValue(),
            EndDate:endDate.getValue(),
            EndDateBS:endDateBS.getValue(),
            CreatedDate:'',
            CreatedBy:getCurrentUser(),
            Action:action.getValue()
        };

        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updting....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Maintenance/GeneralDefinitions/NepaliFiscalYearHandler.ashx',
                    params: {
                        method:'SaveNepaliFiscalYear',
                        nepaliFiscalYear:JSON.stringify(nepaliFiscalYear)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdNepaliFiscalYear')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit2: function(editor, e, eOpts) {

    },

    onBtnAddNepaliFiscalYearClick: function(button, e, eOpts) {
        var store =Ext.getStore('NepaliFiscalYearStore');
        /*public string FiscalYear { get; set; }
                public string StartDate { get; set; }
                public string StartDateBS { get; set; }
                public string EndDate { get; set; }
                public string EndDateBS { get; set; }*/
        var rec={
            FiscalYear:'',
            StartDate:'',
            StartDateBS:'',
            EndDate:'',
            EndDateBS:'',
            Action:'I'
        };
        store.add(rec);


    },

    onTabClick3: function(button, e, eOpts) {
        var store=Ext.getStore('InstallmentPeriodStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Maintenance/GeneralDefinitions/InstallmentPeriodHandler.ashx',
            params: {
                method:'GetInstallmentPeriod'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onRowEditingValidateedit3: function(editor, e, eOpts) {
        var errMsg='';
        var installmentPeriod=Ext.ComponentQuery.query('#txtInstallmentPeriod')[0];
        var installmentPeriodDesc=Ext.ComponentQuery.query('#txtInstallmentPeriodDescription')[0];
        var installmentPeriodType=Ext.ComponentQuery.query('#txtPeriodType')[0];
        var installmentType=Ext.ComponentQuery.query('#txtInstallmentType')[0];
        var maxGraceDays=Ext.ComponentQuery.query('#txtMaxGraceDays')[0];
        var active=Ext.ComponentQuery.query('#chkActive')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];



        /*if(narrationCode.getValue()===null ||narrationCode.getValue()==="")
            {
                errMsg+="Please,Enter Narration Code";
            }
        if(narrationDesc.getValue()===null ||narrationDesc.getValue()==="")
            {
                errMsg+="Please,Enter Narration Description";
            }
        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }*/
        /*
        p_install_period            IN     NUMBER,
              p_install_desc              IN     VARCHAR2,
              p_installment_period_type   IN     VARCHAR2,
              p_install_type              IN     VARCHAR2,
              p_grace_days                IN     NUMBER,
              p_created_modified_on       IN     DATE,
              p_created_modified_by       IN     VARCHAR2,
              p_active                    IN     VARCHAR2,
              p_insert_update             IN     VARCHAR2,
              v_out_result_code              OUT VARCHAR2,
              v_out_result_msg               OUT VARCHAR2*/

        var installmentPeriod={
            InstallmentPeriods:installmentPeriod.getValue(),
            InstallmentPeriodDesc:installmentPeriodDesc.getValue(),
            InstallmentPeriodType:installmentPeriodType.getValue(),
            InstallmentType:installmentType.getValue(),
            MaxGraceDays:maxGraceDays.getValue(),
            CreatedDate:'',
            CreatedBy:getCurrentUser(),
            Active:active.getValue()===true?'Y':'N',
            Action:action.getValue()
        };

        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updting....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Maintenance/GeneralDefinitions/InstallmentPeriodHandler.ashx',
                    params: {
                        method:'SaveInstallmentPeriod',
                        installmentPeriod:JSON.stringify(installmentPeriod)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdInstallmentPeriod')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit3: function(editor, e, eOpts) {

    },

    onBtnAddInstallmentPeriodClick: function(button, e, eOpts) {
        var store =Ext.getStore('InstallmentPeriodStore');
        var rec={
            InstallmentPeriods:'',
            InstallmentPeriodDesc:'',
            InstallmentPeriodType:'',
            InstallmentType:'',
            MaxGraceDays:'',
            CreatedDate:'',
            CreatedBy:'',
            Active:'',
            Action:'I'
        };
        store.add(rec);


    },

    onTabClick4: function(button, e, eOpts) {
        var store=Ext.getStore('LoanPeriodStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Maintenance/GeneralDefinitions/LoanPeriodHandler.ashx',
            params: {
                method:'GetLoanPeriod'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onBtnLoanPeriodClick: function(button, e, eOpts) {
        var store =Ext.getStore('LoanPeriodStore');

        /*public string LoanPeriods { get; set; }
                public string LoanPeriodDesc { get; set; }
                public string LoanPeriodType { get; set; }
                public string LoanPeriodTypeDet { get; set; }
                public string Active { get; set; }*/
        var rec={
            LoanPeriods:'',
            LoanPeriodDesc:'',
            LoanPeriodType:'',
            LoanPeriodTypeDet:'',
            CreatedDate:'',
            CreatedBy:'',
            Active:'',
            Action:'I'
        };
        store.add(rec);
    },

    onRowEditingValidateedit6: function(editor, e, eOpts) {
        var errMsg='';
        var loanPeriods=Ext.ComponentQuery.query('#txtLoanPeriod')[0];
        var loanPeriodDesc=Ext.ComponentQuery.query('#txtLoanPeriodDesc')[0];
        var loanPeriodType=Ext.ComponentQuery.query('#txtPeriodType')[0];
        var active=Ext.ComponentQuery.query('#chkActive')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];


        /*if(narrationCode.getValue()===null ||narrationCode.getValue()==="")
            {
                errMsg+="Please,Enter Narration Code";
            }
        if(narrationDesc.getValue()===null ||narrationDesc.getValue()==="")
            {
                errMsg+="Please,Enter Narration Description";
            }
        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }*/
        /*
        p_install_period            IN     NUMBER,
              p_install_desc              IN     VARCHAR2,
              p_installment_period_type   IN     VARCHAR2,
              p_install_type              IN     VARCHAR2,
              p_grace_days                IN     NUMBER,
              p_created_modified_on       IN     DATE,
              p_created_modified_by       IN     VARCHAR2,
              p_active                    IN     VARCHAR2,
              p_insert_update             IN     VARCHAR2,
              v_out_result_code              OUT VARCHAR2,
              v_out_result_msg               OUT VARCHAR2*/


        var loanPeriod={
            LoanPeriods:loanPeriods.getValue(),
            LoanPeriodDesc:loanPeriodDesc.getValue(),
            LoanPeriodType:loanPeriodType.getValue(),
            //LoanPeriodTypeDet:loanPeriodTypeDet.getValue(),
            CreatedDate:'A',
            CreatedBy:getCurrentUser(),
            Active:active.getValue()===true?'Y':'N',
            Action:'I'
        };

        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updting....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Maintenance/GeneralDefinitions/LoanPeriodHandler.ashx',
                    params: {
                        method:'SaveLoanPeriod',
                        loanPeriod:JSON.stringify(loanPeriod)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdLoanPeriod')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit6: function(editor, e, eOpts) {

    },

    onTabClick5: function(button, e, eOpts) {
        var store=Ext.getStore('LoanInstallmentPeriodMapStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Maintenance/GeneralDefinitions/LoanInstallmentPeriodMapHandler.ashx',
            params: {
                method:'GetLoanInstallmentPeriodMap'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onRowEditingValidateedit4: function(editor, e, eOpts) {
        var errMsg='';
        var installmentPeriod=Ext.ComponentQuery.query('#txtInstallmentPeriod')[0];
        var installmentPeriodType=Ext.ComponentQuery.query('#txtInstallmentType')[0];
        //var installmentPeriodTypeDet=Ext.ComponentQuery.query('#txtNarrationCode')[0];
        var loanPeriod=Ext.ComponentQuery.query('#txtLoanPeriod')[0];
        var loanPeriodType=Ext.ComponentQuery.query('#txtLoanPeriodType')[0];
        //var loanPeriodTypeDet=Ext.ComponentQuery.query('#txtNarrationDesc')[0];
        var noOfInstallment=Ext.ComponentQuery.query('#txtNoOfInstallment')[0];
        var active=Ext.ComponentQuery.query('#chkActive')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];


        var loanInstallmentPeriodMap={InstallmentPeriod:installmentPeriod.getValue(),
                         InstallmentPeriodType:installmentPeriodType.getValue(),
                         //InstallmentPeriodTypeDet:'',
                         LoanPeriod:loanPeriod.getValue(),
                         LoanPeriodType:loanPeriodType.getValue(),
                         //LoanPeriodTypeDet:'',
                         NoOfInstallment:noOfInstallment.getValue(),
                         Active:active.getValue()===true?'Y':'N',
                         CreatedDate:'',
                         CreatedBy:'',
                         Action:'I'
                        };

        /*if(narrationCode.getValue()===null ||narrationCode.getValue()==="")
            {
                errMsg+="Please,Enter Narration Code";
            }
        if(narrationDesc.getValue()===null ||narrationDesc.getValue()==="")
            {
                errMsg+="Please,Enter Narration Description";
            }
        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }*/


        /*var loanInstallmentPeriodMap={
            NarrationCode:narrationCode.getValue(),
            NarrationDesc:narrationDesc.getValue(),
            Action:action.getValue()
        };*/

        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updting....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Maintenance/GeneralDefinitions/LoanInstallmentPeriodMapHandler.ashx',
                    params: {
                        method:'SaveLoanInstallmentPeriodMap',
                        loanInstallmentPeriodMap:JSON.stringify(loanInstallmentPeriodMap)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdLoanInstallmentPeriodMap')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit4: function(editor, e, eOpts) {

    },

    onBtnLoanInstallmentPeriodMapClick: function(button, e, eOpts) {
        var store =Ext.getStore('LoanInstallmentPeriodMapStore');
        /*
        public string InstallmentPeriod { get; set; }
                public string InstallmentPeriodType { get; set; }
                public string InstallmentPeriodTypeDet { get; set; }
                public string LoanPeriod { get; set; }
                public string LoanPeriodType { get; set; }
                public string LoanPeriodTypeDet { get; set; }
                public Int16 NoOfInstallment { get; set; }
                public string Active { get; set; }*/
                var rec={InstallmentPeriod:'',
                         InstallmentPeriodType:'',
                         InstallmentPeriodTypeDet:'',
                         LoanPeriod:'',
                         LoanPeriodType:'',
                         LoanPeriodTypeDet:'',
                         NoOfInstallment:'',
                         Action:'I'
                        };
        store.add(rec);
    },

    onTabClick6: function(button, e, eOpts) {
        var store=Ext.getStore('LoanPeriodProductMapStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Maintenance/GeneralDefinitions/LoanProductPeriodMapHandler.ashx',
            params: {
                method:'GetLoanProductPeriodMap'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onRowEditingValidateedit5: function(editor, e, eOpts) {
        var errMsg='';
        var loanPeriod=Ext.ComponentQuery.query('#txtLoanPeriod')[0];
        var loanPeriodType=Ext.ComponentQuery.query('#txtLoanPeriodType')[0];
        var productCode=Ext.ComponentQuery.query('#txtProductCode')[0];
        var loanProductCode=Ext.ComponentQuery.query('#txtLoanProductCode')[0];
        var description=Ext.ComponentQuery.query('#txtDescription')[0];
        var displaySeq=Ext.ComponentQuery.query('#txtDisplaySeq')[0];
        var active=Ext.ComponentQuery.query('#chkActive')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];

        /*if(narrationCode.getValue()===null ||narrationCode.getValue()==="")
            {
                errMsg+="Please,Enter Narration Code";
            }
        if(narrationDesc.getValue()===null ||narrationDesc.getValue()==="")
            {
                errMsg+="Please,Enter Narration Description";
            }
        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }*/



        var loanProductPeriodMap={
            LoanPeriod:loanPeriod.getValue(),
            LoanPeriodType:loanPeriodType.getValue(),
           // LoanPeriodTypeDet:productCode.getValue(),
            LoanProductCode:productCode.getValue(),
            Description:description.getValue(),
            DisplaySequence:displaySeq.getValue(),
            Active:active.getValue()===true?'Y':'N',
            CreatedDate:'',
            CreatedBy:'',
            Action:action.getValue()
        };

        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updting....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Maintenance/GeneralDefinitions/LoanProductPeriodMapHandler.ashx',
                    params: {
                        method:'SaveLoanProductPeriodMap',
                        loanProductPeriodMap:JSON.stringify(loanProductPeriodMap)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdLoanPeriodProductMap')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit5: function(editor, e, eOpts) {

    },

    onBtnLoanPeriodProductMapClick: function(button, e, eOpts) {
        var store =Ext.getStore('LoanPeriodProductMapStore');
        /*
        public string LoanPeriod { get; set; }
                public string LoanPeriodType { get; set; }
                public string LoanPeriodTypeDet { get; set; }
                public string LoanProductCode { get; set; }
                public string Description { get; set; }
                public Int16 DisplaySeq { get; set; }
                public string Active { get; set; }*/
        var rec={LoanPeriod:'',
                        LoanPeriodType:'',
                 LoanPeriodTypeDet:'',
                        LoanProductCode:'',
                 Description:'',
                        DisplaySeq:'',
                 Active:'',
                        Action:'I'};
        store.add(rec);
    }

});