/*
 * File: app/controller/EstimateReturnRevisionNotice.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.EstimateReturnRevisionNotice', {
    extend: 'Ext.app.Controller',

    stores: [
        'RevisionNoticeEstRetType',
        'Est_Ret_VoucherList',
        'EstPaymentMode',
        'OfficeBankInfo',
        'FiscalYear',
        'RevenueAccountAnx10'
    ],

    onEst_Ret_SaveRNClick: function(button, e, eOpts) {
        this.SaveEstimatedReturn("I"); 
    },

    onEst_Ret_EditRNClick: function(button, e, eOpts) {

        var txtEst_Ret_Submission_No = Ext.ComponentQuery.query('#txtEst_Ret_SUBMISSION_NORN')[0];
        txtEst_Ret_Submission_No.setDisabled(false);
        var hdnEstAction = Ext.ComponentQuery.query('#hdnEst_Ret_ActionRN')[0];
        var hdnlblEstimateReturnAction = Ext.ComponentQuery.query('#hdnlblEstimateReturnActionRN')[0];

        txtEst_Ret_Submission_No.focus();
        hdnEstAction.setValue("E");
        hdnlblEstimateReturnAction.setValue(" Updating  ... कृपया सब्मिशन नं. भर्नुहोस ");

    },

    onEst_Ret_DeleteRNClick: function(button, e, eOpts) {
        var me = this;

        var txtEst_Ret_Submission_No = Ext.ComponentQuery.query('#txtEst_Ret_SUBMISSION_NORN')[0];
        txtEst_Ret_Submission_No.setDisabled(false);
        txtEst_Ret_Submission_No.focus();

        var hdnEstAction = Ext.ComponentQuery.query('#hdnEst_Ret_ActionRN')[0];
        var hdnlblEstimateReturnAction = Ext.ComponentQuery.query('#hdnlblEstimateReturnActionRN')[0];
        hdnEstAction.setValue("D");
        hdnlblEstimateReturnAction.setValue("Deleting ... कृपया सब्मिशन नं. भर्नुहोस् ");
    },

    onEst_Ret_submitRNClick: function(button, e, eOpts) {

        var me = this;
        var loadMsg = "";
        var count = 0;
        var errorMsg = "";


        //var frmEstimatedReturn = Ext.ComponentQuery.query('#frm_EstimatedReturn')[0].getForm();
        var form = button.up('form').getForm();
        var action = Ext.ComponentQuery.query('#hdnEst_Ret_ActionRN')[0].getValue();


        var dispEst_Ret_submissionNo = Ext.ComponentQuery.query('#dispEst_Ret_submissionNoRN')[0].getValue();



        var txtEst_Ret_PanNo =  Ext.ComponentQuery.query('#txtEst_Ret_PanNoRN')[0].getValue();
        var txtEst_Ret_AccType = Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0].getValue();
        var ddlEst_Ret_ReturnType = Ext.ComponentQuery.query('#ddlEst_Ret_ReturnTypeRN')[0].getValue();
        var ddlEstFysicalYear = Ext.ComponentQuery.query('#ddlEstFysicalYearRN')[0].getValue();


        if(ddlEst_Ret_ReturnType === null )
        {

            count++;
            errorMsg = errorMsg + '<br/>'+ count + ") कृपया अनुमानित करको प्रकार छान्नुहोस् !!!";

        }

        if(txtEst_Ret_PanNo === "")
        {

            count++;
            errorMsg = errorMsg + '<br/>'+ count + ") कृपया स्था . ले . नं . भर्नुहोस् !!!";

        }

        if(txtEst_Ret_AccType === "")
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ")कृपया खाताको किसिम  भर्नुहोस् !!!";

        }

        if(ddlEstFysicalYear === null )
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ")कृपया आय बर्ष छान्नुहोस् !!! ";

        }

        if(count >0)
        {
            msg("WARNING",errorMsg);
            return false;
        }





        if(action === "D")
        {

            //------------------------------------------------------
            // NB: Posting Data to Server
            //------------------------------------------------------

            Ext.Ajax.request({
                url:"../Handlers/IncomeTax/EstimatesReturn/EstimateReturnsHandlers1.ashx?method=DeleteEstimateReturn" ,
                params:{submissionNumber:Ext.ComponentQuery.query('#dispEst_Ret_submissionNoRN')[0].getValue()
                },
                success: function ( result, request ) {

                    var obj = Ext.decode(result.responseText);

                    msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);

                    if(obj.success === "false") return;


                    me.ClearEstimatedReturn();



                },
                failure: function ( result, request ) {

                    var obj = Ext.decode(result.responseText);

                    msg("FAILURE",obj.message);
                    return;
                }

            });


        }

        else
        {
            Ext.Msg.confirm('Confirm Action', 'एकपटक Submit गरिसकेपछि अर्को पटक विवरण फेरि परिवर्तन गर्न पइने छैन। \n के तपाई Submit गर्न चाहनुहन्छ ?', function(btn) {
                if(btn == 'yes'){


                    me.SaveEstimatedReturn("F");

                    return true;
                }
            }, this);


        }

    },

    onEst_Ret_CancelRNClick: function(button, e, eOpts) {
        this.ClearEstimatedReturn();
    },

    onEst_Ret_AddVoucherRNClick: function(button, e, eOpts) {
        var hdnEst_Ret_Office_Code = Ext.ComponentQuery.query('#hdnEst_Ret_Office_CodeRN')[0].getValue();
        var txtEst_Ret_PanNo =  Ext.ComponentQuery.query('#txtEst_Ret_PanNoRN')[0].getValue();
        var txtEst_Ret_AccType = Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0].getValue();

        var ddlEstFysicalYear = Ext.ComponentQuery.query('#ddlEstFysicalYearRN')[0].getValue();
        var ddlEst_Ret_ReturnType = Ext.ComponentQuery.query('#ddlEst_Ret_ReturnTypeRN')[0].getValue();


        var count = 0;
        var errorMsg = "";

        if(ddlEst_Ret_ReturnType === null || ddlEst_Ret_ReturnType === "")
        {

            count++;
            errorMsg = errorMsg + '<br/>'+ count + ") कृपया अनुमानित करको प्रकार छान्नुहोस् !!!";

        }



        if(txtEst_Ret_PanNo === "")
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया स्था . ले . नं . भर्नुहोस् !!!";

        }

        if(txtEst_Ret_AccType === "" || txtEst_Ret_AccType === null)
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया खाताको किसिम  भर्नुहोस् !!!";

        }

        if(ddlEstFysicalYear === null || ddlEstFysicalYear === "")
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया आय बर्ष छान्नुहोस् !!! ";

        }

        if(count >0)
        {
            msg("WARNING",errorMsg);
            return false;
        }


        var VoucherStore = Ext.getStore('Est_Ret_VoucherList');

        var ddlEst_Ret_Treasure_Acct_No = Ext.ComponentQuery.query('#ddlEst_Ret_Treasure_Acct_NoRN')[0];
        var ddlEst_Ret_Payment_mode = Ext.ComponentQuery.query('#ddlEst_Ret_Payment_modeRN')[0];
        var txtEst_Ret_Voucher_No = Ext.ComponentQuery.query('#txtEst_Ret_Voucher_NoRN')[0];
        var ddlEst_Ret_Bank_Code = Ext.ComponentQuery.query('#ddlEst_Ret_Bank_CodeRN')[0];
        var txtEst_Ret_Entered_Date = Ext.ComponentQuery.query('#txtEst_Ret_Entered_DateRN')[0];
        var txtEst_Ret_Amount = Ext.ComponentQuery.query('#txtEst_Ret_AmountRN')[0];

        var grd = Ext.ComponentQuery.query('#Est_Ret_VoucherListRN')[0];

        var rec={
            Sno:null,
            TreasureAcctNo:'',
            PaymentMode:'',
            VoucherNo:'',
            PaymentDate:'',
            Amount:null,
            EnteredBy:''

        };

        if(grd.store.add(rec))
        {
            var btnAddAddVoucher= Ext.ComponentQuery.query('#Est_Ret_AddVoucherRN')[0];
            btnAddAddVoucher.disable(true);
        }


        var col = grd.headerCt.getHeaderAtIndex(0);
        var recd = grd.store.data.items;
        var record = recd[recd.length-1];
        grd.getPlugin('Est_Ret_RowEdtPlgnRN').startEdit(record, col);



    },

    onEst_Ret_VoucherListRNBeforeRender: function(component, eOpts) {
        var grid = Ext.ComponentQuery.query('#Est_Ret_VoucherListRN')[0];

        grid.columns[1].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";    

            var items = Ext.getStore('RevenueAccountAnx10').data.items;

            for(var i=0;i<items.length;i++)
            {        
                if(items[i].data.AccountCode == value)
                {           
                    temp=items[i].data.RevActWithCode;
                    break;
                }        
            }

            return temp;   


        };


        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";    

            var items = Ext.getStore('EstPaymentMode').data.items;

            for(var i=0;i<items.length;i++)
            {        
                if(items[i].data.EstPaymentModeID == value)
                {           
                    temp=items[i].data.EstPaymentModeName;
                    break;
                }        
            }

            return temp;



        };
        grid.columns[4].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";    

            var items = Ext.getStore('OfficeBankInfo').data.items;



            for(var i=0;i<items.length;i++)
            {        
                if(items[i].data.BankBr == value)
                {           
                    temp=items[i].data.BankName;
                    break;
                }        
            }

            return temp;

        };



    },

    onTxtEst_Ret_PanNoRNKeypress: function(textfield, e, eOpts) {
        if(e.keyCode === 13 || e.keyCode === 9)
        {

            this.PanCurrentOfficeTaxpayerInfo();


        }

    },

    onEst_Ret_VoucherListRNAfterRender: function(component, eOpts) {

        Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0].setValue('10');

        var offCode = Ext.get('offCode').dom.innerHTML;

        Ext.ComponentQuery.query('#EstLoginOffcodeRN')[0].setValue(offCode);


        Ext.Ajax.request({
            url: '../HANDLERS/Common/OfficeBankInfoHandler.ashx?method=GetOfficeBankInfo',
            params:{officeCode:offCode},
            success: function ( result, request ) {

                var data = Ext.decode(result.responseText); 
                // combo.store.loadData(data.root);        
                Ext.getStore('OfficeBankInfo').loadData(data.root);

            },
            failure: function ( result, request ) {
                Ext.Msg.show({
                    title: 'Failure',
                    msg: 'ERROR OCURRED !!!' ,
                    buttons: Ext.MessageBox.OK,
                    icon:Ext.Msg.ERROR
                });
            }

        });




        var grd = Ext.ComponentQuery.query('#Est_Ret_VoucherListRN')[0];

        grd.getStore().loadData([],false);

        grd.on('beforeedit', function(editor,e) {
            var valid=true;

        });


        grd.on('validateedit', function(editor, e) {



        });

        grd.getPlugin('Est_Ret_RowEdtPlgnRN').on('canceledit',function(e){    



        });

    },

    onTxtEst_Ret_SUBMISSION_NORNKeypress: function(textfield, e, eOpts) {
        var me=this;
        var uiConfig='';

        var menuLink;
        var pageTitle;
        Ext.getStore('Est_Ret_VoucherList').loadData([],false);

        var objParam = Ext.ComponentQuery.query('#pnlEstimateReturnRevisionNotice')[0];

        if(e.keyCode === 13 || e.keyCode === 9)
        {
            Ext.getStore('Est_Ret_VoucherList').loadData([],false);

            var submissionNo = Ext.ComponentQuery.query('#txtEst_Ret_SUBMISSION_NORN')[0].getValue();

            Ext.ComponentQuery.query('#dispEst_Ret_submissionNoRN')[0].setValue(submissionNo);


            Ext.Ajax.request({
                url: '../Handlers/IncomeTax/EstimatesReturn/EstimateReturnsHandlers1.ashx',
                params: {
                    method:'GetEstimateReturn',submissionNumber:submissionNo,
                    id: 1
                },
                success: function(response){
                    var obj =Ext.decode( response.responseText);

                    var Est_Ret_Save = Ext.ComponentQuery.query("#Est_Ret_SaveRN")[0];
                    var Est_Ret_submit = Ext.ComponentQuery.query("#Est_Ret_submitRN")[0];
                    var Est_Ret_Delete = Ext.ComponentQuery.query("#Est_Ret_DeleteRN")[0];
                    var Est_Ret_AddVoucherRN = Ext.ComponentQuery.query("#Est_Ret_AddVoucherRN")[0];

                    if(obj.success === "false")
                    {   

                        if(obj.message === "D") 
                        {
                            Est_Ret_Delete.setDisabled(true);
                            Est_Ret_Save.setDisabled(true);
                            Est_Ret_submit.setDisabled(true);
                            Est_Ret_AddVoucherRN.setDisabled(true);
                            //me.ReadOnlyControl();
                            me.ReadOnlyControlByPanel(objParam);
                            msg("WARNING","This Record is already Deleted");
                            return;            
                        }
                        else if(obj.message === "V")
                        {
                            Est_Ret_Delete.setDisabled(true);
                            Est_Ret_Save.setDisabled(true);
                            Est_Ret_submit.setDisabled(true);
                            Est_Ret_AddVoucherRN.setDisabled(true);
                            // me.ReadOnlyControl();
                            me.ReadOnlyControlByPanel(objParam);

                            Ext.Msg.confirm('Confirm Action', 'This Record is already Verified . Do you want to PRINT ?', function(btn) {
                                if(btn == 'yes'){
                                    me.print(submissionNo,obj.root.PAN,'10');
                                }
                            }, this);


                            return; 


                        }
                        else
                        {
                            msg("WARNING",obj.message);
                            return;
                        }
                    }



                    var estReturn=obj.root;
                    var taxpayer=estReturn.Taxpayer;
                    var office=taxpayer.Office;
                    var address=taxpayer.BusinessAddress.Address;

                    var strRevenueAc = Ext.getStore("RevenueAccountAnx10");




                    Ext.ComponentQuery.query('#txtEst_Ret_PanNoRN')[0].setValue(obj.root.PAN);
                    Ext.ComponentQuery.query('#txtEst_Ret_PanNoRN')[0].setReadOnly(true);
                    Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0].setValue(taxpayer.acctType);
                    //SET TAXPAYER'S INFO
                    Ext.ComponentQuery.query('#hdnEst_Ret_Office_CodeRN')[0].setValue(office.OfficeCode);
                    Ext.ComponentQuery.query('#Est_Ret_IRONameRN')[0].setValue(office.OfficeNameNepali);
                    Ext.ComponentQuery.query('#txtEst_Ret_NameRN')[0].setValue(taxpayer.Name);


                    Ext.ComponentQuery.query('#txtEst_Ret_HouseNoRN')[0].setValue(address.HouseNo);
                    Ext.ComponentQuery.query('#txtEst_Ret_WardNoRN')[0].setValue(address.WardNo);
                    Ext.ComponentQuery.query('#txtEst_Ret_ToleNameRN')[0].setValue(address.StreetName);

                    if(address.LocationType=='MM')
                    {
                        Ext.ComponentQuery.query('#rdl_Est_Metro_MunRN')[0].setValue(true);
                        Ext.ComponentQuery.query('#rdl_Est_Metro_MunRN')[0].setReadOnly(true);
                    }
                    else if(address.LocationType === 'SM')
                    {
                        Ext.ComponentQuery.query('#rdl_Est_Sub_Metro_MunRN')[0].setValue(true);
                        Ext.ComponentQuery.query('#rdl_Est_Sub_Metro_MunRN')[0].setReadOnly(true);
                    }
                    else if(address.LocationType === 'MN')
                    {
                        Ext.ComponentQuery.query('#rdl_Est_MunRN')[0].setValue(true);
                        Ext.ComponentQuery.query('#rdl_Est_MunRN')[0].setReadOnly(true);
                    }
                    else if(address.LocationType === 'VD')
                    {
                        Ext.ComponentQuery.query('#rdl_Est_VDCRN')[0].setValue(true);
                        Ext.ComponentQuery.query('#rdl_Est_VDCRN')[0].setReadOnly(true);
                    }

                    Ext.ComponentQuery.query('#txtEst_Ret_VDCNameRN')[0].setValue(address.VdcTown);
                    Ext.ComponentQuery.query('#txtEst_Ret_DistrictNameRN')[0].setValue(address.DistrictNameNep);
                    Ext.ComponentQuery.query('#txtEst_Ret_PhoneRN')[0].setValue(address.Telephone);
                    //Ext.ComponentQuery.query('#txtEst_Ret_Mobile')[0].setValue(true);
                    Ext.ComponentQuery.query('#txtEst_Ret_EmailRN')[0].setValue(address.Email);
                    if(taxpayer.AcctStatus==='A')
                    Ext.ComponentQuery.query('#Est_Ret_TpOfficeTypeRN')[0].setValue('सक्रिय');


                    //Load Estimate Return
                    Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0].setValue(estReturn.AccType);
                    Ext.ComponentQuery.query('#ddlEst_Ret_ReturnTypeRN')[0].setValue(estReturn.EstimateType);
                    Ext.ComponentQuery.query('#ddlEst_Ret_ReturnTypeRN')[0].setReadOnly(true);

                    Ext.ComponentQuery.query('#ddlEstFysicalYearRN')[0].setValue(estReturn.FiscalYear);
                    Ext.ComponentQuery.query('#ddlEstFysicalYearRN')[0].setReadOnly(true);

                    Ext.ComponentQuery.query('#txtEst_Ret_IncomeRN')[0].setValue(estReturn.EstIncome);
                    Ext.ComponentQuery.query('#txtEst_Ret_DeductionsRN')[0].setValue(estReturn.EstDeductions);
                    Ext.ComponentQuery.query('#txtEst_Ret_Exempt_AmountRN')[0].setValue(estReturn.EstExemptAmount);
                    Ext.ComponentQuery.query('#txtEst_Ret_Assessable_IncomeRN')[0].setValue(estReturn.EstAssessableIncome);
                    Ext.ComponentQuery.query('#txtEst_Ret_Income_Oth_Bus_InvRN')[0].setValue(estReturn.EstIncomeOthBusInv);
                    Ext.ComponentQuery.query('#txtEst_Ret_Total_Assessable_IncomeRN')[0].setValue(estReturn.EstTtotalAssessableIncome);
                    Ext.ComponentQuery.query('#txtEst_Ret_Donation_To_Exempt_OrgRN')[0].setValue(estReturn.DonationToExemptOrg);
                    Ext.ComponentQuery.query('#txtEst_Ret_Retirement_ContributionRN')[0].setValue(estReturn.EstRetirementContribution);
                    Ext.ComponentQuery.query('#txtEst_Ret_Taxable_IncomeRN')[0].setValue(estReturn.EstTaxableIncome);
                    Ext.ComponentQuery.query('#txtEst_Ret_Tax_LiabilityRN')[0].setValue(estReturn.EstTaxLiability);
                    Ext.ComponentQuery.query('#txtEst_Ret_TDS_Paid_AmtRN')[0].setValue(estReturn.EstTdsPaidAmt);
                    Ext.ComponentQuery.query('#txtEst_Ret_Inst_Paid_AmtRN')[0].setValue(estReturn.EstInstPaidAmt);

                    Ext.ComponentQuery.query('#txtEst_Ret_Foreign_TaxRN')[0].setValue(estReturn.EstForeignTax);
                    Ext.ComponentQuery.query('#txtEst_Ret_Income_Sent_AbroadRN')[0].setValue(estReturn.EstIncomeSentAbroad);
                    Ext.ComponentQuery.query('#txtEst_Ret_Tax_OnIncome_Sent_AbraodRN')[0].setValue(estReturn.EstTaxOnIncomeSentAbraod);

                    Ext.ComponentQuery.query('#hdnEstFilingDateRN')[0].setValue(estReturn.FilingDate);

                    Ext.ComponentQuery.query('#hdnEstimateReturnTranNoRN')[0].setValue(estReturn.TranNo);


                    var grd = Ext.ComponentQuery.query('#Est_Ret_VoucherListRN')[0];
                    var store  = Ext.getStore('Est_Ret_VoucherList');

                    if(taxpayer.TaxpayerCategoryId === "B")
                    {

                        strRevenueAc.load(
                        {

                            params:{acctType:"I",impOn:"SAD03"},
                            scope:this,
                            callback: function(records, operation, success){
                                if(success){                     

                                    store.add(estReturn.VoucherTbs); 
                                    grd.bindStore(store);   

                                }
                                else
                                {
                                    msg("WARNING","Error in loading Revenue Account !!!");
                                    return;
                                }
                            }
                        });
                    }
                    else
                    {


                        strRevenueAc.load(
                        {

                            params:{acctType:"I",impOn:"SAD01"},
                            scope:this,
                            callback: function(records, operation, success){
                                if(success){                     

                                    store.add(estReturn.VoucherTbs); 
                                    grd.bindStore(store);   

                                }
                                else
                                {
                                    msg("WARNING","Error in loading Revenue Account !!!");
                                    return;
                                }

                            }
                        });
                    }

                    console.log(store);


                    if(obj.message === "F" || estReturn.Status === "F")  
                    {


                        Ext.Msg.confirm('Confirm Action', 'This Record is already Finalized . Do you want to PRINT ?', function(btn) {
                            if(btn == 'yes'){
                                me.print(submissionNo,obj.root.PAN,'10');
                            }
                        }, this);


                        Est_Ret_Delete.setDisabled(true);
                        Est_Ret_Save.setDisabled(true);
                        Est_Ret_submit.setDisabled(true);
                        Est_Ret_AddVoucherRN.setDisabled(true);
                        //me.ReadOnlyControl();
                        me.ReadOnlyControlByPanel(objParam);


                        return;                
                    }




                },
                failure: function ( result, request ) {
                    Ext.Msg.show({
                        title: 'Failure',
                        msg: 'ERROR OCURRED !!!' ,
                        buttons: Ext.MessageBox.OK,
                        icon:Ext.Msg.ERROR
                    });
                }
            });                    

        }

    },

    onTxtEst_Ret_PanNoRNBlur: function(component, e, eOpts) {
        this.PanCurrentOfficeTaxpayerInfo();
    },

    onTxtEst_Ret_IncomeRNBlur: function(component, e, eOpts) {
        var me = this;
        me.calProfitLoss();
    },

    onTxtEst_Ret_DeductionsRNBlur: function(component, e, eOpts) {
        var me = this;
        me.calProfitLoss();
    },

    onTxtEst_Ret_Exempt_AmountRNBlur: function(component, e, eOpts) {
        var me = this;
        me.calProfitLoss();
    },

    onTxtEst_Ret_Income_Oth_Bus_InvRNBlur: function(component, e, eOpts) {
        var row4= Ext.ComponentQuery.query('#txtEst_Ret_Assessable_IncomeRN')[0]; 
        var row5=field;
        var row6=Ext.ComponentQuery.query('#txtEst_Ret_Total_Assessable_IncomeRN')[0]; 
        var total="0.00";

        var val4 = getFloat(row4.getValue()); 
        var val5 = getFloat(row5.getValue()); 

        total = (val4 + val5);


        var arr =  String.split(total,'.');
        if(arr.length>1)
        {
            total   =  arr[0]+"."+arr[1].substring(0,2);
            if(arr[1].length==1)
            {
                total=total+"0";
            }
        }


        row6.setValue(total);
    },

    onTxtEst_Ret_Donation_To_Exempt_OrgRNBlur: function(component, e, eOpts) {

        var row6=Ext.ComponentQuery.query('#txtEst_Ret_Total_Assessable_IncomeRN')[0]; 
        var row7=field;
        var row8=Ext.ComponentQuery.query('#txtEst_Ret_Retirement_ContributionRN')[0]; 
        var row9=Ext.ComponentQuery.query('#txtEst_Ret_Taxable_IncomeRN')[0]; 
        var total="0.00";

        var val6 = getFloat(row6.getValue()); 
        var val7 = getFloat(row7.getValue());
        var val8 = getFloat(row8.getValue()); 

        total = (val6 -(val7 + val8));

        var arr =  String.split(total,'.');
        if(arr.length>1)
        {
            total   =  arr[0]+"."+arr[1].substring(0,2);
            if(arr[1].length==1)
            {
                total=total+"0";
            }
        }


        row9.setValue(total);

    },

    onTxtEst_Ret_Retirement_ContributionRNBlur: function(component, e, eOpts) {

        var row6=Ext.ComponentQuery.query('#txtEst_Ret_Total_Assessable_IncomeRN')[0];
        var row7=Ext.ComponentQuery.query('#txtEst_Ret_Donation_To_Exempt_OrgRN')[0]; 
        var row8=field; 
        var row9=Ext.ComponentQuery.query('#txtEst_Ret_Taxable_IncomeRN')[0]; 
        var total="0.00";


        var val6 = getFloat(row6.getValue()); 
        var val7 = getFloat(row7.getValue());
        var val8 = getFloat(row8.getValue());

        total = (val6 - (val7 + val8));

        var arr =  String.split(total,'.');
        if(arr.length>1)
        {
            total   =  arr[0]+"."+arr[1].substring(0,2);
            if(arr[1].length==1)
            {
                total=total+"0";
            }
        }


        row9.setValue(total);

    },

    onTxtEst_Ret_Total_Assessable_IncomeRNChange: function(field, newValue, oldValue, eOpts) {

        var row6=field;
        var row7=Ext.ComponentQuery.query('#txtEst_Ret_Donation_To_Exempt_OrgRN')[0]; 
        var row8=Ext.ComponentQuery.query('#txtEst_Ret_Retirement_ContributionRN')[0]; 
        var row9=Ext.ComponentQuery.query('#txtEst_Ret_Taxable_IncomeRN')[0]; 
        var total="0.00";

        var val6 = getFloat(row6.getValue()); 
        var val7 = getFloat(row7.getValue());
        var val8 = getFloat(row8.getValue());


        total =  (val6 - (val7 + val8))  ;

        var arr =  String.split(total,'.');
        if(arr.length>1)
        {
            total   =  arr[0]+"."+arr[1].substring(0,2);
            if(arr[1].length==1)
            {
                total=total+"0";
            }
        }



        row9.setValue(total);

    },

    onTxtEst_Ret_Assessable_IncomeRNChange: function(field, newValue, oldValue, eOpts) {
        var row4= field; 
        var row5=Ext.ComponentQuery.query('#txtEst_Ret_Income_Oth_Bus_InvRN')[0];
        var row6=Ext.ComponentQuery.query('#txtEst_Ret_Total_Assessable_IncomeRN')[0]; 
        var total="0.00";

        var val4 = getFloat(row4.getValue()); 
        var val5 = getFloat(row5.getValue());


        total =  (val4 + val5) ;

        var arr =  String.split(total,'.');
        if(arr.length>1)
        {
            total   =  arr[0]+"."+arr[1].substring(0,2);
            if(arr[1].length==1)
            {
                total=total+"0";
            }
        } 


        row6.setValue(total);
    },

    onEst_Ret_PrintRNClick: function(button, e, eOpts) {
        var me=this;
        var loadMsg = "";
        var count = 0;
        var errorMsg = "";



        var form = button.up('form').getForm();



        var submissionNo = Ext.ComponentQuery.query('#txtEst_Ret_SUBMISSION_NORN')[0].getValue();




        if(submissionNo === null || submissionNo === "")
        {

            count++;
            errorMsg = errorMsg + '<br/>'+ count + ") कृपया सब्मिशन नं भर्नुहोस्!!!";

        }




        if(count >0)
        {
            msg("WARNING",errorMsg);
            return false;
        }



        this.LaodEstimateReturnToPrint();
    },

    onPnlEstimateReturnRevisionNoticeAfterRender: function(component, eOpts) {

        var strRevAcct = Ext.getStore("RevenueAccountAnx10");
        Ext.getStore('Est_Ret_VoucherList').loadData([],false);
        var objParam = Ext.ComponentQuery.query('#pnlEstimateReturnRevisionNotice')[0];

        if(objParam.extraParam)
        {
            var param = objParam.extraParam.params;
            var tranNo = param.tranNo;
            this.LoadByTranNo(tranNo);
            this.ReadOnlyControlByPanel(objParam);
            return;
        }












    },

    onDdlEst_Ret_Payment_modeRNChange: function(field, newValue, oldValue, eOpts) {
        var ddlEst_Ret_Payment_modeRN = Ext.ComponentQuery.query('#ddlEst_Ret_Payment_modeRN')[0].getValue();

        var ddlEst_Ret_Bank_CodeRN = Ext.ComponentQuery.query('#ddlEst_Ret_Bank_CodeRN')[0];  


        if(ddlEst_Ret_Payment_modeRN === "CA")
        {




            ddlEst_Ret_Bank_CodeRN.setDisabled(true);
            ddlEst_Ret_Bank_CodeRN.setValue("");


        }
        else
        {

            ddlEst_Ret_Bank_CodeRN.setDisabled(false); 


        }
    },

    onDdlEstFysicalYearRNChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        var loadMsg = "";
        var count = 0;
        var errorMsg = "";


        var txtEst_Ret_PanNo =  Ext.ComponentQuery.query('#txtEst_Ret_PanNoRN')[0].getValue();
        var txtEst_Ret_AccType = Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0].getValue();
        var ddlEstFysicalYear = Ext.ComponentQuery.query('#ddlEstFysicalYearRN')[0].getValue();

        var ddlEst_Ret_ReturnType = Ext.ComponentQuery.query('#ddlEst_Ret_ReturnTypeRN')[0].getValue();

        if(ddlEst_Ret_ReturnType === null || ddlEst_Ret_ReturnType === "" )
        {

            count++;
            errorMsg = errorMsg + '<br/>'+ count + ") कृपया अनुमानित करको प्रकार छान्नुहोस् !!!";

        }

        if(txtEst_Ret_PanNo === "")
        {

            count++;
            errorMsg = errorMsg + '<br/>'+ count + ") कृपया स्था . ले . नं . भर्नुहोस् !!!";

        }

        if(txtEst_Ret_AccType === "" || txtEst_Ret_AccType === null)
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया खाताको किसिम  भर्नुहोस् !!!";

        }

        if(ddlEstFysicalYear === null || ddlEstFysicalYear === null )
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया आय बर्ष छान्नुहोस् !!! ";

        }

        if(count >0)
        {
            msg("WARNING",errorMsg);
            return false;
        }


        var ddlEstRetReturnType = "";


        if(ddlEst_Ret_ReturnType === 'IR' || ddlEst_Ret_ReturnType === 'RN' )
        {

            if(ddlEst_Ret_ReturnType === 'IR')
            {
                ddlEstRetReturnType = 'IN';
            }
            else
            {
                ddlEstRetReturnType = 'IR';
            }




            Ext.Ajax.request({
                url:"../Handlers/IncomeTax/EstimatesReturn/EstimateReturnsHandlers1.ashx?method=CheckForINEstimateReturn" ,
                params:{PAN:txtEst_Ret_PanNo,accType:txtEst_Ret_AccType,fiscalYear:ddlEstFysicalYear,estimateType:ddlEstRetReturnType
                },
                success: function ( result, request ) {

                    var obj = Ext.decode(result.responseText);

                    if(obj.message !== "OK")
                    {

                        msg(obj.success === "true" ?"WARNING":"FAILURE",obj.message,function(){field.focus();});
                        return;
                    }


                },
                failure: function ( result, request ) {

                    var obj = Ext.decode(result.responseText);

                    msg("FAILURE",obj.message);
                    return;
                }

            });
        }

    },

    SaveEstimatedReturn: function(Status) {
        var me = this;
        var loadMsg = "";
        var count = 0;
        var errorMsg = "";

        var txtEst_Ret_SUBMISSION_NO = Ext.ComponentQuery.query('#txtEst_Ret_SUBMISSION_NORN')[0].getValue(); // used at the time of manual  Editing

        var hdnEst_Ret_Office_Code = Ext.ComponentQuery.query('#hdnEst_Ret_Office_CodeRN')[0].getValue();

        var txtEst_Ret_PanNo =  Ext.ComponentQuery.query('#txtEst_Ret_PanNoRN')[0].getValue();
        var txtEst_Ret_AccType = Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0].getValue();
        var ddlEst_Ret_ReturnType = Ext.ComponentQuery.query('#ddlEst_Ret_ReturnTypeRN')[0].getValue();


        var ddlEstFysicalYear = Ext.ComponentQuery.query('#ddlEstFysicalYearRN')[0].getValue();


        if(ddlEst_Ret_ReturnType === null || ddlEst_Ret_ReturnType === "" )
        {

            count++;
            errorMsg = errorMsg + '<br/>'+ count + ") कृपया अनुमानित करको प्रकार छान्नुहोस् !!!";

        }

        if(txtEst_Ret_PanNo === "")
        {

            count++;
            errorMsg = errorMsg + '<br/>'+ count + ") कृपया स्था . ले . नं . भर्नुहोस् !!!";

        }

        if(txtEst_Ret_AccType === "" || txtEst_Ret_AccType === null)
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया खाताको किसिम  भर्नुहोस् !!!";

        }

        if(ddlEstFysicalYear === null || ddlEstFysicalYear === null )
        {

            count++;
            errorMsg = errorMsg +'<br/>'+ count + ") कृपया आय बर्ष छान्नुहोस् !!! ";

        }

        if(count >0)
        {
            msg("WARNING",errorMsg);
            return false;
        }











        //for second part
        var txtEst_Ret_Income = Ext.ComponentQuery.query('#txtEst_Ret_IncomeRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_IncomeRN')[0].getValue();
        var txtEst_Ret_Deductions = Ext.ComponentQuery.query('#txtEst_Ret_DeductionsRN')[0].getValue() === "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_DeductionsRN')[0].getValue();
        var txtEst_Ret_Exempt_Amount = Ext.ComponentQuery.query('#txtEst_Ret_Exempt_AmountRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_Exempt_AmountRN')[0].getValue();
        var txtEst_Ret_Assessable_Income = Ext.ComponentQuery.query('#txtEst_Ret_Assessable_IncomeRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_Assessable_IncomeRN')[0].getValue();
        var txtEst_Ret_Income_Oth_Bus_Inv = Ext.ComponentQuery.query('#txtEst_Ret_Income_Oth_Bus_InvRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_Income_Oth_Bus_InvRN')[0].getValue();
        var txtEst_Ret_Total_Assessable_Income = Ext.ComponentQuery.query('#txtEst_Ret_Total_Assessable_IncomeRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_Total_Assessable_IncomeRN')[0].getValue();
        var txtEst_Ret_Donation_To_Exempt_Org = Ext.ComponentQuery.query('#txtEst_Ret_Donation_To_Exempt_OrgRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_Donation_To_Exempt_OrgRN')[0].getValue();
        var txtEst_Ret_Retirement_Contribution = Ext.ComponentQuery.query('#txtEst_Ret_Retirement_ContributionRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_Retirement_ContributionRN')[0].getValue();
        var txtEst_Ret_Taxable_Income = Ext.ComponentQuery.query('#txtEst_Ret_Taxable_IncomeRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_Taxable_IncomeRN')[0].getValue();
        var txtEst_Ret_Tax_Liability = Ext.ComponentQuery.query('#txtEst_Ret_Tax_LiabilityRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_Tax_LiabilityRN')[0].getValue();
        var txtEst_Ret_TDS_Paid_Amt = Ext.ComponentQuery.query('#txtEst_Ret_TDS_Paid_AmtRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_TDS_Paid_AmtRN')[0].getValue();
        var txtEst_Ret_Inst_Paid_Amt = Ext.ComponentQuery.query('#txtEst_Ret_Inst_Paid_AmtRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_Inst_Paid_AmtRN')[0].getValue();

        // for 3rd part
        var txtEst_Ret_Foreign_Tax = Ext.ComponentQuery.query('#txtEst_Ret_Foreign_TaxRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_Foreign_TaxRN')[0].getValue();
        var txtEst_Ret_Income_Sent_Abroad = Ext.ComponentQuery.query('#txtEst_Ret_Income_Sent_AbroadRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_Income_Sent_AbroadRN')[0].getValue();
        var txtEst_Ret_Tax_OnIncome_Sent_Abraod = Ext.ComponentQuery.query('#txtEst_Ret_Tax_OnIncome_Sent_AbraodRN')[0].getValue()=== "" ?null:Ext.ComponentQuery.query('#txtEst_Ret_Tax_OnIncome_Sent_AbraodRN')[0].getValue();

        //for filing date
        //var hdnEstFilingDate =  Ext.ComponentQuery.query('#hdnEstFilingDate')[0].getValue();

        var action = Ext.ComponentQuery.query('#hdnEst_Ret_ActionRN')[0].getValue();

        var hdnEstimateReturnTranNo = Ext.ComponentQuery.query('#hdnEstimateReturnTranNoRN')[0].getValue();


        if(action == "E")
        {
            loadMsg = "Updating ...";
        }
        else
        {
            loadMsg = "Saving ...";
        }




        var strEst_Ret_VoucherList = Ext.getStore('Est_Ret_VoucherList');


        strEst_Ret_VoucherList.clearFilter();

        var voucherTbs = "";
        var estimateReturn = "";


        if(strEst_Ret_VoucherList.getCount() > 0)
        {
            voucherTbs = getJson(strEst_Ret_VoucherList); 

            strEst_Ret_VoucherList.filter(function(item){
                return item.get("Action")!= 'D';
            });
        }


        var SubmissionNo={
            SubmissionNumber:'',
            Username:'',
            Password:'',
            ContactNo:'',
            Emailid:'',
            submittedFor:'',
            SubmittedYN:'N',
            SubmittedDate:'',
            TranNo:'0',
            Address:'',
            RegOffice:'',
            Action:'A',
            PAN:txtEst_Ret_PanNo,
            FiscalYear:ddlEstFysicalYear
        };


        estimateReturn = { 
            SubmissionNumber:Ext.ComponentQuery.query('#dispEst_Ret_submissionNoRN')[0].getValue()!==null?Ext.ComponentQuery.query('#dispEst_Ret_submissionNoRN')[0].getValue():0,
            OfficeCode:Ext.ComponentQuery.query('#hdnEst_Ret_Office_CodeRN')[0].getValue(),
            PAN:txtEst_Ret_PanNo,     
            AccType:txtEst_Ret_AccType, 
            EstimateType:ddlEst_Ret_ReturnType, 
            FiscalYear:ddlEstFysicalYear,
            ReturnRegNo:txtEst_Ret_SUBMISSION_NO,  
            FilingDate:"",
            EstIncome:txtEst_Ret_Income !== ""?txtEst_Ret_Income:null, 
            EstDeductions:txtEst_Ret_Deductions !== ""?txtEst_Ret_Deductions:null, 
            EstExemptAmount:txtEst_Ret_Exempt_Amount !== ""?txtEst_Ret_Exempt_Amount:null,
            EstAssessableIncome:txtEst_Ret_Assessable_Income !== ""?txtEst_Ret_Assessable_Income:null,
            EstIncomeOthBusInv:txtEst_Ret_Income_Oth_Bus_Inv !== ""?txtEst_Ret_Income_Oth_Bus_Inv:null,
            EstTtotalAssessableIncome:txtEst_Ret_Total_Assessable_Income !== ""?txtEst_Ret_Total_Assessable_Income:null,
            DonationToExemptOrg:txtEst_Ret_Donation_To_Exempt_Org !== ""?txtEst_Ret_Donation_To_Exempt_Org:null,
            EstRetirementContribution:txtEst_Ret_Retirement_Contribution !== ""?txtEst_Ret_Retirement_Contribution:null,
            EstTaxableIncome:txtEst_Ret_Taxable_Income !== ""?txtEst_Ret_Taxable_Income:null,
            EstTaxLiability:txtEst_Ret_Tax_Liability !== ""?txtEst_Ret_Tax_Liability:null,
            EstTdsPaidAmt:txtEst_Ret_TDS_Paid_Amt !== ""?txtEst_Ret_TDS_Paid_Amt:null,   
            EstInstPaidAmt:txtEst_Ret_Inst_Paid_Amt !== ""?txtEst_Ret_Inst_Paid_Amt:null,
            EstForeignTax:txtEst_Ret_Foreign_Tax !== ""?txtEst_Ret_Foreign_Tax:null,
            EstIncomeSentAbroad:txtEst_Ret_Income_Sent_Abroad!== ""?txtEst_Ret_Income_Sent_Abroad:null,
            EstTaxOnIncomeSentAbraod:txtEst_Ret_Tax_OnIncome_Sent_Abraod!== ""?txtEst_Ret_Tax_OnIncome_Sent_Abraod:null,
            Status:Status,
            Trandate:"",
            TranNo:hdnEstimateReturnTranNo !== ""?hdnEstimateReturnTranNo:null,
            Action:action,
            ModuleID:'MESTRET',
            VoucherTbs:voucherTbs !== ""?voucherTbs:null,
            SubmissionNo:SubmissionNo


        };

        var waitSave = watiMsg(loadMsg);




        //------------------------------------------------------
        // NB: Posting Data to Server
        //------------------------------------------------------

        Ext.Ajax.request({
            url:"../Handlers/IncomeTax/EstimatesReturn/EstimateReturnsHandlers1.ashx?method=SaveEstimateReturn",
            params:{estimateReturns:JSON.stringify(estimateReturn)},
            success: function ( result, request ) {

                waitSave.hide();

                var obj = Ext.decode(result.responseText);
                /*
                if(obj.success == "false" && obj.message === "ErrorDuplicate data !")
                {
                msg("WARNING","Submission No is Already Exists !!!");
                return;
                }
                */
                msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);

                if(obj.success === "false") return;
                me.ClearEstimatedReturn();



            },
            failure: function ( result, request ) {

                waitSave.hide();

                var errMsg = "Error in " + loadMsg;

                msg("FAILURE",errMsg);
                return;
            }

        });

    },

    ClearEstimatedReturn: function() {

        var txtEst_Ret_Submission_No = Ext.ComponentQuery.query('#txtEst_Ret_SUBMISSION_NORN')[0];

        var hdnEst_Ret_Office_Code = Ext.ComponentQuery.query('#hdnEst_Ret_Office_CodeRN')[0];
        var txtEst_Ret_PanNo =  Ext.ComponentQuery.query('#txtEst_Ret_PanNoRN')[0];
        var txtEst_Ret_AccType = Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0];
        var ddlEst_Ret_ReturnType = Ext.ComponentQuery.query('#ddlEst_Ret_ReturnTypeRN')[0];

        var txtEst_Ret_Income = Ext.ComponentQuery.query('#txtEst_Ret_IncomeRN')[0];
        var txtEst_Ret_Deductions = Ext.ComponentQuery.query('#txtEst_Ret_DeductionsRN')[0];
        var txtEst_Ret_Exempt_Amount = Ext.ComponentQuery.query('#txtEst_Ret_Exempt_AmountRN')[0];
        var txtEst_Ret_Assessable_Income = Ext.ComponentQuery.query('#txtEst_Ret_Assessable_IncomeRN')[0];
        var txtEst_Ret_Income_Oth_Bus_Inv = Ext.ComponentQuery.query('#txtEst_Ret_Income_Oth_Bus_InvRN')[0];
        var txtEst_Ret_Total_Assessable_Income = Ext.ComponentQuery.query('#txtEst_Ret_Total_Assessable_IncomeRN')[0];
        var txtEst_Ret_Donation_To_Exempt_Org = Ext.ComponentQuery.query('#txtEst_Ret_Donation_To_Exempt_OrgRN')[0];
        var txtEst_Ret_Retirement_Contribution = Ext.ComponentQuery.query('#txtEst_Ret_Retirement_ContributionRN')[0];
        var txtEst_Ret_Taxable_Income = Ext.ComponentQuery.query('#txtEst_Ret_Taxable_IncomeRN')[0];
        var txtEst_Ret_Tax_Liability = Ext.ComponentQuery.query('#txtEst_Ret_Tax_LiabilityRN')[0];
        var txtEst_Ret_TDS_Paid_Amt = Ext.ComponentQuery.query('#txtEst_Ret_TDS_Paid_AmtRN')[0];
        var txtEst_Ret_Inst_Paid_Amt = Ext.ComponentQuery.query('#txtEst_Ret_Inst_Paid_AmtRN')[0];
        var txtEst_Ret_Foreign_Tax = Ext.ComponentQuery.query('#txtEst_Ret_Foreign_TaxRN')[0];
        var txtEst_Ret_Income_Sent_Abroad = Ext.ComponentQuery.query('#txtEst_Ret_Income_Sent_AbroadRN')[0];
        var txtEst_Ret_Tax_OnIncome_Sent_Abraod = Ext.ComponentQuery.query('#txtEst_Ret_Tax_OnIncome_Sent_AbraodRN')[0];
        var hdnEstFilingDate =  Ext.ComponentQuery.query('#hdnEstFilingDateRN')[0];

        var action = Ext.ComponentQuery.query('#hdnEst_Ret_ActionRN')[0];
        var hdnlblEstimateReturnAction = Ext.ComponentQuery.query('#hdnlblEstimateReturnActionRN')[0];
        var hdnEstimateReturnTranNo = Ext.ComponentQuery.query('#hdnEstimateReturnTranNoRN')[0];


        Ext.ComponentQuery.query('#ddlEstFysicalYearRN')[0].setValue("");

        // Taxpayer info clear

        Ext.ComponentQuery.query('#dispEst_Ret_submissionNoRN')[0].setValue("");
        Ext.ComponentQuery.query('#txtEst_Ret_PanNoRN')[0].setValue("");
        Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0].setValue("");
        Ext.ComponentQuery.query('#hdnEst_Ret_Office_CodeRN')[0].setValue("");
        Ext.ComponentQuery.query('#Est_Ret_IRONameRN')[0].setValue("");
        Ext.ComponentQuery.query('#txtEst_Ret_NameRN')[0].setValue("");
        Ext.ComponentQuery.query('#txtEst_Ret_HouseNoRN')[0].setValue("");
        Ext.ComponentQuery.query('#txtEst_Ret_WardNoRN')[0].setValue("");
        Ext.ComponentQuery.query('#txtEst_Ret_ToleNameRN')[0].setValue("");
        Ext.ComponentQuery.query('#rdl_Est_Metro_MunRN')[0].setValue(false);
        Ext.ComponentQuery.query('#rdl_Est_Sub_Metro_MunRN')[0].setValue(false);
        Ext.ComponentQuery.query('#rdl_Est_MunRN')[0].setValue(false);
        Ext.ComponentQuery.query('#rdl_Est_VDCRN')[0].setValue(false);
        Ext.ComponentQuery.query('#txtEst_Ret_VDCNameRN')[0].setValue("");
        Ext.ComponentQuery.query('#txtEst_Ret_DistrictNameRN')[0].setValue("");
        Ext.ComponentQuery.query('#txtEst_Ret_PhoneRN')[0].setValue("");
        Ext.ComponentQuery.query('#txtEst_Ret_MobileRN')[0].setValue("");
        Ext.ComponentQuery.query('#txtEst_Ret_EmailRN')[0].setValue("");
        Ext.ComponentQuery.query('#Est_Ret_TpOfficeTypeRN')[0].setValue("");

        //txtEst_Ret_Submission_No.setValue("");


        //Estimate return Clear
        hdnEst_Ret_Office_Code.setValue("");
        txtEst_Ret_PanNo.setValue("");
        txtEst_Ret_PanNo.clearInvalid();
        txtEst_Ret_AccType.setValue("10");
        txtEst_Ret_AccType.clearInvalid();
        ddlEst_Ret_ReturnType.setValue("");
        ddlEst_Ret_ReturnType.clearInvalid();
        txtEst_Ret_Income.setValue("");
        txtEst_Ret_Deductions.setValue("");
        txtEst_Ret_Exempt_Amount.setValue("");
        txtEst_Ret_Assessable_Income.setValue("");
        txtEst_Ret_Income_Oth_Bus_Inv.setValue("");
        txtEst_Ret_Total_Assessable_Income.setValue("");
        txtEst_Ret_Donation_To_Exempt_Org.setValue("");
        txtEst_Ret_Retirement_Contribution.setValue("");
        txtEst_Ret_Taxable_Income.setValue("");
        txtEst_Ret_Tax_Liability.setValue("");
        txtEst_Ret_TDS_Paid_Amt.setValue("");
        txtEst_Ret_Inst_Paid_Amt.setValue("");
        txtEst_Ret_Foreign_Tax.setValue("");
        txtEst_Ret_Income_Sent_Abroad.setValue("");
        txtEst_Ret_Tax_OnIncome_Sent_Abraod.setValue("");
        hdnEstFilingDate.setValue("");
        hdnEstimateReturnTranNo.setValue("");
        action.setValue(""); 
        hdnlblEstimateReturnAction.setValue("");
        Ext.getStore('Est_Ret_VoucherList').loadData([],false);
        var Est_Ret_AddVoucherRN = Ext.ComponentQuery.query("#Est_Ret_AddVoucherRN")[0];
        var Est_Ret_Save = Ext.ComponentQuery.query("#Est_Ret_SaveRN")[0];
        var Est_Ret_submit = Ext.ComponentQuery.query("#Est_Ret_submitRN")[0];
        var Est_Ret_Delete = Ext.ComponentQuery.query("#Est_Ret_DeleteRN")[0];
        Est_Ret_Delete.setDisabled(false);
        Est_Ret_Save.setDisabled(false);
        Est_Ret_submit.setDisabled(false);
        Est_Ret_AddVoucherRN.setDisabled(false);

    },

    PanCurrentOfficeTaxpayerInfo: function() {
        var pan = Ext.ComponentQuery.query('#txtEst_Ret_PanNoRN')[0].getValue();
        var offCode = Ext.ComponentQuery.query('#EstLoginOffcodeRN')[0].getValue();
        var accType =  Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0].getValue();
        var ddlEstFysicalYear =  Ext.ComponentQuery.query('#ddlEstFysicalYearRN')[0];

        LoadTaxpayerInfoWithValidPan(pan,accType,function(data){
            var taxpayer=data.root.Taxpayer;
            var address=taxpayer.BusinessAddress.Address;
            var office=taxpayer.Office;
            if(taxpayer.AcctStatus === "D")
            {
                msg("WARNING","PAN is Deactivated !!!");
                return;
            }
            if(offCode != office.OfficeCode)
            {
                msg("WARNING","PAN is not Registered in this office !!!");

                return;
            }



            Ext.ComponentQuery.query('#hdnEst_Ret_Office_CodeRN')[0].setValue(office.OfficeCode);
            Ext.ComponentQuery.query('#Est_Ret_IRONameRN')[0].setValue(office.OfficeNameNepali);
            Ext.ComponentQuery.query('#Est_Ret_IRONameRN')[0].setReadOnly(true);

            Ext.ComponentQuery.query('#txtEst_Ret_NameRN')[0].setValue(taxpayer.Name);
            Ext.ComponentQuery.query('#txtEst_Ret_NameRN')[0].setReadOnly(true);



            Ext.ComponentQuery.query('#txtEst_Ret_HouseNoRN')[0].setValue(address.HouseNo);
            Ext.ComponentQuery.query('#txtEst_Ret_HouseNoRN')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtEst_Ret_WardNoRN')[0].setValue(address.WardNo);
            Ext.ComponentQuery.query('#txtEst_Ret_WardNoRN')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtEst_Ret_ToleNameRN')[0].setValue(address.StreetName);
            Ext.ComponentQuery.query('#txtEst_Ret_ToleNameRN')[0].setReadOnly(true);

            if(address.LocationType === 'MM')
            {
                Ext.ComponentQuery.query('#rdl_Est_Metro_MunRN')[0].setValue(true);
                Ext.ComponentQuery.query('#rdl_Est_Metro_MunRN')[0].setReadOnly(true);
            }
            else if(address.LocationType === 'SM')
            {
                Ext.ComponentQuery.query('#rdl_Est_Sub_Metro_MunRN')[0].setValue(true);
                Ext.ComponentQuery.query('#rdl_Est_Sub_Metro_MunRN')[0].setReadOnly(true);
            }
            else if(address.LocationType === 'MN')
            {
                Ext.ComponentQuery.query('#rdl_Est_Mun')[0].setValue(true);
                Ext.ComponentQuery.query('#rdl_Est_Mun')[0].setReadOnly(true);
            }
            else if(address.LocationType === 'VD')
            {
                Ext.ComponentQuery.query('#rdl_Est_VDCRN')[0].setValue(true);
                Ext.ComponentQuery.query('#rdl_Est_VDCRN')[0].setReadOnly(true);
            }

            Ext.ComponentQuery.query('#txtEst_Ret_VDCNameRN')[0].setValue(address.VdcTown);
            Ext.ComponentQuery.query('#txtEst_Ret_VDCNameRN')[0].setReadOnly(true);
            Ext.ComponentQuery.query('#txtEst_Ret_DistrictNameRN')[0].setValue(address.DistrictNameNep);
            Ext.ComponentQuery.query('#txtEst_Ret_DistrictNameRN')[0].setReadOnly(true);
            // Ext.ComponentQuery.query('#txtEst_Ret_Phone')[0].setValue(address.Phone); address.Telephone
            Ext.ComponentQuery.query('#txtEst_Ret_PhoneRN')[0].setValue(address.Telephone);
            Ext.ComponentQuery.query('#txtEst_Ret_PhoneRN')[0].setReadOnly(true);


            //Ext.ComponentQuery.query('#txtEst_Ret_Mobile')[0].setValue(true);
            Ext.ComponentQuery.query('#txtEst_Ret_EmailRN')[0].setValue(address.Email);
            Ext.ComponentQuery.query('#txtEst_Ret_EmailRN')[0].setReadOnly(true);

            if(taxpayer.AcctStatus === 'A')
            Ext.ComponentQuery.query('#Est_Ret_TpOfficeTypeRN')[0].setValue('सक्रिय');


            // for  RevenueAccount

            var strRevenueAc = Ext.getStore("RevenueAccountAnx10");
            if(taxpayer.TaxpayerCategoryId === "B")
            {

                strRevenueAc.load(
                {
                    params:{acctType:"I",impOn:"SAD03"}
                });
            }
            else
            {
                strRevenueAc.load(
                {
                    params:{acctType:"I",impOn:"SAD01"}
                });
            }



            Ext.Ajax.request({
                url: '../HANDLERS/Common/OfficeBankInfoHandler.ashx?method=GetOfficeBankInfo',
                params:{officeCode:office.OfficeCode},
                success: function ( result, request ) {

                    var data = Ext.decode(result.responseText); 
                    // combo.store.loadData(data.root);        
                    Ext.getStore('OfficeBankInfo').loadData(data.root);

                },
                failure: function ( result, request ) {
                    Ext.Msg.show({
                        title: 'Failure',
                        msg: 'ERROR OCURRED !!!' ,
                        buttons: Ext.MessageBox.OK,
                        icon:Ext.Msg.ERROR
                    });
                }

            });

        });

    },

    calProfitLoss: function() {
        var row1=Ext.ComponentQuery.query('#txtEst_Ret_IncomeRN')[0]; 
        var row2=Ext.ComponentQuery.query('#txtEst_Ret_DeductionsRN')[0]; 
        var row3=Ext.ComponentQuery.query('#txtEst_Ret_Exempt_AmountRN')[0]; 
        var row4=Ext.ComponentQuery.query('#txtEst_Ret_Assessable_IncomeRN')[0]; 
        var total= 0.00;

        var val1 = getFloat(row1.getValue()); 
        var val2 = getFloat(row2.getValue());  
        var val3 = getFloat(row3.getValue()); 

        //total = (Number(val1) - (Number(val2) + Number(val3)));

        total = val1 - (val2 + val3);


        var arr =  String.split(total,'.');

        if(arr.length>1)
        {
            total   =  arr[0]+"."+arr[1].substring(0,2);
            if(arr[1].length==1)
            {
                total=total+"0";
                console.debug("");
            }
        }


        row4.setValue(total);
    },

    print: function(SUBMISSION_NO,PAN,ACCTYPE) {
        var param = { 'SUBMISSION_NO':SUBMISSION_NO,'PAN':PAN,'ACCTYPE':ACCTYPE};
        var url="../../../Reporting/IncomeTax/ReportHandlers/EstimateReturnReportHandler.ashx";
        var winOption="width=730,height=345,left=100,top=100,resizable=yes,scrollbars=yes";

        OpenWindowWithPost(url,winOption,"NewFile", param);

    },

    LaodEstimateReturnToPrint: function() {
        var me=this;
        var uiConfig='';

        var menuLink;
        var pageTitle;
        var objParam = Ext.ComponentQuery.query('#pnlEstimateReturnRevisionNotice')[0];

        Ext.getStore('Est_Ret_VoucherList').loadData([],false);


        var submissionNo = Ext.ComponentQuery.query('#txtEst_Ret_SUBMISSION_NORN')[0].getValue();

        Ext.ComponentQuery.query('#dispEst_Ret_submissionNoRN')[0].setValue(submissionNo);


        Ext.Ajax.request({
            url: '../Handlers/IncomeTax/EstimatesReturn/EstimateReturnsHandlers1.ashx',
            params: {
                method:'GetEstimateReturn',submissionNumber:submissionNo,
                id: 1
            },
            success: function(response){
                var obj =Ext.decode( response.responseText);

                var Est_Ret_Save = Ext.ComponentQuery.query("#Est_Ret_SaveRN")[0];
                var Est_Ret_submit = Ext.ComponentQuery.query("#Est_Ret_submitRN")[0];
                var Est_Ret_Delete = Ext.ComponentQuery.query("#Est_Ret_DeleteRN")[0];
                var Est_Ret_AddVoucherRN = Ext.ComponentQuery.query("#Est_Ret_AddVoucherRN")[0];


                if(obj.success === "false")
                {   

                    if(obj.message === "D") 
                    {
                        Est_Ret_Delete.setDisabled(true);
                        Est_Ret_Save.setDisabled(true);
                        Est_Ret_submit.setDisabled(true);
                        Est_Ret_AddVoucherRN.setDisabled(true);
                        me.ReadOnlyControlByPanel(objParam);
                        msg("WARNING","This Record is already Deleted");
                        return;            
                    }

                    else if(obj.message === "V")
                    {
                        Est_Ret_Delete.setDisabled(true);
                        Est_Ret_Save.setDisabled(true);
                        Est_Ret_submit.setDisabled(true);
                        Est_Ret_AddVoucherRN.setDisabled(true);
                        me.ReadOnlyControlByPanel(objParam);


                        Ext.Msg.confirm('Confirm Action', 'This Record is already Verified . Do you want to PRINT ?', function(btn) {
                            if(btn == 'yes'){
                                me.print(submissionNo,obj.root.PAN,'10');
                            }
                        }, this);







                        return; 


                    }


                    else
                    {
                        msg("WARNING",obj.message);
                        return;
                    }
                }


                var estReturn=obj.root;
                var taxpayer=estReturn.Taxpayer;
                var office=taxpayer.Office;
                var address=taxpayer.BusinessAddress.Address;

                var strRevenueAc = Ext.getStore("RevenueAccountAnx10");
                if(taxpayer.TaxpayerCategoryId === "B")
                {

                    strRevenueAc.load(
                    {
                        params:{acctType:"I",impOn:"SAD03"}
                    });
                }
                else
                {
                    strRevenueAc.load(
                    {
                        params:{acctType:"I",impOn:"SAD01"}
                    });
                }






                Ext.ComponentQuery.query('#txtEst_Ret_PanNoRN')[0].setValue(obj.root.PAN);
                Ext.ComponentQuery.query('#txtEst_Ret_PanNoRN')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0].setValue(taxpayer.acctType);
                //SET TAXPAYER'S INFO
                Ext.ComponentQuery.query('#hdnEst_Ret_Office_CodeRN')[0].setValue(office.OfficeCode);
                Ext.ComponentQuery.query('#Est_Ret_IRONameRN')[0].setValue(office.OfficeNameNepali);
                Ext.ComponentQuery.query('#txtEst_Ret_NameRN')[0].setValue(taxpayer.Name);


                Ext.ComponentQuery.query('#txtEst_Ret_HouseNoRN')[0].setValue(address.HouseNo);
                Ext.ComponentQuery.query('#txtEst_Ret_WardNoRN')[0].setValue(address.WardNo);
                Ext.ComponentQuery.query('#txtEst_Ret_ToleNameRN')[0].setValue(address.StreetName);

                if(address.LocationType=='MM')
                {
                    Ext.ComponentQuery.query('#rdl_Est_Metro_MunRN')[0].setValue(true);
                    Ext.ComponentQuery.query('#rdl_Est_Metro_MunRN')[0].setReadOnly(true);
                }
                else if(address.LocationType === 'SM')
                {
                    Ext.ComponentQuery.query('#rdl_Est_Sub_Metro_MunRN')[0].setValue(true);
                    Ext.ComponentQuery.query('#rdl_Est_Sub_Metro_MunRN')[0].setReadOnly(true);
                }
                else if(address.LocationType === 'MN')
                {
                    Ext.ComponentQuery.query('#rdl_Est_MunRN')[0].setValue(true);
                    Ext.ComponentQuery.query('#rdl_Est_MunRN')[0].setReadOnly(true);
                }
                else if(address.LocationType === 'VD')
                {
                    Ext.ComponentQuery.query('#rdl_Est_VDCRN')[0].setValue(true);
                    Ext.ComponentQuery.query('#rdl_Est_VDCRN')[0].setReadOnly(true);
                }

                Ext.ComponentQuery.query('#txtEst_Ret_VDCNameRN')[0].setValue(address.VdcTown);
                Ext.ComponentQuery.query('#txtEst_Ret_DistrictNameRN')[0].setValue(address.DistrictNameNep);
                Ext.ComponentQuery.query('#txtEst_Ret_PhoneRN')[0].setValue(address.Telephone);
                //Ext.ComponentQuery.query('#txtEst_Ret_Mobile')[0].setValue(true);
                Ext.ComponentQuery.query('#txtEst_Ret_EmailRN')[0].setValue(address.Email);
                if(taxpayer.AcctStatus==='A')
                Ext.ComponentQuery.query('#Est_Ret_TpOfficeTypeRN')[0].setValue('सक्रिय');


                //Load Estimate Return
                Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0].setValue(estReturn.AccType);
                Ext.ComponentQuery.query('#ddlEst_Ret_ReturnTypeRN')[0].setValue(estReturn.EstimateType);
                Ext.ComponentQuery.query('#ddlEst_Ret_ReturnTypeRN')[0].setReadOnly(true);

                Ext.ComponentQuery.query('#ddlEstFysicalYearRN')[0].setValue(estReturn.FiscalYear);
                Ext.ComponentQuery.query('#ddlEstFysicalYearRN')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#txtEst_Ret_IncomeRN')[0].setValue(estReturn.EstIncome);
                Ext.ComponentQuery.query('#txtEst_Ret_DeductionsRN')[0].setValue(estReturn.EstDeductions);
                Ext.ComponentQuery.query('#txtEst_Ret_Exempt_AmountRN')[0].setValue(estReturn.EstExemptAmount);
                Ext.ComponentQuery.query('#txtEst_Ret_Assessable_IncomeRN')[0].setValue(estReturn.EstAssessableIncome);
                Ext.ComponentQuery.query('#txtEst_Ret_Income_Oth_Bus_InvRN')[0].setValue(estReturn.EstIncomeOthBusInv);
                Ext.ComponentQuery.query('#txtEst_Ret_Total_Assessable_IncomeRN')[0].setValue(estReturn.EstTtotalAssessableIncome);
                Ext.ComponentQuery.query('#txtEst_Ret_Donation_To_Exempt_OrgRN')[0].setValue(estReturn.DonationToExemptOrg);
                Ext.ComponentQuery.query('#txtEst_Ret_Retirement_ContributionRN')[0].setValue(estReturn.EstRetirementContribution);
                Ext.ComponentQuery.query('#txtEst_Ret_Taxable_IncomeRN')[0].setValue(estReturn.EstTaxableIncome);
                Ext.ComponentQuery.query('#txtEst_Ret_Tax_LiabilityRN')[0].setValue(estReturn.EstTaxLiability);
                Ext.ComponentQuery.query('#txtEst_Ret_TDS_Paid_AmtRN')[0].setValue(estReturn.EstTdsPaidAmt);
                Ext.ComponentQuery.query('#txtEst_Ret_Inst_Paid_AmtRN')[0].setValue(estReturn.EstInstPaidAmt);

                Ext.ComponentQuery.query('#txtEst_Ret_Foreign_TaxRN')[0].setValue(estReturn.EstForeignTax);
                Ext.ComponentQuery.query('#txtEst_Ret_Income_Sent_AbroadRN')[0].setValue(estReturn.EstIncomeSentAbroad);
                Ext.ComponentQuery.query('#txtEst_Ret_Tax_OnIncome_Sent_AbraodRN')[0].setValue(estReturn.EstTaxOnIncomeSentAbraod);

                Ext.ComponentQuery.query('#hdnEstFilingDateRN')[0].setValue(estReturn.FilingDate);

                Ext.ComponentQuery.query('#hdnEstimateReturnTranNoRN')[0].setValue(estReturn.TranNo);


                var grd = Ext.ComponentQuery.query('#Est_Ret_VoucherListRN')[0];
                var store  = Ext.getStore('Est_Ret_VoucherList');
                store.add(estReturn.VoucherTbs); 
                grd.bindStore(store);

                if(obj.message === "F" || estReturn.Status === "F" )  
                {


                    Ext.Msg.confirm('Confirm Action', 'This Record is already Finalized . Do you want to PRINT ?', function(btn) {
                        if(btn == 'yes'){
                            me.print(submissionNo,obj.root.PAN,'10');
                        }
                    }, this);


                    Est_Ret_Delete.setDisabled(true);
                    Est_Ret_Save.setDisabled(true);
                    Est_Ret_submit.setDisabled(true);
                    Est_Ret_AddVoucherRN.setDisabled(true);
                    // me.ReadOnlyControl();
                    me.ReadOnlyControlByPanel(objParam);


                    return;                
                }

                else if ( obj.message === "I" || estReturn.Status === "I" )
                {
                    msg("WARNING","This Record is not Finalized"); 
                    return;


                }





            },
            failure: function ( result, request ) {
                Ext.Msg.show({
                    title: 'Failure',
                    msg: 'ERROR OCURRED !!!' ,
                    buttons: Ext.MessageBox.OK,
                    icon:Ext.Msg.ERROR
                });
            }
        });                    



    },

    ReadOnlyControl: function() {
        var txtEst_Ret_Income = Ext.ComponentQuery.query('#txtEst_Ret_IncomeRN')[0];
        var txtEst_Ret_Deductions = Ext.ComponentQuery.query('#txtEst_Ret_DeductionsRN')[0];
        var txtEst_Ret_Exempt_Amount = Ext.ComponentQuery.query('#txtEst_Ret_Exempt_AmountRN')[0];
        var txtEst_Ret_Assessable_Income = Ext.ComponentQuery.query('#txtEst_Ret_Assessable_IncomeRN')[0];
        var txtEst_Ret_Income_Oth_Bus_Inv = Ext.ComponentQuery.query('#txtEst_Ret_Income_Oth_Bus_InvRN')[0];
        var txtEst_Ret_Total_Assessable_Income = Ext.ComponentQuery.query('#txtEst_Ret_Total_Assessable_IncomeRN')[0];
        var txtEst_Ret_Donation_To_Exempt_Org = Ext.ComponentQuery.query('#txtEst_Ret_Donation_To_Exempt_OrgRN')[0];
        var txtEst_Ret_Retirement_Contribution = Ext.ComponentQuery.query('#txtEst_Ret_Retirement_ContributionRN')[0];
        var txtEst_Ret_Taxable_Income = Ext.ComponentQuery.query('#txtEst_Ret_Taxable_IncomeRN')[0];
        var txtEst_Ret_Tax_Liability = Ext.ComponentQuery.query('#txtEst_Ret_Tax_LiabilityRN')[0];
        var txtEst_Ret_TDS_Paid_Amt = Ext.ComponentQuery.query('#txtEst_Ret_TDS_Paid_AmtRN')[0];
        var txtEst_Ret_Inst_Paid_Amt = Ext.ComponentQuery.query('#txtEst_Ret_Inst_Paid_AmtRN')[0];

        // for 3rd part
        var txtEst_Ret_Foreign_Tax = Ext.ComponentQuery.query('#txtEst_Ret_Foreign_TaxRN')[0];
        var txtEst_Ret_Income_Sent_Abroad = Ext.ComponentQuery.query('#txtEst_Ret_Income_Sent_AbroadRN')[0];
        var txtEst_Ret_Tax_OnIncome_Sent_Abraod = Ext.ComponentQuery.query('#txtEst_Ret_Tax_OnIncome_Sent_AbraodRN')[0];
        txtEst_Ret_Income.setReadOnly(true);
        txtEst_Ret_Deductions.setReadOnly(true);
        txtEst_Ret_Exempt_Amount.setReadOnly(true);
        txtEst_Ret_Assessable_Income.setReadOnly(true);
        txtEst_Ret_Income_Oth_Bus_Inv.setReadOnly(true);
        txtEst_Ret_Total_Assessable_Income.setReadOnly(true);
        txtEst_Ret_Donation_To_Exempt_Org.setReadOnly(true);
        txtEst_Ret_Retirement_Contribution.setReadOnly(true);
        txtEst_Ret_Taxable_Income.setReadOnly(true);
        txtEst_Ret_Tax_Liability.setReadOnly(true);
        txtEst_Ret_TDS_Paid_Amt.setReadOnly(true);
        txtEst_Ret_Inst_Paid_Amt.setReadOnly(true);

        txtEst_Ret_Foreign_Tax.setReadOnly(true);
        txtEst_Ret_Income_Sent_Abroad.setReadOnly(true);
        txtEst_Ret_Tax_OnIncome_Sent_Abraod.setReadOnly(true);

    },

    LoadByTranNo: function(tranNo) {
        //var objParam = Ext.ComponentQuery.query('#frm_EstimateReturnRevisionNotice')[0]; 


        Ext.getStore('Est_Ret_VoucherList').loadData([],false);
        Ext.Ajax.request({
            url: '../Handlers/IncomeTax/EstimatesReturn/EstimateReturnsHandlers1.ashx',
            params: {
                method:'GetEstimateReturnByTranNo',tranNo:tranNo,
                id: 1
            },
            success: function(response){
                var obj =Ext.decode( response.responseText);

                var Est_Ret_Save = Ext.ComponentQuery.query("#Est_Ret_SaveRN")[0];
                var Est_Ret_submit = Ext.ComponentQuery.query("#Est_Ret_submitRN")[0];
                var Est_Ret_Delete = Ext.ComponentQuery.query("#Est_Ret_DeleteRN")[0];
                var Est_Ret_AddVoucherRN = Ext.ComponentQuery.query("#Est_Ret_AddVoucherRN")[0];
                var cntEst_Ret_buttonRN =  Ext.ComponentQuery.query("#cntEst_Ret_buttonRN")[0];

                if(obj.success === "false")
                {   

                    if(obj.message === "D") 
                    {
                        Est_Ret_Delete.setDisabled(true);
                        Est_Ret_Save.setDisabled(true);
                        Est_Ret_submit.setDisabled(true);
                        Est_Ret_AddVoucherRN.setDisabled(true);
                        me.ReadOnlyControl();
                        msg("WARNING","This Record is already Deleted");
                        return;            
                    }
                    else if(obj.message === "V")
                    {
                        Est_Ret_Delete.setDisabled(true);
                        Est_Ret_Save.setDisabled(true);
                        Est_Ret_submit.setDisabled(true);
                        Est_Ret_AddVoucherRN.setDisabled(true);
                        me.ReadOnlyControl();

                        Ext.Msg.confirm('Confirm Action', 'This Record is already Verified . Do you want to PRINT ?', function(btn) {
                            if(btn == 'yes'){
                                me.print(submissionNo,obj.root.PAN,'10');
                            }
                        }, this);




                        msg("WARNING","This Record is already Verified");
                        return; 


                    }
                    else
                    {
                        msg("WARNING",obj.message);
                        return;
                    }
                }





                var estReturn=obj.root;
                var taxpayer=estReturn.Taxpayer;
                var office=taxpayer.Office;
                var address=taxpayer.BusinessAddress.Address;

                var strRevenueAc = Ext.getStore("RevenueAccountAnx10");
                if(taxpayer.TaxpayerCategoryId === "B")
                {

                    strRevenueAc.load(
                    {
                        params:{acctType:"I",impOn:"SAD03"}
                    });
                }
                else
                {
                    strRevenueAc.load(
                    {
                        params:{acctType:"I",impOn:"SAD01"}
                    });
                }







                Ext.ComponentQuery.query('#txtEst_Ret_PanNoRN')[0].setValue(obj.root.PAN);
                Ext.ComponentQuery.query('#txtEst_Ret_PanNoRN')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0].setValue(taxpayer.acctType);
                //SET TAXPAYER'S INFO
                Ext.ComponentQuery.query('#hdnEst_Ret_Office_CodeRN')[0].setValue(office.OfficeCode);
                Ext.ComponentQuery.query('#Est_Ret_IRONameRN')[0].setValue(office.OfficeNameNepali);
                Ext.ComponentQuery.query('#txtEst_Ret_NameRN')[0].setValue(taxpayer.Name);


                Ext.ComponentQuery.query('#txtEst_Ret_HouseNoRN')[0].setValue(address.HouseNo);
                Ext.ComponentQuery.query('#txtEst_Ret_WardNoRN')[0].setValue(address.WardNo);
                Ext.ComponentQuery.query('#txtEst_Ret_ToleNameRN')[0].setValue(address.StreetName);

                if(address.LocationType=='MM')
                {
                    Ext.ComponentQuery.query('#rdl_Est_Metro_MunRN')[0].setValue(true);
                    Ext.ComponentQuery.query('#rdl_Est_Metro_MunRN')[0].setReadOnly(true);
                }
                else if(address.LocationType === 'SM')
                {
                    Ext.ComponentQuery.query('#rdl_Est_Sub_Metro_MunRN')[0].setValue(true);
                    Ext.ComponentQuery.query('#rdl_Est_Sub_Metro_MunRN')[0].setReadOnly(true);
                }
                else if(address.LocationType === 'MN')
                {
                    Ext.ComponentQuery.query('#rdl_Est_MunRN')[0].setValue(true);
                    Ext.ComponentQuery.query('#rdl_Est_MunRN')[0].setReadOnly(true);
                }
                else if(address.LocationType === 'VD')
                {
                    Ext.ComponentQuery.query('#rdl_Est_VDCRN')[0].setValue(true);
                    Ext.ComponentQuery.query('#rdl_Est_VDCRN')[0].setReadOnly(true);
                }

                Ext.ComponentQuery.query('#txtEst_Ret_VDCNameRN')[0].setValue(address.VdcTown);
                Ext.ComponentQuery.query('#txtEst_Ret_DistrictNameRN')[0].setValue(address.DistrictNameNep);
                Ext.ComponentQuery.query('#txtEst_Ret_PhoneRN')[0].setValue(address.Telephone);
                //Ext.ComponentQuery.query('#txtEst_Ret_Mobile')[0].setValue(true);
                Ext.ComponentQuery.query('#txtEst_Ret_EmailRN')[0].setValue(address.Email);
                if(taxpayer.AcctStatus==='A')
                Ext.ComponentQuery.query('#Est_Ret_TpOfficeTypeRN')[0].setValue('सक्रिय');


                //Load Estimate Return
                Ext.ComponentQuery.query('#txtEst_Ret_AccTypeRN')[0].setValue(estReturn.AccType);
                Ext.ComponentQuery.query('#ddlEst_Ret_ReturnTypeRN')[0].setValue(estReturn.EstimateType);
                Ext.ComponentQuery.query('#ddlEst_Ret_ReturnTypeRN')[0].setReadOnly(true);

                Ext.ComponentQuery.query('#ddlEstFysicalYearRN')[0].setValue(estReturn.FiscalYear);
                Ext.ComponentQuery.query('#ddlEstFysicalYearRN')[0].setReadOnly(true);

                Ext.ComponentQuery.query('#txtEst_Ret_IncomeRN')[0].setValue(estReturn.EstIncome);
                Ext.ComponentQuery.query('#txtEst_Ret_DeductionsRN')[0].setValue(estReturn.EstDeductions);
                Ext.ComponentQuery.query('#txtEst_Ret_Exempt_AmountRN')[0].setValue(estReturn.EstExemptAmount);
                Ext.ComponentQuery.query('#txtEst_Ret_Assessable_IncomeRN')[0].setValue(estReturn.EstAssessableIncome);
                Ext.ComponentQuery.query('#txtEst_Ret_Income_Oth_Bus_InvRN')[0].setValue(estReturn.EstIncomeOthBusInv);
                Ext.ComponentQuery.query('#txtEst_Ret_Total_Assessable_IncomeRN')[0].setValue(estReturn.EstTtotalAssessableIncome);
                Ext.ComponentQuery.query('#txtEst_Ret_Donation_To_Exempt_OrgRN')[0].setValue(estReturn.DonationToExemptOrg);
                Ext.ComponentQuery.query('#txtEst_Ret_Retirement_ContributionRN')[0].setValue(estReturn.EstRetirementContribution);
                Ext.ComponentQuery.query('#txtEst_Ret_Taxable_IncomeRN')[0].setValue(estReturn.EstTaxableIncome);
                Ext.ComponentQuery.query('#txtEst_Ret_Tax_LiabilityRN')[0].setValue(estReturn.EstTaxLiability);
                Ext.ComponentQuery.query('#txtEst_Ret_TDS_Paid_AmtRN')[0].setValue(estReturn.EstTdsPaidAmt);
                Ext.ComponentQuery.query('#txtEst_Ret_Inst_Paid_AmtRN')[0].setValue(estReturn.EstInstPaidAmt);

                Ext.ComponentQuery.query('#txtEst_Ret_Foreign_TaxRN')[0].setValue(estReturn.EstForeignTax);
                Ext.ComponentQuery.query('#txtEst_Ret_Income_Sent_AbroadRN')[0].setValue(estReturn.EstIncomeSentAbroad);
                Ext.ComponentQuery.query('#txtEst_Ret_Tax_OnIncome_Sent_AbraodRN')[0].setValue(estReturn.EstTaxOnIncomeSentAbraod);

                Ext.ComponentQuery.query('#hdnEstFilingDateRN')[0].setValue(estReturn.FilingDate);

                Ext.ComponentQuery.query('#hdnEstimateReturnTranNoRN')[0].setValue(estReturn.TranNo);
                Ext.getStore('Est_Ret_VoucherList').loadData([],false);


                var grd = Ext.ComponentQuery.query('#Est_Ret_VoucherListRN')[0];
                var store  = Ext.getStore('Est_Ret_VoucherList');
                store.add(estReturn.VoucherTbs); 
                grd.bindStore(store);

                cntEst_Ret_buttonRN.setDisabled(true);
                Est_Ret_AddVoucherRN.setDisabled(true);





            },
            failure: function ( result, request ) {
                Ext.Msg.show({
                    title: 'Failure',
                    msg: 'ERROR OCURRED !!!' ,
                    buttons: Ext.MessageBox.OK,
                    icon:Ext.Msg.ERROR
                });
            }
        }); 


    },

    ReadOnlyControlByPanel: function(ParentName ) {
        ParentName.query('.field,.combo').forEach(function(c){c.setReadOnly(true);});
        ParentName.query('.grid').forEach(function(c){ c.on('beforeedit', function(editor, e) { return false;});});

    },

    init: function(application) {
        this.control({
            "#Est_Ret_SaveRN": {
                click: this.onEst_Ret_SaveRNClick
            },
            "#Est_Ret_EditRN": {
                click: this.onEst_Ret_EditRNClick
            },
            "#Est_Ret_DeleteRN": {
                click: this.onEst_Ret_DeleteRNClick
            },
            "#Est_Ret_submitRN": {
                click: this.onEst_Ret_submitRNClick
            },
            "#Est_Ret_CancelRN": {
                click: this.onEst_Ret_CancelRNClick
            },
            "#Est_Ret_AddVoucherRN": {
                click: this.onEst_Ret_AddVoucherRNClick
            },
            "#Est_Ret_VoucherListRN": {
                beforerender: this.onEst_Ret_VoucherListRNBeforeRender,
                afterrender: this.onEst_Ret_VoucherListRNAfterRender
            },
            "#txtEst_Ret_PanNoRN": {
                keypress: this.onTxtEst_Ret_PanNoRNKeypress,
                blur: this.onTxtEst_Ret_PanNoRNBlur
            },
            "#txtEst_Ret_SUBMISSION_NORN": {
                keypress: this.onTxtEst_Ret_SUBMISSION_NORNKeypress
            },
            "#txtEst_Ret_IncomeRN": {
                blur: this.onTxtEst_Ret_IncomeRNBlur
            },
            "#txtEst_Ret_DeductionsRN": {
                blur: this.onTxtEst_Ret_DeductionsRNBlur
            },
            "#txtEst_Ret_Exempt_AmountRN": {
                blur: this.onTxtEst_Ret_Exempt_AmountRNBlur
            },
            "#txtEst_Ret_Income_Oth_Bus_InvRN": {
                blur: this.onTxtEst_Ret_Income_Oth_Bus_InvRNBlur
            },
            "#txtEst_Ret_Donation_To_Exempt_OrgRN": {
                blur: this.onTxtEst_Ret_Donation_To_Exempt_OrgRNBlur
            },
            "#txtEst_Ret_Retirement_ContributionRN": {
                blur: this.onTxtEst_Ret_Retirement_ContributionRNBlur
            },
            "#txtEst_Ret_Total_Assessable_IncomeRN": {
                change: this.onTxtEst_Ret_Total_Assessable_IncomeRNChange
            },
            "#txtEst_Ret_Assessable_IncomeRN": {
                change: this.onTxtEst_Ret_Assessable_IncomeRNChange
            },
            "#Est_Ret_PrintRN": {
                click: this.onEst_Ret_PrintRNClick
            },
            "#pnlEstimateReturnRevisionNotice": {
                afterrender: this.onPnlEstimateReturnRevisionNoticeAfterRender
            },
            "#ddlEst_Ret_Payment_modeRN": {
                change: this.onDdlEst_Ret_Payment_modeRNChange
            },
            "#ddlEstFysicalYearRN": {
                change: this.onDdlEstFysicalYearRNChange
            }
        });
    }

});
