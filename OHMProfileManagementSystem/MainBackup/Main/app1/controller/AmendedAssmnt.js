/*
 * File: app/controller/AmendedAssmnt.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.AmendedAssmnt', {
    extend: 'Ext.app.Controller',

    stores: [
        'FiscalYear',
        'ReasonsPaa',
        'AnxsReasonsPaa',
        'Charge',
        'AssmntTypePaa'
    ],

    onPnlAmendedAssmntAfterRender: function(component, eOpts) {
        var extraParam = {Checked:"",CheckedChoice:"",TaxPayerCatID:"",Action:""};
        var view = Ext.ComponentQuery.query('#pnlAmendedAssmnt')[0];

        var txtOffCode = Ext.ComponentQuery.query('#txtOfficeCodePaa')[0];
        var txtAssmntDate = Ext.ComponentQuery.query('#txtAssmntDatePaa')[0];

        var store = Ext.getStore("ReasonsPaa");
        store.loadData([],false);

        view.extraParam = extraParam;

        txtOffCode.setValue(Ext.get('offCode').dom.innerHTML);
        txtAssmntDate.setValue(Ext.get('nepDate').dom.innerHTML);

        txtOffCode.clearInvalid();
        txtAssmntDate.clearInvalid();

        //------------------------------------------------------
        // NB: Posting Data to Server
        //------------------------------------------------------

        var waitSave = waitMsg("Please wait ...");

        Ext.Ajax.request({
            url: '../Handlers/IncomeTax/AmendedAssessment/ChargeHandler.ashx?method=GetCharges',
            success: function ( result, request ) {

                waitSave.hide();

                var strCharge = Ext.getStore("Charge");

                strCharge.loadData([],false);

                var obj = Ext.decode(result.responseText);
                //console.log("obj>>>",obj);

                strCharge.add(obj.root); 

                var row1 = {ID:1,
                        ChargeID:"",	
                        ChargeSectionNo:null,	
                        ChargeType:	"OTH",	
                        Description:"क. आय कर ऐन २०५८ , अनुसुचि १ दफा २(३)	अनुसार लाग्ने कर",				
                        Value:""
                    }; 

                    var row2 = { ID:2,
                        ChargeID:"",	
                        ChargeSectionNo:null,	
                        ChargeType:	"OTH",	
                        Description:"ख. स्वयं कर निर्धारण अनुसार जम्मा कर",
                        Value:""
                    };

                var row3  = { ID:3,
                        ChargeID:"OTH",	
                        ChargeSectionNo:null,	
                        ChargeType:	"OTH",	
                        Description:"ग. थप कर (क-ख)",
                        Value:""
                    };


                var row11  = { ID:11,
                        ChargeID:"",	
                        ChargeSectionNo:null,	
                        ChargeType:	"OTH",	
                        Description:"त. अन्य थपघट",
                        Value:""
                    };

                var row12  = { ID:12,
                        ChargeID:"",	
                        ChargeSectionNo:null,	
                        ChargeType:	"OTH",	
                        Description:"थ. आयकर ऐन २०५८ , दफा १०१ बमोजिम संसोधित कर निर्धारण (ख र ग बाहेक क दखी त सम्मको जोड)",
                        Value:""
                    };

                var row13  = {  ID:13,
                        ChargeID:"",	
                        ChargeSectionNo:null,	
                        ChargeType:	"OTH",	
                        Description:"द. स्वयं कर निर्धारण संग बुझाएको कर वा अग्रिम कर",
                        Value:""
                    };

                var row14  = { ID:14,
                        ChargeID:"",	
                        ChargeSectionNo:null,	
                        ChargeType:	"OTH",	
                        Description:"न. बुझाउनु पर्ने थप कर (थ-द)",
                        Value:""
                    };


                var row101  = { ID:101,
                        ChargeID:"",	
                        ChargeSectionNo:null,	
                        ChargeType:	"SP",	
                        Description:"क. आयकर ऐन अनुसार लाग्ने विशेष शुल्क",
                        Value:""
                    };

                var row102  = {  ID:102,
                        ChargeID:"",	
                        ChargeSectionNo:null,	
                        ChargeType:	"SP",	
                        Description:"ख. विशेष शुल्कको लागि स्वयं कर निर्धारण संग बुझाएको कर वा अग्रिम भुक्तानी",
                        Value:""
                    };

                var row103  = { ID:103,
                        ChargeID:"",	
                        ChargeSectionNo:null,	
                        ChargeType:	"SP",	
                        Description:"ग. वांकी वा बढी विशेष शुल्क",
                        Value:""
                    };

                strCharge.add(row1);
                strCharge.add(row2);
                strCharge.add(row3);
                strCharge.add(row11);
                strCharge.add(row12);
                strCharge.add(row13);
                strCharge.add(row14);

                strCharge.add(row101);
                strCharge.add(row102);
                strCharge.add(row103);

                strCharge.sort('ID','ASC');   


                var strSpclChrg = null;        
                var gridSpecialChrg = Ext.ComponentQuery.query('#grdSpecialChargePaa')[0];

                strSpecialChrg = deepCloneStore(strCharge,"SpecialChrg");        
                strSpecialChrg.filter('ChargeType',"SP");    

                strCharge.filter(function(item){
                    return item.get("ChargeType")!= 'SP';
                });

                gridSpecialChrg.store = strSpecialChrg;
                gridSpecialChrg.bindStore(strSpecialChrg);

            },
            failure: function(form, action) {

                waitSave.hide();

                msg("FAILURE","Error in Fetching data !!!");
            }

        });


    },

    onTxtPanPaaKeypress: function(textfield, e, eOpts) {
        var me = this;

        if((e.keyCode === 13 || e.keyCode === 9) && textfield.getValue().length === 9)
        {
            var pan = textfield.getValue();        
            var txtPan = Ext.ComponentQuery.query('#txtPanPaa')[0];

            me.clearControls();
            txtPan.setValue(pan);

            //-------------------------------------------------------------------------
            // NB: Loading details using PAN and ACCOUNT-TYPE 
            //-------------------------------------------------------------------------
            LoadTaxpayerInfoWithValidPan(pan,"10",function(data){

                if(!data.root.Taxpayer.Name)
                {
                    msg("WARNING","Please Enter a VALID Pan!!!",function(){textfield.focus();});

                    return;
                }

                me.loadControls(data);
            });
        }
    },

    onActionAnxsReasonsClick: function(gridcolumn) {
        //alert("must work !!!!");

        //console.log("gridcolumn",gridcolumn);
        //console.log("rowIdx",gridcolumn.rowIndex);

        var selection    = gridcolumn.getSelectionModel().getSelection()[0];
        var selectedIndx = gridcolumn.getStore().indexOf(selection);


        var store = gridcolumn.getStore();

        var row = store.getAt(selectedIndx).data;

        //console.log("row>>",row);
        //console.log("indx",selectedIndx);

        var moduleName = "D03Annex" + row.ID;

        var extraParam = {  submissionNo:"",
                pan:"500166088",
                fiscalYear:"2068.069",
                name:"Ram",
                offCode:"28",
                taxPayerCatID:"B",
                taxpayerCat:"C",
            action:"" };

        dynamicPopUp(moduleName,extraParam);





    },

    onBtnUpdateAnxPaaClick: function(button, e, eOpts) {
        var me = this;
        var param = me.validateParam();

        var uiConfig = {menuLink:'SetAnnexD03',pageTitle:'Set Annex'};

        var offCode = Ext.get('offCode').dom.innerHTML;
        var subNum = Ext.ComponentQuery.query('#txtSubmissionNoPaa')[0].getValue();
        var pan = Ext.ComponentQuery.query('#txtPanPaa')[0].getValue();
        var fiscalYear = Ext.ComponentQuery.query('#cboFiscalYearPaa')[0].getValue();
        var name = Ext.ComponentQuery.query('#txtNamePaa')[0].getValue();

        console.log("subNum>>",subNum);

        if(subNum === "")
        {
            msg("WARNING","Submission No. Required !!!");
            return ;
        }

        var arg = {submissionNo:subNum,
                pan:pan,
                taxPayerCatID:param.TaxPayerCatID,
                name:name,
                offCode:offCode,
                fiscalYear:fiscalYear,
                taxpayerCat:param.taxpayerCat,
                action:""
            };


        DynamicUI(uiConfig,null,arg);
    },

    onGrdTotAssTaxablePaaAfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdTotAssTaxablePaa')[0];

        grid.columns[0].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            Ext.Function.defer(function(){

                var flag = false;

                if(rowIndex === 2 ||rowIndex === 3 ||rowIndex === 4 || rowIndex === 11 || rowIndex === 13 )
                {
                    flag = true;
                }


                var checkbox = new Ext.form.Checkbox({
                    id:"chkChoice"+rowIndex+"Paa",
                    itemId:"chkChoice"+rowIndex+"Paa",
                    margin: '0 0 0 20',
                    value:'A',
                    //checked:true,
                    style: '{cursor:pointer}',
                    renderTo: id
                });


                checkbox.on('change', function(field,newValue,oldValue){
                    var param = me.validateParam();

                    if(param.CheckedChoice === "true")
                    {
                        param.CheckedChoice = "";
                        return;
                    }

                    me.calcChoiceCharge(field.itemId);            
                    me.calcRemTax();

                }, this); 

            },25);


            if(rowIndex == 3 || rowIndex == 4)
            {    
                return '<table><tr><td>'+ value +'</td><td id="' + id +'"></td></tr></table>';

                //return '<span id="' + id +'">'+ value +'</span>';
            }
            else
            {
                return value;
            }
        };

        grid.columns[1].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            Ext.Function.defer(function(){

                var flag = false;

                if(rowIndex === 2 ||rowIndex === 3 ||rowIndex === 4 || rowIndex === 11 || rowIndex === 13 )
                {
                    flag = true;
                }

                txtBox = new Ext.form.TextField({
                    id:"txtChrg"+rowIndex+"Paa",
                    itemId:"txtChrg"+rowIndex+"Paa",
                    value: value,
                    renderTo: id,
                    height: 22,
                    width:150,
                    fieldCls: 'TxtRight',
                    maskRe: /[0-9]/,
                    maxLength: 10,
                    enableKeyEvents: true,
                    enforceMaxLength: true,
                    readOnly:flag
                });

                if(!flag)
                {
                    if(rowIndex > 4 && rowIndex < 11)
                    {
                        txtBox.on('keyup', function(e){

                            me.calcRemTax();

                        }, this); 
                    }
                    else if (rowIndex == 12)
                    {
                        txtBox.on('keyup', function(e){

                            me.calcRemCharge();

                        }, this); 

                    }
                    else if (rowIndex == 0 || rowIndex == 1)
                    {
                        txtBox.on('keyup', function(e){

                            me.calcAddTax(rowIndex);                   


                        }, this); 

                    }

                    /*
                    txtBox.on('keyup', function(e){

                    if(rowIndex > 2 && rowIndex < 11)
                    {
                    me.calcAmendedTaxAssmnt();
                    }
                    else
                    {
                    alert("pressed !");
                    }
                    }, this);

                    */
                }

            },25);

            return '<div id="' + id +'"></div>';
        };

    },

    onGrdSpecialChargePaaAfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdSpecialChargePaa')[0];

        grid.columns[1].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            Ext.Function.defer(function(){


                txtBox = new Ext.form.TextField({
                    id:"txtSpecChrg"+rowIndex+"Paa",
                    itemId:"txtSpecChrg"+rowIndex+"Paa",
                    value: value,
                    renderTo: id,
                    height: 22,
                    width:150,
                    fieldCls: 'TxtRight',
                    maskRe: /[0-9]/,
                    maxLength: 10,
                    enableKeyEvents: true,
                    enforceMaxLength: true
                });

            },25);

            return '<div id="' + id +'"></div>';
        };

    },

    onBtnAddReasonPaaClick: function(button, e, eOpts) {
        var grd = Ext.ComponentQuery.query('#grdReasonsPaa')[0];

        var rec={
            Basis:null,
            Amount:null
        };

        grd.store.add(rec);

        var col = grd.headerCt.getHeaderAtIndex(0);
        var rows = grd.store.data.items;
        var record = rows[rows.length-1];
        grd.getPlugin('pluginReasonsPaa').startEdit(record, col);

    },

    onBtnEditPaaClick: function(button, e, eOpts) {
        var me = this;
        var param = me.validateParam();
        var txtSubmissionNo = Ext.ComponentQuery.query('#txtSubmissionNoPaa')[0];

        var lblAction = Ext.ComponentQuery.query('#lblActionPaa')[0];

        var btnSave = Ext.ComponentQuery.query('#btnSavePaa')[0];
        var btnSubmit = Ext.ComponentQuery.query('#btnSubmitPaa')[0];
        var btnTransferBack = Ext.ComponentQuery.query('#btnTransferBackPaa')[0];

        me.clearControls();

        btnSave.setDisabled(false);
        btnSubmit.setDisabled(false);
        btnTransferBack.setDisabled(false);

        param.Action = "E";
        txtSubmissionNo.setDisabled(false);
        txtSubmissionNo.setValue("");
        txtSubmissionNo.focus();

        lblAction.setVisible(true);


    },

    onCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        var chk = Ext.ComponentQuery.query("#chkAppealPaa")[0];

        var param = me.validateParam();


        if(param.Checked === "true")
        {
            param.Checked = "";
            return;
        }

        if(field.getValue())
        {
            me.enableDecisionControls(chk,false,param);
        }
        else
        {
            me.enableDecisionControls(chk,true,param);
        }


    },

    onChkAppealChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        var chk = Ext.ComponentQuery.query("#chkReAppealPaa")[0];

        var param = me.validateParam();

        if(param.Checked === "true")
        {
            param.Checked = "";
            return;
        }

        if(field.getValue())
        {
            me.enableDecisionControls(chk,false,param);
        }
        else
        {
            me.enableDecisionControls(chk,true,param);
        }
    },

    onBtnSavePaaClick: function(button, e, eOpts) {
        var me = this;
        me.save("I");
    },

    onCboAssmntTypePaaChange: function(field, newValue, oldValue, eOpts) {
        var txtSubNum = Ext.ComponentQuery.query('#txtSubmissionNoPaa')[0];

        txtSubNum.setValue("");
    },

    onBtnSubmitPaaClick: function(button, e, eOpts) {
        var me = this;

        Ext.Msg.confirm('Confirm Action', 'एकपटक Submit गरिसकेपछि अर्को पटक विवरण फेरि परिवर्तन गर्न पइने छैन। \n के तपाई Submit गर्न चाहनुहन्छ ?', function(btn) {
            if(btn == 'yes'){

                me.save("F");

                return true;
            }
        }, this);
    },

    onBtnCancelPaaClick: function(button, e, eOpts) {
        var me = this;
        var param = me.validateParam();
        param.Action = "";
        me.clearControls();


    },

    onBtnTransferBackPaaClick: function(button, e, eOpts) {
        var me = this;
        var param = me.validateParam();

        var txtSubNum = Ext.ComponentQuery.query('#txtSubmissionNoPaa')[0];
        var txtPan = Ext.ComponentQuery.query('#txtPanPaa')[0];
        var cboFiscalYear = Ext.ComponentQuery.query('#cboFiscalYearPaa')[0];
        var cboAssmtType = Ext.ComponentQuery.query('#cboAssmntTypePaa')[0];

        var fiscalYear = "";
        var pan = "";
        var assmtType = "";
        var action = "A";
        var wait  = "";

        if(txtPan.getValue() === "" || txtPan.getValue() === null)
        {
            msg("WARNING","Please Enter Pan !!!",function(){txtPan.focus();});
            return;
        }

        if(cboFiscalYear.getValue() === "" || cboFiscalYear.getValue() === null)
        {
            msg("WARNING","Please Enter Fiscal year !!!",function(){cboFiscalYear.focus();});
            return;
        }

        if(cboAssmtType.getValue() === "")
        {
            msg("WARNING","Please Select Assmnt Type!!!",function(){cboAssmtType.focus();});
            return;
        }

        fiscalYear = cboFiscalYear.getValue();
        pan = txtPan.getValue();
        assmtType = cboAssmtType.getValue();

        var manualSubNo = {
            SubmissionNumber:'',
            Username:'',
            Password:'',
            ContactNo:'',
            Emailid:'',
            submittedFor:'',
            SubmittedYN:'N',
            SubmittedDate:'',
            TranNo:'0',
            Address:'',
            RegOffice:'',
            Action:'A',
            PAN:pan,
            FiscalYear:fiscalYear
        };

        amendedAssmt = {  Pan:pan,
            AssessmentType:assmtType,
            FiscalYear:fiscalYear,
            Action:action,               
            SubmissionNo:manualSubNo
        };




        wait = waitMsg('Transfering ...');

        Ext.Ajax.request({
            url:'../Handlers/IncomeTax/AmendedAssessment/AmendedAssessmentHandler.ashx?method=TransferBackSA',
            params:{amendedAssmt:JSON.stringify(amendedAssmt)},
            success:function(result, request)
            {
                wait.hide();
                var obj = Ext.decode(result.responseText);

                var message = obj.message;

                if(obj.success === "true")
                {
                    //var message = obj.message;
                    var val = obj.message;

                    var arr = val.split("/");
                    message = arr[0].trim();

                    var len = message.length;

                    var subNum = message.substr(len-12,12);

                    var totTaxLiab = arr[1].trim();
                    var taxpayerCat = arr[2].trim();

                    param.taxpayerCat = taxpayerCat;

                    var txtTotTaxLiab = Ext.ComponentQuery.query("#txtChrg1Paa")[0];

                    if(txtTotTaxLiab !== undefined)
                    {

                        txtTotTaxLiab.setValue(totTaxLiab);
                    }

                    txtSubNum.setValue(subNum);
                    txtSubNum.setDisabled(false);

                    me.loadAnxSummary(subNum,true);
                }

                msg(obj.success === "true" ?"SUCCESS":"WARNING",message); 

            },

            failure:function(result, request){
                wait.hide();
                msg('ERROR OCURRED !!!', 'Error');                 
            }
        });
    },

    onTxtSubmissionNoPaaKeypress: function(textfield, e, eOpts) {
        var me = this;

        if((e.keyCode === 13 || e.keyCode === 9) && textfield.getValue().length === 12)
        {

            var offCode = Ext.get('offCode').dom.innerHTML;

            Ext.Ajax.request({
                url:'../Handlers/IncomeTax/AmendedAssessment/AaInfoHandler.ashx?method=GetAaInfo',
                params:{offCode:offCode,submissionNo:textfield.getValue()},
                success:function(result, request)
                {
                    var obj = Ext.decode(result.responseText); 

                    if(obj !== null && obj.success == "true")
                    {
                        me.loadDataForUpdate(obj);

                        var btnTransferBack = Ext.ComponentQuery.query('#btnTransferBackPaa')[0];
                        btnTransferBack.setDisabled(true);                                  
                        me.loadAnxSummary(textfield.getValue(),true);
                    }
                    else if(obj !== null && (obj.success == "false" && obj.message == "F"))
                    {

                        Ext.Msg.confirm('Confirm Action', 'RECORD already FINALIZED !!!. <br/> Do you want to PREVIEW ?', function(btn) {
                            if(btn == 'yes'){

                                var btnSave = Ext.ComponentQuery.query('#btnSavePaa')[0];
                                var btnSubmit = Ext.ComponentQuery.query('#btnSubmitPaa')[0];
                                var btnTransferBack = Ext.ComponentQuery.query('#btnTransferBackPaa')[0];

                                btnSave.setDisabled(true);
                                btnSubmit.setDisabled(true);
                                btnTransferBack.setDisabled(true);             

                                me.loadDataForUpdate(obj);                        
                                me.loadAnxSummary(textfield.getValue(),true);
                            }
                        }, this);
                        return;
                    }
                    else if(obj !== null && (obj.success == "false" && obj.message == "RECORD does not EXISTS !!!"))
                    {                
                        //-------------------------------------------------------------
                        // NB: No data saved before case , get pan info from loginTB
                        //-------------------------------------------------------------
                        me.getLoginTB(textfield.getValue());                
                    }
                    else
                    {      
                        msg("WARNING",obj.message);
                        return;
                    }

                },
                failure:  function ( result, request ) { 

                    msg("FAILURE","Error in Saving data !!!");        
                }
            });
        }
    },

    loadControls: function(data) {
        var me = this;
        var param = me.validateParam();

        var pan = Ext.ComponentQuery.query('#txtPanNoPaa')[0];
        var name = Ext.ComponentQuery.query('#txtNamePaa')[0];
        var houseNo = Ext.ComponentQuery.query("#txtHouseNoPaa")[0];
        var ward = Ext.ComponentQuery.query('#txtWardNoPaa')[0];
        var street = Ext.ComponentQuery.query('#txtToleNamePaa')[0];
        var vdc = Ext.ComponentQuery.query('#txtVDCNamePaa')[0];
        var district = Ext.ComponentQuery.query('#txtDistrictNamePaa')[0];
        var phone = Ext.ComponentQuery.query('#txtPhonePaa')[0];
        var mobile = Ext.ComponentQuery.query('#txtMobilePaa')[0];
        var email = Ext.ComponentQuery.query('#txtEmailPaa')[0];
        var radios = Ext.ComponentQuery.query('#rbtnsLocationPaa')[0]; 

        var fiscalYear =  Ext.ComponentQuery.query('#cboFiscalYearPaa')[0].getValue();

        var hdnTaxCatID =  Ext.ComponentQuery.query('#hdnTaxPayrCatIDPaa')[0];

        var obj = data.root;

        var rec = data.root.Taxpayer;
        var addr = rec.BusinessAddress.Address;
        var office = rec.Office;

        name.setValue(rec.Name);
        houseNo.setValue(addr.HouseNo);
        ward.setValue(addr.WardNo);
        street.setValue(addr.StreetName);
        vdc.setValue(addr.VdcTown);        
        district.setValue(addr.DistrictNameNep);
        phone.setValue(addr.Telephone);
        email.setValue(addr.Email);

        radios.setValue({loc:addr.LocationType});

        param.TaxPayerCatID = rec.TaxpayerCategoryId;

    },

    loadDataForUpdate: function(obj) {
        var me = this;
        var data = obj.root;

        var strReasons = Ext.getStore("ReasonsPaa");
        var strCharge = Ext.getStore("Charge");

        var txtSubNum = Ext.ComponentQuery.query('#txtSubmissionNoPaa')[0];
        var txtPan = Ext.ComponentQuery.query('#txtPanPaa')[0];
        var cboFiscalYear = Ext.ComponentQuery.query('#cboFiscalYearPaa')[0];
        var cboAssmtType = Ext.ComponentQuery.query('#cboAssmntTypePaa')[0];

        var txtTotalAssessedTaxable = Ext.ComponentQuery.query("#txtTotalAssessedTaxablePaa")[0];
        var txtTotalTaxIncTaxLaw = Ext.ComponentQuery.query("#txtChrg0Paa")[0];
        var txtTotalTaxSa = Ext.ComponentQuery.query("#txtChrg1Paa")[0];
        var txtAdditionalTax = Ext.ComponentQuery.query("#txtChrg2Paa")[0];

        var txtOtherAdjustment = Ext.ComponentQuery.query("#txtChrg10Paa")[0];
        var txtAmmendTax = Ext.ComponentQuery.query("#txtChrg11Paa")[0];
        var txtAdvanceTax = Ext.ComponentQuery.query("#txtChrg12Paa")[0];
        var txtRemainingTax = Ext.ComponentQuery.query("#txtChrg13Paa")[0];

        var txtSpecialCharge = Ext.ComponentQuery.query("#txtSpecChrg0Paa")[0];
        var txtSpecialChargeSa = Ext.ComponentQuery.query("#txtSpecChrg1Paa")[0];
        var txtRemainingCharge = Ext.ComponentQuery.query("#txtSpecChrg2Paa")[0];

        var txtDateUpto = Ext.ComponentQuery.query("#txtDateUptoPaa")[0];
        var txtAssessmentDate = Ext.ComponentQuery.query("#txtAssmntDatePaa")[0];

        var txtApRegNo = Ext.ComponentQuery.query("#txtRegNoPaa")[0];
        var txtApRegDate = Ext.ComponentQuery.query("#txtRegDatePaa")[0];
        var txtAdRegNo = Ext.ComponentQuery.query("#txtDecisionNoPaa")[0];
        var txtAdRegDate = Ext.ComponentQuery.query("#txtDecisionDatePaa")[0];           

        var chkDecType = Ext.ComponentQuery.query("#chkDecisionTypePaa")[0];

        //-------------------------------------------------------------------------
        // NB: Loading details using PAN and ACCOUNT-TYPE 
        //-------------------------------------------------------------------------
        me.loadControls(obj);

        strReasons.add(obj.root.AaAdditions);

        txtPan.setValue(data.Pan);
        cboFiscalYear.setValue(data.FiscalYear);  

        txtOtherAdjustment.setValue(data.OtherAdjustment);
        txtAmmendTax.setValue(data.AmmendTax);
        txtAdvanceTax.setValue(data.AdvanceTax);            
        txtRemainingTax.setValue(data.RemainingTax);

        txtTotalAssessedTaxable.setValue(data.TotalAssessedTaxable);
        txtTotalTaxIncTaxLaw.setValue(data.TotalTaxIncTaxLaw);
        txtTotalTaxSa.setValue(data.TotalTaxSa);
        txtAdditionalTax.setValue(data.AdditionalTax);

        txtSpecialCharge.setValue(data.SpecialCharge);
        txtSpecialChargeSa.setValue(data.SpecialChargeSa);
        txtRemainingCharge.setValue(data.RemainingCharge);

        txtDateUpto.setValue(data.DateUpto);


        if(chkDecType.items.items[0].initialConfig.value == data.DecisionType)
        {
            chkDecType.items.items[0].setValue(true);
        }
        else
        {
            chkDecType.items.items[1].setValue(true);
        }

        txtAssessmentDate.setValue(data.AssessmentDate);
        txtApRegNo.setValue(data.ApRegNo);
        txtApRegDate.setValue(data.ApRegDate);
        txtAdRegNo.setValue(data.AdRegNo);
        txtAdRegDate.setValue(data.AdRegDate);

        if(obj.root.AaInfoDetails != null &&  obj.root.AaInfoDetails.length > 0)
        {               
            me.reCalcCharge(obj.root.AaInfoDetails);             
        }

        if(obj.root.SubmittedDocs != null &&  obj.root.SubmittedDocs != "")
        {               
            me.setSubmittedDocs(obj.root.SubmittedDocs);             
        }
    },

    clearControls: function() {
        var me = this;

        var txtPan = Ext.ComponentQuery.query('#txtPanPaa')[0];
        var txtName = Ext.ComponentQuery.query('#txtNamePaa')[0];
        var txtHouseNo = Ext.ComponentQuery.query("#txtHouseNoPaa")[0];
        var txtWard = Ext.ComponentQuery.query('#txtWardNoPaa')[0];
        var txtStreet = Ext.ComponentQuery.query('#txtToleNamePaa')[0];
        var txtVdc = Ext.ComponentQuery.query('#txtVDCNamePaa')[0];
        var txtDistrict = Ext.ComponentQuery.query('#txtDistrictNamePaa')[0];
        var txtPhone = Ext.ComponentQuery.query('#txtPhonePaa')[0];
        var txtMobile = Ext.ComponentQuery.query('#txtMobilePaa')[0];
        var txtEmail = Ext.ComponentQuery.query('#txtEmailPaa')[0];
        var radiosLoc = Ext.ComponentQuery.query('#rbtnsLocationPaa')[0];

        var cboFiscalYear =  Ext.ComponentQuery.query('#cboFiscalYearPaa')[0];
        //var hdnTaxCatID =  Ext.ComponentQuery.query('#hdnTaxPayrCatIDPaa')[0];

        var txtSubNum = Ext.ComponentQuery.query('#txtSubmissionNoPaa')[0];
        var cboAssmtType = Ext.ComponentQuery.query('#cboAssmntTypePaa')[0];

        var txtAssmntDate = Ext.ComponentQuery.query('#txtAssmntDatePaa')[0];

        var txtRegNo = Ext.ComponentQuery.query("#txtRegNoPaa")[0];
        var txtRegDate = Ext.ComponentQuery.query("#txtRegDatePaa")[0];
        var txtDecisionNo = Ext.ComponentQuery.query("#txtDecisionNoPaa")[0];
        var txtDecisionDate = Ext.ComponentQuery.query("#txtDecisionDatePaa")[0];

        var chkDecType = Ext.ComponentQuery.query("#chkDecisionTypePaa")[0];

        var btnSave = Ext.ComponentQuery.query('#btnSavePaa')[0];
        var btnSubmit = Ext.ComponentQuery.query('#btnSubmitPaa')[0];
        var btnTransferBack = Ext.ComponentQuery.query('#btnTransferBackPaa')[0];

        var strReasons = Ext.getStore("ReasonsPaa");

        var txtDateUpto = Ext.ComponentQuery.query("#txtDateUptoPaa")[0];
        var txtAssessmentDate = Ext.ComponentQuery.query("#txtAssmntDatePaa")[0];

        var txtTotalAssessedTaxable = Ext.ComponentQuery.query("#txtTotalAssessedTaxablePaa")[0];
        var txtTotalTaxIncTaxLaw = Ext.ComponentQuery.query("#txtChrg0Paa")[0];
        var txtTotalTaxSa = Ext.ComponentQuery.query("#txtChrg1Paa")[0];
        var txtAdditionalTax = Ext.ComponentQuery.query("#txtChrg2Paa")[0];

        var txtOtherAdjustment = Ext.ComponentQuery.query("#txtChrg10Paa")[0];
        var txtAmmendTax = Ext.ComponentQuery.query("#txtChrg11Paa")[0];
        var txtAdvanceTax = Ext.ComponentQuery.query("#txtChrg12Paa")[0];
        var txtRemainingTax = Ext.ComponentQuery.query("#txtChrg13Paa")[0];

        var txtSpecialCharge = Ext.ComponentQuery.query("#txtSpecChrg0Paa")[0];
        var txtSpecialChargeSa = Ext.ComponentQuery.query("#txtSpecChrg1Paa")[0];
        var txtRemainingCharge = Ext.ComponentQuery.query("#txtSpecChrg2Paa")[0];

        var lblAction = Ext.ComponentQuery.query('#lblActionPaa')[0];

        var grdAnxs = Ext.ComponentQuery.query('#grdAnxsReasonsPaa')[0];
        grdAnxs.getSelectionModel().deselectAll();

        txtTotalAssessedTaxable.setValue("");
        txtTotalTaxIncTaxLaw.setValue("");
        txtTotalTaxSa.setValue("");
        txtAdditionalTax.setValue("");

        txtOtherAdjustment.setValue("");

        if(txtAmmendTax !== undefined)
        {
            txtAmmendTax.setValue("");
        }

        txtAdvanceTax.setValue("");
        txtRemainingTax.setValue("");

        txtSpecialCharge.setValue("");
        txtSpecialChargeSa.setValue("");
        txtRemainingCharge.setValue("");

        btnSave.setDisabled(false);
        btnSubmit.setDisabled(false);
        btnTransferBack.setDisabled(false);

        txtRegNo.setDisabled(true);
        txtRegDate.setDisabled(true);
        txtDecisionNo.setDisabled(true);
        txtDecisionDate.setDisabled(true);
        txtSubNum.setDisabled(true);

        chkDecType.items.items[0].setValue(false);
        chkDecType.items.items[1].setValue(false);

        txtDateUpto.setValue("");
        txtAssessmentDate.setValue("");

        txtRegNo.setValue("");
        txtRegDate.setValue("");
        txtDecisionNo.setValue("");
        txtDecisionDate.setValue("");
        txtSubNum.setValue("");

        txtAssmntDate.setValue(Ext.get('nepDate').dom.innerHTML);
        txtPan.setValue("");
        txtName.setValue("");
        txtHouseNo.setValue("");
        txtWard.setValue("");
        txtStreet.setValue("");
        txtVdc.setValue("");
        txtDistrict.setValue("");
        txtPhone.setValue("");
        txtMobile.setValue("");

        txtEmail.setValue("");
        cboFiscalYear.setValue("");

        strReasons.loadData([],false);
        lblAction.setVisible(false);

        me.clearCharge();
        //hdnTaxCatID.setValue("");
    },

    clearCharge: function() {
        var store = Ext.getStore("Charge");

        var chkChoice3 = Ext.ComponentQuery.query("#chkChoice3Paa")[0]; 
        var chkChoice4 = Ext.ComponentQuery.query("#chkChoice4Paa")[0]; 

        for(var i=3;i<11;i++){

            var id = "#txtChrg" + i + "Paa";

            var row = store.getAt(i).data;

            row.Amount = null;
            Ext.ComponentQuery.query(id)[0].setValue("");
        }

        chkChoice3.setValue(false);
        chkChoice4.setValue(false);
    },

    enableDecisionControls: function(chk,flag,param) {
        var txtRegNo = Ext.ComponentQuery.query("#txtRegNoPaa")[0];
        var txtRegDate = Ext.ComponentQuery.query("#txtRegDatePaa")[0];
        var txtDecisionNo = Ext.ComponentQuery.query("#txtDecisionNoPaa")[0];
        var txtDecisionDate = Ext.ComponentQuery.query("#txtDecisionDatePaa")[0];

        txtRegNo.setDisabled(flag);
        txtRegDate.setDisabled(flag);
        txtDecisionNo.setDisabled(flag);
        txtDecisionDate.setDisabled(flag);

        txtRegNo.setValue("");
        txtRegDate.setValue("");
        txtDecisionNo.setValue("");
        txtDecisionDate.setValue("");


        if(chk.getValue())
        {
            param.Checked = "true";

            chk.setValue(false);
            return;
        }




        //var chk = Ext.ComponentQuery.query("#chkDecisionTypePaa")[0];

        //console.log("chk",chk.items.items[0].getValue());
        //console.log("chk",chk.items.items[0].initialConfig.value);
        //var c = chk.getChecked();

        //var c = chk.items.items[0].setValue(true);
        //console.log(chk.getChecked());
        //console.log("chk",c[0].initialConfig.value);
    },

    calcAddTax: function(rowIndex) {
        //alert("add Tax !");
        var me = this;

        var chkChoice3 = Ext.ComponentQuery.query("#chkChoice3Paa")[0];
        var chkChoice4 = Ext.ComponentQuery.query("#chkChoice4Paa")[0];

        var row0 = Ext.ComponentQuery.query("#txtChrg0Paa")[0].getValue();
        var row1 = Ext.ComponentQuery.query("#txtChrg1Paa")[0].getValue();
        var row2 = Ext.ComponentQuery.query("#txtChrg2Paa")[0];

        var diff = 0;

        row0 = getFloat(row0);
        row1 = getFloat(row1);

        diff = row0 - row1;

        row2.setValue(diff);

        if(rowIndex == 0)
        {
            me.calcRemTax();
        }

        if(chkChoice3.getValue())
        {
            me.calcChoiceCharge("chkChoice3Paa");
        }
        else if(chkChoice4.getValue())
        {
            me.calcChoiceCharge("chkChoice4Paa");
        }

    },

    calcRemTax: function() {
        var me = this;
        var sum = 0;


        var store = Ext.getStore("Charge");
        var row0 = Ext.ComponentQuery.query("#txtChrg0Paa")[0].getValue();
        var row11 = Ext.ComponentQuery.query("#txtChrg11Paa")[0];

        row0 = getFloat(row0);

        for(var i=3;i<11;i++){

            var id = "#txtChrg" + i + "Paa";
            var val = Ext.ComponentQuery.query(id)[0].getValue();
            var row = store.getAt(i).data;

            val = getFloat(val);  
            row.Amount = val;
            sum = parseFloat(sum) + val;
        }

        sum = sum + row0;

        row11.setValue(sum);
        me.calcRemCharge();
    },

    calcRemCharge: function() {
        var row11 = Ext.ComponentQuery.query("#txtChrg11Paa")[0].getValue();
        var row12 = Ext.ComponentQuery.query("#txtChrg12Paa")[0].getValue();
        var row13 = Ext.ComponentQuery.query("#txtChrg13Paa")[0];

        var diff = 0;

        row11 = getFloat(row11);
        row12 = getFloat(row12);

        diff = row11 - row12;

        row13.setValue(diff);

        Ext.ComponentQuery.query("#txtChrg11Paa")[0].clearInvalid();
        row13.clearInvalid();
    },

    calcChoiceCharge: function(id) {
        var me = this;
        var param = me.validateParam();

        var chkChoice3 = Ext.ComponentQuery.query("#chkChoice3Paa")[0];
        var chkChoice4 = Ext.ComponentQuery.query("#chkChoice4Paa")[0];

        var row2 = Ext.ComponentQuery.query("#txtChrg2Paa")[0].getValue();
        var row3 = Ext.ComponentQuery.query("#txtChrg3Paa")[0];
        var row4 = Ext.ComponentQuery.query("#txtChrg4Paa")[0];

        row3.setValue("");
        row4.setValue("");


        if(id === "chkChoice3Paa")
        {
            if(chkChoice3.getValue())
            {
                row3.setValue(row2);
            }

            if(chkChoice4.getValue())
            {
                param.CheckedChoice = "true";

                chkChoice4.setValue(false);
                return;
            }

        }
        else if(id === "chkChoice4Paa")
        {
            if(chkChoice4.getValue())
            {
                row4.setValue(row2/2);
            }

            if(chkChoice3.getValue())
            {
                param.CheckedChoice = "true";

                chkChoice3.setValue(false);
                return;
            }
        }


    },

    validateParam: function() {
        var me = this;
        var view = Ext.ComponentQuery.query('#pnlAmendedAssmnt')[0];
        var user = me.getController('MyApp.controller.LoginSecurity');  
        var param = "";

        if(view === undefined && view.extraParam === null)
        {
            user.clearSession();

            return;

        }
        else
        {
            return view.extraParam;
        }
    },

    getSubmittedDocs: function() {
        var grdAnxs = Ext.ComponentQuery.query('#grdAnxsReasonsPaa')[0];

        var selected = grdAnxs.getSelectionModel().getSelection();
        var submittedDocs = "";

        for (var i = 0; i < selected.length; i++)
        {
            submittedDocs += selected[i].data.ID;
        }

        return submittedDocs;
    },

    reCalcCharge: function(rec) {
        var me = this;
        var len = rec.length;

        for(i = 0; i < len;i++)
        {
            var rowID =  parseInt(rec[i].ChargeID) + 2;

            var id = "#txtChrg" + rowID + "Paa";

            var txtCharge = Ext.ComponentQuery.query(id)[0];

            if((rec[i].Amount != null && rec[i].Amount != "")&& (rec[i].ChargeID == "1" || rec[i].ChargeID == "2"))
            {
                var chkID = "#chkChoice" + rowID + "Paa";
                var chk = Ext.ComponentQuery.query(chkID)[0]; 

                chk.setValue(true);

            }   


            txtCharge.setValue(rec[i].Amount);
        }

        me.calcAddTax();
    },

    setSubmittedDocs: function(docs) {
        var len = docs.length; 

        var newRecordsToSelect = [];
        var grdAnxs = Ext.ComponentQuery.query('#grdAnxsReasonsPaa')[0];
        var selected = grdAnxs.getSelectionModel().getSelection();


        var store =  grdAnxs.getStore();


        for(var i =0;i< len;i++)
        { 
            var idx = docs.charAt(i);
            var record = store.findRecord("ID",idx); 

            newRecordsToSelect.push(record);
        }

        grdAnxs.getSelectionModel().select(newRecordsToSelect);
    },

    save: function(recordStatus) {
        var me = this;
        var param = me.validateParam();

        var txtSubNum = Ext.ComponentQuery.query('#txtSubmissionNoPaa')[0];
        var txtPan = Ext.ComponentQuery.query('#txtPanPaa')[0];
        var cboFiscalYear = Ext.ComponentQuery.query('#cboFiscalYearPaa')[0];
        var cboAssmtType = Ext.ComponentQuery.query('#cboAssmntTypePaa')[0];

        var totalAssessedTaxable = Ext.ComponentQuery.query("#txtTotalAssessedTaxablePaa")[0].getValue();
        var totalTaxIncTaxLaw = Ext.ComponentQuery.query("#txtChrg0Paa")[0].getValue();
        var totalTaxSa = Ext.ComponentQuery.query("#txtChrg1Paa")[0].getValue();
        var additionalTax = Ext.ComponentQuery.query("#txtChrg2Paa")[0].getValue();

        var otherAdjustment = Ext.ComponentQuery.query("#txtChrg10Paa")[0].getValue();
        var ammendTax = Ext.ComponentQuery.query("#txtChrg11Paa")[0].getValue();
        var advanceTax = Ext.ComponentQuery.query("#txtChrg12Paa")[0].getValue();
        var remainingTax = Ext.ComponentQuery.query("#txtChrg13Paa")[0].getValue();

        var specialCharge = Ext.ComponentQuery.query("#txtSpecChrg0Paa")[0].getValue();
        var specialChargeSa = Ext.ComponentQuery.query("#txtSpecChrg1Paa")[0].getValue();
        var remainingCharge = Ext.ComponentQuery.query("#txtSpecChrg2Paa")[0].getValue();

        var dateUpto = Ext.ComponentQuery.query("#txtDateUptoPaa")[0].getValue();
        var assessmentDate = Ext.ComponentQuery.query("#txtAssmntDatePaa")[0].getValue();

        var apRegNo = Ext.ComponentQuery.query("#txtRegNoPaa")[0].getValue();
        var apRegDate = Ext.ComponentQuery.query("#txtRegDatePaa")[0].getValue();
        var adRegNo = Ext.ComponentQuery.query("#txtDecisionNoPaa")[0].getValue();
        var adRegDate = Ext.ComponentQuery.query("#txtDecisionDatePaa")[0].getValue();

        var offCode = Ext.get('offCode').dom.innerHTML;
        var pan = txtPan.getValue();
        var acctType = "10";
        var assessmentNo = txtSubNum.getValue();
        var fiscalYear = cboFiscalYear.getValue();

        var submittedDocs = me.getSubmittedDocs();
        var decisionType = "";

        var chk = Ext.ComponentQuery.query("#chkDecisionTypePaa")[0];
        chkChecked = chk.getChecked();

        if(chkChecked.length > 0)
        {
            decisionType = chkChecked[0].initialConfig.value;
        }
        //console.log(c.length);

        //console.log(c[0].initialConfig.value)

        //var offCode = Ext.get('offCode').dom.innerHTML;
        //var pan = txtPan.getValue();
        //var acctType = "10";
        //var assessmentNo = txtSubNum.getValue();
        //var assessmentDate = "";
        //var fiscalYear = cboFiscalYear.getValue();
        //var submittedDocs = "";
        //var decisionType = "";
        //var apRegNo = "";
        //var apRegDate  = "";
        //var adRegNo = "";
        //var adRegDate = "";
        var assessmentReason = "";
        //var dateUpto = "";
        //var totalTaxIncTaxLaw = "";
        //var totalTaxSa = "";
        //var additionalTax = "";
        //var ammendTax = "";
        //var advanceTax = "";
        //var remainingTax = "";
        //var totalAssessedTaxable = "1000";
        //var remainingCharge = "";
        //var otherAdjustment = "";
        //var specialCharge = "";
        //var specialChargeSa = "";
        //var recordStatus = "";
        var tranNo = "";
        var tranDate = "";
        var userName = "";
        var terminal = "Terminate";
        var action = "A";


        if(param.Action == "E")
        {
            action = "E";
        }
        //-------------------------------------------------------------------------------------

        var aaInfoDetails = null;
        var aaAdditions = null;

        var strReasons = Ext.getStore("ReasonsPaa");
        var strCharge = Ext.getStore("Charge");

        if(strReasons.getCount() > 0)
        {
            aaAdditions = getJson(strReasons); 
        }


        if(strCharge.getCount() > 0)
        {
            strCharge.filter('ChargeType',"A");

            aaInfoDetails = getJson(strCharge); 
            strCharge.clearFilter();
        }

        var aaInfo = {
            OffCode :offCode,
            Pan :pan,
            AcctType :acctType,
            AssessmentNo :assessmentNo,
            AssessmentDate :assessmentDate,
            FiscalYear :fiscalYear,
            SubmittedDocs :submittedDocs,
            DecisionType :decisionType,
            ApRegNo :apRegNo,
            ApRegDate :apRegDate,
            AdRegNo :adRegNo,
            AdRegDate :adRegDate,
            AssessmentReason :assessmentReason,
            DateUpto :dateUpto,
            TotalTaxIncTaxLaw :totalTaxIncTaxLaw,
            TotalTaxSa :totalTaxSa,
            AdditionalTax :additionalTax,
            AmmendTax :ammendTax,
            AdvanceTax :advanceTax,
            RemainingTax :remainingTax,
            TotalAssessedTaxable :totalAssessedTaxable,
            RemainingCharge :remainingCharge,
            OtherAdjustment :otherAdjustment,
            SpecialCharge :specialCharge,
            SpecialChargeSa :specialChargeSa,
            RecordStatus :recordStatus,
            TranNo :tranNo,
            TranDate :tranDate,
            UserName :userName,
            Terminal :terminal,
            Action :action,
            AaInfoDetails :aaInfoDetails,
            AaAdditions :aaAdditions
        };

        //console.log("aaInfo>>",aaInfo);

        var wait = waitMsg('Saving ...');

        Ext.Ajax.request({
            url:'../Handlers/IncomeTax/AmendedAssessment/AaInfoHandler.ashx?method=SaveAaInfo',
            params:{aaInfo:JSON.stringify(aaInfo)},
            success:function(result, request)
            {
                wait.hide();
                var obj = Ext.decode(result.responseText);

                message = obj.message;

                if(obj.success === "false")
                {
                    msg("FAILURE",message); 
                }
                else
                { 
                    msg("SUCCESS",message); 

                }
            },
            failure:  function ( result, request ) { 

                wait.hide();

                msg("FAILURE","Error in Saving data !!!");        
            }
        });
    },

    loadAnxSummary: function(submissionNo,async) {
        Ext.Ajax.request({
            url:"../Handlers/IncomeTax/D03/DCTBAnnexHandler.ashx?method=GetDCTBAnnexSummary" ,
            params:{assessmentNo:submissionNo},
            async : async,
            success: function ( result, request ) {   

                var obj = Ext.decode(result.responseText); 

                var strAnxSummary = Ext.create ('Ext.data.Store', {
                    fields: ['AnnexID','Business','Action'],
                    proxy: {
                        type: 'ajax',
                        url: '',
                        reader: {
                            type: 'json',
                            root: 'root'
                        }
                    },
                    storeId:'AnxSummary'
                });

                strAnxSummary.loadData([],false);
                strAnxSummary.add(obj.root);
                strAnxSummary.sort('AnnexID','ASC');
            },
            failure:  function ( result, request ) { 
                msg("FAILURE","Error in Saving data !!!");

            }
        });

    },

    getLoginTB: function(submissionNo) {
        var me = this;
        var param = me.validateParam();

        Ext.Ajax.request({
            url: '../Handlers/Vat/VatReturnsSubmissionNumberHandler.ashx',
            params:{method:'GetLoginTBs',
            submissionNo:submissionNo},
            async:false,
            success: function(result) {

                var obj = Ext.decode(result.responseText);        
                var pan = obj.root.PAN;

                console.log("pan>>",pan);


                //-------------------------------------------------------------------------
                // NB: Loading details using PAN and ACCOUNT-TYPE i.e. for Submission Login
                //-------------------------------------------------------------------------
                LoadTaxpayerInfoWithValidPan(pan,"10",function(data){

                    console.log("data::",data);
                    var txtPan = Ext.ComponentQuery.query('#txtPanPaa')[0];
                    var lblAction = Ext.ComponentQuery.query('#lblActionPaa')[0];
                    var btnSave = Ext.ComponentQuery.query('#btnSavePaa')[0];
                    var btnSubmit = Ext.ComponentQuery.query('#btnSubmitPaa')[0];            

                    txtPan.setValue(pan);
                    btnSave.setDisabled(false);
                    btnSubmit.setDisabled(false);      
                    lblAction.setVisible(false);
                    param.Action = "";

                    me.loadControls(data);

                });

            },
            failure: function(form, action) {

                msg("FAILURE","Error in Fetching data !!!");
            }
        });

    },

    init: function(application) {
        this.control({
            "#pnlAmendedAssmnt": {
                afterrender: this.onPnlAmendedAssmntAfterRender
            },
            "#txtPanPaa": {
                keypress: this.onTxtPanPaaKeypress
            },
            "#actionAnxsReasons": {
                click: this.onActionAnxsReasonsClick
            },
            "#btnUpdateAnxPaa": {
                click: this.onBtnUpdateAnxPaaClick
            },
            "#grdTotAssTaxablePaa": {
                afterrender: this.onGrdTotAssTaxablePaaAfterRender
            },
            "#grdSpecialChargePaa": {
                afterrender: this.onGrdSpecialChargePaaAfterRender
            },
            "#btnAddReasonPaa": {
                click: this.onBtnAddReasonPaaClick
            },
            "#btnEditPaa": {
                click: this.onBtnEditPaaClick
            },
            "#chkReAppealPaa": {
                change: this.onCheckboxfieldChange
            },
            "#chkAppealPaa": {
                change: this.onChkAppealChange
            },
            "#btnSavePaa": {
                click: this.onBtnSavePaaClick
            },
            "#cboAssmntTypePaa": {
                change: this.onCboAssmntTypePaaChange
            },
            "#btnSubmitPaa": {
                click: this.onBtnSubmitPaaClick
            },
            "#btnCancelPaa": {
                click: this.onBtnCancelPaaClick
            },
            "#btnTransferBackPaa": {
                click: this.onBtnTransferBackPaaClick
            },
            "#txtSubmissionNoPaa": {
                keypress: this.onTxtSubmissionNoPaaKeypress
            }
        });
    }

});
