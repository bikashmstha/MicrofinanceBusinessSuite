/*
 * File: app/controller/User.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.User', {
    extend: 'Ext.app.Controller',

    stores: [
        'Office',
        'User',
        'OfficeApplication',
        'ApplicationRole',
        'RoleGranted',
        'ModuleFunction',
        'UserModuleFunction',
        'Designation'
    ],

    onCboOfficeSelect: function(combo, records, eOpts) {
        //console.log('before loading...');

        //var controller = this.getController("Role");
        //if (controller)
        //controller.init();

        //console.log('after loading...');


        var txtUsrID = Ext.ComponentQuery.query('#txtUserID')[0];
        var txtUsrName = Ext.ComponentQuery.query('#txtUserName')[0];
        var txtPass = Ext.ComponentQuery.query('#txtPassword')[0];
        var txtConfirmPass = Ext.ComponentQuery.query('#txtConfirmPassword')[0];
        var txtTranDate = Ext.ComponentQuery.query('#txtTranDate')[0];

        var strUser = Ext.getStore('User');
        var strOfficeApp = Ext.getStore('OfficeApplication');
        var strAppRole = Ext.getStore('ApplicationRole');
        var strRoleGranted = Ext.getStore('RoleGranted');
        var strModFunction = Ext.getStore('ModuleFunction');
        var strUsrModFunction = Ext.getStore('UserModuleFunction');


        var txtEmpID = Ext.ComponentQuery.query('#txtEmpID')[0];
        var cboDesignation = Ext.ComponentQuery.query('#cboDesignation')[0];
        var rbgStatus = Ext.ComponentQuery.query('#rbgStatus')[0];

        cboDesignation.setValue("");
        cboDesignation.clearInvalid();

        rbgStatus.items.get(0).setValue(true);

        txtUsrID.setValue("");
        txtUsrName.setValue("");
        txtPass.setValue("");
        txtTranDate.setValue("");
        txtConfirmPass.setValue("");
        txtEmpID.setValue("");

        txtUsrID.setReadOnly(false);
        txtUsrName.setReadOnly(false);
        txtTranDate.setReadOnly(false);
        txtPass.setReadOnly(false);
        txtConfirmPass.setReadOnly(false);
        txtEmpID.setReadOnly(false);

        strOfficeApp.loadData([],false);
        strAppRole.loadData([],false);
        strRoleGranted.loadData([],false);
        strModFunction.loadData([],false);
        strUsrModFunction.loadData([],false);


        strUser.load(
        {params:{officeCode:combo.getValue()}
        }
        );


        strOfficeApp.load(
        {params:{OfficeCode:combo.getValue()}
        }
        );





        //var grdUser =  Ext.ComponentQuery.query('#grdUser')[0];
        //grdUser.bindStore(strUser);

        //Ext.getCmp('grid').getSelectionModel().selectRow(RowIndex);



    },

    onPanelAfterRender: function(component, eOpts) {
        var strOffice = Ext.getStore('Office');
        var strDesig = Ext.getStore('Designation');

        strOffice.load();
        strDesig.load();


        strOffice.load(
        {
            scope:this,
            callback: function(records, operation, success){
                if(success){

                    var officeTransferTo = Ext.ComponentQuery.query('#cboOfficeTransferTo')[0];
                    var strOfficeTransferTo = deepCloneStore(strOffice,"OfficeTransferTo");

                    //officeTransferTo.store = strOfficeTransferTo;
                    officeTransferTo.bindStore(strOfficeTransferTo);

                }
            }
        });



    },

    onBtnSaveClick: function(button, e, eOpts) {
        var me = this;


        var form = button.up('form').getForm();

        if(!form.isValid())
        {
            msg("WARNING","Please Fill the required fields !!!");
            return;
        }



        var authtWindow = Ext.create('MyApp.view.UsersAuthorization');

        authtWindow.modal = true;
        authtWindow.show();
    },

    onBtnCancelClick: function(button, e, eOpts) {
        this.clearControls("All");
    },

    onTxtConfirmPasswordBlur: function(component, e, eOpts) {
        /*

        var me = this;

        var txtPass = Ext.ComponentQuery.query('#txtPassword')[0];
        var txtConfirmPass = Ext.ComponentQuery.query('#txtConfirmPassword')[0];

        if(txtPass.getValue() != txtConfirmPass.getValue())
        {
        msg("WARNING","PASSWORD MISTMATCH !!!");

        txtConfirmPass.focus();

        return;
        }


        */
    },

    onBtnAddFunctionClick: function(button, e, eOpts) {
        var me = this;
        var dupMsg = "";
        var grdApp = Ext.ComponentQuery.query('#grdOfficeApplication')[0];
        var grdModFunc = Ext.ComponentQuery.query('#grdModuleFunction')[0];

        var selectedApp = grdApp.getSelectionModel().getSelection()[0];
        var selectedModFunc = grdModFunc.getSelectionModel().getSelection();

        var str = Ext.getStore('UserModuleFunction');

        if(selectedModFunc.length < 1)
        {
            msg("WARNING","Please select Functions to be added first !!!");

            return;

        }
        else
        {

            for (var i = 0; i < selectedModFunc.length; i++)
            {

                var recordIndex = str.findBy(
                function(record, id){
                    if(record.get('ApplicationID') === selectedApp.data.ApplicationID &&
                    record.get('ModuleID') === selectedModFunc[i].data.ModuleID &&
                    record.get('FunCD') === selectedModFunc[i].data.FunCD
                    ){
                        return true;  // a record with this data exists
                    }
                    return false;  // there is no record in the store with this data
                });

                if(recordIndex != -1)
                {
                    dupMsg += selectedModFunc[i].data.ModuleID + "->" + selectedModFunc[i].data.FunDesc + '<br>';

                }
                else
                {

                    str.add({ApplicationID: selectedApp.data.ApplicationID,
                        ModuleID: selectedModFunc[i].data.ModuleID,
                        ModuleDesc: selectedModFunc[i].data.ModuleDesc,
                        FunCD:selectedModFunc[i].data.FunCD,
                    FunDesc:selectedModFunc[i].data.FunDesc});
                }
            }

        }

        if(dupMsg !== "")
        {
            var finalMsg = "";

            if(selectedModFunc.length > 1)
            finalMsg = "Following module functions already exists <br><br>";
            else
            finalMsg = "Following module function already exists <br><br>";

            finalMsg += dupMsg;
            msg('WARNING',finalMsg);
        }


        grdModFunc .getSelectionModel().deselectAll();
    },

    onBtnLoadFunClick: function(button, e, eOpts) {
        var me = this;

        var strModuleFunction = Ext.getStore('ModuleFunction');
        var grdApp = Ext.ComponentQuery.query('#grdOfficeApplication')[0];

        if(grdApp.getSelectionModel().getSelection().length < 1)
        {
            msg("WARNING","Please Select Application first !!!");

            return;

        }
        else
        {
            var selectedApp = grdApp.getSelectionModel().getSelection()[0];
            var appID = "";

            if(selectedApp !== undefined)
            appID = selectedApp.data.ApplicationID;

            strModuleFunction.load({params:{appID:appID}});
        }
    },

    onUsersBeforeRender: function(component, eOpts) {
        var me = this;
        me.clearStores();

        /*
        var grd = abstractcomponent.query('#grdModuleFunction')[0];

        var tmpRoleGranted = Ext.create('Ext.data.Store',{
        model: 'MyApp.model.RoleGranted',
        storeId:'tmpRoleGranted',
        proxy: {
        type: 'ajax',
        url: '',
        reader: {
        type: 'json',
        root: 'data'
        }   }
        });

        */



    },

    onGrdAppItemClick: function(dataview, record, item, index, e, eOpts) {
        var appID = record.raw.ApplicationID;

        var btnAddRole = Ext.ComponentQuery.query('#btnAddOfficeRole')[0];
        var btnLoadFun = Ext.ComponentQuery.query('#btnLoadFun')[0];
        var btnAddFunction = Ext.ComponentQuery.query('#btnAddFunction')[0];


        var strAppRole = Ext.getStore('ApplicationRole');
        var strModFunction = Ext.getStore('ModuleFunction');

        strAppRole.loadData([],false);
        strModFunction.loadData([],false);

        strAppRole.load(
        {
            params:{appID:appID}
        });


        btnAddRole.setDisabled(false);
        btnLoadFun.setDisabled(false);
        btnAddFunction.setDisabled(false);
    },

    onGrdUserItemClick: function(dataview, record, item, index, e, eOpts) {
        var me = this;

        var cboOffice = Ext.ComponentQuery.query('#cboOffice')[0];
        var txtUsrID = Ext.ComponentQuery.query('#txtUserID')[0];
        var txtUsrName = Ext.ComponentQuery.query('#txtUserName')[0];
        var txtPass = Ext.ComponentQuery.query('#txtPassword')[0];
        var txtConfirmPass = Ext.ComponentQuery.query('#txtConfirmPassword')[0];
        var txtTranDate = Ext.ComponentQuery.query('#txtTranDate')[0];
        var txtEmpID = Ext.ComponentQuery.query('#txtEmpID')[0];
        var cboDesignation = Ext.ComponentQuery.query('#cboDesignation')[0];
        var rbgStatus = Ext.ComponentQuery.query('#rbgStatus')[0];

        var hdnUserStatus = Ext.ComponentQuery.query('#hdnUserStatus')[0];
        var hdnUserDesig = Ext.ComponentQuery.query('#hdnUserDesig')[0];

        var strUser = Ext.getStore('User');
        var strOfficeApp = Ext.getStore('OfficeApplication');
        var strAppRole = Ext.getStore('ApplicationRole');
        var strRoleGranted = Ext.getStore('RoleGranted');
        var strModFunction = Ext.getStore('ModuleFunction');
        var strUsrModFunction = Ext.getStore('UserModuleFunction');


        var cboOfficeTransferTo = Ext.ComponentQuery.query('#cboOfficeTransferTo')[0];

        Ext.Ajax.request({
            url: '../Handlers/Security/UserHandler.ashx?method=Details',
            params: {userID: record.data.UserID},
            success: function ( result, request ) {

                cboOfficeTransferTo.setDisabled(false);

                var obj = Ext.decode(result.responseText);

                var data = obj.root;

                txtUsrID.setValue(data.UserID);
                txtUsrName.setValue(data.UserName);
                txtTranDate.setValue(data.TranDate);
                txtPass.setValue("..........");
                txtConfirmPass.setValue("..........");
                txtEmpID.setValue(data.EmpID);

                txtUsrID.setReadOnly(true);
                txtUsrName.setReadOnly(true);
                txtTranDate.setReadOnly(true);
                txtPass.setReadOnly(true);
                txtConfirmPass.setReadOnly(true);
                txtEmpID.setReadOnly(true);

                if(data.UserDesignation.AccountStatus !== null)
                hdnUserStatus.setValue(data.AccountStatus);

                if(data.UserDesignation.DesignationID !== null)
                hdnUserDesig.setValue(data.UserDesignation.DesignationID);

                cboDesignation.setValue(data.UserDesignation.DesignationID);

                if(data.AccountStatus  == "A")
                rbgStatus.items.get(0).setValue(true);
                else if(data.AccountStatus  == "I")
                rbgStatus.items.get(1).setValue(true);
                else
                rbgStatus.items.get(2).setValue(true);

                strUsrModFunction.loadData([],false);
                strRoleGranted.loadData([],false);

                strUsrModFunction.add(data.UserModuleFunctions);
                strRoleGranted.add(data.UserRoles);

            },
            failure: function ( result, request ) {

                var obj = Ext.decode(result.responseText);

                // var data = obj.root;

                msg("FAILURE",obj.message);
            }

        });
    },

    onBtnAddOfficeRoleClick: function(button, e, eOpts) {
        var me = this;
        var dupMsg = "";

        var grdApp = Ext.ComponentQuery.query('#grdOfficeApplication')[0];
        var grdRole = Ext.ComponentQuery.query('#grdApplicationRole')[0];

        var selectedApp = grdApp.getSelectionModel().getSelection()[0];
        var selectedRole = grdRole.getSelectionModel().getSelection();

        var str = Ext.getStore('RoleGranted');

        if(selectedRole.length < 1)
        {
            msg("WARNING","Please select Roles to be added first !!!");

            return;

        }
        else
        {

            for (var i = 0; i < selectedRole.length; i++)
            {
                //    var match = store.find('title','title');
                //  if(match == -1) {


                var recordIndex = str.findBy(
                function(record, id){
                    if(record.get('ApplicationID') === selectedApp.data.ApplicationID &&
                    record.get('RoleID') === selectedRole[i].data.RoleID
                    ){
                        return true;  // a record with this data exists
                    }
                    return false;  // there is no record in the store with this data
                });

                if(recordIndex != -1)
                {

                    dupMsg += selectedRole[i].data.RoleID + ',';

                }
                else
                {
                    str.add({ApplicationID: selectedApp.data.ApplicationID,
                        Application: selectedApp.data.Description,
                        RoleID:selectedRole[i].data.RoleID,
                    Description:selectedRole[i].data.Description});

                }
            }
        }


        if(dupMsg !== "")
        {

            dupMsg= dupMsg.substring(0,dupMsg.length-1);
            dupMsg += ' already exists !!!';
            msg('WARNING',dupMsg);
        }

        grdRole .getSelectionModel().deselectAll();

    },

    onBtnAuthorizationOkClick: function(button, e, eOpts) {
        var me = this;

        var f = button.up('window').down('form');
        var form = f.getForm();

        if(!form.isValid())
        {
            msg("WARNING","Please Fill the required fields !!!");
            return;
        }




        var rqdUrl = '../Handlers/Security/UserHandler.ashx?method=';
        var message = "";
        var errMsg = "";
        var waitSave = "";
        var user= "";
        var status = "";
        var userStatus="";
        var userDesignation= "";
        var grdUser = Ext.ComponentQuery.query('#grdUser')[0];
        var selectedUser = grdUser.getSelectionModel().getSelection()[0];
        var cboOffice = Ext.ComponentQuery.query('#cboOffice')[0];
        var txtUsrID = Ext.ComponentQuery.query('#txtUserID')[0];
        var cboDesignation = Ext.ComponentQuery.query('#cboDesignation')[0];
        var txtEmpID = Ext.ComponentQuery.query('#txtEmpID')[0];
        var rb = Ext.ComponentQuery.query('#rbgStatus')[0];


        status = rb.getValue().status;



        //------------------------------------------------------
        // NB: Hidden Fields
        //------------------------------------------------------

        var hdnUserStatus = Ext.ComponentQuery.query('#hdnUserStatus')[0];
        var hdnUserDesig = Ext.ComponentQuery.query('#hdnUserDesig')[0];



        //------------------------------------------------------
        // NB: Extracting Store datas
        //------------------------------------------------------

        var strUser = Ext.getStore('User');

        var strRoleGranted = Ext.getStore('RoleGranted');
        var jsonRoleGranted = "";

        strRoleGranted.clearFilter();

        if(strRoleGranted.getCount() > 0)
        {

            //strRoleGranted = Ext.getStore('RoleGranted');
            //strRoleGranted.clearFilter();
            jsonRoleGranted = getJson(strRoleGranted);

            strRoleGranted .filter(function(item){
                return item.get("Action")!= 'D';
            });
        }


        var strModFunction = Ext.getStore('UserModuleFunction');
        var jsonModfunction = "";


        strModFunction.clearFilter();

        if(strModFunction.getCount() > 0)
        {
            //strModFunction.clearFilter();
            jsonModfunction = getJson(strModFunction);


            strModFunction.filter(function(item){
                return item.get("Action")!= 'D';
            });
        }



        //------------------------------------------------------



        var txtAuthBy  = Ext.ComponentQuery.query('#txtAuthorizationBy')[0];
        var txtAuthDate = Ext.ComponentQuery.query('#txtAuthorizationDate')[0];
        var txtAuthNo = Ext.ComponentQuery.query('#txtAuthorizationNo')[0];
        var desig =  cboDesignation.getValue();

        if(hdnUserDesig.getValue() != desig)
        {
            userDesignation= {
                UserID : txtUsrID.getValue(),
                DesignationID:cboDesignation.getValue(),
                // FromDate: '2069.09.09',
                AuthorizationNo:txtAuthNo.getValue(),
                AuthorizationBy:txtAuthBy.getValue(),
                AuthorizationDate:txtAuthDate.getValue()

            };
        }


        if(hdnUserStatus.getValue() !== status)
        {

            userStatus= {
                UserID : txtUsrID.getValue(),
                Status :status,
                //FromDate: '2069.09.09',
                AuthorizationNo:txtAuthNo.getValue(),
                AuthorizationBy:txtAuthBy.getValue(),
                AuthorizationDate:txtAuthDate.getValue()

            };
        }




        if(selectedUser !== undefined)
        {

            //------------------------------------------------------
            // NB: For Edit Case
            //------------------------------------------------------

            var officeTransferTo = Ext.ComponentQuery.query('#cboOfficeTransferTo')[0].getValue();

            var oUser = null;
            if(officeTransferTo !== null)
            {
                oUser= {
                    OfficeCode:officeTransferTo,
                    AuthorizationNo:txtAuthNo.getValue(),
                    AuthorizationBy:txtAuthBy.getValue(),
                    AuthorizationDate:txtAuthDate.getValue(),
                    Action:"A"
                    //Action:"E"

                };
            }

            user={
                UserID : txtUsrID.getValue(),
                AccountStatus: status,
                UserRoles :jsonRoleGranted,
                UserModuleFunctions : jsonModfunction,
                UserDesignation:userDesignation,
                UserStatus :userStatus,
                OfficeUser : oUser,
                CreatedBy : "ITS",
                AuthorizationNo:txtAuthNo.getValue(),
                AuthorizationBy:txtAuthBy.getValue(),
                AuthorizationDate:txtAuthDate.getValue()
            };

            console.log("edit user " ,user);

            rqdUrl += 'Edit';
            message = "Successfully Updated.";
            errMsg = "Error in Update !!!";

            //waitSave = Ext.MessageBox.wait('Updating ...');
            waitSave = waitMsg("Updating ...");

        }
        else
        {

            //------------------------------------------------------
            // NB: For Save Case
            //------------------------------------------------------

            var txtUsrName = Ext.ComponentQuery.query('#txtUserName')[0];
            var txtPass = Ext.ComponentQuery.query('#txtPassword')[0];
            var txtConfirmPass = Ext.ComponentQuery.query('#txtConfirmPassword')[0];
            var txtTranDate =  Ext.ComponentQuery.query('#txtTranDate')[0];


            if(txtPass.getValue() !== txtConfirmPass.getValue())
            {
                msg("WARNING","PASSWORD MISTMATCH !!!");

                return;
            }


            var strOfficeApp = Ext.getStore('OfficeApplication');
            var strAppRole = Ext.getStore('ApplicationRole');
            var strUsrModFunction = Ext.getStore('ModuleFunction');



            var oUser= {
                OfficeCode: cboOffice.getValue(),
                //FromDate: '2069.09.09',
                AuthorizationNo:txtAuthNo.getValue(),
                AuthorizationBy:txtAuthBy.getValue(),
                AuthorizationDate:txtAuthDate.getValue()

            };




            user={
                UserID : txtUsrID.getValue(),
                UserName :txtUsrName.getValue(),
                EmpID :txtEmpID.getValue(),
                Password : txtPass.getValue(),
                AccountStatus: status,
                TranDate : txtTranDate.getValue(),
                UserRoles :jsonRoleGranted,
                UserModuleFunctions : jsonModfunction,
                OfficeUser : oUser,
                UserDesignation:userDesignation,
                UserStatus :userStatus,
                CreatedBy : "ITS",
                AuthorizationNo:txtAuthNo.getValue(),
                AuthorizationBy:txtAuthBy.getValue(),
                AuthorizationDate:txtAuthDate.getValue()

            };


            rqdUrl += 'Save';
            message = "Sucessfully Saved.";
            errMsg = "Error in Save !!!";

            //waitSave = Ext.MessageBox.wait('Saving ...');
            waitSave = waitMsg("Saving ...");

        }


        //------------------------------------------------------
        // NB: Posting Data to Server
        //------------------------------------------------------

        Ext.Ajax.request({
            url:rqdUrl ,
            params:{user:JSON.stringify(user)},
            success: function ( result, request ) {

                waitSave.hide();
                button.up('window').close();

                var obj = Ext.decode(result.responseText);

                msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.success === "true" ?message:obj.message);
                if(obj.success === "false"){ return;}

                me.clearControls("");
                me.clearAuthorization();

                strUser.load({params:{officeCode:cboOffice.getValue()}});
            },
            failure: function ( result, request ) {

                waitSave.hide();

                msg("FAILURE",errMsg);
            }

        });




        //var editedRecords = grid.getStore().getUpdatedRecords(); // <---- OK
        //var editedFirstName = editedRecords[0].data.FirstName;
    },

    onBtnAuthorizationCancelClick: function(button, e, eOpts) {
        var me = this;

        me.clearAuthorization();
        button.up('window').close();
    },

    clearStores: function() {

        var strUser = Ext.getStore('User');
        var strOfficeApp = Ext.getStore('OfficeApplication');
        var strAppRole = Ext.getStore('ApplicationRole');
        var strRoleGranted = Ext.getStore('RoleGranted');
        var strModFunction = Ext.getStore('ModuleFunction');
        var strUsrModFunction = Ext.getStore('UserModuleFunction');


        strUser.loadData([],false);
        strOfficeApp.loadData([],false);
        strAppRole.loadData([],false);
        strRoleGranted.loadData([],false);
        strModFunction.loadData([],false);
        strUsrModFunction.loadData([],false);
    },

    clearControls: function(arg) {
        var cboOffice = Ext.ComponentQuery.query('#cboOffice')[0];
        var cboOfficeTransferTo = Ext.ComponentQuery.query('#cboOfficeTransferTo')[0];
        var txtUsrID = Ext.ComponentQuery.query('#txtUserID')[0];
        var txtUsrName = Ext.ComponentQuery.query('#txtUserName')[0];
        var txtPass = Ext.ComponentQuery.query('#txtPassword')[0];
        var txtConfirmPass = Ext.ComponentQuery.query('#txtConfirmPassword')[0];
        var txtTranDate = Ext.ComponentQuery.query('#txtTranDate')[0];

        var txtEmpID = Ext.ComponentQuery.query('#txtEmpID')[0];
        var cboDesignation = Ext.ComponentQuery.query('#cboDesignation')[0];
        var rbgStatus = Ext.ComponentQuery.query('#rbgStatus')[0];


        var strUser = Ext.getStore('User');
        var strOfficeApp = Ext.getStore('OfficeApplication');
        var strAppRole = Ext.getStore('ApplicationRole');
        var strRoleGranted = Ext.getStore('RoleGranted');
        var strModFunction = Ext.getStore('ModuleFunction');
        var strUsrModFunction = Ext.getStore('UserModuleFunction');

        var btnAddRole = Ext.ComponentQuery.query('#btnAddOfficeRole')[0];
        var btnLoadFun = Ext.ComponentQuery.query('#btnLoadFun')[0];
        var btnAddFunction = Ext.ComponentQuery.query('#btnAddFunction')[0];

        var hdnUserStatus = Ext.ComponentQuery.query('#hdnUserStatus')[0];
        var hdnUserDesig = Ext.ComponentQuery.query('#hdnUserDesig')[0];


        var grdApp = Ext.ComponentQuery.query('#grdOfficeApplication')[0];


        grdApp.getSelectionModel().deselectAll();

        if(arg == "All")
        {
            cboOffice.setValue("");
            strUser.loadData([],false);
            strOfficeApp.loadData([],false);
        }

        cboOfficeTransferTo.setDisabled(true);
        cboOfficeTransferTo.setValue("");
        cboDesignation.setValue("");

        rbgStatus.items.get(0).setValue(true);

        hdnUserStatus.setValue("");
        hdnUserDesig.setValue("");

        txtEmpID.setValue("");
        txtUsrID.setValue("");
        txtUsrName.setValue("");
        txtPass.setValue("");
        txtTranDate.setValue("");
        txtConfirmPass.setValue("");


        cboOffice.clearInvalid();

        cboDesignation.clearInvalid();

        txtEmpID.clearInvalid();
        txtUsrID.clearInvalid();
        txtUsrName.clearInvalid();
        txtPass.clearInvalid();
        txtTranDate.clearInvalid();
        txtConfirmPass.clearInvalid();


        strAppRole.loadData([],false);
        strRoleGranted.loadData([],false);
        strModFunction.loadData([],false);
        strUsrModFunction.loadData([],false);

        txtUsrID.setReadOnly(false);
        txtUsrName.setReadOnly(false);
        txtTranDate.setReadOnly(false);
        txtPass.setReadOnly(false);
        txtConfirmPass.setReadOnly(false);

        btnAddRole.setDisabled(true);
        btnLoadFun.setDisabled(true);
        btnAddFunction.setDisabled(true);

        //Ext.ComponentQuery.query('#rdoGroupGender')[0].items.get(0).getGroupValue()

    },

    getClone: function(myObj) {
        if(myObj === undefined)
        return myObj;
        var objectClone = new myObj.constructor();
        for (var property in myObj)
        if (typeof myObj[property] == 'object')
        objectClone[property] = getClone(myObj[property]);
        else
        objectClone[property] = myObj[property];
        return objectClone;
    },

    clearAuthorization: function() {
        var txtAuthorizationBy = Ext.ComponentQuery.query('#txtAuthorizationBy')[0];
        var txtAuthorizationDate = Ext.ComponentQuery.query('#txtAuthorizationDate')[0];
        var txtAuthorizationNo = Ext.ComponentQuery.query('#txtAuthorizationNo')[0];

        if(txtAuthorizationBy !== undefined)
        txtAuthorizationBy.setValue("");

        if(txtAuthorizationDate !== undefined)
        txtAuthorizationDate.setValue("");

        if(txtAuthorizationNo !== undefined)
        txtAuthorizationNo.setValue("");
    },

    init: function(application) {
        this.control({
            "#cboOffice": {
                select: this.onCboOfficeSelect
            },
            "#Users": {
                afterrender: this.onPanelAfterRender,
                beforerender: this.onUsersBeforeRender
            },
            "#btnSave": {
                click: this.onBtnSaveClick
            },
            "#btnCancel": {
                click: this.onBtnCancelClick
            },
            "#txtConfirmPassword": {
                blur: this.onTxtConfirmPasswordBlur
            },
            "#btnAddFunction": {
                click: this.onBtnAddFunctionClick
            },
            "#btnLoadFun": {
                click: this.onBtnLoadFunClick
            },
            "#grdOfficeApplication": {
                itemclick: this.onGrdAppItemClick
            },
            "#grdUser": {
                itemclick: this.onGrdUserItemClick
            },
            "#btnAddOfficeRole": {
                click: this.onBtnAddOfficeRoleClick
            },
            "#btnAuthorizationOk": {
                click: this.onBtnAuthorizationOkClick
            },
            "#btnAuthorizationCancel": {
                click: this.onBtnAuthorizationCancelClick
            }
        });
    }

});
