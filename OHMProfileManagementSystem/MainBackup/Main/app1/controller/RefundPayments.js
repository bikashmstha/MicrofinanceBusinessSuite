/*
 * File: app/controller/RefundPayments.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.RefundPayments', {
    extend: 'Ext.app.Controller',

    stores: [
        'RefundPaymentsRfp',
        'FilingPeriodStore',
        'Period'
    ],

    onChkAllRfpChange: function(field, newValue, oldValue, eOpts) {
        var chkAll = Ext.ComponentQuery.query('#chkAllRfp')[0];
        var txtPanRfp = Ext.ComponentQuery.query('#txtPanRfp')[0];

        txtPanRfp.setValue("");

        if(chkAll.getValue() === true)
        {
            txtPanRfp.setDisabled(true);
        }
        else
        {
            txtPanRfp.setDisabled(false);
        }
    },

    onBtnLoadRefundRfpClick: function(button, e, eOpts) {
        var me = this;
        me.loadRefundClaim();
    },

    onCntBottomRfpBeforeRender: function(component, eOpts) {
        var grid = Ext.ComponentQuery.query('#grdRefundPaymentRfp')[0];

        grid.columns[4].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";   

            var strFilPeriod = Ext.getStore("FilingPeriodStore");                
            var index = strFilPeriod.find('FilPeriod',value);
            var rec = strFilPeriod.getAt(index);

            var strPeriod = Ext.getStore("Period");

            var items=Ext.getStore('FilingPeriodStore').data.items;    


            for(var i=0;i<items.length;i++)
            {

                if(items[i].data.FilPeriod === value)
                {
                    temp=items[i].data.FilPeriodDesc;
                    break;
                }        
            }   


            if(rec !== false && rec !== undefined)
            {
                strPeriod.loadData(rec.data.Period);
            } 

            return temp;
        };


        grid.columns[5].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";    

            var items = Ext.getStore('Period').data.items;

            for(var i=0;i<items.length;i++)
            {        
                if(items[i].data.Period == value)
                {           
                    temp=items[i].data.PeriodDesc;
                    break;
                }        
            }

            return temp;
        };


        grid.columns[7].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";    

            if("E" === value)
            {
                temp = "Export";
            }
            else if("C" === value)
            {
                temp = "Continuous Six Month Credit";
            }
            else if("1" === value)
            {   temp = "Others 1";
            }
            else if("2" === value)
            {    temp = "Others 2";
            }

            return temp;
        };


        grid.columns[9].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";    

            if("F" === value)
            {
                temp = "Finalized";
            }
            else if("I" === value)
            {
                temp = "Initialized";
            }
            else {
                temp = "Not Closed";
            }

            return temp;
        };
    },

    onRefundPaymentsRfpBeforeRender: function(component, eOpts) {
        var store = Ext.getStore("RefundPaymentsRfp");
        store.loadData([],false);
    },

    onBtnSaveRpcClick: function(button, e, eOpts) {
        var me = this;
        var flag = false;
        var form = button.up('window').down('form').getForm();

        flag = me.validateControls();

        if(flag)
        {
            flag = me.saveUpdate("I");

            if(flag)
            {

                button.up('window').close();

                msg("SUCCESS","Successfully Saved",function(){            

                    me.loadRefundClaim();
                });
            }
            else
            {
                msg("FAILURE","Failure in RefundPayment Save");
                return;
            }
        }
        else
        {
            return false;
        }
    },

    onBtnCancelRpcClick: function(button, e, eOpts) {
        var me = this;
        me.clearControls();
    },

    onTxtAcceptedAmountRpcChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        me.calcChequeAmt();

    },

    onTxtPayDedAmountRpcChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        me.calcChequeAmt();
    },

    onBtnSubmitRpcClick: function(button, e, eOpts) {
        var me = this;
        var flag = false;
        var form = button.up('window').down('form').getForm();

        flag = me.validateControls();

        if(flag)
        {
            flag = me.saveUpdate("F");

            if(flag)
            {

                button.up('window').close(); 
                msg("SUCCESS","Successfully Submitted",function(){

                    me.loadRefundClaim();
                });
            }
            else
            {
                msg("FAILURE","Failure in RefundPayment Submit");
                return;
            }
        }
        else
        {
            return false;
        }
    },

    onBtnCancelRpcClick: function(button, e, eOpts) {
        var me = this;
        me.clearControls();
    },

    saveUpdate: function(status) {
        var me = this;
        var flag = false;

        var officeCode      = Ext.ComponentQuery.query('#txtOfficeCodeRpc')[0].getValue();
        var pan             = Ext.ComponentQuery.query('#txtPanRpc')[0].getValue();
        var acctType        = Ext.ComponentQuery.query('#txtAccTypeRpc')[0].getValue();
        var taxYear         = Ext.ComponentQuery.query('#txtTaxYearRpc')[0].getValue();
        var filePer         = Ext.ComponentQuery.query('#hdnFilPeriodRpc')[0].getValue();
        var period          = Ext.ComponentQuery.query('#hdnPeriodRpc')[0].getValue();
        var amountClaimed   = Ext.ComponentQuery.query('#txtAmountClaimedRpc')[0].getValue();

        var refCloseDate    = Ext.ComponentQuery.query('#txtRefCloseDate')[0].getValue();
        var acceptedAmount  = Ext.ComponentQuery.query('#txtAcceptedAmountRpc')[0].getValue();
        var payDedAmount    = Ext.ComponentQuery.query('#txtPayDedAmountRpc')[0].getValue();
        var chequeAmount    = Ext.ComponentQuery.query('#txtChequeAmountRpc')[0].getValue();
        var chequeNumber    = Ext.ComponentQuery.query('#txtChequeNumberRpc')[0].getValue();
        var chequeDate      = Ext.ComponentQuery.query('#txtChequeDateRpc')[0].getValue();
        var bankCode        = Ext.ComponentQuery.query('#txtBankCodeRpc')[0].getValue();
        var officerName          = Ext.ComponentQuery.query('#txtUserIDRpc')[0].getValue();
        var tranDate        = Ext.ComponentQuery.query('#txtTranDateRpc')[0].getValue();


        var refPayments     = {
            OffCode:officeCode,    
            Pan:pan,
            AcctType:acctType,
            TaxYear:taxYear,
            FilPeriod:filePer,
            Period:period,
            AmountClaimed:amountClaimed,
            RefCloseDate:refCloseDate,
            AcceptedAmount:acceptedAmount,
            PayDedAmount :payDedAmount,
            ChequeAmount :chequeAmount,
            ChequeNumber :chequeNumber,
            ChequeDate :chequeDate,
            BankCode :bankCode,
            OfficerName:officerName,
            TranDate :tranDate,
            Status:status,                        
            Action:'E'
        };

        var wait  = watiMsg('Saving ...');

        Ext.Ajax.request({
            url:"../Handlers/VAT/RefundPayments/RefundPaymentsHandler2.ashx?method=Save" ,
            params:{refundPayments:JSON.stringify(refPayments)},
            async:false,
            success: function ( result, request ) {            

                wait.hide();            
                flag = true;

                var obj = Ext.decode(result.responseText);
                //msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);
                if(obj.success === "false")
                {
                    flag = false;
                }
                else
                {            
                    me.clearControls();

                }

            },
            failure:  function ( result, request ) { 

                wait.hide();            
                //button.up('window').close();
                flag = false;

                msg("FAILURE","Error in Fetching data !!!");
            }
        });

        return flag;
    },

    calcChequeAmt: function() {
        var chequeAmt = null;

        var amountClaimed = Ext.ComponentQuery.query('#txtAmountClaimedRpc')[0].getValue();
        var acceptedAmt = Ext.ComponentQuery.query('#txtAcceptedAmountRpc')[0].getValue();
        var payDedAmount = Ext.ComponentQuery.query('#txtPayDedAmountRpc')[0].getValue();
        var txtChequeAmount = Ext.ComponentQuery.query('#txtChequeAmountRpc')[0];
        var errMsg = "";

        amountClaimed = (amountClaimed === "")?0:parseFloat(amountClaimed);
        acceptedAmt = (acceptedAmt === "")?0:parseFloat(acceptedAmt);
        payDedAmount = (payDedAmount === "")?0:parseFloat(payDedAmount);

        if(amountClaimed < acceptedAmt)
        {
            //msg("WARNING","'कर फिर्ता माग रकम' भन्दा 'स्वीकृत रकम' कम हुनु पर्छ !!!");
            errMsg += "'कर फिर्ता माग रकम' भन्दा 'स्वीकृत रकम' कम हुनु पर्छ !!!<br>";
            //Ext.ComponentQuery.query('#txtAcceptedAmountRpc')[0].markInvalid();

            //return;
        }

        if(acceptedAmt < payDedAmount)
        {
            //msg("WARNING","'स्वीकृत रकम' भन्दा 'असुली रकम' कम हुनु पर्छ !!!");
            errMsg += "'स्वीकृत रकम' भन्दा 'असुली रकम' कम हुनु पर्छ !!!";
            //Ext.ComponentQuery.query('#txtPayDedAmountRpc')[0].markInvalid();
            //return;
        }

        if( errMsg !== "")
        {
            txtChequeAmount.setValue("");

            msg("WARNING",errMsg);
            return false;
        }
        else
        {
            chequeAmt = acceptedAmt - payDedAmount;    
            txtChequeAmount.setValue(chequeAmt);
        }

        return true;

    },

    clearControls: function() {
        Ext.ComponentQuery.query('#txtAcceptedAmountRpc')[0].setValue("");
        Ext.ComponentQuery.query('#txtPayDedAmountRpc')[0].setValue("");
        Ext.ComponentQuery.query('#txtPayDedAmountRpc')[0].setValue("");
        Ext.ComponentQuery.query('#txtChequeAmountRpc')[0].setValue("");

        Ext.ComponentQuery.query('#txtRefCloseDate')[0].setValue("");
        Ext.ComponentQuery.query('#txtChequeNumberRpc')[0].setValue("");
        Ext.ComponentQuery.query('#txtChequeDateRpc')[0].setValue("");
        Ext.ComponentQuery.query('#txtBankCodeRpc')[0].setValue("");

        Ext.ComponentQuery.query('#txtUserIDRpc')[0].setValue("");
        Ext.ComponentQuery.query('#txtTranDateRpc')[0].setValue("");









    },

    loadRefundClaim: function() {
        var store = Ext.getStore("RefundPaymentsRfp");
        store.loadData([],false);

        var chkAll = Ext.ComponentQuery.query('#chkAllRfp')[0];
        var txtPanRfp = Ext.ComponentQuery.query('#txtPanRfp')[0];
        var pan = "";
        //var officeCode = "22";
        var accountType = "00";

        var officeCode = Ext.get('offCode').dom.innerHTML;
        //txtOfficeCodeVpa.setValue(offCode);

        if(chkAll.getValue() === false)
        {
            pan = txtPanRfp.getValue();
        }

        var wait = watiMsg('loading ...');

        Ext.Ajax.request({
            url:"../Handlers/VAT/RefundPayments/RefundPaymentsHandler2.ashx?method=GetRefundPayments" ,
            params:{offCode:officeCode,accType:accountType,panNo:pan},
            success: function ( result, request ) {            

                wait.hide();    
                var obj = Ext.decode(result.responseText);
                store.add(obj.root); 

                //console.log("store>>",store.data);

            },
            failure:  function ( result, request ) {            
                wait.hide();

                msg("FAILURE","Error in Fetching data !!!");
            }
        });


    },

    validateControls: function() {
        var amountClaimed = Ext.ComponentQuery.query('#txtAmountClaimedRpc')[0].getValue();
        var acceptedAmt = Ext.ComponentQuery.query('#txtAcceptedAmountRpc')[0].getValue();
        var payDedAmount = Ext.ComponentQuery.query('#txtPayDedAmountRpc')[0].getValue();
        var chequeAmount = Ext.ComponentQuery.query('#txtChequeAmountRpc')[0].getValue();

        var refCloseDate    = Ext.ComponentQuery.query('#txtRefCloseDate')[0].getValue();
        var chequeNumber    = Ext.ComponentQuery.query('#txtChequeNumberRpc')[0].getValue();
        var chequeDate      = Ext.ComponentQuery.query('#txtChequeDateRpc')[0].getValue();
        var bankCode        = Ext.ComponentQuery.query('#txtBankCodeRpc')[0].getValue();
        var officerName          = Ext.ComponentQuery.query('#txtUserIDRpc')[0].getValue();
        var tranDate        = Ext.ComponentQuery.query('#txtTranDateRpc')[0].getValue();

        var errMsg = "";

        acceptedAmt = (acceptedAmt === "")?0:parseFloat(acceptedAmt);
        amountClaimed = (amountClaimed === "")?0:parseFloat(amountClaimed);
        acceptedAmt = (acceptedAmt === "")?0:parseFloat(acceptedAmt);
        payDedAmount = (payDedAmount === "")?0:parseFloat(payDedAmount);

        if(refCloseDate === "")
        {
            errMsg += "कृपया स्वीकृत वा अस्वीकृत मिति राख्नुहोस् !!!<br>";
        }

        if(acceptedAmt === null || acceptedAmt === "" || acceptedAmt < 0)
        {

            errMsg += "कृपया स्वीकृत रकम राख्नुहोस् !!!<br>";   
        }

        if(chequeAmount > 0)
        {
            if(chequeNumber === "")
            {
                errMsg += "कृपया चेक नम्बर राख्नुहोस् !!!<br>";
            }

            if(chequeDate === "")
            {
                errMsg += "कृपया चेक मिति राख्नुहोस् !!!<br>";
            }

            if(bankCode === "")
            {
                errMsg += "कृपया बैँक कोड राख्नुहोस् !!!<br>";
            }


        }


        if(officerName === "")
        {
            errMsg += "कृपया अधिकृतको नाम राख्नुहोस् !!!<br>";
        }

        if(tranDate === "")
        {
            errMsg += "कृपया कारोबार मिति राख्नुहोस् !!!<br>";
        }


        //----------------------------------------------------------------------------
        // NB: Validate CloseDate, ChequeDate and TranDate
        //----------------------------------------------------------------------------

        if(refCloseDate !== "" && chequeDate !== "")
        {
            if(refCloseDate > chequeDate)
            {
                errMsg += "कृपया 'चेक मिति' भन्दा 'स्वीकृत वा अस्वीकृत मिति' कम  राख्नुहोस् !!!<br>";
            }   

        }

        if(refCloseDate !== "" && tranDate !== "")
        {
            if(refCloseDate > tranDate)
            {
                errMsg += "कृपया 'कारोवार मिति' भन्दा 'स्वीकृत वा अस्वीकृत मिति' कम  राख्नुहोस् !!!<br>";
            }

        }


        if(chequeDate !== "" && tranDate !== "")
        {

            if(chequeDate > tranDate)
            {
                errMsg += "कृपया 'कारोवार मिति' भन्दा 'चेक मिति' कम  राख्नुहोस् !!!<br>";
            }

        }




        if( errMsg !== "")
        {
            msg("WARNING",errMsg);
            return false;
        }


        return true;

    },

    init: function(application) {
        this.control({
            "#chkAllRfp": {
                change: this.onChkAllRfpChange
            },
            "#btnLoadRefundRfp": {
                click: this.onBtnLoadRefundRfpClick
            },
            "#cntBottomRfp": {
                beforerender: this.onCntBottomRfpBeforeRender
            },
            "#RefundPaymentsRfp": {
                beforerender: this.onRefundPaymentsRfpBeforeRender
            },
            "#btnSaveRpc": {
                click: this.onBtnSaveRpcClick
            },
            "#btnCancelRpc": {
                click: this.onBtnCancelRpcClick,
                click: this.onBtnCancelRpcClick
            },
            "#txtAcceptedAmountRpc": {
                change: this.onTxtAcceptedAmountRpcChange
            },
            "#txtPayDedAmountRpc": {
                change: this.onTxtPayDedAmountRpcChange
            },
            "#btnSubmitRpc": {
                click: this.onBtnSubmitRpcClick
            }
        });
    }

});
