/*
 * File: app/controller/PhyLocn.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.PhyLocn', {
    extend: 'Ext.app.Controller',

    stores: [
        'strDMlBuilding',
        'strDMRoom',
        'strDMRack'
    ],

    onPanelPhysicalLocationAfterRender: function(component, eOpts) {

        var me =this;
        var offCode = Ext.get('offCode').dom.innerHTML;
        //console.log("offCode--->",offCode);



        var view=Ext.ComponentQuery.query('#PanelPhysicalLocation')[0];
        console.log("view1---->>>",view.extraParam);
        if(view.extraParam ===undefined)
        {

            Ext.ComponentQuery.query('#txtDocId')[0].hide(true);
            Ext.ComponentQuery.query('#txtSubject')[0].hide(true);

            Ext.ComponentQuery.query('#txtBuildingId')[0].hide(true);
            Ext.ComponentQuery.query('#txtBuilding')[0].hide(true);
            Ext.ComponentQuery.query('#txtBuilding')[0].hide(true);


            Ext.ComponentQuery.query('#txtRoomNo')[0].hide(true);
            Ext.ComponentQuery.query('#txtRoomDesc')[0].hide(true);

            Ext.ComponentQuery.query('#txtRackNo')[0].hide(true);
            Ext.ComponentQuery.query('#txtRackDesc')[0].hide(true);


            Ext.ComponentQuery.query('#chkBuilding')[0].hide(true);
            Ext.ComponentQuery.query('#chkRoom')[0].hide(true);
            Ext.ComponentQuery.query('#chkRack')[0].hide(true);



            Ext.ComponentQuery.query('#txtBuildingId')[0].setValue('');
            Ext.ComponentQuery.query('#txtBuilding')[0].setValue('');
            Ext.ComponentQuery.query('#txtRoomNo')[0].setValue('');
            Ext.ComponentQuery.query('#txtRoomDesc')[0].setValue('');
            Ext.ComponentQuery.query('#txtRackNo')[0].setValue('');
            Ext.ComponentQuery.query('#txtRackDesc')[0].setValue('');
            Ext.ComponentQuery.query('#btnUpdateBuilding')[0].hide(true);
            Ext.ComponentQuery.query('#btnUpdateRoom')[0].hide(true);  
            Ext.ComponentQuery.query('#btnUpdateRack')[0].hide(true);


            Ext.ComponentQuery.query('#txtBuildingId')[0].setReadOnly(false);
            Ext.ComponentQuery.query('#txtRoomNo')[0].setReadOnly(false);
            Ext.ComponentQuery.query('#txtRackNo')[0].setReadOnly(false);




            //var cboOffice=Ext.ComponentQuery.query('#cboOffice')[0].getValue();

            var grdBuildingPL=Ext.ComponentQuery.query('#grdBuildingPL')[0];

            //Ext.ComponentQuery.query('#hdnOffcode')[0].setValue(cboOffice);

            Ext.Ajax.request
            ({

                url:'../Handlers/DocumentManagement/BuildingHandler.ashx?method=GetBuilding',
                params:{offcode:offCode
                },


                success:function(response){
                    console.log(response.responseText);
                    var obj =Ext.decode(response.responseText);
                    var row = obj.root;

                    var strBuilding=Ext.getStore('strDMlBuilding');
                    var strDMRoom=Ext.getStore('strDMRoom');
                    var strDMRack=Ext.getStore('strDMRack');


                    Ext.ComponentQuery.query('#txtBuildingId')[0].hide(true);
                    Ext.ComponentQuery.query('#txtBuilding')[0].hide(true);





                    strBuilding.removeAll();
                    strBuilding.loadData([],false);

                    strDMRoom.removeAll();
                    strDMRoom.loadData([],false);

                    strDMRack.removeAll();
                    strDMRack.loadData([],false);

                    //console.log("row>>>>",obj.root);
                    grdBuildingPL.store.add(obj.root); 

                },

                failure:function()
                {
                    msg('FAILURE',Ext.decode(response));

                }



            });

        }
        else
        {

            console.log("view---->>>",view.extraParam.DOCID);
            var docid=view.extraParam.DOCID;
            var DocSubject=view.extraParam.DocSubject;


            Ext.ComponentQuery.query('#txtDocId')[0].show(true);
            Ext.ComponentQuery.query('#txtSubject')[0].show(true);

            Ext.ComponentQuery.query('#txtDocId')[0].setValue(docid);
            Ext.ComponentQuery.query('#txtSubject')[0].setValue(DocSubject);


            Ext.ComponentQuery.query('#txtBuildingId')[0].hide(true);
            Ext.ComponentQuery.query('#txtBuilding')[0].hide(true);
            Ext.ComponentQuery.query('#txtBuilding')[0].hide(true);


            Ext.ComponentQuery.query('#txtRoomNo')[0].hide(true);
            Ext.ComponentQuery.query('#txtRoomDesc')[0].hide(true);

            Ext.ComponentQuery.query('#txtRackNo')[0].hide(true);
            Ext.ComponentQuery.query('#txtRackDesc')[0].hide(true);


            Ext.ComponentQuery.query('#chkBuilding')[0].hide(true);
            Ext.ComponentQuery.query('#chkRoom')[0].hide(true);
            Ext.ComponentQuery.query('#chkRack')[0].hide(true);



            Ext.ComponentQuery.query('#txtBuildingId')[0].setValue('');
            Ext.ComponentQuery.query('#txtBuilding')[0].setValue('');
            Ext.ComponentQuery.query('#txtRoomNo')[0].setValue('');
            Ext.ComponentQuery.query('#txtRoomDesc')[0].setValue('');
            Ext.ComponentQuery.query('#txtRackNo')[0].setValue('');
            Ext.ComponentQuery.query('#txtRackDesc')[0].setValue('');
            Ext.ComponentQuery.query('#btnUpdateBuilding')[0].hide(true);
            Ext.ComponentQuery.query('#btnUpdateRoom')[0].hide(true);  
            Ext.ComponentQuery.query('#btnUpdateRack')[0].hide(true);


            Ext.ComponentQuery.query('#txtBuildingId')[0].setReadOnly(false);
            Ext.ComponentQuery.query('#txtRoomNo')[0].setReadOnly(false);
            Ext.ComponentQuery.query('#txtRackNo')[0].setReadOnly(false);




            //var cboOffice=Ext.ComponentQuery.query('#cboOffice')[0].getValue();

            var grdBuildingPL=Ext.ComponentQuery.query('#grdBuildingPL')[0];

            //Ext.ComponentQuery.query('#hdnOffcode')[0].setValue(cboOffice);

            Ext.Ajax.request
            ({

                url:'../Handlers/DocumentManagement/BuildingHandler.ashx?method=GetBuilding',
                params:{offcode:offCode
                },


                success:function(response){
                    console.log(response.responseText);
                    var obj =Ext.decode(response.responseText);
                    var row = obj.root;

                    var strBuilding=Ext.getStore('strDMlBuilding');
                    var strDMRoom=Ext.getStore('strDMRoom');
                    var strDMRack=Ext.getStore('strDMRack');


                    Ext.ComponentQuery.query('#txtBuildingId')[0].hide(true);
                    Ext.ComponentQuery.query('#txtBuilding')[0].hide(true);





                    strBuilding.removeAll();
                    strBuilding.loadData([],false);

                    strDMRoom.removeAll();
                    strDMRoom.loadData([],false);

                    strDMRack.removeAll();
                    strDMRack.loadData([],false);

                    //console.log("row>>>>",obj.root);
                    grdBuildingPL.store.add(obj.root); 

                },

                failure:function()
                {
                    msg('FAILURE',Ext.decode(response));

                }



            });

        }





    },

    onGrdBuildingPLItemClick: function(dataview, record, item, index, e, eOpts) {



        console.log("record-->>",record);
        var offcode=record.data.OFFCODE;
        var buildingid=record.data.BUILDING_ID;


        var strDMRoom=Ext.getStore('strDMRoom');
        var strDMRack=Ext.getStore('strDMRack');

        strDMRoom.removeAll();
        strDMRoom.loadData([],false);

        strDMRack.removeAll();
        strDMRack.loadData([],false);

        Ext.ComponentQuery.query('#hdnOffcode')[0].setValue(record.data.OFFCODE);
        Ext.ComponentQuery.query('#txtBuildingId')[0].setValue(record.data.BUILDING_ID);
        var grdBuilding=Ext.ComponentQuery.query('#txtBuilding')[0].setValue(record.data.BUILDING_DESC);


        var grdRoom=Ext.ComponentQuery.query('#grdRoom')[0];


        Ext.Ajax.request
        ({

            url:'../Handlers/DocumentManagement/RoomHandler.ashx?method=GetRooms',
            params:{offcode: offcode,buildingId:buildingid
            },


            success:function(response){
                console.log(response.responseText);
                var obj =Ext.decode(response.responseText);
                var row = obj.root;




                Ext.ComponentQuery.query('#hdnAction')[0].setValue('E');


                Ext.ComponentQuery.query('#txtBuildingId')[0].hide(true);
                Ext.ComponentQuery.query('#txtBuilding')[0].hide(true);


                Ext.ComponentQuery.query('#txtRoomNo')[0].hide(true);
                Ext.ComponentQuery.query('#txtRoomDesc')[0].hide(true);


                console.log("row>>>>",obj.root);
                //console.log("row",obj.root);
                grdRoom.store.add(obj.root); 


                Ext.ComponentQuery.query('#btnUpdateBuilding')[0].hide(true);

                Ext.ComponentQuery.query('#txtBuildingId')[0].setReadOnly(true);





            },

            failure:function()
            {
                msg('FAILURE',Ext.decode(response));

            }



        });

    },

    onGrdRoomItemClick: function(dataview, record, item, index, e, eOpts) {

        console.log("record-->>",record);
        var offcode=record.data.OFFCODE;
        var buildingid=record.data.BUILDING_ID;
        console.log("BuildingId-->>",buildingid);
        var roomno=record.data.ROOM_NO;
        var rackno=record.data.RACK_NO;


        var grdBuildingid=Ext.ComponentQuery.query('#txtRoomNo')[0].setValue(record.data.ROOM_NO);
        var grdBuilding=Ext.ComponentQuery.query('#txtRoomDesc')[0].setValue(record.data.ROOM_DESC);
        var grdRack=Ext.ComponentQuery.query('#grdRack')[0];


        Ext.Ajax.request
        ({

            url:'../Handlers/DocumentManagement/RackHandler.ashx?method=GetRack',
            params:{offcode: offcode,buildingid:buildingid,roomno:roomno,rackid:""
            },


            success:function(response){
                console.log(response.responseText);
                var obj =Ext.decode(response.responseText);
                var row = obj.root;


                var strDMRack=Ext.getStore('strDMRack');            

                strDMRack.removeAll();
                strDMRack.loadData([],false);



                console.log("row>>>>",obj.root);
                //console.log("row",obj.root);
                grdRack.store.add(obj.root); 


                Ext.ComponentQuery.query('#btnUpdateRoom')[0].hide(true);        
                Ext.ComponentQuery.query('#txtRoomNo')[0].setReadOnly(true);
                Ext.ComponentQuery.query('#hdnActionRoom')[0].setValue('E');

                Ext.ComponentQuery.query('#txtBuildingId')[0].hide(true);
                Ext.ComponentQuery.query('#txtBuilding')[0].hide(true);


                Ext.ComponentQuery.query('#txtRoomNo')[0].hide(true);
                Ext.ComponentQuery.query('#txtRoomDesc')[0].hide(true);

                Ext.ComponentQuery.query('#txtRackNo')[0].hide(true);
                Ext.ComponentQuery.query('#txtRackDesc')[0].hide(true);

            },

            failure:function()
            {
                msg('FAILURE',Ext.decode(response));

            }



        });

    },

    onBtnSubmitPLClick: function(button, e, eOpts) {
        var txtBuildingId=Ext.ComponentQuery.query('#txtBuildingId')[0];
        var txtDocId=Ext.ComponentQuery.query('#txtDocId')[0];
        var txtLocText=Ext.ComponentQuery.query('#txtLocText')[0];

        if(txtBuildingId.getValue()==="" || txtBuildingId.getValue()===null )
        {
            msg("WARNING","Please select Building");
            return;

        }



        if(txtDocId.getValue()==="" || txtDocId.getValue()===null )
        {
            msg("WARNING","Please fill Document ID");
            return;

        }


        if(txtLocText.getValue()==="" || txtLocText.getValue()===null )
        {
            msg("WARNING","Please fill Loc Text");
            return;

        }






        var PhysicalLoc={
            PHYLOC_ID:1,    //autogenerate  
            OFFCODE:Ext.ComponentQuery.query('#hdnOffcode')[0].getValue(),
            BUILDING_ID:Ext.ComponentQuery.query('#txtBuildingId')[0].getValue(),
            ROOM_NO:Ext.ComponentQuery.query('#txtRoomNo')[0].getValue()===""?"":Ext.ComponentQuery.query('#txtRoomNo')[0].getValue(),
            RACK_NO:Ext.ComponentQuery.query('#txtRackNo')[0].getValue()===""?"":Ext.ComponentQuery.query('#txtRackNo')[0].getValue(),
            LOC_TEXT:Ext.ComponentQuery.query('#txtLocText')[0].getValue(),
            FROM_DATE:'',
            TO_DATE:'',
            ENTRY_BY:'',
            ENTRY_DATE:'',
            LOC_OF:'Doc',
            LOC_MASTER_ID:Ext.ComponentQuery.query('#txtDocId')[0].getValue(),
            TRAN_NO:'1',
            R_STATUS:'A'

        };



        Ext.Ajax.request({

            url:'../Handlers/DocumentManagement/PhysicalLocationHandler.ashx?method=SavePhysicalLocation',
            params:{PhysicalLoc:JSON.stringify(PhysicalLoc)},


            success:function(result,request){
                var obj=Ext.decode(result.responseText);




                msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);


                Ext.ComponentQuery.query('#txtBuildingId')[0].setReadOnly(false);
                Ext.ComponentQuery.query('#txtRoomNo')[0].setReadOnly(false);
                Ext.ComponentQuery.query('#txtRackNo')[0].setReadOnly(false);


                /*
                var str=Ext.getStore('strDMRoom');
                str.loadData([],false);


                var rowBuilding = {

                OFFCODE:Ext.ComponentQuery.query('#hdnOffcode')[0].getValue(),
                BUILDING_ID:txtBuildingId, 
                BUILDING_DESC:buildingdesc,
                ENTRY_BY:"",        
                ENTRY_DATE:""


                };




                var rowRack = {

                OFFCODE:Ext.ComponentQuery.query('#hdnOffcode')[0].getValue(), 
                BUILDING_ID:txtBuildingId, 
                ROOM_NO:txtRoomNo, 
                RACK_NO:txtRackNo, 
                RACK_DESC:txtRackDesc, 
                ENTRY_BY:'', 
                ENTRY_DATE:'', 
                Status:'' 

                };

                storeBuilding.add(rowBuilding); 

                strDMRack.add(rowRack); 


                */

                /*
                var rowRoom = {
                OFFCODE:Ext.ComponentQuery.query('#hdnOffcode')[0].getValue(),
                BUILDING_ID:txtBuildingId,        
                ROOM_NO:txtRoomNo,
                ROOM_DESC:txtRoomDesc,
                ENTRY_BY:'',
                ENTRY_DATE:''     

                };
                storeDMRoom.add(rowRoom); 

                */
                // Ext.ComponentQuery.query('#hdnActionRefund')[0].setValue('');
                // me.clearControlsRefund();


            },
            failure:function(result, request){
                msg('ERROR OCURRED !!!', 'Error');                 
            }


        });

    },

    onGrdRackItemClick: function(dataview, record, item, index, e, eOpts) {

        console.log("record-->>",record);
        var offcode=record.data.OFFCODE;
        var buildingid=record.data.BUILDING_ID;
        var roomno=record.data.ROOM_NO;
        var rackno=record.data.RACK_NO;



        var grdBuildingid=Ext.ComponentQuery.query('#txtRackNo')[0].setValue(record.data.RACK_NO);
        var grdBuilding=Ext.ComponentQuery.query('#txtRackDesc')[0].setValue(record.data.RACK_DESC);
        var grdRack=Ext.ComponentQuery.query('#grdRack')[0];

        Ext.ComponentQuery.query('#btnUpdateRack')[0].hide(true);
        Ext.ComponentQuery.query('#txtRackNo')[0].setReadOnly(true);

        Ext.ComponentQuery.query('#hdnActionRack')[0].setValue('E');

    },

    onBtnCancelPLClick: function(button, e, eOpts) {
        Ext.ComponentQuery.query('#grdBuildingPL')[0].getSelectionModel().deselectAll();


        Ext.ComponentQuery.query('#txtDocId')[0].setValue('');
        Ext.ComponentQuery.query('#txtLocText')[0].setValue('');

        var strDMRoom=Ext.getStore('strDMRoom');
        var strDMRack=Ext.getStore('strDMRack');

        strDMRoom.removeAll();
        strDMRoom.loadData([],false);

        strDMRack.removeAll();
        strDMRack.loadData([],false);
    },

    onBtnCancelPLClick: function(button, e, eOpts) {

    },

    init: function(application) {
        this.control({
            "#PanelPhysicalLocation": {
                afterrender: this.onPanelPhysicalLocationAfterRender
            },
            "#grdBuildingPL": {
                itemclick: this.onGrdBuildingPLItemClick
            },
            "#grdRoom": {
                itemclick: this.onGrdRoomItemClick
            },
            "#BtnSubmitPL": {
                click: this.onBtnSubmitPLClick
            },
            "#grdRack": {
                itemclick: this.onGrdRackItemClick
            },
            "#btnCancelPL": {
                click: this.onBtnCancelPLClick,
                click: this.onBtnCancelPLClick
            }
        });
    }

});
