/*
 * File: app/controller/Notification.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Notification', {
    extend: 'Ext.app.Controller',

    models: [
        'NotAmtType'
    ],
    stores: [
        'FilingPeriodStore',
        'PeriodStore',
        'NotAmtType'
    ],
    views: [
        'Notification'
    ],

    onTxtNotPanKeypress: function(textfield, e, eOpts) {
        //console.log("keypress");
        var txtNotIssuedDate = Ext.ComponentQuery.query('#txtNotIssuedDate')[0];

        if(e.keyCode === 13)
        {
            var txtNotTradeName = Ext.ComponentQuery.query("#txtNotTradeName")[0];
            var txtNotiPan = Ext.ComponentQuery.query("#txtNotPan")[0];
            var txtNotOffCode = Ext.ComponentQuery.query('#txtNotOffCode')[0].getValue();

            var txtNotSeq = Ext.ComponentQuery.query('#txtNotSeq')[0];
            var txtNotTaxYear = Ext.ComponentQuery.query('#txtNotTaxYear')[0];
            var cboNotFilePer = Ext.ComponentQuery.query('#cboNotFilePer')[0];
            var cboNotPer = Ext.ComponentQuery.query('#cboNotPer')[0];
            //var txtNotAmtCr = Ext.ComponentQuery.query('#txtNotAmtCr')[0];
            var txtNotAmtDr = Ext.ComponentQuery.query('#txtNotAmtDr')[0];
            var hdnnotifDate = Ext.ComponentQuery.query('#hdnnotifDate')[0];

            if(txtNotiPan.getValue()!=="")
            {


                isValid = ValidatePan(txtNotiPan.getValue());

                if(isValid === false)
                {
                    msg('WARNING', 'Please enter valid PAN !!!');
                    txtNotTradeName.setValue('');
                }

                else
                {
                    // console.log("else");
                    LoadTaxpayerInfoWithValidPan(txtNotiPan.getValue(),"00",function(data){

                        var rec = data.root.Taxpayer;            

                        var addr = rec.BusinessAddress.Address;
                        var office = rec.Office;

                        if(rec.AcctStatus === "D")
                        {
                            msg("WARNING","PAN is Deactivated !!!");
                            return;
                        }


                        if(txtNotOffCode != office.OfficeCode)
                        {
                            msg("WARNING","PAN is not Registered is this office !!!");

                            return;
                        }




                        //txtNotOffCode.setValue(office.OfficeCode);
                        //txtNotOffCode.setReadOnly(true);
                        txtNotTradeName.setValue(rec.Name);
                        txtNotTradeName.setReadOnly(true);
                        hdnnotifDate.setValue(rec.RegistrationDate);

                    });

                    txtNotIssuedDate.setValue("");
                    txtNotTaxYear.setValue("");
                    cboNotFilePer.setValue("");
                    cboNotPer.setValue("");
                    //txtNotAmtCr.setValue("");
                    txtNotAmtDr.setValue("");
                    txtNotSeq.setValue("");

                }

            }
            txtNotIssuedDate.focus(true);  
        }

    },

    onNotFormAfterRender: function(component, eOpts) {
        var txtNotOffCode = Ext.ComponentQuery.query('#txtNotOffCode')[0];
        var txtNotAccType = Ext.ComponentQuery.query('#txtNotAccType')[0];
        var txtNotSeq = Ext.ComponentQuery.query("#txtNotSeq")[0];

        //txtNotOffCode.setValue('22');
        txtNotAccType.setValue('00');

        txtNotSeq.setDisabled(true);
        //var strNotFilePer = Ext.getStore("FilingPeriodStore");
        //strNotFilePer.load();
        var offCode=Ext.get('offCode').dom.innerHTML;
        Ext.ComponentQuery.query('#txtNotOffCode')[0].setValue(offCode);
    },

    onBtnNotCancelClick: function(button, e, eOpts) {

        var me = this;

        me.clear("allClear");
        me.clear("disable");
    },

    onBtnNotSaveClick: function(button, e, eOpts) {
        var me = this;

        var hdnNotAction = Ext.ComponentQuery.query("#hdnNotAction")[0];
        var notForm = Ext.ComponentQuery.query('#notForm')[0].getForm();

        if(!notForm.isValid())
        {
            msg("WARNING","Please Enter the required fields");   
            return;
        }
        else
        {
            if(hdnNotAction.getValue()==="")
            {
                hdnNotAction.setValue("I");
            }

            me.NotfSave('I');
        }

    },

    onCboNotFilePerChange: function(field, newValue, oldValue, eOpts) {
        var cboNotFilePer = Ext.ComponentQuery.query("#cboNotFilePer")[0];
        var record = cboNotFilePer.findRecord(cboNotFilePer.valueField || cboNotFilePer.displayField,newValue); 

        var cboNotPer = Ext.ComponentQuery.query("#cboNotPer")[0];
        cboNotPer.setValue('');


        if(record === false)
        {
            return;
        }
        else
        {
            cboNotPer.store.loadData(record.data.Period);
        }

    },

    onBtnNotEditClick: function(button, e, eOpts) {
        var me = this;

        var hdnNotAction = Ext.ComponentQuery.query("#hdnNotAction")[0];
        var txtNotSeq = Ext.ComponentQuery.query("#txtNotSeq")[0];
        var dpfNotAction = Ext.ComponentQuery.query("#dpfNotAction")[0];

        hdnNotAction.setValue("E");
        txtNotSeq.setDisabled(false);
        dpfNotAction.setValue('Enter Acc Type, Pan No and Seq No for Updating !');

        me.clear("allClear");
    },

    onBtnNotSubmitClick: function(button, e, eOpts) {
        var me = this;

        var hdnNotAction = Ext.ComponentQuery.query("#hdnNotAction")[0].getValue();
        var notForm = Ext.ComponentQuery.query('#notForm')[0].getForm();

        if(!notForm.isValid())
        {
            msg("WARNING","Please Enter the required fields");
            return;
        }

        if(hdnNotAction === "D")
        {
            me.NotfSave("D"); 

        }
        else
        {
            Ext.Msg.confirm('Confirm Action', 'एकपटक Submit गरिसकेपछि अर्को पटक विवरण फेरि परिवर्तन गर्न पइने छैन। \n के तपाई Submit गर्न चाहनुहन्छ ?', function(btn) {
                if(btn == 'yes'){

                    me.NotfSave("F"); 

                    return true;
                }
            }, this);


        }

    },

    onBtnNotDelClick: function(button, e, eOpts) {
        var me = this;

        var hdnNotAction = Ext.ComponentQuery.query("#hdnNotAction")[0];
        var txtNotSeqNo = Ext.ComponentQuery.query("#txtNotSeq")[0];
        var dpfNotAction = Ext.ComponentQuery.query("#dpfNotAction")[0];
        //var lblNotDisplay = Ext.ComponentQuery.query("#lblNotDisplay")[0];

        hdnNotAction.setValue("D");
        txtNotSeqNo.setDisabled(false);
        me.clear("allClear");

        dpfNotAction.setValue("Enter Acc Type, Pan No and Seq No for Deleting !");
        //lblNotDisplay.setValue("Enter Acc Type, Pan No and Seq No for Deleting !");
    },

    onTxtNotIssuedDateBlur: function(component, e, eOpts) {
        var txtIssuedDate = field.getValue();

        if(txtIssuedDate!=="")
        {
            /*var year = "";
            for(var i=0;i<4;i++)
            {
            year = year+txtIssuedDate[i];

            }

            ValidateTaxyear(year,function(invalidMsg){
            if(invalidMsg!=='')
            {
            msg('INFO',invalidMsg);

            return;
            }
            });*/

            validateFutureDate(field.getValue(),"Y");
        }

        var me = this;
        me.EndDate();
    },

    onTxtNotTaxYearBlur: function(component, e, eOpts) {
        var me=this;
        var taxyear=Ext.ComponentQuery.query("#txtNotTaxYear")[0].getValue();
        if(taxyear==="")
        {
            return;
        }

        ValidateTaxyear(taxyear,function(invalidMsg){
            if(invalidMsg!=='')
            {
                msg('INFO',invalidMsg);

                return;
            }

        });

        me.EndDate();
    },

    onCboNotFilePerBlur: function(component, e, eOpts) {
        var me = this;

        me.EndDate();
    },

    onCboNotPerBlur: function(component, e, eOpts) {
        var me = this;

        me.EndDate();
    },

    onTxtNotSeqKeypress: function(textfield, e, eOpts) {
        var me = this;

        if(e.keyCode === 9)
        {

            var txtNotAccType = Ext.ComponentQuery.query('#txtNotAccType')[0].getValue();
            var txtNotPan = Ext.ComponentQuery.query('#txtNotPan')[0].getValue();
            var txtNotSeq = Ext.ComponentQuery.query('#txtNotSeq')[0].getValue();


            if(txtNotAccType === "")
            {
                msg("WARNING","Enter AccType");
                return;
            }
            else if(txtNotPan === "")
            {
                msg("WARNING","Enter PAN No");
                return;
            }
            else if(txtNotSeq === "")
            {
                msg("WARNING","Enter SEQ");
                return;
            }

            //var wait = waitMsg('loading ...');

            console.log('Date KeyPress');

            Ext.Ajax.request({
                url:"../Handlers/VAT/Notification/VatNotificationHandler.ashx?method=GetNotification" ,
                params:{Pan:txtNotPan,AcctType:txtNotAccType,SeqNo:txtNotSeq},
                success: function ( result, request ) 
                {            

                    //wait.hide();            

                    var obj = Ext.decode(result.responseText);            


                    if(obj.success === "false")
                    {   
                        msg("WARNING",obj.message);
                        return;
                    }


                    var txtNotOffCode = Ext.ComponentQuery.query('#txtNotOffCode')[0];
                    var txtNotPan = Ext.ComponentQuery.query('#txtNotPan')[0];
                    var txtNotTradeName = Ext.ComponentQuery.query('#txtNotTradeName')[0];
                    var txtNotIssuedDate = Ext.ComponentQuery.query('#txtNotIssuedDate')[0];
                    var txtNotSeq = Ext.ComponentQuery.query('#txtNotSeq')[0];
                    var action = Ext.ComponentQuery.query('#hdnNotAction')[0];
                    var txtNotAccType = Ext.ComponentQuery.query('#txtNotAccType')[0];
                    var txtNotAmtDr = Ext.ComponentQuery.query('#txtNotAmtDr')[0];
                    var cboNotFilePer = Ext.ComponentQuery.query('#cboNotFilePer')[0];
                    var cboNotPer = Ext.ComponentQuery.query('#cboNotPer')[0];
                    var txtNotTaxYear = Ext.ComponentQuery.query('#txtNotTaxYear')[0];
                    var cboNotAmtType = Ext.ComponentQuery.query('#cboNotAmtType')[0]; 
                    var hdnTran = Ext.ComponentQuery.query('#hdnNotTran')[0];

                    // var store = Ext.getStore('RebateDetails');

                    var data = obj.root; 

                    //txtNotAccType.setValue(data[0].AccType);
                    if(data.AmtDr!==null)
                    {
                        cboNotAmtType.setValue('डेबिट');
                        txtNotAmtDr.setValue(data.AmtDr);
                    }
                    else if(data.AmtCr!==null)
                    {
                        cboNotAmtType.setValue('क्रेडिट');
                        txtNotAmtDr.setValue(data.AmtCr);
                    }


                    cboNotFilePer.setValue(data.FilePer);
                    cboNotPer.setValue(data.Period);
                    txtNotIssuedDate.setValue(data.IssuedDate);
                    txtNotTaxYear.setValue(data.TaxYear);
                    hdnTran.setValue(data.TranNo);

                    if(action.getValue() !== "D")
                    {
                        action.setValue(data.Action);
                    }




                },
                failure: function ( result, request ) {

                    // wait.hide();


                    msg("FAILURE","Error in Fetching Data !!!");
                }
            });

        }
    },

    clear: function(param) {
        var txtNotPan = Ext.ComponentQuery.query('#txtNotPan')[0];
        var txtNotTradeName = Ext.ComponentQuery.query('#txtNotTradeName')[0];
        var txtNotSeq = Ext.ComponentQuery.query('#txtNotSeq')[0];
        var txtNotIssuedDate = Ext.ComponentQuery.query('#txtNotIssuedDate')[0];
        var txtNotTaxYear = Ext.ComponentQuery.query('#txtNotTaxYear')[0];
        var cboNotFilePer = Ext.ComponentQuery.query('#cboNotFilePer')[0];
        var cboNotPer = Ext.ComponentQuery.query('#cboNotPer')[0];
        var cboNotAmtType = Ext.ComponentQuery.query('#cboNotAmtType')[0];
        var txtNotAmtDr = Ext.ComponentQuery.query('#txtNotAmtDr')[0];
        //var txtNotOffCode = Ext.ComponentQuery.query('#txtNotOffCode')[0];
        var txtNotAccType = Ext.ComponentQuery.query('#txtNotAccType')[0];
        var dpfNotAction = Ext.ComponentQuery.query('#dpfNotAction')[0];
        if(param=="allClear")
        {


            txtNotPan.setValue("");
            txtNotTradeName.setValue("");
            txtNotIssuedDate.setValue("");
            txtNotTaxYear.setValue("");
            cboNotFilePer.setValue("");
            cboNotPer.setValue("");
            cboNotAmtType.setValue("");
            txtNotAmtDr.setValue("");
            txtNotSeq.setValue("");
            //txtNotOffCode.setValue("");

            txtNotPan.clearInvalid();
            //txtNotOffCode.clearInvalid();

            txtNotAccType.clearInvalid();
            txtNotIssuedDate.clearInvalid();
            txtNotSeq.clearInvalid();


        }
        else if(param == "disable")
        {
            txtNotSeq.setDisabled(true);
            dpfNotAction.setValue("");

        }
    },

    NotfSave: function(NotfStatus) {
        var me = this;
        var loadMsg = "";
        var vatNotification = "";

        //var txtNotOffCode = Ext.ComponentQuery.query("#txtNotOffCode")[0].getValue();
        var txtNotAccType = Ext.ComponentQuery.query("#txtNotAccType")[0].getValue();
        var txtNotPan = Ext.ComponentQuery.query("#txtNotPan")[0].getValue();
        var txtNotIssuedDate = Ext.ComponentQuery.query("#txtNotIssuedDate")[0];
        var txtNotTaxYear = Ext.ComponentQuery.query("#txtNotTaxYear")[0];
        var cboNotFilePer = Ext.ComponentQuery.query("#cboNotFilePer")[0];
        var cboNotPer = Ext.ComponentQuery.query("#cboNotPer")[0];
        var cboNotAmtType = Ext.ComponentQuery.query("#cboNotAmtType")[0].getValue();
        var txtNotAmtDr = Ext.ComponentQuery.query("#txtNotAmtDr")[0].getValue();
        var txtNotSeq = Ext.ComponentQuery.query("#txtNotSeq")[0].getValue();
        var hdnNotTran = Ext.ComponentQuery.query("#hdnNotTran")[0].getValue();
        var hdnNotAction = Ext.ComponentQuery.query("#hdnNotAction")[0].getValue();
        var amtDr = "";
        var amtCr = "";
        var tran = "";

        var Msg = Ext.ComponentQuery.query("#hdnnotifErrMsg")[0];

        if(Msg.getValue()!=="")
        {
            msg("WARNING",Msg.getValue());
            return false;
        }


        if(hdnNotAction == "E" || hdnNotAction == "D")
        {
            loadMsg = "Updating...";
            tran = hdnNotTran;
        }

        if(cboNotAmtType==="Dr"||cboNotAmtType==="डेबिट")
        {
            amtDr = txtNotAmtDr; 
        }
        else if(cboNotAmtType==="Cr"||cboNotAmtType==="क्रेडिट")
        {
            amtCr = txtNotAmtDr;
        }
        else if(txtNotAmtDr===""&&cboNotAmtType==="")
        {
            msg("WARNING","Please fill the empty fields");
            return false;
        }

        /*var notif = {
        IssuedDate:txtNotIssuedDate.getValue(),
        TaxYear:txtNotTaxYear.getValue(),
        FilePer:cboNotFilePer.getValue(),
        Period:cboNotPer.getValue()
        };*/

        //var valid = me.EndDate(notif);

        /*console.log("valid",valid);
        if(valid===false)
        {
        return false;
        }*/

        vatNotification = {
            AcctType:txtNotAccType,
            Pan:txtNotPan,
            IssuedDate:txtNotIssuedDate.getValue(),
            TaxYear:txtNotTaxYear.getValue(),
            FilePer:cboNotFilePer.getValue(),
            Period:cboNotPer.getValue(),
            AmtCr:amtCr!==""?amtCr:null,
            AmtDr:amtDr!==""?amtDr:null,
            SeqNo:txtNotSeq!==""?txtNotSeq:null,
            Action:hdnNotAction,
            Status:NotfStatus,
            TranNo:tran
        };

        var waitSave = watiMsg("Processing...");

        Ext.Ajax.request({
            url:"../Handlers/VAT/Notification/VatNotificationHandler.ashx?method=SaveNotification",
            params:{vatNotification:JSON.stringify(vatNotification)},
            success: function ( result, request ){

                waitSave.hide();

                var obj = Ext.decode(result.responseText);
                var data = obj.root;

                msg(obj.success === "true" ?"SUCCESS":"FAILURE",data.msg);
                var hdnNotAction = Ext.ComponentQuery.query("#hdnNotAction")[0];

                if(hdnNotAction.getValue()=="I")
                {
                    Ext.Msg.show({
                        title: 'क्रम संख्या नोट गर्नुहोस',
                        msg: data.SeqNo,
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.INFO
                    });
                }

                var hdnNotTran = Ext.ComponentQuery.query("#hdnNotTran")[0];
                var txtNotPan = Ext.ComponentQuery.query("#txtNotPan")[0].getValue();
                hdnNotAction.setValue('');
                hdnNotTran.setValue(data.TranNo);

                if(obj.success === "false") return;

                if(data.Status==="F")
                {
                    Ext.Msg.confirm('Confirm Action', 'Successfully Submitted. <br>Do you want to Print?', function(btn) {
                        if(btn == 'yes'){


                            var param = {'PAN':txtNotPan};
                            var url="../../../Reporting/Vat/ReportHandlers/NotificationReportHandler.ashx?subnum=555";
                            var winOption="width=730,height=345,left=100,top=100,resizable=yes,scrollbars=yes";

                            OpenWindowWithPost(url,winOption,"NewFile", param);


                            return true;
                        }
                    }, this);
                }

                me.clear("allClear");

                //if(data.Status=="F")
                //{
                // me.Report();
                //}
            },

            failure: function ( result, request ){

                waitSave.hide();

                msg("FAILURE","Error in Fetching Data !!!");
                return;
            }

        });



    },

    EndDate: function() {
        var txtNotIssuedDate = Ext.ComponentQuery.query("#txtNotIssuedDate")[0].getValue();
        var txtNotTaxYear = Ext.ComponentQuery.query("#txtNotTaxYear")[0].getValue();
        var cboNotFilePer = Ext.ComponentQuery.query("#cboNotFilePer")[0].getValue();
        var cboNotPer = Ext.ComponentQuery.query("#cboNotPer")[0].getValue();

        if(txtNotIssuedDate===""||txtNotTaxYear===""||cboNotFilePer===""||cboNotPer==="")
        {
            return false;
        }

        var notf = {
            IssuedDate:txtNotIssuedDate,
            TaxYear:txtNotTaxYear,
            FilePer:cboNotFilePer,
            Period:cboNotPer
        };

        Ext.Ajax.request({
            url:"../Handlers/VAT/Notification/VatNotificationHandler.ashx?method=EndDate",
            params:{vatNotf:JSON.stringify(notf)},
            success: function ( result, request ){

                var obj = Ext.decode(result.responseText);
                var data = obj.root;

                var Msg = Ext.ComponentQuery.query("#hdnnotifErrMsg")[0];

                if(obj.success === "true")
                {
                    if(data.EndMsg!==null)
                    {
                        Msg.setValue(data.EndMsg);
                        msg("WARNING",Msg.getValue());
                    }
                    else
                    {
                        Msg.setValue('');
                    }
                }
                else
                {
                    msg("FAILURE","Error Fetching Data!!");
                    return false;
                }
            }
        });
    },

    init: function(application) {
        this.control({
            "#txtNotPan": {
                keypress: this.onTxtNotPanKeypress
            },
            "#notForm": {
                afterrender: this.onNotFormAfterRender
            },
            "#btnNotCancel": {
                click: this.onBtnNotCancelClick
            },
            "#btnNotSave": {
                click: this.onBtnNotSaveClick
            },
            "#cboNotFilePer": {
                change: this.onCboNotFilePerChange,
                blur: this.onCboNotFilePerBlur
            },
            "#btnNotEdit": {
                click: this.onBtnNotEditClick
            },
            "#btnNotSubmit": {
                click: this.onBtnNotSubmitClick
            },
            "#btnNotDel": {
                click: this.onBtnNotDelClick
            },
            "#txtNotIssuedDate": {
                blur: this.onTxtNotIssuedDateBlur
            },
            "#txtNotTaxYear": {
                blur: this.onTxtNotTaxYearBlur
            },
            "#cboNotPer": {
                blur: this.onCboNotPerBlur
            },
            "#txtNotSeq": {
                keypress: this.onTxtNotSeqKeypress
            }
        });
    }

});
