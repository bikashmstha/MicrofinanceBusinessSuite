/*
 * File: app/view/CasteEducationOccupationDefination.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.CasteEducationOccupationDefination', {
    extend: 'Ext.tab.Panel',

    requires: [
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.plugin.RowEditing',
        'Ext.grid.column.Action',
        'Ext.selection.RowModel',
        'Ext.toolbar.Toolbar',
        'Ext.tab.Tab',
        'Ext.form.field.ComboBox'
    ],

    height: 264,
    width: 713,
    title: 'Cast/Education/Occupation/Ethnicity Entry Form',
    activeTab: 1,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    autoScroll: true,
                    title: 'CasteDetail',
                    items: [
                        {
                            xtype: 'gridpanel',
                            itemId: 'CasteDetail',
                            title: 'CasteDetail',
                            store: 'CasteDetailStore',
                            plugins: [
                                Ext.create('Ext.grid.plugin.RowEditing', {
                                    listeners: {
                                        canceledit: {
                                            fn: me.onRowEditingCanceledit5,
                                            scope: me
                                        },
                                        validateedit: {
                                            fn: me.onRowEditingValidateedit1,
                                            scope: me
                                        }
                                    }
                                })
                            ],
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'CasteCode',
                                    text: 'CasteCode',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtCasteCode'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'CasteDesc',
                                    text: 'CasteDesc',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtCasteDesc',
                                        width: 100
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'CIBCode',
                                    text: 'CIBCode',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtCIBCode',
                                        width: 100
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Action',
                                    text: 'Action',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtAction'
                                    }
                                },
                                {
                                    xtype: 'actioncolumn',
                                    items: [
                                        {
                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                var store = Ext.getStore('CasteDetailStore');
                                                var grd =  Ext.ComponentQuery.query('#CasteDetail')[0];
                                                var row = store.getAt(rowIndex).data;
                                                console.log('row',row);
                                                console.log('desc',row.CasteDesc);

                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Caste Detail ?', function(btn) {
                                                    if(btn == 'yes'){

                                                        var castedetail={
                                                            CasteCode:row.CasteCode,
                                                            CasteDesc:row.CasteDesc,
                                                            CIBCode:row.CIBCode,
                                                            Action:'D'
                                                        };


                                                        var wMsg='Deleting....';

                                                        var waitSave = watiMsg(wMsg);

                                                        Ext.Ajax.request({
                                                            url: '../Handlers/GeneralMasterParameters/Maintenance/CasteDetailHandler.ashx',
                                                            params: {
                                                                method:'SaveCasteDetail',
                                                                casteDetail:JSON.stringify(castedetail)
                                                            },
                                                            success: function(response){
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                console.log(out);

                                                                if(out.success==="true")
                                                                {
                                                                    var message=out.root;
                                                                    if(message.OutResultCode==="SUCCESS")
                                                                    {
                                                                        msg("SUCCESS",message.OutResultMessage,function(){
                                                                            grd.bindStore(store);
                                                                            store.removeAt(rowIndex);
                                                                        });



                                                                    }
                                                                    else
                                                                    {
                                                                        msg("FAILURE",message.OutResultMessage);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    msg("FAILURE",out.message);
                                                                }
                                                            },
                                                            failure: function ( result, request ) {
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                msg("FAILURE",out.message);
                                                            }

                                                        });



                                                        return true;
                                                    }
                                                });
                                            },
                                            icon: '../ITS/resources/images/icons/cancel.png'
                                        }
                                    ]
                                }
                            ],
                            selModel: Ext.create('Ext.selection.RowModel', {

                            })
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            items: [
                                {
                                    xtype: 'button',
                                    itemId: 'btnControlValuesCasteDetail',
                                    text: 'Add ControlValues',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnControlValuesCasteDetailClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    tabConfig: {
                        xtype: 'tab',
                        listeners: {
                            click: {
                                fn: me.onTabClick11,
                                scope: me
                            }
                        }
                    }
                },
                {
                    xtype: 'panel',
                    autoScroll: true,
                    title: 'Education',
                    items: [
                        {
                            xtype: 'gridpanel',
                            itemId: 'Education',
                            title: 'Education',
                            store: 'EducationStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'EducationCode',
                                    text: 'EducationCode',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtEducationCode'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'EducationDesc',
                                    text: 'EducationDesc',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtEducationDesc'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Action',
                                    text: 'Action',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtAction'
                                    }
                                },
                                {
                                    xtype: 'actioncolumn',
                                    items: [
                                        {
                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                var store = Ext.getStore('EducationStore');
                                                var grd =  Ext.ComponentQuery.query('#Education')[0];
                                                var row = store.getAt(rowIndex).data;
                                                console.log('row',row);
                                                console.log('desc',row.EducationDesc);

                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Education ?', function(btn) {
                                                    if(btn == 'yes'){

                                                        var education={
                                                            EducationCode:row.EducationCode,
                                                            EducationDesc:row.EducationDesc,
                                                            Action:'D'
                                                        };


                                                        var wMsg='Deleting....';

                                                        var waitSave = watiMsg(wMsg);

                                                        Ext.Ajax.request({
                                                            url: '../Handlers/GeneralMasterParameters/Maintenance/EducationHandler.ashx',
                                                            params: {
                                                                method:'SaveEducation',
                                                                education:JSON.stringify(education)
                                                            },
                                                            success: function(response){
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                console.log(out);

                                                                if(out.success==="true")
                                                                {
                                                                    var message=out.root;
                                                                    if(message.OutResultCode==="SUCCESS")
                                                                    {
                                                                        msg("SUCCESS",message.OutResultMessage,function(){
                                                                            grd.bindStore(store);
                                                                            store.removeAt(rowIndex);
                                                                        });



                                                                    }
                                                                    else
                                                                    {
                                                                        msg("FAILURE",message.OutResultMessage);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    msg("FAILURE",out.message);
                                                                }
                                                            },
                                                            failure: function ( result, request ) {
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                msg("FAILURE",out.message);
                                                            }

                                                        });



                                                        return true;
                                                    }
                                                });
                                            },
                                            icon: '../ITS/resources/images/icons/cancel.png'
                                        }
                                    ]
                                }
                            ],
                            plugins: [
                                Ext.create('Ext.grid.plugin.RowEditing', {
                                    listeners: {
                                        canceledit: {
                                            fn: me.onRowEditingCanceledit,
                                            scope: me
                                        },
                                        validateedit: {
                                            fn: me.onRowEditingValidateedit,
                                            scope: me
                                        }
                                    }
                                })
                            ],
                            selModel: Ext.create('Ext.selection.RowModel', {

                            })
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            items: [
                                {
                                    xtype: 'button',
                                    itemId: 'btnControlValuesEducation',
                                    text: 'Add ControlValues',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnControlValuesEducationClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    tabConfig: {
                        xtype: 'tab',
                        listeners: {
                            click: {
                                fn: me.onTabClick1,
                                scope: me
                            }
                        }
                    }
                },
                {
                    xtype: 'panel',
                    autoScroll: true,
                    title: 'Occupation',
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            items: [
                                {
                                    xtype: 'button',
                                    itemId: 'btnControlValuesOccupation',
                                    text: 'Add ControlValues',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnControlValuesOccupationClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    items: [
                        {
                            xtype: 'gridpanel',
                            itemId: 'Occupation',
                            title: 'Occupation',
                            store: 'OccupationStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'OccupationCode',
                                    text: 'OccupationCode',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtOccupationCode'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'OccupationDesc',
                                    text: 'OccupationDesc',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtOccupationDesc'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Action',
                                    text: 'Action',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtAction'
                                    }
                                },
                                {
                                    xtype: 'actioncolumn',
                                    items: [
                                        {
                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                var store = Ext.getStore('OccupationStore');
                                                var grd =  Ext.ComponentQuery.query('#Occupation')[0];
                                                var row = store.getAt(rowIndex).data;
                                                console.log('row',row);
                                                console.log('desc',row.OccupationDesc);

                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Occupation ?', function(btn) {
                                                    if(btn == 'yes'){

                                                        var occupation={
                                                            OccupationCode:row.OccupationCode,
                                                            OccupationDesc:row.OccupationDesc,
                                                            Action:'D'
                                                        };


                                                        var wMsg='Deleting....';

                                                        var waitSave = watiMsg(wMsg);

                                                        Ext.Ajax.request({
                                                            url: '../Handlers/GeneralMasterParameters/Maintenance/OccupationHandler.ashx',
                                                            params: {
                                                                method:'SaveOccupation',
                                                                occupation:JSON.stringify(occupation)
                                                            },
                                                            success: function(response){
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                console.log(out);

                                                                if(out.success==="true")
                                                                {
                                                                    var message=out.root;
                                                                    if(message.OutResultCode==="SUCCESS")
                                                                    {
                                                                        msg("SUCCESS",message.OutResultMessage,function(){
                                                                            grd.bindStore(store);
                                                                            store.removeAt(rowIndex);
                                                                        });



                                                                    }
                                                                    else
                                                                    {
                                                                        msg("FAILURE",message.OutResultMessage);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    msg("FAILURE",out.message);
                                                                }
                                                            },
                                                            failure: function ( result, request ) {
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                msg("FAILURE",out.message);
                                                            }

                                                        });



                                                        return true;
                                                    }
                                                });
                                            },
                                            icon: '../ITS/resources/images/icons/cancel.png'
                                        }
                                    ]
                                }
                            ],
                            plugins: [
                                Ext.create('Ext.grid.plugin.RowEditing', {
                                    listeners: {
                                        canceledit: {
                                            fn: me.onRowEditingCanceledit1,
                                            scope: me
                                        },
                                        validateedit: {
                                            fn: me.onRowEditingValidateedit2,
                                            scope: me
                                        }
                                    }
                                })
                            ],
                            selModel: Ext.create('Ext.selection.RowModel', {

                            })
                        }
                    ],
                    tabConfig: {
                        xtype: 'tab',
                        listeners: {
                            click: {
                                fn: me.onTabClick2,
                                scope: me
                            }
                        }
                    }
                },
                {
                    xtype: 'panel',
                    autoScroll: true,
                    title: 'Ethinicity Information',
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            items: [
                                {
                                    xtype: 'button',
                                    itemId: 'btnControlValuesEthnicityInformation',
                                    text: 'Add ControlValues',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnControlValuesEthnicityInformationClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    items: [
                        {
                            xtype: 'gridpanel',
                            itemId: 'EthnicityInformation',
                            title: 'Ethnicity Information',
                            store: 'EthnicityInofrmationStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    itemId: 'EthnicityCode',
                                    dataIndex: 'EthnicityCode',
                                    text: 'EthnicityCode',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtEthnicityCode',
                                        width: 100
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    itemId: 'EthnicityDesc',
                                    dataIndex: 'EthnicityDesc',
                                    text: 'EthnicityDesc',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtEthnicityDesc'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    itemId: 'MastEthnicity',
                                    dataIndex: 'MastEthnicity',
                                    text: 'MastEthnicity',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtMastEthnicity',
                                        width: 100
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Action',
                                    text: 'Action',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtAction'
                                    }
                                },
                                {
                                    xtype: 'actioncolumn',
                                    items: [
                                        {
                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                var store = Ext.getStore('EthnicityInofrmationStore');
                                                var grd =  Ext.ComponentQuery.query('#EthnicityInformation')[0];
                                                var row = store.getAt(rowIndex).data;
                                                console.log('row',row);
                                                console.log('desc',row.EthnicityDesc);

                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Ethnicity Inofrmation ?', function(btn) {
                                                    if(btn == 'yes'){

                                                        var ethnicityinformation={
                                                            EthnicityCode:row.EthnicityCode,
                                                            EthnicityDesc:row.EthnicityDesc,
                                                            Action:'D'
                                                        };


                                                        var wMsg='Deleting....';

                                                        var waitSave = watiMsg(wMsg);

                                                        Ext.Ajax.request({
                                                            url: '../Handlers/GeneralMasterParameters/Maintenance/EthnicityInformationHandler.ashx',
                                                            params: {
                                                                method:'SaveEthnicityInformation',
                                                                ethnicityInformation:JSON.stringify(ethnicityinformation)
                                                            },
                                                            success: function(response){
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                console.log(out);

                                                                if(out.success==="true")
                                                                {
                                                                    var message=out.root;
                                                                    if(message.OutResultCode==="SUCCESS")
                                                                    {
                                                                        msg("SUCCESS",message.OutResultMessage,function(){
                                                                            grd.bindStore(store);
                                                                            store.removeAt(rowIndex);
                                                                        });



                                                                    }
                                                                    else
                                                                    {
                                                                        msg("FAILURE",message.OutResultMessage);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    msg("FAILURE",out.message);
                                                                }
                                                            },
                                                            failure: function ( result, request ) {
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                msg("FAILURE",out.message);
                                                            }

                                                        });



                                                        return true;
                                                    }
                                                });
                                            },
                                            icon: '../ITS/resources/images/icons/cancel.png'
                                        }
                                    ]
                                }
                            ],
                            plugins: [
                                Ext.create('Ext.grid.plugin.RowEditing', {
                                    listeners: {
                                        canceledit: {
                                            fn: me.onRowEditingCanceledit2,
                                            scope: me
                                        },
                                        validateedit: {
                                            fn: me.onRowEditingValidateedit3,
                                            scope: me
                                        }
                                    }
                                })
                            ],
                            selModel: Ext.create('Ext.selection.RowModel', {

                            })
                        }
                    ],
                    tabConfig: {
                        xtype: 'tab',
                        listeners: {
                            click: {
                                fn: me.onTabClick3,
                                scope: me
                            }
                        }
                    }
                },
                {
                    xtype: 'panel',
                    autoScroll: true,
                    title: 'Ethinicity Caste Information',
                    items: [
                        {
                            xtype: 'combobox',
                            itemId: 'ddlEthinicityCasteCode',
                            margin: '10 10 10 10',
                            width: 300,
                            fieldLabel: 'Ethnicity Name',
                            displayField: 'EthnicityDesc',
                            forceSelection: true,
                            queryMode: 'local',
                            store: 'EthnicityInofrmationStore',
                            valueField: 'EthnicityCode',
                            listeners: {
                                change: {
                                    fn: me.onTxtEthinicityCasteCodeChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'gridpanel',
                            itemId: 'EthnicityCasteInformation',
                            title: 'Castes Detail',
                            store: 'EthnicityCasteInformationStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    itemId: 'CasteCode',
                                    dataIndex: 'CasteCode',
                                    text: 'Code',
                                    editor: {
                                        xtype: 'combobox',
                                        itemId: 'ddlCasteCode',
                                        width: 100,
                                        displayField: 'CasteDesc',
                                        queryMode: 'local',
                                        store: 'CasteDetailStore',
                                        valueField: 'CasteCode'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'EthnicityCasteDesc',
                                    text: 'Description',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtCasteDesc'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Action',
                                    text: 'Action',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtAction',
                                        width: 100
                                    }
                                },
                                {
                                    xtype: 'actioncolumn',
                                    items: [
                                        {
                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                var store = Ext.getStore('EthnicityCasteInformationStore');
                                                var grd =  Ext.ComponentQuery.query('#EthnicityCasteInformation')[0];
                                                var row = store.getAt(rowIndex).data;
                                                console.log('row',row);
                                                console.log('desc',row.EthnicityCasteDesc);

                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Ethnicity Caste Information ?', function(btn) {
                                                    if(btn == 'yes'){

                                                        var ethnicitycasteinformation={
                                                            CasteCode:row.CasteCode,
                                                            EthnicityCasteDesc:row.EthnicityCasteDesc,
                                                            Action:'D'
                                                        };


                                                        var wMsg='Deleting....';

                                                        var waitSave = watiMsg(wMsg);

                                                        Ext.Ajax.request({
                                                            url: '../Handlers/GeneralMasterParameters/Maintenance/EthnicityCasteInformationHandler.ashx',
                                                            params: {
                                                                method:'SaveEthnicityCasteInformation',
                                                                ethnicityCasteInformation:JSON.stringify(ethnicitycasteinformation)
                                                            },
                                                            success: function(response){
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                console.log(out);

                                                                if(out.success==="true")
                                                                {
                                                                    var message=out.root;
                                                                    if(message.OutResultCode==="SUCCESS")
                                                                    {
                                                                        msg("SUCCESS",message.OutResultMessage,function(){
                                                                            grd.bindStore(store);
                                                                            store.removeAt(rowIndex);
                                                                        });



                                                                    }
                                                                    else
                                                                    {
                                                                        msg("FAILURE",message.OutResultMessage);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    msg("FAILURE",out.message);
                                                                }
                                                            },
                                                            failure: function ( result, request ) {
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                msg("FAILURE",out.message);
                                                            }

                                                        });



                                                        return true;
                                                    }
                                                });
                                            },
                                            icon: '../ITS/resources/images/icons/cancel.png'
                                        }
                                    ]
                                }
                            ],
                            plugins: [
                                Ext.create('Ext.grid.plugin.RowEditing', {
                                    listeners: {
                                        canceledit: {
                                            fn: me.onRowEditingCanceledit4,
                                            scope: me
                                        },
                                        validateedit: {
                                            fn: me.onRowEditingValidateedit4,
                                            scope: me
                                        }
                                    }
                                })
                            ],
                            selModel: Ext.create('Ext.selection.RowModel', {

                            })
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            items: [
                                {
                                    xtype: 'button',
                                    itemId: 'btnControlValuesEthnicityCasteInformation',
                                    text: 'Add ControlValues',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnControlValuesEthnicityCasteInformationClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    tabConfig: {
                        xtype: 'tab',
                        listeners: {
                            click: {
                                fn: me.onTabClick4,
                                scope: me
                            }
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onRowEditingCanceledit5: function(editor, e, eOpts) {

    },

    onRowEditingValidateedit1: function(editor, e, eOpts) {
        var errMsg='';
        var casteDetailCode=Ext.ComponentQuery.query('#txtCasteCode')[0];
        var casteDetailDesc=Ext.ComponentQuery.query('#txtCasteDesc')[0];
        var cIBCode=Ext.ComponentQuery.query('#txtCIBCode')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];
        /*console.log(narrationCode.getValue());
        console.log(narrationDesc.getValue());
        console.log(action.getValue());
        */

        if(casteDetailCode.getValue()===null ||casteDetailCode.getValue()==="")
        {
            errMsg+="Please,Enter Caste Code";
        }
        if(casteDetailDesc.getValue()===null ||casteDetailDesc.getValue()==="")
        {
            errMsg+="Please,Enter Caste Description";
        }
        if(cIBCode.getValue()===null ||cIBCode.getValue()==="")
        {
            errMsg+="Please,Enter CIBCode";
        }
        if(errMsg!=='')
        {
            msg("WARNING",errMsg);
            return;
        }


        var casteDetail={
            CasteCode:casteDetailCode.getValue(),
            CasteDesc:casteDetailDesc.getValue(),
            CIBCode:cIBCode.getValue(),
            Action:action.getValue()
        };

        var wMsg='';
        if(action.getValue()==='I')
        {
            wMsg='Inserting....';
        }
        else
        {
            wMsg='Updating....';
        }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/CasteDetailHandler.ashx',
            params: {
                method:'SaveCasteDetail',
                casteDetail:JSON.stringify(casteDetail)
            },
            success: function(response){
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                console.log(out);

                if(out.success==="true")
                {
                    var message=out.root;
                    if(message.OutResultCode==="SUCCESS")
                    {
                        msg("SUCCESS",message.OutResultMessage,function(){
                            var grd = Ext.ComponentQuery.query('#CasteDetail')[0];

                            var record = grd.getSelectionModel().getSelection()[0];
                            record.set('Action','U');

                        });



                    }
                    else
                    {
                        msg("FAILURE",message.OutResultMessage);
                    }
                }
                else
                {
                    msg("FAILURE",out.message);
                }
            },
            failure: function ( result, request ) {
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                msg("FAILURE",out.message);
            }

        });

    },

    onBtnControlValuesCasteDetailClick: function(button, e, eOpts) {
        var store =Ext.getStore('CasteDetailStore');
        var rec={CasteCode:'',
                 CasteDesc:'',
                 CIBCode:'',
                 Action:'I'};
        store.add(rec);
    },

    onTabClick11: function(button, e, eOpts) {
        var store=Ext.getStore('CasteDetailStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/CasteDetailHandler.ashx',
            params: {
                method:'GetCasteDetails'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onRowEditingCanceledit: function(editor, e, eOpts) {

    },

    onRowEditingValidateedit: function(editor, e, eOpts) {
        var errMsg='';
        var educationCode=Ext.ComponentQuery.query('#txtEducationCode')[0];
        var educationDesc=Ext.ComponentQuery.query('#txtEducationDesc')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];
        /*console.log(narrationCode.getValue());
        console.log(narrationDesc.getValue());
        console.log(action.getValue());
        */

        if(educationCode.getValue()===null ||educationCode.getValue()==="")
        {
            errMsg+="Please,Enter Education Code";
        }
        if(educationDesc.getValue()===null ||educationDesc.getValue()==="")
        {
            errMsg+="Please,Enter Education Description";
        }

        if(errMsg!=='')
        {
            msg("WARNING",errMsg);
            return;
        }


        var education={
            EducationCode:educationCode.getValue(),
            EducationDesc:educationDesc.getValue(),
            Action:action.getValue()
        };

        var wMsg='';
        if(action.getValue()==='I')
        {
            wMsg='Inserting....';
        }
        else
        {
            wMsg='Updating....';
        }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/EducationHandler.ashx',
            params: {
                method:'SaveEducation',
                education:JSON.stringify(education)
            },
            success: function(response){
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                console.log(out);

                if(out.success==="true")
                {
                    var message=out.root;
                    if(message.OutResultCode==="SUCCESS")
                    {
                        msg("SUCCESS",message.OutResultMessage,function(){
                            var grd = Ext.ComponentQuery.query('#Education')[0];

                            var record = grd.getSelectionModel().getSelection()[0];
                            record.set('Action','U');

                        });



                    }
                    else
                    {
                        msg("FAILURE",message.OutResultMessage);
                    }
                }
                else
                {
                    msg("FAILURE",out.message);
                }
            },
            failure: function ( result, request ) {
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                msg("FAILURE",out.message);
            }

        });

    },

    onBtnControlValuesEducationClick: function(button, e, eOpts) {
        var store =Ext.getStore('EducationStore');
        var rec={EducationCode:'',
                 EducationDesc:'',
                 Action:'I'};
        store.add(rec);
    },

    onTabClick1: function(button, e, eOpts) {


        var store=Ext.getStore('EducationStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/EducationHandler.ashx',
            params: {
                method:'GetEducations'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onBtnControlValuesOccupationClick: function(button, e, eOpts) {
        var store =Ext.getStore('OccupationStore');
        var rec={OccupationCode:'',
                 OccupationDesc:'',
                 Action:'I'};
        store.add(rec);
    },

    onRowEditingCanceledit1: function(editor, e, eOpts) {

    },

    onRowEditingValidateedit2: function(editor, e, eOpts) {
        var errMsg='';
        var occupationCode=Ext.ComponentQuery.query('#txtOccupationCode')[0];
        var occupationDesc=Ext.ComponentQuery.query('#txtOccupationDesc')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];
        /*console.log(narrationCode.getValue());
        console.log(narrationDesc.getValue());
        console.log(action.getValue());
        */

        if(occupationCode.getValue()===null ||occupationCode.getValue()==="")
        {
            errMsg+="Please,Enter Occupation Code";
        }
        if(occupationDesc.getValue()===null ||occupationDesc.getValue()==="")
        {
            errMsg+="Please,Enter Occupation Description";
        }

        if(errMsg!=='')
        {
            msg("WARNING",errMsg);
            return;
        }


        var occupation={
            OccupationCode:occupationCode.getValue(),
            OccupationDesc:occupationDesc.getValue(),
            Action:action.getValue()
        };

        var wMsg='';
        if(action.getValue()==='I')
        {
            wMsg='Inserting....';
        }
        else
        {
            wMsg='Updating....';
        }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/OccupationHandler.ashx',
            params: {
                method:'SaveOccupation',
                occupation:JSON.stringify(occupation)
            },
            success: function(response){
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                console.log(out);

                if(out.success==="true")
                {
                    var message=out.root;
                    if(message.OutResultCode==="SUCCESS")
                    {
                        msg("SUCCESS",message.OutResultMessage,function(){
                            var grd = Ext.ComponentQuery.query('#Occupation')[0];

                            var record = grd.getSelectionModel().getSelection()[0];
                            record.set('Action','U');

                        });



                    }
                    else
                    {
                        msg("FAILURE",message.OutResultMessage);
                    }
                }
                else
                {
                    msg("FAILURE",out.message);
                }
            },
            failure: function ( result, request ) {
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                msg("FAILURE",out.message);
            }

        });

    },

    onTabClick2: function(button, e, eOpts) {
        var store=Ext.getStore('OccupationStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/OccupationHandler.ashx',
            params: {
                method:'GetOccupations'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onBtnControlValuesEthnicityInformationClick: function(button, e, eOpts) {
        var store =Ext.getStore('EthnicityInofrmationStore');
        var rec={EthnicityInformationCode:'',
                 EthnicityInformationDesc:'',
                 Action:'I'};
        store.add(rec);
    },

    onRowEditingCanceledit2: function(editor, e, eOpts) {

    },

    onRowEditingValidateedit3: function(editor, e, eOpts) {
        var errMsg='';
        var ethnicityCode=Ext.ComponentQuery.query('#txtEthnicityCode')[0];
        var ethnicityDesc=Ext.ComponentQuery.query('#txtEthnicityDesc')[0];
        var mastEthnicity=Ext.ComponentQuery.query('#txtMastEthnicity')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];
        /*console.log(narrationCode.getValue());
        console.log(narrationDesc.getValue());
        console.log(action.getValue());
        */

        if(ethnicityCode.getValue()===null ||ethnicityCode.getValue()==="")
        {
            errMsg+="Please,Enter Ethnicity Code";
        }
        if(ethnicityDesc.getValue()===null ||ethnicityDesc.getValue()==="")
        {
            errMsg+="Please,Enter Ethnicity Description";
        }
        if(mastEthnicity.getValue()===null ||mastEthnicity.getValue()==="")
        {
            errMsg+="Please,Enter Mast Ethnicity";
        }

        if(errMsg!=='')
        {
            msg("WARNING",errMsg);
            return;
        }


        var ethnicityInformation={
            EthnicityCode:ethnicityCode.getValue(),
            EthnicityDesc:ethnicityDesc.getValue(),
            MastEthnicity:mastEthnicity.getValue(),
            Action:action.getValue()
        };

        var wMsg='';
        if(action.getValue()==='I')
        {
            wMsg='Inserting....';
        }
        else
        {
            wMsg='Updating....';
        }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/EthnicityInformationHandler.ashx',
            params: {
                method:'SaveEthnicityInformation',
                ethnicityInformation:JSON.stringify(ethnicityInformation)
            },
            success: function(response){
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                console.log(out);

                if(out.success==="true")
                {
                    var message=out.root;
                    if(message.OutResultCode==="SUCCESS")
                    {
                        msg("SUCCESS",message.OutResultMessage,function(){
                            var grd = Ext.ComponentQuery.query('#EthnicityInformation')[0];

                            var record = grd.getSelectionModel().getSelection()[0];
                            record.set('Action','U');

                        });



                    }
                    else
                    {
                        msg("FAILURE",message.OutResultMessage);
                    }
                }
                else
                {
                    msg("FAILURE",out.message);
                }
            },
            failure: function ( result, request ) {
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                msg("FAILURE",out.message);
            }

        });

    },

    onTabClick3: function(button, e, eOpts) {
        var store=Ext.getStore('EthnicityInofrmationStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/EthnicityInformationHandler.ashx',
            params: {
                method:'GetEthnicityInformations'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onTxtEthinicityCasteCodeChange: function(field, newValue, oldValue, eOpts) {

        var store=Ext.getStore('EthnicityCasteInformationStore');
        store.removeAll();
        var ethnicityCasteCode=Ext.ComponentQuery.query('#txtEthinicityCasteCode')[0].getValue();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/EthnicityCasteInformationHandler.ashx',
            params: {
                method:'GetEthnicityCasteInformations',
                ethnicityCasteCode:ethnicityCasteCode
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onBtnControlValuesEthnicityCasteInformationClick: function(button, e, eOpts) {
        var store =Ext.getStore('EthnicityCasteInformationStore');
        var rec={EthnicityCasteCode:'',
                 EthnicityCasteDesc:'',
                 CasteCode:'',
                 Action:'I'};
        store.add(rec);
    },

    onRowEditingCanceledit4: function(editor, e, eOpts) {

    },

    onRowEditingValidateedit4: function(editor, e, eOpts) {
        var errMsg='';
        var casteCode=Ext.ComponentQuery.query('#ddlCasteCode')[0];
        //var casteDesc=Ext.ComponentQuery.query('#txtCasteDesc')[0];
        var ethnicityCasteCode=Ext.ComponentQuery.query('#txtEthnicityCasteCode')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];
        /*console.log(narrationCode.getValue());
        console.log(narrationDesc.getValue());
        console.log(action.getValue());
        */
        if(ethnicityCasteCode.getValue()===null ||ethnicityCasteCode.getValue()==="")
        {
            errMsg+="Please,Select Ethnicity Caste Code";
        }
        if(casteCode.getValue()===null ||casteCode.getValue()==="")
        {
            errMsg+="Please,Select Caste Code";
        }


        if(errMsg!=='')
        {
            msg("WARNING",errMsg);
            return;
        }


        var ethnicityCasteInformation={
            EthnicityCasteCode:ethnicityCasteCode.getValue(),
            CasteCode:casteCode.getValue(),
            Action:action.getValue()
        };

        var wMsg='';
        if(action.getValue()==='I')
        {
            wMsg='Inserting....';
        }
        else
        {
            wMsg='Updating....';
        }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/OccupationHandler.ashx',
            params: {
                method:'SaveEthnicityCasteInformation',
                ethnicityCasteInformation:JSON.stringify(ethnicityCasteInformation)
            },
            success: function(response){
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                console.log(out);

                if(out.success==="true")
                {
                    var message=out.root;
                    if(message.OutResultCode==="SUCCESS")
                    {
                        msg("SUCCESS",message.OutResultMessage,function(){
                            var grd = Ext.ComponentQuery.query('#EthnicityCasteInformation')[0];

                            var record = grd.getSelectionModel().getSelection()[0];
                            record.set('Action','U');

                        });



                    }
                    else
                    {
                        msg("FAILURE",message.OutResultMessage);
                    }
                }
                else
                {
                    msg("FAILURE",out.message);
                }
            },
            failure: function ( result, request ) {
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                msg("FAILURE",out.message);
            }

        });
    },

    onTabClick4: function(button, e, eOpts) {
        var store=Ext.getStore('EthnicityInofrmationStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/EthnicityInformationHandler.ashx',
            params: {
                method:'GetEthnicityInformations'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });

        var casteDetailStore=Ext.getStore('CasteDetailStore');
        casteDetailStore.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Maintenance/CasteDetailHandler.ashx',
            params: {
                method:'GetCasteDetails'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            casteDetailStore.removeAll();
            casteDetailStore.add(data.root);


        }
        });
    }

});