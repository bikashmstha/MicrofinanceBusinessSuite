/*
 * File: app/controller/ModuleVerification.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.ModuleVerification', {
    extend: 'Ext.app.Controller',

    stores: [
        'UnverifiedModule',
        'UnverifiedTransaction',
        'ModuleVerificationStatus',
        'MV_OfficeUsers'
    ],

    onModuleVerifcation_grdMVUnVItemClick: function(dataview, record, item, index, e, eOpts) {

        var grdMVUnV=Ext.ComponentQuery.query("#moduleVerification_grdUnVTrans")[0];
        //console.log('rec',record.raw.UnverifiedTransactions);
        grdMVUnV.store.loadData(record.raw.UnverifiedTransactions);

        /*
        if(index>=0)
        {
        var grdModule=Ext.ComponentQuery.query('#moduleVerifcation_grdMVUnV')[0];
        var umStore = grdModule.getStore();//.getAt(index);
        //var moduleName=umStore.get(Module);
        var mRow=umStore.data.items[index].data;

        var moduleName=mRow.Module;
        alert(moduleName);
    }
    */

    },

    onPnlModuleVerificationAfterRender: function(component, eOpts) {
        var offCode= Ext.get('offCode').dom.innerHTML;
        var umStore=Ext.getStore('UnverifiedModule');
        umStore.load({
            url:"../Handlers/Verification/UserVerificationModuleHandler.ashx?method=GetUnverifiedModulesWithCount",
            method:'POST',
            params: {}

        });
        var storeOffUsers = Ext.getStore('MV_OfficeUsers');
        storeOffUsers.load({

            url:"../Handlers/Security/OfficeUserHandler.ashx?method=GetParentOfficeUsersForMV",
            params:{officeCode:offCode}

        });
        var grdTran= Ext.ComponentQuery.query('#moduleVerification_grdUnVTrans')[0];
        grdTran.getStore().removeAll();



        /*
        var grdModule=Ext.ComponentQuery.query('#moduleVerifcation_grdMVUnV')[0];

        var objParam = Ext.ComponentQuery.query('#pnlModuleVerification')[0];
        var param=objParam.extraParam;
        //console.log("p",param);
        if (!param)
        {
            umStore.load({
                url:"../Handlers/Verification/UserVerificationModuleHandler.ashx?method=GetUnverifiedModulesWithCount",
                method:'POST',
                params: {}

            });
            return;
        }
        else
        {
            var tNo=param.tranNo;
            var idxM=param.indexM;
            var idxT=param.indexT;

            //////////////grdModule goes here

            grdModule.getSelectionModel().select(idxM);


            ///////////grdTran goes here

            var grdTran=Ext.ComponentQuery.query('#moduleVerification_grdUnVTrans')[0];

            grdTran.getSelectionModel().select(idxT,true,false);

        }
        */
    },

    onBtnSaveUserMVClick: function(button, e, eOpts) {
        var me=this;

        var grdUser=Ext.ComponentQuery.query('#grdUserListMV')[0];
        var selectedUser=grdUser.getSelectionModel().getSelection()[0];

        if(!selectedUser)
        {
            msg("WARNING",'Select User');
            return;
        }

        me.SaveMV("F");

        var winUser = Ext.getCmp('MVPopUpUsers');
        winUser.close();

        /*var umStore=Ext.getStore('UnverifiedModule');
        umStore.load({
        url:"../Handlers/Verification/UserVerificationModuleHandler.ashx?method=GetUnverifiedModulesWithCount",
        method:'POST',
        params: {}

        });*/
    },

    ClearControls: function(txt) {
        var grdM=Ext.ComponentQuery.query('#moduleVerifcation_grdMVUnV')[0];
        var grdT= Ext.ComponentQuery.query('#moduleVerification_grdUnVTrans')[0];


        grdM.getStore().load();
        grdM.getSelectionModel().deselectAll();
        grdT.getStore().removeAll();

        /*
        var selectionM=grdM.getSelectionModel().getSelection()[0];
        var selectedIndx= grdM.getStore().indexOf(selectionM);
        var indxM = grdM.getStore().getAt(selectedIndx);
        grdM.getSelectionModel().select(indxM,true,false);
        grdT.getSelectionModel().deselectAll();
        */
        /*
        var selectionM=grdM.getSelectionModel().getSelection()[0];
        var selectedIndx= grdM.getStore().indexOf(selectionM);
        var indxM = grdM.getStore().getAt(selectedIndx);
        grdM.getSelectionModel().select(indxM); 
        grdM.getStore().load({
        callback: function() { 

        if(indxM)
        {  

        grdM.getSelectionModel().select(indxM); 

        } 

        }

        });
        */

    },

    SaveMV: function(status) {
        var me =this;
        var grdUser=Ext.ComponentQuery.query('#grdUserListMV')[0];
        var selectedUser=grdUser.getSelectionModel().getSelection()[0];

        //////////////grdModule goes here

        var grdModule=Ext.ComponentQuery.query('#moduleVerifcation_grdMVUnV')[0];
        var selectionM=grdModule.getSelectionModel().getSelection()[0];
        var selectedIndx= grdModule.getStore().indexOf(selectionM);
        var umStore = grdModule.getStore();

        ///////////grdTran goes here

        var grdTran=Ext.ComponentQuery.query('#moduleVerification_grdUnVTrans')[0];
        var selectionT=grdTran.getSelectionModel().getSelection()[0];
        var selectedIndxT= grdTran.getStore().indexOf(selectionT);
        var utStore =grdTran.getStore();

        var appID=umStore.getAt(selectedIndx).data.ApplicationID;
        var moduleID=umStore.getAt(selectedIndx).data.ModuleID;
        var vmFromDate=umStore.getAt(selectedIndx).data.VMFromDate;
        var userID=umStore.getAt(selectedIndx).data.UserID;
        var verifyLevel=umStore.getAt(selectedIndx).data.VerifyLevel;
        var fromDate=umStore.getAt(selectedIndx).data.FromDate;
        var levelOfVerification=umStore.getAt(selectedIndx).data.LevelOfVerification;

        var tranNo=utStore.getAt(selectedIndxT).data.TranNo;
        var vStatus=status;
        var vRemarks=utStore.getAt(selectedIndxT).data.Remarks;
        var vDate="";
        var prevStatus=utStore.getAt(selectedIndxT).data.PreviousStatus;

        var forwardTo=selectedUser.data.UserName;

        var UTV={'ApplicationID':appID,'ModuleID':moduleID,'FromDate':vmFromDate,'UserID':userID,'VerifyLevel':verifyLevel,'UFromDate':fromDate,'NoOfLevelReq':levelOfVerification,'TranNo':tranNo,'PrevStatus':prevStatus,'VerifyStatus':vStatus,'VerifyRemarks':vRemarks,'ForwardTo':forwardTo,'VerifyDate':vDate};

        //console.log('UTV',UTV);

        Ext.Ajax.request({
            method: 'POST',
            url: '../Handlers/Verification/UserTranVerificationHandler.ashx',
            params: {method:'SaveUserTranVerifications', userTranVerification : JSON.stringify(UTV) },
            success: function( result, request ){

                var jsonMsg=Ext.decode(result.responseText);

                if(vStatus === "F")
                {
                    msg("INFO",'This Transactions No. have been Forwarded Successfully !');
                    return;
                }
                else
                {
                    msg(jsonMsg.success=="True"?"SUCCESS":"FAILURE",jsonMsg.message);
                }
            }
        });
        me.ClearControls();


    },

    init: function(application) {
        this.control({
            "#moduleVerifcation_grdMVUnV": {
                itemclick: this.onModuleVerifcation_grdMVUnVItemClick
            },
            "#pnlModuleVerification": {
                afterrender: this.onPnlModuleVerificationAfterRender
            },
            "#btnSaveUserMV": {
                click: this.onBtnSaveUserMVClick
            }
        });
    }

});
