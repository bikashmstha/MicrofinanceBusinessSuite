{
    "type": "Ext.app.Application",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "controllers": [
            "LoginSecurity",
            "MenuController",
            "SavingMidTermInterest",
            "ABBSCharge",
            "Religion",
            "ResetPassword",
            "CompulsoryAccountsEntry",
            "CreateUserRole",
            "Department",
            "DepartmentMap",
            "Post",
            "ApplicationSequenceGenerator",
            "OfficeWiseHoliday",
            "TransferCenterGroupOfMember",
            "MembershipCancellationRestore",
            "PrintOnlyCollectionSheet",
            "PrintManualCollectionSheet",
            "MyController",
            "PrintTodaysCollectionSheetReport",
            "UNEntryCollectionSheet",
            "MFLoanDisbursement",
            "MFMERepaymentAdjust",
            "MFLoanEdit",
            "PublicSavingDepositEdit",
            "PublicSavingWithdrawEdit",
            "LoanSavingTransfer",
            "MyController1",
            "StaffKYCEntry",
            "StaffLoanDisbursement",
            "StaffLoanAdditionalDisbursement",
            "StaffLoanDisbursementOpening",
            "StaffLoanRepayment",
            "MFSavingWithdrawEdit",
            "MFSavingDepositEdit",
            "PublicSavingAccountOpen",
            "MFSavingWithdrawal"
        ],
        "models": [
            "TreePanelModel",
            "Narration",
            "NepaliDateConversion",
            "NepaliFiscalYear",
            "InstallmentPeriod",
            "LoanPeriod",
            "LoanInstallmentPeriodMap",
            "LoanPeriodProductMap",
            "AccountCategory",
            "AccountSubCategory",
            "GLVoucherType",
            "VoucherApprovalSecurity",
            "OfficeShort",
            "SavingMidTermInterest",
            "ABBSTypeCharge",
            "Religion",
            "UserShort",
            "ReferenceShort",
            "PostShort",
            "DesignationShort",
            "DepartmentShort",
            "CountryShort",
            "Role",
            "ModuleShort",
            "FiscalYearShort",
            "Department",
            "DepartmentMap",
            "ReportShortStore",
            "OfficeWiseHoliday",
            "MemberForCheque",
            "SelectMemberAccountForCheque",
            "ChequeGenerateDetail",
            "MyModel"
        ],
        "name": "MyApp",
        "stores": [
            "TreePanelDataStore",
            "ParentMenuStore",
            "NarrationStore",
            "NepaliDateConversionStore",
            "NepaliFiscalYearStore",
            "InstallmentPeriodStore",
            "LoanPeriodStore",
            "LoanInstallmentPeriodMapStore",
            "LoanPeriodProductMapStore",
            "AccountCategoryStore",
            "AccountSubCategoryStore",
            "GLVoucherTypeStore",
            "VoucherApprovalSecurityStore",
            "SavingMidTermInterest",
            "ABBSTypeChargeStore",
            "ReligionStore",
            "PostShortStore",
            "DesignationShortStore",
            "DepartmentShortStore",
            "CountryShortStore",
            "RoleStore",
            "ModuleShortStore",
            "FiscaYearStore",
            "OfficeWiseHolidayStore",
            "MyJsonStore1"
        ],
        "views": [
            "LoanDeductionTypes",
            "MyViewport",
            "SavingMidTermInterest",
            "ABBSCharge",
            "Religion",
            "Department",
            "ResetPassword",
            "MyPanel17",
            "ApplicationSequenceGenerator",
            "Post",
            "DepartmentMap",
            "OfficeWiseHoliday",
            "CollectionSheetEntry",
            "SelectMemberForCheque",
            "SelectMemberAccountForCheque",
            "MyPanel",
            "SelectLoanUtilizationCenterPopup"
        ]
    },
    "configAlternates": {
        "controllers": "typedarray",
        "models": "typedarray",
        "name": "string",
        "stores": "typedarray",
        "views": "typedarray"
    },
    "name": "Application",
    "designerId": "application",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "launch",
                "implHandler": [
                    "Ext.create('MyApp.view.MyViewport');",
                    "var me = this;",
                    "var clear = false;",
                    "var main = me.getController('MyApp.controller.Main');",
                    "",
                    "",
                    "var el = Ext.get('logOUt');",
                    "var elLoginTitle = Ext.get('LoginTitle');",
                    "",
                    "var txtToken = getParameterByName('token');",
                    "",
                    "if (txtToken.length > 30) {",
                    "    var txtModule = getParameterByName('module');",
                    "    Ext.Ajax.request({",
                    "        url: '../Handlers/Security/SessionHandler.ashx?',",
                    "        params: { token: txtToken, module: txtModule, method: 'LoginByToken' },",
                    "        success: function (result, request) {",
                    "            var obj = Ext.decode(result.responseText);",
                    "",
                    "            var el = Ext.get('logOUt');",
                    "            var elLoginTitle = Ext.get('LoginTitle');",
                    "            var elNepDate = Ext.get('nepDate');",
                    "            var elOffCode = Ext.get('offCode');",
                    "            // alert(\"success: \"+obj.success);",
                    "            if (obj.success == \"true\") {",
                    "",
                    "                //Sets Office Code",
                    "                elOffCode.dom.innerHTML = obj.root.Obj.OfficeUser.OfficeCode;",
                    "",
                    "                //Sets Nepali Date",
                    "                GetNepaliDate(function (nepaliDate) {",
                    "                    elNepDate.dom.innerHTML = nepaliDate;",
                    "                });",
                    "",
                    "",
                    "                el.child('span').dom.innerHTML = \"LogOut\";",
                    "                me.getController('MyApp.controller.Main').showMainView();",
                    "",
                    "                var store = Ext.getStore('TreePanelDataStore');",
                    "                if (store)",
                    "                store.setRootNode(obj.root.MenuObj);",
                    "",
                    "            }",
                    "            else {",
                    "                msg(\"FAILURE\", obj.message);",
                    "            }",
                    "",
                    "        },",
                    "",
                    "        failure: function (form, action) {",
                    "            waitSave.hide();",
                    "            var user = me.getController('MyApp.controller.LoginSecurity');",
                    "            var valid = user.validateSession(\"default\");",
                    "            if (valid) {",
                    "                el.child('span').dom.innerHTML = \"LogOut\";",
                    "                main.showMainView();",
                    "",
                    "",
                    "                if (txtToken.length < 30) {",
                    "                    main.LoadUserFromSession();",
                    "                }",
                    "            }",
                    "            switch (action.failureType) {",
                    "                case Ext.form.action.Action.CLIENT_INVALID:",
                    "                msg('Failure', 'Form fields may not be submitted with invalid values');",
                    "                break;",
                    "                case Ext.form.action.Action.CONNECT_FAILURE:",
                    "                msg('Failure', 'Ajax communication failed');",
                    "                break;",
                    "                case Ext.form.action.Action.SERVER_INVALID:",
                    "                msg('Failure', action.result.msg);",
                    "            }",
                    "        }",
                    "",
                    "    });",
                    "}",
                    "else {",
                    "    var user = me.getController('MyApp.controller.LoginSecurity');",
                    "    var valid = user.validateSession(\"default\");",
                    "    if (valid) {",
                    "        el.child('span').dom.innerHTML = \"LogOut\";",
                    "        main.showMainView();",
                    "",
                    "",
                    "        if (txtToken.length < 30) {",
                    "            main.LoadUserFromSession();",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "",
                    "el.on('click', function (e, t, eOpts) {",
                    "",
                    "    if (el.child('span').dom.innerHTML !== \"LogIn\") {",
                    "        el.child('span').dom.innerHTML = \"LogIn\";",
                    "        elLoginTitle.dom.innerHTML = \"Welcome\";",
                    "        clear = user.clearSession();",
                    "    }",
                    "});",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "launch",
            "designerId": "7a251e9f-4e7a-4973-beb5-6145b61f9ad5"
        }
    ]
}