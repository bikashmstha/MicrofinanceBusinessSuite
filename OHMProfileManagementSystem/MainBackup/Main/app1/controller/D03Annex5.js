/*
 * File: app/controller/D03Annex5.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.D03Annex5', {
    extend: 'Ext.app.Controller',

    stores: [
        'CountryStore',
        'DiscCategory',
        'Annex',
        'TaxCategory',
        'ParamAnx5'
    ],

    refs: [
        {
            ref: 'country',
            selector: '#cboCountryAnx5'
        },
        {
            ref: 'taxCategory',
            selector: '#cboTaxCategoryAnx5'
        },
        {
            ref: 'taxRate',
            selector: '#txtTaxRateAnx5'
        }
    ],

    onGrdInclusionD03Anx5AfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdInclusionD03Anx5')[0];

        var strUpdAnnex = null;
        var strIN = null;
        var param = null;
        var readOnly = false;

        param = me.validateParam();

        if(param !== null)
        {    
            if( param.action === "E")
            {        
                me.loadDataForUpdate(param);    
                strUpdAnnex = Ext.getStore("UpdAnnex");

                strIN = deepCloneStore(strUpdAnnex,"UpdInclusion");  
                strIN.filter('ItemType',"IN");
                strIN.sort('ItemID','ASC'); 

            }

            if(param.recStatus === "F")
            {
                readOnly = true;
            }
        }

        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            Ext.Function.defer(function(){
                var txtBox = "";      
                var anxValue = null;

                if(rowIndex == 16)
                {
                    txtBox = new Ext.form.TextField({
                        id:"txtIN"+rowIndex+"Anx5",
                        itemId:"txtIN"+rowIndex+"Anx5",
                        value: null,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,
                        readOnly:true,
                        enableKeyEvents: true
                    });

                    if( param.action === "E")
                    {
                        me.calInclusion();
                    }
                }
                else
                {
                    anxValue = me.getAnnexValue(param,strIN,rowIndex,1);

                    txtBox = new Ext.form.TextField({
                        id:"txtIN"+rowIndex+"Anx5",
                        itemId:"txtIN"+rowIndex+"Anx5",
                        value: anxValue,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,
                        enableKeyEvents: true,
                        readOnly:readOnly
                    });
                }

                txtBox.on('keyup', function(e){
                    me.calInclusion();

                }, this);

            },25);

            return '<div id="' + id +'"></div>';

        };

    },

    onGrdDeductionD03Anx5AfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdDeductionD03Anx5')[0];

        var strUpdAnnex = null;
        var strDE = null;
        var param = null;
        var readOnly = false;

        param = me.validateParam();

        if(param !== null)
        {    
            if( param.action === "E")
            {        
                strUpdAnnex = Ext.getStore("UpdAnnex");

                strDE = deepCloneStore(strUpdAnnex,"UpdDeduction");  
                strDE.filter('ItemType',"DE");
                strDE.sort('ItemID','ASC'); 

            }

            if(param.recStatus === "F")
            {
                readOnly = true;
            }
        }

        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            Ext.Function.defer(function(){


                var txtBox = "";
                var anxValue = null;

                if(rowIndex == 9)
                {
                    txtBox = txtBox = new Ext.form.TextField({
                        id:"txtDE"+rowIndex+"Anx5",
                        itemId:"txtDE"+rowIndex+"Anx5",
                        value: null,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,
                        readOnly:true,
                        enableKeyEvents: true
                    });

                    if( param.action === "E")
                    {
                        me.calDeduction();
                    }
                }
                else
                {

                    anxValue = me.getAnnexValue(param,strDE,rowIndex,18);

                    txtBox = new Ext.form.TextField({
                        id:"txtDE"+rowIndex+"Anx5",
                        itemId:"txtDE"+rowIndex+"Anx5",
                        value: anxValue,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,
                        enableKeyEvents: true,
                        readOnly:readOnly
                    });
                }

                txtBox.on('keyup', function(e){
                    me.calDeduction();

                }, this);

            },25);

            return '<div id="' + id +'"></div>';
        };

    },

    onGrdDeductionLossD03Anx5AfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdDeductionLossD03Anx5')[0];

        var strUpdAnnex = null;
        var strDL = null;
        var param = null;
        var readOnly = false;

        param = me.validateParam();

        if(param !== null)
        {    
            if( param.action === "E")
            {        
                strUpdAnnex = Ext.getStore("UpdAnnex");

                strDL = deepCloneStore(strUpdAnnex,"UpdDeductionLoss");  
                strDL.filter('ItemType',"DL");
                strDL.sort('ItemID','ASC'); 

            }

            if(param.recStatus === "F")
            {
                readOnly = true;
            }
        }

        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();
            var anxValue = null;

            Ext.Function.defer(function(){
                var txtBox = null;

                if(rowIndex < 2)
                {           
                    anxValue = me.getAnnexValue(param,strDL,rowIndex,28);

                    txtBox = new Ext.form.TextField({
                        id:"txtDL"+rowIndex+"Anx5",
                        itemId:"txtDL"+rowIndex+"Anx5",
                        value: anxValue,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,
                        enableKeyEvents: true,
                        readOnly:readOnly
                    });
                }
                else
                {
                    txtBox = new Ext.form.TextField({
                        id:"txtDL"+rowIndex+"Anx5",
                        itemId:"txtDL"+rowIndex+"Anx5",
                        value: null,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,
                        readOnly:true,
                        enableKeyEvents: true
                    });           

                    if( param.action === "E")
                    {
                        me.calDeductionLoss();
                    }
                }


                if(rowIndex < 2)
                {
                    txtBox.on('keyup', function(e){
                        me.calDeductionLoss();

                    }, this);
                }

            },25);

            return '<div id="' + id +'"></div>';
        };

    },

    onGrdDeductionMiscD03Anx5AfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdDeductionMiscD03Anx5')[0];

        var strUpdAnnex = null;
        var strMI = null;
        var param = null;
        var readOnly = false;

        param = me.validateParam();

        if(param !== null)
        {    
            if( param.action === "E")
            {        
                strUpdAnnex = Ext.getStore("UpdAnnex");

                strMI = deepCloneStore(strUpdAnnex,"UpdMisc");  
                strMI.filter('ItemType',"MI");
                strMI.sort('ItemID','ASC'); 

            }

            if(param.recStatus === "F")
            {
                readOnly = true;
            }
        }


        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();
            var anxValue = null;

            Ext.Function.defer(function(){
                var txtBox = "";

                if(rowIndex ==  1)
                {
                    txtBox = new Ext.form.TextField({
                        id:"txtMI"+rowIndex+"Anx5",
                        itemId:"txtMI"+rowIndex+"Anx5",
                        value: null,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,
                        readOnly:true,
                        enableKeyEvents: true

                    });

                    if( param.action === "E")
                    {
                        me.calTotalMisc();
                    }

                }
                else
                {

                    anxValue = me.getAnnexValue(param,strMI,rowIndex,33);
                    txtBox = new Ext.form.TextField({
                        id:"txtMI"+rowIndex+"Anx5",
                        itemId:"txtMI"+rowIndex+"Anx5",
                        value: anxValue,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,
                        enableKeyEvents: true,
                        readOnly:readOnly

                    });

                }


                txtBox.on('keyup', function(e){
                    me.calTotalMisc();

                }, this);


            },25);
            return '<div id="' + id +'"></div>';
        };

        /*

        var txtBox = new Ext.form.TextField({
        id:"txtMI"+rowIndex,
        itemId:"txtMI"+rowIndex,
        value: value,
        renderTo: id,
        height: 22,
        width:150,
        fieldCls: 'TxtRight',
        maskRe: /[0-9]/,
        maxLength: 10,
        //enableKeyEvents: true,
        listeners:{
            scope: this,
            change: function(){
                alert("heaven");
            }
        }

    });
    */


    /*

    Ext.Function.defer(function(){
    new Ext.ProgressBar({
    renderTo: id,
    value: 0.5
    });
    }, 25);


    */
    },

    onGrdDiscountD03Anx5AfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdDiscountD03Anx5')[0];

        var param = me.validateParam();
        var readOnly = false;

        if(param.recStatus === "F")
        {
            readOnly = true;
        }

        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {


            if(rowIndex === 1)
            {
                var rate = null;

                var id = Ext.id();

                if( param.action === "E" )
                {
                    var strParam = Ext.getStore("ParamAnx5");

                    if(strParam.data.items[0].data.DiscRate !== null ||strParam.data.items[0].data.DiscRate =="")
                    {
                        rate = strParam.data.items[0].data.DiscRate;

                    }          

                }

                Ext.Function.defer(function(){
                    var txtBox = new Ext.form.TextField({
                        id:"txtDIS"+rowIndex+"Anx5",
                        itemId:"txtDIS"+rowIndex+"Anx5",
                        value: rate,
                        renderTo: id,
                        height: 22,
                        width:150,
                        maskRe: /[0-9]/,
                        readOnly:true,
                        maxLength: 10
                    });

                },25);

                return '<div id="' + id +'"></div>';
            }
            else
            {
                return "";
            }
        };



        grid.columns[1].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            if(rowIndex === 0)
            {           
                var disCatID = null;  
                var strDiscCat = Ext.getStore("DiscCategory");

                if( param.action === "E")
                {
                    var strParam = Ext.getStore("ParamAnx5");
                    disCatID = strParam.data.items[0].data.DiscCatID;
                }

                Ext.Function.defer(function(){
                    var cb =  Ext.create('Ext.form.ComboBox', {
                        id: 'cboDIS'+rowIndex,
                        itemId: 'cboDIS'+rowIndex,
                        queryMode: 'local',
                        renderTo: id,
                        store: strDiscCat,
                        fieldLabel: 'छुट हुनु पर्ने कारण ',
                        valueField: 'DiscCatID',
                        displayField: 'DescNep',
                        emptyText: 'Select ...',
                        width: 400,
                        value:disCatID,
                        readOnly:readOnly
                        /*,
                        listeners:{
                        scope: this,
                        'select': Ext.getCmp('amlFscsForm').controller.amlShow(rowIndex)
                        }*/

                    });


                    cb.on('select',function(){          

                        var rate = Ext.ComponentQuery.query("#txtDIS1Anx5")[0];
                        var cboDisc = Ext.ComponentQuery.query("#cboDIS0")[0];                
                        var record = cboDisc.findRecord(cboDisc.valueField || cboDisc.displayField,cboDisc.getValue());
                        rate.setValue("");
                        rate.setValue(record.data.DiscRate);

                        if(cboDisc.getValue() === "")
                        {
                            rate.setValue("");
                        }


                    }, this);

                    cb.on('change',function(){          

                        var rate = Ext.ComponentQuery.query("#txtDIS1Anx5")[0];
                        var cboDisc = Ext.ComponentQuery.query("#cboDIS0")[0];                

                        if(cboDisc.getValue() === "" || cboDisc.getValue() === null)
                        {
                            rate.setValue("");
                        } 
                    }, this);

                },25);

                return '<div id="' + id +'"></div>';
            }
            else 
            {    return value;
            }
        };


        /* combo example 


        var str = new Ext.data.Store({
        fields: ['code', 'description'],
        data: [
        {"code":"", "description":""},
        {"code":"E", "description":"Active"},
        {"code":"D", "description":"Dead"},
        {"code":"S", "description":"Secret"}
        ]
        });

        Ext.Function.defer(function(){
        var cb =  Ext.create('Ext.form.ComboBox', {
        id: 'cboDIS'+rowIndex,
        itemId: 'cboDIS'+rowIndex,
        queryMode: 'local',
        renderTo: id,
        store: str,
        fieldLabel: 'छुट हुनु पर्ने कारण ',                                        
        emptyText: 'छान्नुहोस् ...',
        valueField: 'code',
        displayField: 'description',
        value: 'E'/*,
        listeners:{
        scope: this,
        'select': Ext.getCmp('amlFscsForm').controller.amlShow(rowIndex)
        }*/
        /*
        });

        cb.on('select', function(){
        alert("selected");
        }, this);

        },25);





        */


        /*

        Ext.Function.defer(function(){
        var cb =  Ext.create('Ext.form.ComboBox', {
        id: 'cboDIS'+rowIndex,
        queryMode: 'local',
        renderTo: id,
        store: str,
        fieldLabel: 'छुट हुनु पर्ने कारण ',                                        
        emptyText: 'छान्नुहोस् ...',
        valueField: 'code',
        displayField: 'description',
        value: 'E',
        listeners:{
        scope: this,
        select: function(){
        alert("yes");
        }
        }

        });

        },10);

        */

    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        var taxID =  me.getTaxCategory().getValue();
        var fiscalYear = Ext.ComponentQuery.query("#txtFiscalYearAnx5")[0].getValue();
        var waitSave = waitMsg("Please wait ...");

        Ext.Ajax.request({
            url: '../Handlers/IncomeTax/TaxRateHandler.ashx?method=GetTaxRate',
            params:{taxID:taxID,fiscalYear:fiscalYear,income:"1"},
            success: function ( result, request ) {

                waitSave.hide();

                var obj = Ext.decode(result.responseText);

                if(obj.success === "true")
                {
                    me.getTaxRate().setValue(obj.root.Rate);
                }
                else
                {
                    msg("WARNING",obj.message);
                }

            },
            failure: function(form, action) {

                waitSave.hide();

                msg("FAILURE","Error in Fetching data !!!");
            }

        });
    },

    onBtnSubmitAnx5Click: function(button, e, eOpts) {
        var me = this;  
        var assessmentNo = "";
        var annexIDSno = null;
        var tranNo = "";
        var action = "A";
        var form = button.up('form').getForm();

        var param = null;

        param = me.validateParam();

        if(param !== null)
        {        
            assessmentNo = param.submissionNo;

            if(param.action === "E")
            {
                action = param.action;
                tranNo = param.tranNo;
                annexIDSno = param.annexIDSno;
            }

        }

        if(!form.isValid())
        { 
            msg("WARNING","Please Fill the required fields !!!");  
            return;
        }


        var annexD03 = me.getController('MyApp.controller.SetAnnexD03');
        var taxRate = me.getTaxRate().getValue();

        var row17 = Ext.ComponentQuery.query("#txtIN16Anx5")[0].getValue();
        var row27 = Ext.ComponentQuery.query("#txtDE9Anx5")[0].getValue();
        var row30 = Ext.ComponentQuery.query("#txtDL2Anx5")[0].getValue();
        var row31 = Ext.ComponentQuery.query("#txtDL3Anx5")[0].getValue();
        var row32 = Ext.ComponentQuery.query("#txtDL4Anx5")[0].getValue();
        var row34 = Ext.ComponentQuery.query("#txtMI1Anx5")[0].getValue();

        var cboTaxCat = me.getTaxCategory();
        var cboDisc = Ext.ComponentQuery.query("#cboDIS0")[0];  

        var taxCatID = me.getTaxCategory().getValue();
        var recTaxCat = cboTaxCat.findRecord(cboTaxCat.valueField || cboTaxCat.displayField,taxCatID);

        var discCatID = cboDisc.getValue();  
        var discRate = 0;
        var recDisc = null;
        var concession = null;
        var totMI = null;
        var discount = null;

        //------------------------------------------------------
        // NB: Discount and Concession Calculation
        //------------------------------------------------------


        totMI = row34 === ""?0:row34;

        if(discCatID !== undefined)
        {
            recDisc = cboDisc.findRecord(cboDisc.valueField || cboDisc.displayField,discCatID);

            //console.log("recDisc>>",recDisc);

            if(recDisc)
            {
                discRate = recDisc.data.DiscRate;
                discRate = discRate === "" ? 0:parseFloat(discRate);

                discount = parseFloat(taxRate)*discRate/100;

                totMI = row34 === ""?0:row34;

                concession = discount * totMI/100;
            }
        }


        //------------------------------------------------------
        // NB: Get AnnexDetails
        //------------------------------------------------------

        var strIN = Ext.getStore("Annex");
        var strDE = Ext.getStore("Deduction");
        var strDL = Ext.getStore("DeductionLoss");
        var strMI = Ext.getStore("Misc");

        var annex = "";
        var annexDetails = "";

        var strAnxDetail = new Ext.data.Store({
            fields: ['AssessmentNo', 'AnnexID','ItemID','ItFromDate','Amount','UserID','Terminal','TranDate','AnnexIDSno','ItemType','RecordStatus','TranNo','Action']
        });


        strAnxDetail = annexD03.getAnnexDetails(strIN,strAnxDetail,0,16,assessmentNo,"A");
        strAnxDetail = annexD03.getAnnexDetails(strDE,strAnxDetail,0,9,assessmentNo,"A");
        strAnxDetail = annexD03.getAnnexDetails(strDL,strAnxDetail,0,2,assessmentNo,"A");
        strAnxDetail = annexD03.getAnnexDetails(strMI,strAnxDetail,0,1,assessmentNo,"A");

        //------------------------------------------------------

        if(strAnxDetail.getCount() > 0)
        {
            annexDetails = getJson(strAnxDetail);
        }

        annex = {   AssessmentNo:assessmentNo,
            AnnexID:5,
            MtcFromDate:recTaxCat.data.FromDate,
            TaxCatID:recTaxCat.data.TaxCatID,
            MsDisCatFromDate:recDisc?recDisc.data.FromDate:"",
            DiscCatID:discCatID,
            TotalInclusion:row17 === "" ?null:row17,
            TotalDeduction:row27 === "" ?null:row27,
            Discount:discount === null?null:discount,
            UserID:"",
            Terminal:"000000000000E0",
            TranDate:"",
            CountryCode:me.getCountry().getValue(),
            AnnexIDSno:annexIDSno,
            RateApplicable:taxRate === "" ?null:taxRate,
            TotalDeductibleLoss:row31 === "" ?null:row31,
            TotalDeductibleExp:row30 === "" ?null:row30,
            AssIncomeAftConcession:concession,
            GainLossFromShare:null,
            GainLossFromBuilding:null,
            IncomeLoss:row32 === "" ?null:row32,
            NetIncomeLoss:row34 === "" ?null:row34,
            RecordStatus:"",
            TranNo:tranNo,
            Action:action,
            AnnexDetails:annexDetails
        };

        console.log("anx",annex);

        annexD03.saveAnnex(annex,param);

        //me.clearStores();
        //var obj = me.getController('app.controller.Setannexd03').saveAnnex(annex,'app.controller.D03Annex5');

    },

    onLblRedirectAnx5Click: function(label) {
        var me = this;

        Ext.Msg.confirm('Confirm Action', 'के तपाई पछाडि गएर अनुसुची तय गर्न चाहनुहुन्छ?', function(btn) {
            if(btn == 'yes'){        

                var annexD03 = me.getController('MyApp.controller.SetAnnexD03');
                var paramAnx5 = Ext.getStore("ParamAnx5");

                var param = me.validateParam();
                param.action ="";

                paramAnx5.loadData([],false);

                annexD03.redirectToAnnexD03(param);

            }
        }, this);

    },

    onPnlD03Annex5AfterRender: function(component, eOpts) {
        var me = MyApp.app.getController('D03Annex5'); 

        var txtFiscalYear = Ext.ComponentQuery.query("#txtFiscalYearAnx5")[0];
        var txtPan = Ext.ComponentQuery.query("#txtPanAnx5")[0];
        var txtName = Ext.ComponentQuery.query("#txtNameAnx5")[0];

        var pan = "";
        var fiscalYear = "";
        var name = "";   

        var param = me.validateParam();

        pan = param.pan;
        fiscalYear = param.fiscalYear;
        name = param.name;    

        txtPan.setValue(pan);    
        txtFiscalYear.setValue(fiscalYear);
        txtName.setValue(name);

        me.loadStores(param);
        me.loadAnnexLk();

        if(param.recStatus === "F")
        {
            var view = Ext.ComponentQuery.query('#pnlD03Annex5')[0];

            view.query('.button').forEach(function(c){c.setDisabled(true);});
            view.query('.field,.combo').forEach(function(c){c.setReadOnly(true);});
        }

        //----------------------------------------------------------------
        // NB: Return to SetAnnex	
        //----------------------------------------------------------------
        if(param.from === "MV")
        {
            var annexD03 = me.getController('MyApp.controller.SetAnnexD03');
            var el = Ext.get('lnkRedirectTopAnx5');

            el.on('click', function(e,t,eOpts){

                Ext.Msg.confirm('Confirm Action', 'के तपाई पछाडि गएर अनुसुची तय गर्न चाहनुहुन्छ?', function(btn) {
                    if(btn == 'yes'){      

                        var paramAnx5 = Ext.getStore("ParamAnx5");

                        paramAnx5.loadData([],false);

                        param.action ="";
                        annexD03.redirectToAnnexD03(param);
                    }
                }, this);
            });
        }
    },

    deepCloneStore: function(source,storeID) {
        var target = null;

        if(storeID !== "")
        {
            target = Ext.create ('Ext.data.Store', {
                model: source.model,
                storeId:storeID
            });
        }
        else
        {
            target = Ext.create ('Ext.data.Store', {
                model: source.model
            });
        }

        Ext.each (source.getRange (), function (record) {
            var newRecordData = Ext.clone (record.copy().data);
            var model = new source.model (newRecordData, newRecordData.id);

            target.add (model);
        });

        return target;
    },

    calInclusion: function() {
        var sum = 0;
        var store = Ext.getStore("Annex");
        var tot = Ext.ComponentQuery.query("#txtIN16Anx5")[0];
        tot.setValue("");


        for(var i=0;i<16;i++){

            var id = "#txtIN" + i + "Anx5";
            var val = Ext.ComponentQuery.query(id)[0].getValue();
            var row = store.getAt(i).data;

            val = (val === "")?0:val;  
            //row.ItemValue = val;
            row.ItemValue = val === 0?null:val;
            sum = parseInt(sum) + parseInt(val);

        }//for

        tot.setValue(sum);
        this.calBusinessIncomeAndLoss();




    },

    calDeduction: function() {
        var sum = 0;
        var store = Ext.getStore("Deduction");
        var tot = Ext.ComponentQuery.query("#txtDE9Anx5")[0];
        tot.setValue("");


        for(var i=0;i<9;i++){

            var row = store.getAt(i).data;
            var id = "#txtDE" + i + "Anx5";
            var val = Ext.ComponentQuery.query(id)[0].getValue();

            val = (val === "")?0:val;    
            row.ItemValue = val === 0?null:val;
            sum = parseInt(sum) + parseInt(val);

        }//for

        tot.setValue(sum);
        this.calTotalDeduction();

    },

    calDeductionLoss: function() {
        var sum = 0;
        var store = Ext.getStore("DeductionLoss");
        var tot = Ext.ComponentQuery.query("#txtDL2Anx5")[0];
        tot.setValue("");


        for(var i=0;i<2;i++){

            var id = "#txtDL" + i + "Anx5";
            var row = store.getAt(i).data;
            var val = Ext.ComponentQuery.query(id)[0].getValue();

            val = (val === "")?0:val;   
            //row.ItemValue = val;
            row.ItemValue = val === 0?null:val;
            sum = parseInt(sum) + parseInt(val);

        }//for

        tot.setValue(sum);
        this.calTotalDeduction();



    },

    calTotalDeduction: function() {
        var row27 = Ext.ComponentQuery.query("#txtDE9Anx5")[0].getValue();
        var row30 = Ext.ComponentQuery.query("#txtDL2Anx5")[0].getValue();
        var row31 = Ext.ComponentQuery.query("#txtDL3Anx5")[0];
        var sum = null;

        row27 = (row27 === "")?0:row27; 
        row30 = (row30 === "")?0:row30; 

        sum =  parseInt(row27) + parseInt(row30);
        row31.setValue(sum);
        this.calBusinessIncomeAndLoss();
    },

    calBusinessIncomeAndLoss: function() {
        var row17 = Ext.ComponentQuery.query("#txtIN16Anx5")[0].getValue();
        var row31 = Ext.ComponentQuery.query("#txtDL3Anx5")[0].getValue();
        var row32 = Ext.ComponentQuery.query("#txtDL4Anx5")[0];
        var sum = null;

        row17 = (row17 === "")?0:row17; 
        row31 = (row31 === "")?0:row31; 

        sum =  parseInt(row17) - parseInt(row31);
        row32.setValue(sum);

        this.calTotalMisc();
    },

    calTotalMisc: function() {
        var row32 = Ext.ComponentQuery.query("#txtDL4Anx5")[0].getValue();
        var row33 = Ext.ComponentQuery.query("#txtMI0Anx5")[0].getValue();
        var row34 = Ext.ComponentQuery.query("#txtMI1Anx5")[0];
        var sum = null;

        var store = Ext.getStore("Misc");
        var row = store.getAt(0).data;
        //row.ItemValue = row33;
        row.ItemValue = row33 === 0?null:row33;

        row32 = (row32 === "")?0:row32; 
        row33 = (row33 === "")?0:row33; 

        sum =  parseInt(row32) + parseInt(row33);
        row34.setValue(sum);


    },

    loadStores: function(param) {
        var me = this;

        var fiscalYear = param.fiscalYear;
        var income = 1;

        var countryCode = "np";
        var discCatID = "";
        var disCount = "";
        var rateApplicable = "";
        var taxCatID = "";

        var cboDisc = Ext.ComponentQuery.query("#cboDIS0")[0]; 
        var discRate = Ext.ComponentQuery.query("#txtDIS1Anx5")[0];

        var strParam = Ext.getStore("ParamAnx5");
        var strDiscCat = Ext.getStore("DiscCategory");
        var strTaxCat = Ext.getStore('TaxCategory');
        var strCountry = Ext.getStore('CountryStore');

        strDiscCat.loadData([],false);
        //strTaxCat.loadData([],false);
        //strCountry.loadData([],false);


        if(param.action === "E")
        {

            var row = strParam.getAt(0).data;

            countryCode = row.CountryCode;
            discCatID = row.DiscCatID;
            disCount = row.DisCount;
            rateApplicable = row.RateApplicable;
            taxCatID = row.TaxCatID;

        }

        strDiscCat.load({
            params:{fiscalYear:fiscalYear,income:income},
            async:false,
            callback: function (records, operation, success) {

                var rate = null;
                var rec = strDiscCat.findRecord("DiscCatID",discCatID); 

                if(rec !== null && rec !== undefined)
                {
                    rate = rec.data.DiscRate;

                    if(rate !== null)
                    {
                        strParam.getAt(0).data.DiscRate = rate;


                        var txtRate = Ext.ComponentQuery.query("#txtDIS1Anx5")[0];

                        if(txtRate !== undefined)
                        {
                            txtRate.setValue(rate);                
                        }
                    }
                }        

            }

        });

        if(strCountry.getCount() > 0)
        {
            me.getCountry().setValue(countryCode);
        }
        else
        {

            strCountry.load({
                params: {},
                callback: function (records, operation, success) {
                    me.getCountry().setValue(countryCode);
                }
            });
        }


        if(strTaxCat.getCount() > 0)
        {
            if(taxCatID !== "")
            {
                me.getTaxCategory().setValue(taxCatID);

                if(rateApplicable !== "")
                {
                    me.getTaxRate().setValue(rateApplicable);
                }
            }
        }
        else
        {
            strTaxCat.load({
                callback: function (records, operation, success) {
                    if(taxCatID !== "")
                    {
                        me.getTaxCategory().setValue(taxCatID);

                        if(rateApplicable !== "")
                        {
                            me.getTaxRate().setValue(rateApplicable);
                        }
                    }
                }
            });
        }
    },

    clearStores: function() {
        var strDiscCat = Ext.getStore("DiscCategory");
        var strTaxCat = Ext.getStore('TaxCategory');
        var strCountry = Ext.getStore('CountryStore');

        var strAnnex = Ext.getStore("Annex");
        var strDE = Ext.getStore("Deduction");
        var strDL = Ext.getStore("DeductionLoss");
        var strMI = Ext.getStore("Misc");
        var strDIS = Ext.getStore("Dis");

        strDiscCat.loadData([],false);
        strTaxCat.loadData([],false);
        strCountry.loadData([],false);
        strAnnex.loadData([],false);
        strDE.loadData([],false);
        strDL.loadData([],false);
        strMI.loadData([],false);
        strDIS.loadData([],false);
    },

    onLaunch: function() {
        var me = this;
        var annexD03 = me.getController('MyApp.controller.SetAnnexD03');
        var param = me.validateParam();
        var el = Ext.get('lnkRedirectTopAnx5');

        el.on('click', function(e,t,eOpts){

            Ext.Msg.confirm('Confirm Action', 'के तपाई पछाडि गएर अनुसुची तय गर्न चाहनुहुन्छ?', function(btn) {
                if(btn == 'yes'){      

                    var paramAnx5 = Ext.getStore("ParamAnx5");

                    paramAnx5.loadData([],false);

                    param.action ="";
                    annexD03.redirectToAnnexD03(param);
                }
            }, this);
        });
    },

    validateParam: function() {
        var me = this;
        var view = Ext.ComponentQuery.query('#pnlD03Annex5')[0];
        var user = me.getController('MyApp.controller.LoginSecurity');  
        var param = "";

        if(view === undefined && view.extraParam === null)
        {
            user.clearSession();

            return;

        }
        else
        {
            return view.extraParam;
        }
    },

    loadAnnexLk: function() {
        //------------------------------------------------------
        // NB: Posting Data to Server
        //------------------------------------------------------

        var waitSave = waitMsg("Please wait ...");

        Ext.Ajax.request({
            url: '../Handlers/IncomeTax/D03/AnnexItemsHandler.ashx?method=GetAnnexItems',
            params:{annexID:5,itemType:""},
            success: function ( result, request ) {

                var grid = Ext.ComponentQuery.query('#grdInclusionD03Anx5')[0];
                var strAnnex = Ext.getStore("Annex");

                strAnnex.loadData([],false);

                var obj = Ext.decode(result.responseText);


                var tot1To16 =  { AnnexID:'5',
                        ItemID:'17',
                        ItemDescNep:'जम्मा:(१ देखि १६)',
                        ItemDescEng:'Total:(1 to 16)',
                        ItemType:'IN'
                    };

                var tot18To26 =  { AnnexID:'5',
                        ItemID:'27',
                        ItemDescNep:'जम्मा:(१८ देखि २६)',
                        ItemDescEng:'Total:(18 to 26)',
                        ItemType:'DE'
                    };

                var tot28To29 =  { AnnexID:'5',
                        ItemID:'30',
                        ItemDescNep:'जम्मा:(२८ देखि २९)',
                        ItemDescEng:'Total:(28to29)',
                        ItemType:'DL'
                    };

                var row31    =  { AnnexID:'5',
                        ItemID:'31',
                        ItemDescNep:'जम्मा कट्टी (२७+३०):',
                        ItemDescEng:'Total Deduction (27+30):',
                        ItemType:'DL'
                    };

                var row32    =  { AnnexID:'5',
                        ItemID:'32',
                        ItemDescNep:'व्यवसायको आय र नोक्सानी (१७-३१):',
                        ItemDescEng:'Business Income and Loss (17-31):',
                        ItemType:'DL'
                    };

                var row34    =  { AnnexID:'5',
                        ItemID:'34',
                        ItemDescNep:'जम्मा (३२‌+३३):',
                        ItemDescEng:'Total (32+33):',
                        ItemType:'MI'
                    };

                var rowDis1  =  { AnnexID:'5',
                        ItemID:'35',
                        ItemDescNep:'छुट हुनु पर्ने कारण:',
                        ItemDescEng:'छुट हुनु पर्ने कारण:',
                        ItemType:'DIS'
                    };

                var rowDis2  =  { AnnexID:'5',
                        ItemID:'36',
                        ItemDescNep:'छुट प्रतिशत',
                        ItemDescEng:'छुट प्रतिशत',
                        //ItemDescNep:'छुट पछिको निर्धारण योग्य आय',
                        //ItemDescEng:'छुट पछिको निर्धारण योग्य आय:',
                        ItemType:'DIS'
                    };



                strAnnex.add(obj.root); 

                strAnnex.add(tot1To16);
                strAnnex.add(tot18To26);
                strAnnex.add(tot28To29);
                strAnnex.add(row31);
                strAnnex.add(row32);
                strAnnex.add(row34);
                strAnnex.add(rowDis1);
                strAnnex.add(rowDis2);

                strAnnex.sort('ItemID','ASC');

                var strDE = null;
                var strDL = null;
                var strMI = null;
                var strDIS = null;

                strDE = deepCloneStore(strAnnex,"Deduction");
                strDL = deepCloneStore(strAnnex,"DeductionLoss");
                strMI = deepCloneStore(strAnnex,"Misc");
                strDIS = deepCloneStore(strAnnex,"Dis");

                strAnnex.filter('ItemType',"IN");
                strDE.filter('ItemType', "DE");
                strDL.filter('ItemType',"DL");
                strMI.filter('ItemType', "MI");
                strDIS.filter('ItemType', "DIS");

                var gridDE = Ext.ComponentQuery.query('#grdDeductionD03Anx5')[0];
                var gridDL = Ext.ComponentQuery.query('#grdDeductionLossD03Anx5')[0];
                var gridMI = Ext.ComponentQuery.query('#grdDeductionMiscD03Anx5')[0];
                var gridDIS = Ext.ComponentQuery.query('#grdDiscountD03Anx5')[0];

                gridDE.store = strDE;
                gridDE.bindStore(strDE);

                gridDL.store = strDL;
                gridDL.bindStore(strDL);      

                gridMI.store = strMI;
                gridMI.bindStore(strMI);

                gridDIS.store = strDIS;
                gridDIS.bindStore(strDIS);     

                waitSave.hide();
            },
            failure: function(form, action) {

                waitSave.hide();

                msg("FAILURE","Error in Fetching data !!!");
            }

        });
    },

    loadDataForUpdate: function(param) {
        var me = this;
        var strAnnex = Ext.getStore("Annex");

        var url = "../Handlers/IncomeTax/D03/DCTBAnnexHandler.ashx?method=GetDCTBAnnexWithDetails" ;
        var args = {assessmentNo:param.submissionNo,annexID:'5',annexIDSno:param.annexIDSno};

        if(param.from === "AU")
        {  
            url = "../Handlers/IncomeTax/D03/DCTBAnnexHandler.ashx?method=GetDCTBAnnexWithDetailsAU";
            args = {offCodeAU:param.offCodeAU,requestNo:param.requestNo,assessmentNo:param.submissionNo,annexID:'5',annexIDSno:param.annexIDSno};
        }

        Ext.Ajax.request({
            url:url,
            params:args,   
            async : false,
            success: function(result,request) {   

                var obj = Ext.decode(result.responseText); 

                var strUpdAnnex = deepCloneStore(strAnnex,"UpdAnnex");        
                var strParam = Ext.getStore("ParamAnx5");

                strParam.loadData([],false);

                record = {  
                    TaxCatID:obj.root.TaxCatID,
                    RateApplicable:obj.root.RateApplicable,
                    DiscCatID:obj.root.DiscCatID,
                    Discount:obj.root.Discount,
                    CountryCode:obj.root.CountryCode
                };

                strParam.add(record);

                strUpdAnnex.loadData([],false);
                strUpdAnnex.add(obj.root.AnnexDetails);     
                strUpdAnnex.sort('ItemID','ASC'); 

                param.tranNo = obj.root.TranNo;
                param.annexIDSno = obj.root.AnnexIDSno;  

            },
            failure:  function ( result, request ) { 

                msg("FAILURE","Error in Saving data !!!");

            }
        });

    },

    getAnnexValue: function( param,store,itemID,startIdx) {
        var annexValue = null;
        var rowIdx;

        if(param.action === "E")
        {
            rowIdx = store.findBy(
            function(record, id){

                if(record.get('ItemID') === (startIdx + itemID))
                {
                    annexValue = record.get('Amount');
                    return true ;  // a record with this data exists
                }
                return false;  // there is no record in the store with this data
            });

        }
        return annexValue;

    },

    init: function(application) {
        this.control({
            "#grdInclusionD03Anx5": {
                afterrender: this.onGrdInclusionD03Anx5AfterRender
            },
            "#grdDeductionD03Anx5": {
                afterrender: this.onGrdDeductionD03Anx5AfterRender
            },
            "#grdDeductionLossD03Anx5": {
                afterrender: this.onGrdDeductionLossD03Anx5AfterRender
            },
            "#grdDeductionMiscD03Anx5": {
                afterrender: this.onGrdDeductionMiscD03Anx5AfterRender
            },
            "#grdDiscountD03Anx5": {
                afterrender: this.onGrdDiscountD03Anx5AfterRender
            },
            "#cboTaxCategoryAnx5": {
                change: this.onComboboxChange
            },
            "#btnSubmitAnx5": {
                click: this.onBtnSubmitAnx5Click
            },
            "#lblRedirectAnx5": {
                click: this.onLblRedirectAnx5Click
            },
            "#pnlD03Annex5": {
                afterrender: this.onPnlD03Annex5AfterRender
            }
        });
    }

});
