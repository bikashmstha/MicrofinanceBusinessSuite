/*
 * File: app/view/CreateUserRole.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.CreateUserRole', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.tab.Panel',
        'Ext.tab.Tab',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.form.field.ComboBox',
        'Ext.grid.column.Action',
        'Ext.grid.plugin.RowEditing',
        'Ext.toolbar.Paging',
        'Ext.form.field.Number',
        'Ext.form.field.Checkbox'
    ],

    frame: true,
    height: 1000,
    title: 'Create/Drop User and Role',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'tabpanel',
                    activeTab: 0,
                    items: [
                        {
                            xtype: 'panel',
                            title: 'Create Drop Role',
                            tabConfig: {
                                xtype: 'tab',
                                listeners: {
                                    afterrender: {
                                        fn: me.onTabAfterRender,
                                        scope: me
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    itemId: 'grdRoles',
                                    title: 'Role',
                                    store: 'RoleStore',
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'RoleCode',
                                            text: 'Role Code',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtT1RoleCode'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 199,
                                            dataIndex: 'RoleDesc',
                                            text: 'Role Description',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtT1RoleDesc'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 222,
                                            dataIndex: 'DefaultModule',
                                            text: 'Module',
                                            editor: {
                                                xtype: 'combobox',
                                                itemId: 'ddlModule',
                                                displayField: 'ModuleDesc',
                                                forceSelection: true,
                                                queryMode: 'local',
                                                store: 'ModuleShortStore',
                                                valueField: 'ModuleId'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'Action',
                                            text: 'Action',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtAction'
                                            }
                                        },
                                        {
                                            xtype: 'actioncolumn',
                                            itemId: 'delRole',
                                            icon: '../ITS/resources/images/icons/cancel.png',
                                            items: [
                                                {
                                                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                        var store = Ext.getStore('RoleStore');
                                                        var grd =  Ext.ComponentQuery.query('#grdRoles')[0];
                                                        var row = store.getAt(rowIndex).data;

                                                        Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Role ?', function(btn) {
                                                            if(btn == 'yes'){

                                                                /*
                                                                nepaliDateConversion.FiscalYear, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_MONTH_CODE", nepaliDateConversion.MonthCode, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_START_DATE", nepaliDateConversion.EnglishStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_START_DATE", nepaliDateConversion.NepaliStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_END_DATE", nepaliDateConversion.EnglishEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_END_DATE", nepaliDateConversion.NepaliEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_YEAR", nepaliDateConversion.NepaliYear, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_PERIOD", nepaliDateConversion.NepaliPeriod, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NO_OF_DAYS_IN_MONTH", nepaliDateConversion.NoOfDays, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_ON", nepaliDateConversion.CreatedOn, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_BY", nepaliDateConversion.CreatedBy, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_INSERT_UPDATE", nepaliDateConversion.Action, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_CODE", null, OracleDbType.Varchar2, ParameterDirection.Output));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_DESC", null, OracleDbType.
                                                                */
                                                                var rec={RoleCode:row.RoleCode,
                                                                        RoleDesc:row.RoleDescription,
                                                                        //CategoryInitial:'',
                                                                        DefaultModule:row.DefaultModule,
                                                                    Action:row.Action};

                                                                var wMsg='Deleting....';

                                                                var waitSave = watiMsg(wMsg);

                                                                Ext.Ajax.request({
                                                                    url: '../Handlers/Security/RoleHandler.ashx',
                                                                    params: {
                                                                        method:'Save',
                                                                        accountCategory:JSON.stringify(rec)
                                                                    },
                                                                    success: function(response){
                                                                        waitSave.hide();
                                                                        var out=Ext.decode(response.responseText);
                                                                        console.log(out);

                                                                        if(out.success==="true")
                                                                        {
                                                                            var message=out.root;
                                                                            if(message.OutResultCode==="SUCCESS")
                                                                            {
                                                                                msg("SUCCESS",message.OutResultMessage,function(){
                                                                                    grd.bindStore(store);
                                                                                    store.removeAt(rowIndex);
                                                                                });



                                                                            }
                                                                            else
                                                                            {
                                                                                msg("FAILURE",message.OutResultMessage);
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            msg("FAILURE",out.message);
                                                                        }
                                                                    },
                                                                    failure: function ( result, request ) {
                                                                        waitSave.hide();
                                                                        var out=Ext.decode(response.responseText);
                                                                        msg("FAILURE",out.message);
                                                                    }

                                                                });



                                                                return true;
                                                            }
                                                        });
                                                    },
                                                    icon: '../ITS/resources/images/icons/cancel.png'
                                                }
                                            ]
                                        }
                                    ],
                                    plugins: [
                                        Ext.create('Ext.grid.plugin.RowEditing', {
                                            listeners: {
                                                validateedit: {
                                                    fn: me.onRowEditingValidateedit,
                                                    scope: me
                                                },
                                                canceledit: {
                                                    fn: me.onRowEditingCanceledit,
                                                    scope: me
                                                }
                                            }
                                        })
                                    ],
                                    dockedItems: [
                                        {
                                            xtype: 'toolbar',
                                            dock: 'top',
                                            items: [
                                                {
                                                    xtype: 'button',
                                                    itemId: 'btnAddRole',
                                                    text: 'Add Role',
                                                    listeners: {
                                                        click: {
                                                            fn: me.onBtnAddRoleClick,
                                                            scope: me
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ],
                                    listeners: {
                                        beforerender: {
                                            fn: me.onGrdRolesBeforeRender,
                                            scope: me
                                        }
                                    }
                                }
                            ],
                            dockedItems: [
                                {
                                    xtype: 'pagingtoolbar',
                                    dock: 'bottom',
                                    width: 360,
                                    displayInfo: true
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            frame: true,
                            title: 'Create Drop User',
                            layout: {
                                type: 'table',
                                columns: 3
                            },
                            tabConfig: {
                                xtype: 'tab',
                                listeners: {
                                    click: {
                                        fn: me.onTabClick,
                                        scope: me
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtCreatedDateBS',
                                    fieldLabel: 'Create Date(B.S.):',
                                    labelAlign: 'right',
                                    labelWidth: 185,
                                    emptyText: 'DD-MM-YYYY'
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 3,
                                    itemId: 'txtCreatedDateAD',
                                    fieldLabel: '(A.D.):',
                                    labelAlign: 'right',
                                    labelWidth: 170,
                                    emptyText: 'DD-MON-YYYY'
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtEmpId',
                                    fieldLabel: 'Emp Id:',
                                    labelAlign: 'right',
                                    labelWidth: 185
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtIEmpName',
                                    fieldLabel: ''
                                },
                                {
                                    xtype: 'combobox',
                                    itemId: 'ddlUserStatus',
                                    fieldLabel: 'User Status:',
                                    labelAlign: 'right',
                                    labelWidth: 170
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 3,
                                    itemId: 'ddlOfficeCode',
                                    maxWidth: 500,
                                    width: 492,
                                    fieldLabel: 'Office Code',
                                    labelAlign: 'right',
                                    labelWidth: 185,
                                    emptyText: '- - - Select - - - ',
                                    displayField: 'OfficeName',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'OfficeShortStore',
                                    valueField: 'OfficeCode'
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtRoleCode',
                                    fieldLabel: 'Role Code:',
                                    labelAlign: 'right',
                                    labelWidth: 185
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtRoleDesc',
                                    fieldLabel: ''
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtUserCode',
                                    fieldLabel: 'User Code:',
                                    labelAlign: 'right',
                                    labelWidth: 185
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtUserName',
                                    fieldLabel: 'User Name:',
                                    labelAlign: 'right',
                                    labelWidth: 170
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 3,
                                    itemId: 'txtPassword',
                                    fieldLabel: 'Password:',
                                    labelAlign: 'right',
                                    labelWidth: 185
                                },
                                {
                                    xtype: 'numberfield',
                                    colspan: 2,
                                    itemId: 'txtForcePasswordChangeInDays',
                                    fieldLabel: 'Force Password Change in days:',
                                    labelAlign: 'right',
                                    labelWidth: 185,
                                    hideTrigger: true,
                                    keyNavEnabled: false,
                                    mouseWheelEnabled: false
                                },
                                {
                                    xtype: 'numberfield',
                                    itemId: 'txtMaximumApprovalAmount',
                                    fieldLabel: 'Maximum Approval Amount:',
                                    labelAlign: 'right',
                                    labelWidth: 170,
                                    hideTrigger: true,
                                    keyNavEnabled: false,
                                    mouseWheelEnabled: false
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtPasswordRemainderDateBS',
                                    fieldLabel: 'Password Remainder Date (B.S.):',
                                    labelAlign: 'right',
                                    labelWidth: 185,
                                    emptyText: 'DD-MM-YYYY'
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtPasswordRemainderDateAD',
                                    fieldLabel: '(A.D.):',
                                    labelAlign: 'right',
                                    labelWidth: 170,
                                    emptyText: 'DD-MON-YYYY'
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtLastLoginDate',
                                    fieldLabel: 'Last Login Date:',
                                    labelAlign: 'right',
                                    labelWidth: 185,
                                    emptyText: 'DD-MM-YYYY'
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtLastLoginFailed',
                                    fieldLabel: 'Last Login Failed:',
                                    labelAlign: 'right',
                                    labelWidth: 170,
                                    emptyText: 'DD-MON-YYYY'
                                },
                                {
                                    xtype: 'numberfield',
                                    colspan: 2,
                                    itemId: 'txtMaximumInactiveDays',
                                    fieldLabel: 'Maximum Inactive Days:',
                                    labelAlign: 'right',
                                    labelWidth: 185,
                                    hideTrigger: true,
                                    keyNavEnabled: false,
                                    mouseWheelEnabled: false
                                },
                                {
                                    xtype: 'numberfield',
                                    itemId: 'txtFailedLoginAttempt',
                                    fieldLabel: 'Failed Login Attempt:',
                                    labelAlign: 'right',
                                    labelWidth: 170,
                                    hideTrigger: true,
                                    keyNavEnabled: false,
                                    mouseWheelEnabled: false
                                },
                                {
                                    xtype: 'checkboxfield',
                                    colspan: 2,
                                    itemId: 'chkManageOtherOffice',
                                    fieldLabel: 'Manage Other Offices:',
                                    labelAlign: 'right',
                                    labelWidth: 185
                                },
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'chkActivateOtherOfficeuser',
                                    fieldLabel: 'Activate Other Office User:',
                                    labelAlign: 'right',
                                    labelWidth: 170
                                },
                                {
                                    xtype: 'checkboxfield',
                                    colspan: 2,
                                    itemId: 'chkManageOwnBranch',
                                    fieldLabel: 'Manage Own Branch:',
                                    labelAlign: 'right',
                                    labelWidth: 185
                                },
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'chkActivateUser',
                                    fieldLabel: 'Activate Users:',
                                    labelAlign: 'right',
                                    labelWidth: 170
                                },
                                {
                                    xtype: 'checkboxfield',
                                    colspan: 3,
                                    itemId: 'chkIsValidate',
                                    fieldLabel: 'Is Validate:',
                                    labelAlign: 'right',
                                    labelWidth: 185
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtLoginStartTime',
                                    fieldLabel: 'Login Start Time:',
                                    labelAlign: 'right',
                                    labelWidth: 185
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtLoginEndTime',
                                    fieldLabel: 'Login End Time:',
                                    labelAlign: 'right',
                                    labelWidth: 170
                                },
                                {
                                    xtype: 'checkboxfield',
                                    colspan: 2,
                                    itemId: 'chkFirstTimeLogin',
                                    fieldLabel: 'First Time Login:',
                                    labelAlign: 'right',
                                    labelWidth: 185
                                },
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'chkIsOnLeave',
                                    fieldLabel: 'Is On Leave:',
                                    labelAlign: 'right',
                                    labelWidth: 170
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtCreatedFromOffice',
                                    fieldLabel: 'Created From (Office):',
                                    labelAlign: 'right',
                                    labelWidth: 185
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtModifiedFromOffice',
                                    fieldLabel: 'Modified From (Office):',
                                    labelAlign: 'right',
                                    labelWidth: 170
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtOfficeGroupCode',
                                    fieldLabel: 'Office Group:',
                                    labelAlign: 'right',
                                    labelWidth: 185
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtOfficeGroupDesc',
                                    fieldLabel: ''
                                },
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'chkMultipleLogin',
                                    fieldLabel: 'Allow Multiple Login:',
                                    labelAlign: 'right',
                                    labelWidth: 170
                                },
                                {
                                    xtype: 'container',
                                    items: [
                                        {
                                            xtype: 'button',
                                            itemId: 'btnCreateUser',
                                            padding: 5,
                                            text: 'Create User',
                                            listeners: {
                                                click: {
                                                    fn: me.onBtnCreateUserClick,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onTabAfterRender: function(component, eOpts) {
        var store=Ext.getStore('RoleStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Security/RoleHandler.ashx',
            params: {
                method:'Get'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            store.removeAll();
            store.add(data.root);


        }
        });

        var ModuleStore=Ext.getStore('ModuleShortStore');
        ModuleStore.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Menu/ModuleHandler.ashx',
            params: {
                method:'GetModuleShort'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            ModuleStore.removeAll();
            ModuleStore.add(data.root);


        }
        });
    },

    onRowEditingValidateedit: function(editor, e, eOpts) {
        var errMsg='';
        var roleCode=Ext.ComponentQuery.query('#txtT1RoleCode')[0];
        var roleDescription=Ext.ComponentQuery.query('#txtT1RoleDesc')[0];
        var defaultModule=Ext.ComponentQuery.query('#ddlModule')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];

        if(roleCode.getValue()===null ||roleCode.getValue()==="")
            {
                errMsg+="Please,Enter Role Code.";
            }
        if(roleDescription.getValue()===null ||roleDescription.getValue()==="")
            {
                errMsg+="Please,Enter Role Description.";
            }
        if(defaultModule.getValue()===null ||defaultModule.getValue()==="")
            {
                errMsg+="Please,Please, Select Module.";
            }

        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }
        /*
        p_category_no                               IN           NUMBER,
                                         p_category_desc                             IN           VARCHAR2,
                                         p_category_initial                          IN           VARCHAR2,
                                         p_tran_office_code                          IN           VARCHAR2,       */

        var rec={RoleCode:roleCode.getValue(),
                 RoleDesc:roleDescription.getValue(),
                 //CategoryInitial:'',:'Y',
                 TransferExceedAmountYN:'Y',
                 DefaultModule:defaultModule.getValue(),
                 Action:action.getValue()};



        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updting....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Security/RoleHandler.ashx',
                    params: {
                        method:'Save',
                        role:JSON.stringify(rec)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdRoles')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit: function(editor, e, eOpts) {

    },

    onBtnAddRoleClick: function(button, e, eOpts) {

        var store =Ext.getStore('RoleStore');
        var rec={RoleCode:'',
                 RoleDesc:'',
                 CategoryInitial:'',
                 DefaultModule:'',
                 Action:'I'};
        store.add(rec);
    },

    onGrdRolesBeforeRender: function(component, eOpts) {
        var grid = Ext.ComponentQuery.query('#grdRoles')[0];

                grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
                    var temp="";


                    var items=Ext.getStore('ModuleShortStore').data.items;

        console.log('value',value);
                    for(var i=0;i<items.length;i++)
                    {

                        if(items[i].data.ModuleId==value)
                        {
                            temp=items[i].data.ModuleDesc;
                            break;
                        }
                    }


                    return temp;
                };
    },

    onTabClick: function(button, e, eOpts) {
        var store=Ext.getStore('OfficeShortStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Office/OfficeHandler.ashx',
            params: {
                method:'GetOfficeShort'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onBtnCreateUserClick: function(button, e, eOpts) {
        var userCode=Ext.ComponentQuery.query('#txtUserCode')[0];
        var userName=Ext.ComponentQuery.query('#txtUserName')[0];
        var password=Ext.ComponentQuery.query('#txtPassword')[0];
        var roleCode=Ext.ComponentQuery.query('#txtRoleCode')[0];
        var maxConnect=1;//Ext.ComponentQuery.query('#txtCreatedDateBS')[0];

        var connectFlag=1;//Ext.ComponentQuery.query('#txtCreatedDateBS')[0];
        var maxApprovalAmount=Ext.ComponentQuery.query('#txtMaximumApprovalAmount')[0];
        //var officeCreation=Ext.ComponentQuery.query('#txtCreatedDateBS')[0];
        var officeCode=Ext.ComponentQuery.query('#ddlOfficeCode')[0];
        //var gmtOffset=Ext.ComponentQuery.query('#txtCreatedDateBS')[0];

        //var loggedIn=Ext.ComponentQuery.query('#txtCreatedDateBS')[0];
        var forcePwdChangeInDays=Ext.ComponentQuery.query('#txtForcePasswordChangeInDays')[0];
        var pwdReminderDate=Ext.ComponentQuery.query('#txtPasswordRemainderDateAD')[0];
        var lastLoginDate=Ext.ComponentQuery.query('#txtLastLoginDate')[0];
        var maxInactiveDays=Ext.ComponentQuery.query('#txtMaximumInactiveDays')[0];

        //var lastPwdChangeDate=Ext.ComponentQuery.query('#txtCreatedDateBS')[0];
        //var isRemoteUser=Ext.ComponentQuery.query('#txtCreatedDateBS')[0];
        var failedLoginDate=Ext.ComponentQuery.query('#txtLastLoginFailed')[0];
        var noOfFailedLoginAttempts=Ext.ComponentQuery.query('#txtFailedLoginAttempt')[0];
        var manageOtherOfficeUsers=Ext.ComponentQuery.query('#chkManageOtherOffice')[0];

        var activateOtherOfficeUsers=Ext.ComponentQuery.query('#chkActivateOtherOfficeuser')[0];
        var manageOwnBranchUsers=Ext.ComponentQuery.query('#chkManageOwnBranch')[0];
        var activateUsers=Ext.ComponentQuery.query('#chkActivateUser')[0];
        var isValidated=Ext.ComponentQuery.query('#chkIsValidate')[0];
        var loginStartTime=Ext.ComponentQuery.query('#txtLoginStartTime')[0];

        var loginEndTime=Ext.ComponentQuery.query('#txtLoginEndTime')[0];
        var firstTimeLogin=Ext.ComponentQuery.query('#chkFirstTimeLogin')[0];
        var userStatus=Ext.ComponentQuery.query('#ddlUserStatus')[0];
        var empId=Ext.ComponentQuery.query('#txtEmpId')[0];
        var isOnLeave=Ext.ComponentQuery.query('#chkIsOnLeave')[0];

        var creTranOfficeCode=Ext.ComponentQuery.query('#txtCreatedFromOffice')[0];
        //var createdBy=Ext.ComponentQuery.query('#txtCreatedDateBS')[0];
        var modTranOfficeCode=Ext.ComponentQuery.query('#txtModifiedFromOffice')[0];
        //var modifiedBy=Ext.ComponentQuery.query('#txtCreatedDateBS')[0];
        //var createdOn=Ext.ComponentQuery.query('#txtCreatedDateBS')[0];

        //var modifiedOn=Ext.ComponentQuery.query('#txtCreatedDateBS')[0];
        var tranOfficeGrpCode=Ext.ComponentQuery.query('#txtOfficeGroupCode')[0];
        var allowMultipleLogin=Ext.ComponentQuery.query('#chkMultipleLogin')[0];


        var User ={
                        UserCode : userCode.getValue(),
                        UserName : userName.getValue(),
                        Password : password.getValue(),
                        RoleCode : roleCode.getValue(),
                        //MaxConnect : maxConnect.getValue(),

                        //ConnectFlag : connectFlag,
                        MaxApprovalAmount : maxApprovalAmount.getValue(),
                        //OfficeCreation : officeCreation,
                        OfficeCode : officeCode.getValue(),
                        //GmtOffset : gmtOffset,

                        //LoggedIn : loggedIn,
                        ForcePwdChangeInDays : forcePwdChangeInDays.getValue(),
                        PwdReminderDate : pwdReminderDate.getValue(),
                        LastLoginDate : lastLoginDate.getValue(),
                        MaxInactiveDays : maxInactiveDays.getValue(),

                        //LastPwdChangeDate : lastPwdChangeDate,
                        //IsRemoteUser : isRemoteUser,
                        FailedLoginDate : failedLoginDate.getValue(),
                        NoOfFailedLoginAttempts : noOfFailedLoginAttempts.getValue(),
                        ManageOtherOfficeUsers : manageOtherOfficeUsers.getValue(),

                        ActivateOtherOfficeUsers : activateOtherOfficeUsers.getValue(),
                        ManageOwnBranchUsers : manageOwnBranchUsers.getValue(),
                        ActivateUsers : activateUsers.getValue(),
                        IsValidated : isValidated.getValue(),
                        LoginStartTime : loginStartTime.getValue(),

                        LoginEndTime : loginEndTime.getValue(),
                        FirstTimeLogin : firstTimeLogin.getValue(),
                        UserStatus : userStatus.getValue(),
                        EmpId : empId.getValue(),
                        IsOnLeave : isOnLeave.getValue(),

                        CreTranOfficeCode : creTranOfficeCode.getValue(),
                        //CreatedBy : createdBy,
                        ModTranOfficeCode : modTranOfficeCode.getValue(),
                        //ModifiedBy : modifiedBy,
                        //CreatedOn : createdOn,

                        //ModifiedOn : modifiedOn,
                        TranOfficeGrpCode : tranOfficeGrpCode.getValue(),
                        AllowMultipleLogin : allowMultipleLogin.getValue()
        };

        var waitSave = watiMsg('Please wait ...');
        Ext.Ajax.request({
             url:'../Handlers/Security/UserHandler.ashx',
             params:{method:'Save',user:JSON.stringify(User)},
             success: function ( result, request ) {
             waitSave.hide();

             var obj = Ext.decode(result.responseText);

                if(out.success==='true'){
                    msg('SUCCESS',out.message,function(){
                        var grd = Ext.ComponentQuery.query('#grdUser')[0];
                        var record = grd.getSelectionModel().getSelection()[0];
                        record.set('Action','U');
                    });
                }
                  else{
                      msg('FAILURE',out.message);
                  }
             },
             failure: function(form, action) {
                waitSave.hide();
                 var out=Ext.decode(response.responseText);
                 msg('FAILURE',out.message);
             }
        });
    }

});