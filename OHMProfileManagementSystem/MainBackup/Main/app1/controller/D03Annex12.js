/*
 * File: app/controller/D03Annex12.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.D03Annex12', {
    extend: 'Ext.app.Controller',

    stores: [
        'CountryStore',
        'DCTBForeignTaxDetails'
    ],

    onPnlD03Annex12AfterRender: function(component, eOpts) {
        var me = this;
        var view = Ext.ComponentQuery.query('#pnlD03Annex12')[0];
        var user = me.getController('MyApp.controller.LoginSecurity');
        var strCountry = Ext.getStore("CountryStore");
        var store = Ext.getStore('DCTBForeignTaxDetails');
        var param =  me.validateParam();

        store.loadData([],false);

        strCountry.load(
        {
            scope:this,
            callback: function(records, operation, success){
                if(success){
                    if(param.action === "E")
                    {
                        var btnSubmit = Ext.ComponentQuery.query('#btnSubmitAnx12')[0];
                        btnSubmit.setText("Update Annex 12");

                        me.loadDataForUpdate(param.submissionNo,param);
                    }
                }
            }
        });



        //----------------------------------------------------------------
        // NB: Return to SetAnnex	
        //----------------------------------------------------------------
        if(param.from === "MV")
        {
            var annexD03 = me.getController('MyApp.controller.SetAnnexD03');
            var el = Ext.get('lnkRedirectTopAnx12');

            el.on('click', function(e,t,eOpts){

                Ext.Msg.confirm('Confirm Action', 'के तपाई पछाडि गएर अनुसुची तय गर्न चाहनुहुन्छ?', function(btn) {
                    if(btn == 'yes'){        

                        param.action ="";
                        annexD03.redirectToAnnexD03(param);
                    }
                }, this);
            });
        }
    },

    onBtnAddNewAnx12Click: function(button, e, eOpts) {
        var grd = Ext.ComponentQuery.query('#grdForeignTaxAnx12')[0];

        var rec={
            IncomeSrcCountry:'',
            PrevYrForignTax:null,
            CurrYrForignTax1:null,
            CurrYrForignTax2:null
        };

        grd.store.add(rec);

        var col = grd.headerCt.getHeaderAtIndex(0);
        var rows = grd.store.data.items;
        var record = rows[rows.length-1];
        grd.getPlugin('pluginForeiginTaxAnx12').startEdit(record, col);






    },

    onGrdForeignTaxAnx12BeforeRender: function(component, eOpts) {
        var grd = Ext.ComponentQuery.query('#grdForeignTaxAnx12')[0];

        grd.columns[1].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";    

            var items = Ext.getStore("CountryStore").data.items;

            for(var i=0;i<items.length;i++)
            {        

                if(items[i].data.CountryCode === value)
                {           
                    temp = items[i].data.CountryName;
                    break;
                }        
            }

            return temp;

        };

    },

    onBtnSubmitAnx12Click: function(button, e, eOpts) {
        var me = this;
        var view = Ext.ComponentQuery.query('#pnlD03Annex12')[0];
        var user = me.getController('MyApp.controller.LoginSecurity');
        var pan = "";
        var fiscalYear = "";
        var assessmentNo = "";
        var offCode = "";
        var action = "";

        var param =  me.validateParam();

        pan = param.pan;
        fiscalYear =param.fiscalYear;
        assessmentNo = param.submissionNo;
        offCode = param.offCode;
        action = param.action;

        var sumRemPaidCurFyr = Ext.ComponentQuery.query('#txtSumRemPreviousFyrAnx12')[0].getValue();
        var sumPaidCurFyr = Ext.ComponentQuery.query('#txtSumPaidCurrentFyrAnx12')[0].getValue();
        var sumUsedCurFyr = Ext.ComponentQuery.query('#txtSumUsedCurrentFyrAnx12')[0].getValue();

        sumRemPaidCurFyr = sumRemPaidCurFyr=== "" ?null:sumRemPaidCurFyr;
        sumPaidCurFyr = sumPaidCurFyr=== "" ?null:sumPaidCurFyr;
        sumUsedCurFyr = sumUsedCurFyr=== "" ?null:sumUsedCurFyr;

        var store = Ext.getStore('DCTBForeignTaxDetails');

        store.clearFilter();

        var foreignTaxDetails = null;
        var foreignTax = null;


        if(store.getCount() > 0)
        {
            foreignTaxDetails = getJson(store); 

            store.filter(function(item){
                return item.get("Action")!= 'D';
            });
        }



        //sumRemPaidCurFyr = 5;
        //sumPaidCurFyr = 6;
        //sumUsedCurFyr = 7;

        foreignTax = { 
            AssessmentNo:assessmentNo,
            PAN:pan,
            AccType:"10",     
            FiscalYear:fiscalYear, 
            ForCrCl:null, 
            OfficeCode:offCode,
            AssessmentDate:"",  
            TotalFtcRemPreviousFy:sumRemPaidCurFyr, 
            TotalFtcPaidCurrentFy:sumPaidCurFyr, 
            TotalFtcUsedCurrentFy:sumUsedCurFyr,
            RecordStatus:"",
            Terminal:'',
            TranDate:'',
            UserName:'',
            TranNo:null,
            Source:'SA-D03',
            Action:action,
            ForeignTaxDetails:foreignTaxDetails,
            SubmissionNo:null
        };


        var wait  = waitMsg('Saving ...');
        //-----------------------------------------------------------------------------------------------
        // NB: Posting Data to Server
        //-----------------------------------------------------------------------------------------------

        var url = "../Handlers/IncomeTax/D03/DCTBForeignTaxHandler.ashx?method=SaveDCTBForeignTax";
        var args = {dCTBForeignTax:JSON.stringify(foreignTax)};

        if(param.from === "AU")
        {  
            url = "../Handlers/IncomeTax/D03/DCTBForeignTaxHandler.ashx?method=SaveDCTBForeignTaxAU";
            args = {offCodeAU:param.offCodeAU,requestNo:param.requestNo,dCTBForeignTax:JSON.stringify(foreignTax)};
        }

        Ext.Ajax.request({
            url:url,
            params:args,
            success: function ( result, request ) {

                wait.hide();

                var obj = Ext.decode(result.responseText);


                if(obj.success === "true")
                {

                    if(obj.root !== null && obj.root.ForeignTaxDetails !== null)
                    {               
                        store.loadData([],false);
                        store.add(obj.root.ForeignTaxDetails);
                    }


                    if(action == "A" || action == "" )
                    {
                        var annexD03 = me.getController('MyApp.controller.SetAnnexD03');
                        annexD03.loadAnxSummary(assessmentNo);                

                        param.action = "E";

                        var btnSubmit = Ext.ComponentQuery.query('#btnSubmitAnx12')[0];            
                        btnSubmit.setText("Update Annex 12");
                    }

                    /*
                    store.each(function (rec) {
                    rec.data.Action = "E";

                    });

                    */

                }

                msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);


            },
            failure: function ( result, request ) {

                wait.hide();

                msg("FAILURE","Error in Saving !!!");
                return;
            }

        });

    },

    onTxtRemPreviousFyrAnx12Change: function(field, newValue, oldValue, eOpts) {
        var me = this;

        me.calcForeignTax();
    },

    onTxtPaidCurrentFyrAnx12Change: function(field, newValue, oldValue, eOpts) {
        var me = this;

        me.calcForeignTax();
    },

    onTxtUsedCurrentFyrAnx12Change: function(field, newValue, oldValue, eOpts) {
        var me = this;

        me.calcForeignTax();
    },

    onLblRedirectAnx12Click: function(label) {
        var me = this;

        Ext.Msg.confirm('Confirm Action', 'के तपाई पछाडि गएर अनुसुची तय गर्न चाहनुहुन्छ?', function(btn) {
            if(btn == 'yes'){        

                var annexD03 = me.getController('MyApp.controller.SetAnnexD03');

                var param = me.validateParam();
                param.action ="";

                annexD03.redirectToAnnexD03(param);
            }
        }, this);

    },

    calcForeignTax: function() {
        var store = Ext.getStore("DCTBForeignTaxDetails");
        var grd = Ext.ComponentQuery.query('#grdForeignTaxAnx12')[0];
        var record = grd.getSelectionModel().getSelection()[0];
        var rowIdx = store.indexOf(record);

        var txtSumRemPrevFyr = Ext.ComponentQuery.query('#txtSumRemPreviousFyrAnx12')[0];
        var txtSumPaidCurrentFyr = Ext.ComponentQuery.query('#txtSumPaidCurrentFyrAnx12')[0];
        var txtSumUsedCurrentFyr = Ext.ComponentQuery.query('#txtSumUsedCurrentFyrAnx12')[0];

        var remPrevFyr = Ext.ComponentQuery.query('#txtRemPreviousFyrAnx12')[0].getValue();
        var paidCurrFyr = Ext.ComponentQuery.query('#txtPaidCurrentFyrAnx12')[0].getValue();
        var usedCurrFyr = Ext.ComponentQuery.query('#txtUsedCurrentFyrAnx12')[0].getValue();

        var idx = 0;
        var sum1 = 0;
        var sum2 = 0;
        var sum3 = 0;

        remPrevFyr  = remPrevFyr  === null || remPrevFyr  === "" ?0:parseFloat(remPrevFyr);
        paidCurrFyr = paidCurrFyr === null || paidCurrFyr === "" ?0:parseFloat(paidCurrFyr);
        usedCurrFyr = usedCurrFyr === null || usedCurrFyr === "" ?0:parseFloat(usedCurrFyr);

        store.each(function (rec) {   


            if(rec.get('FtcRemPreviousFy') !=="" && rowIdx !== idx)
            {
                var ftcRemPrevFyr = rec.get('FtcRemPreviousFy') === null || rec.get('FtcRemPreviousFy') === "" ? 0:parseFloat(rec.get('FtcRemPreviousFy'));

                sum1 = parseFloat(sum1) + ftcRemPrevFyr; 
            }	

            if(rec.get('FtcPaidCurrentFy') !=="" && rowIdx !== idx)
            {
                var ftcPaidCurrFyr = rec.get('FtcPaidCurrentFy') === null || rec.get('FtcPaidCurrentFy') === "" ? 0:parseFloat(rec.get('FtcPaidCurrentFy'));

                sum2 = parseFloat(sum2) + ftcPaidCurrFyr; 
            }

            if(rec.get('FtcUsedCurrentFy') !=="" && rowIdx !== idx)
            {
                var ftcUsedCurrFyr = rec.get('FtcUsedCurrentFy') === null || rec.get('FtcUsedCurrentFy') === "" ? 0:parseFloat(rec.get('FtcUsedCurrentFy'));

                sum3 = parseFloat(sum3) + ftcUsedCurrFyr; 
            }

            idx++;
        });

        var overallForeignTax1 = sum1 + remPrevFyr;
        var overallForeignTax2 = sum2 + paidCurrFyr;
        var overallForeignTax3 = sum3 + usedCurrFyr;

        txtSumRemPrevFyr.setValue(overallForeignTax1);
        txtSumPaidCurrentFyr.setValue(overallForeignTax2);
        txtSumUsedCurrentFyr.setValue(overallForeignTax3);
    },

    loadDataForUpdate: function(submissionNo,param) {
        var wait  = waitMsg('Loading ...');
        var store = Ext.getStore("DCTBForeignTaxDetails");

        store.loadData([],false);

        var url = "../Handlers/IncomeTax/D03/DCTBForeignTaxHandler.ashx?method=GetDCTBForeignTax" ;
        var args = {assessmentNo:submissionNo};

        if(param.from === "AU")
        {  
            url = "../Handlers/IncomeTax/D03/DCTBForeignTaxHandler.ashx?method=GetDCTBForeignTaxAU";
            args = {offCodeAU:param.offCodeAU,requestNo:param.requestNo,assessmentNo:submissionNo}
        }

        Ext.Ajax.request({
            url:url,
            params:args,
            success:function(result, request)
            {      
                wait.hide();
                var obj = Ext.decode(result.responseText);

                store.add(obj.root.ForeignTaxDetails);

                //-----------------------------------------------------------------------------------
                //NB: Calculate Total
                //-----------------------------------------------------------------------------------
                var txtSumRemPrevFyr = Ext.ComponentQuery.query('#txtSumRemPreviousFyrAnx12')[0];
                var txtSumPaidCurrentFyr = Ext.ComponentQuery.query('#txtSumPaidCurrentFyrAnx12')[0];
                var txtSumUsedCurrentFyr = Ext.ComponentQuery.query('#txtSumUsedCurrentFyrAnx12')[0];

                var sum1 = 0;
                var sum2 = 0;
                var sum3 = 0;

                store.each(function (rec) {   


                    if(rec.get('FtcRemPreviousFy'))
                    {
                        var ftcRemPrevFyr = rec.get('FtcRemPreviousFy') === null || rec.get('FtcRemPreviousFy') === "" ? 0:parseFloat(rec.get('FtcRemPreviousFy'));

                        sum1 = parseFloat(sum1) + ftcRemPrevFyr; 
                    }	

                    if(rec.get('FtcPaidCurrentFy'))
                    {
                        var ftcPaidCurrFyr = rec.get('FtcPaidCurrentFy') === null || rec.get('FtcPaidCurrentFy') === "" ? 0:parseFloat(rec.get('FtcPaidCurrentFy'));

                        sum2 = parseFloat(sum2) + ftcPaidCurrFyr; 
                    }

                    if(rec.get('FtcUsedCurrentFy'))
                    {
                        var ftcUsedCurrFyr = rec.get('FtcUsedCurrentFy') === null || rec.get('FtcUsedCurrentFy') === "" ? 0:parseFloat(rec.get('FtcUsedCurrentFy'));

                        sum3 = parseFloat(sum3) + ftcUsedCurrFyr; 
                    }
                });

                txtSumRemPrevFyr.setValue(sum1);
                txtSumPaidCurrentFyr.setValue(sum2);
                txtSumUsedCurrentFyr.setValue(sum3);
            },

            failure:function(result, request){
                msg('ERROR OCURRED !!!', 'Error');                 
            }

        });

    },

    onLaunch: function() {
        var me = this;
        var annexD03 = me.getController('MyApp.controller.SetAnnexD03');
        var param = me.validateParam();
        var el = Ext.get('lnkRedirectTopAnx12');

        el.on('click', function(e,t,eOpts){

            Ext.Msg.confirm('Confirm Action', 'के तपाई पछाडि गएर अनुसुची तय गर्न चाहनुहुन्छ?', function(btn) {
                if(btn == 'yes'){        

                    param.action ="";
                    annexD03.redirectToAnnexD03(param);
                }
            }, this);
        });

    },

    validateParam: function() {
        var me = this;
        var view = Ext.ComponentQuery.query('#pnlD03Annex12')[0];
        var user = me.getController('MyApp.controller.LoginSecurity');  
        var param = "";

        if(view.extraParam === null)
        {
            user.clearSession();

            return;

        }
        else
        {
            return view.extraParam;
        }
    },

    init: function(application) {
        this.control({
            "#pnlD03Annex12": {
                afterrender: this.onPnlD03Annex12AfterRender
            },
            "#btnAddNewAnx12": {
                click: this.onBtnAddNewAnx12Click
            },
            "#grdForeignTaxAnx12": {
                beforerender: this.onGrdForeignTaxAnx12BeforeRender
            },
            "#btnSubmitAnx12": {
                click: this.onBtnSubmitAnx12Click
            },
            "#txtRemPreviousFyrAnx12": {
                change: this.onTxtRemPreviousFyrAnx12Change
            },
            "#txtPaidCurrentFyrAnx12": {
                change: this.onTxtPaidCurrentFyrAnx12Change
            },
            "#txtUsedCurrentFyrAnx12": {
                change: this.onTxtUsedCurrentFyrAnx12Change
            },
            "#lblRedirectAnx12": {
                click: this.onLblRedirectAnx12Click
            }
        });
    }

});
