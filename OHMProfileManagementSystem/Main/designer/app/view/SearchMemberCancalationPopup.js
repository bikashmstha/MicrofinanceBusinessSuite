/*
 * File: app/view/SearchMemberCancalationPopup.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.SearchMemberCancalationPopup', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.Text',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.selection.RowModel',
        'Ext.grid.column.Column'
    ],

    height: 500,
    itemId: 'SearchMemberCancalationPopup',
    width: 1100,
    autoScroll: true,
    layout: 'fit',
    title: 'Select Member',
    maximizable: true,
    minimizable: true,
    modal: true,
    y: 80,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    itemId: 'frmSearchOfficePopup',
                    autoScroll: true,
                    bodyPadding: 10,
                    title: '',
                    items: [
                        {
                            xtype: 'container',
                            layout: 'table',
                            items: [
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtSearchParentOfficeCode',
                                    fieldLabel: 'Search'
                                },
                                {
                                    xtype: 'button',
                                    colspan: 2,
                                    itemId: 'btnSearchPopUp',
                                    margin: '0 0 0 5',
                                    text: 'Search',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnSearchPopupOfficeClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            itemId: 'grdSearchOffice',
                            title: '',
                            store: 'MemberForCancelListStore',
                            selModel: Ext.create('Ext.selection.RowModel', {
                                listeners: {
                                    beforeselect: {
                                        fn: me.onRowModelBeforeSelect,
                                        scope: me
                                    }
                                }
                            }),
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'ClientCode',
                                    text: 'Member Code'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 322,
                                    dataIndex: 'ClientName',
                                    text: 'Member Name'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 250,
                                    dataIndex: 'GroupName',
                                    text: 'Group Name'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'CenterCode',
                                    text: 'Center Code'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 125,
                                    dataIndex: 'CenterName',
                                    text: 'Center Name'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'ClientNo',
                                    text: 'Client No'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Active',
                                    text: 'Active'
                                }
                            ]
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFrmSearchOfficePopupAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onBtnSearchPopupOfficeClick: function(button, e, eOpts) {
        var waitSave = watiMsg("Searching.Please wait ...");
        var storeMember=Ext.getStore('MemberForCancelListStore');
        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/MemberTransaction/MemberForCancellationHandler.ashx',
            params: {
                method:'GetMemberForCancelList',
                offCode:Ext.get('offCode').dom.innerHTML,
                centerCode:null,
                memberName:null,
                clientNo:null

            },
            success: function(response){
                waitSave.hide();
                var data=Ext.decode(response.responseText);
                storeMember.removeAll();
                storeMember.add(data.root);


            },
            failure: function ( result, request ) {
                                waitSave.hide();
                                var out=Ext.decode(response.responseText);
                                msg("FAILURE",out.message);
                            }
        });
    },

    onRowModelBeforeSelect: function(rowmodel, record, index, eOpts) {
        Ext.MessageBox.confirm('Select', 'Are you sure ?', function(btn){

            var myfrm=Ext.ComponentQuery.query('#MembershipCancellationRestore')[0];
            myfrm.rec=record;

           if(btn === 'yes'){


               Ext.ComponentQuery.query('#txtMemberCode')[0].setValue(record.data.ClientCode);
               Ext.ComponentQuery.query('#txtMemberName')[0].setValue(record.data.ClientName);
               Ext.ComponentQuery.query('#txtGroupCode')[0].setValue(record.data.GroupCode);
               Ext.ComponentQuery.query('#txtGroupName')[0].setValue(record.data.GroupName);
               Ext.ComponentQuery.query('#txtMemberShipDateBS')[0].setValue(record.data.MemDateBs);
               Ext.ComponentQuery.query('#txtMemberShipDateAD')[0].setValue(record.data.MembershipDate);
               Ext.ComponentQuery.query('#txtNomineeName')[0].setValue(record.data.NomineeName);
               Ext.ComponentQuery.query('#txtNomineeRelation')[0].setValue(record.data.NomineeRelation);
               Ext.ComponentQuery.query('#ddlReason')[0].setValue(record.data.ReasonForInactive);

               if(record.data.Active==='Y')
                   {
                     Ext.ComponentQuery.query('#btnCancelMember')[0].setVisible(true);
                     Ext.ComponentQuery.query('#btnRestoreMember')[0].setVisible(false);
                   }
               else if(record.data.Active==='N'){
                   Ext.ComponentQuery.query('#btnRestoreMember')[0].setVisible(true);
                   Ext.ComponentQuery.query('#btnCancelMember')[0].setVisible(false);

               }

              // return true;
           }
           else
           {

           }
            var v=Ext.ComponentQuery.query('#SearchMemberCancalationPopup')[0];

            v.close();
        });





    },

    onFrmSearchOfficePopupAfterRender: function(component, eOpts) {
        var store=Ext.getStore('MemberForCancelListStore');
        store.removeAll();
    }

});