/*
 * File: app/controller/ManualVatReturns.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.ManualVatReturns', {
    extend: 'Ext.app.Controller',

    stores: [
        'FilingPeriodStore',
        'ReferenceBasisStore',
        'SuspendedReasonStore'
    ],

    onManualVatReturnsAfterRender: function(component, eOpts) {
        var me =this;
        var txtAcctType;
        var tranNo='';
        var userActivity={
            ApplicationID:'VAT',
            ModuleID:'VMRETURN',
            UserID:'',
            Action:'ENTER'
        };

        LogUserActivity(userActivity);


        $(document).ready(function(){

            $('tr').has('.exclude').children('td').css({backgroundColor:'#DFE9F6',border:0});
            $('tr').has('.exclude').css({backgroundColor:'#DFE9F6',border:0});
            $('.tablegrid .x-table-layout').css({border:0});
        }
        );

        //*************************** LOAD REFERENCE BASIS *********************************************************
        var strRB = Ext.getStore('ReferenceBasisStore');
        strRB.removeAll();
        strRB.load();

        txtAcctType=Ext.ComponentQuery.query("#txtAccountType")[0];
        txtAcctType.setValue('00');





        var objParam = Ext.ComponentQuery.query('#ManualVatReturns')[0];

        if (!objParam.extraParam)
        {
            Ext.ComponentQuery.query("#hfMVRAction")[0].setValue('A');
            txtAcctType=Ext.ComponentQuery.query("#txtAccountType")[0];
            txtAcctType.setValue('00');

            var nepaliDate = Ext.get('nepDate').dom.innerHTML;

            Ext.ComponentQuery.query('#txtRecDate')[0].setValue(nepaliDate);


            return;
        }


        var param = objParam.extraParam.params;
        //FROM AUTHORIZED UPDATE

        if(param.from=='AU')
        {

            var pan=param.pks[0].data.Value;
            var acctType=param.pks[1].data.Value;
            var taxyear=param.pks[2].data.Value;
            var filePer=param.pks[3].data.Value;
            var period=param.pks[4].data.Value;
            var requestNo=param.requestNo;
            var offCode=param.offCode;
            var auAction=param.auAction;
            tranNo=param.tranNo;
            var editOrDelete=param.editOrDelete;

            Ext.ComponentQuery.query('#hdnActionType')[0].setValue('AU');
            Ext.ComponentQuery.query('#hdnTranNo')[0].setValue(tranNo);

            var sn=Ext.ComponentQuery.query('#txtSubmissionNo')[0];
            sn.labelEl.dom.innerHTML='Request No';
            sn.setValue(requestNo);

            Ext.ComponentQuery.query('#hdnAUOffCode')[0].setValue(offCode);

            txtAcctType=Ext.ComponentQuery.query("#txtAccountType")[0];
            txtAcctType.setValue('00');


            var form=(Ext.ComponentQuery.query('#frmManualVatReturns')[0]).getForm();

            if(auAction=='A')
            {
                Ext.Ajax.request({
                    url: '../Handlers/VAT/VatReturnsHandler.ashx',
                    params: {method:'GetPostedReturn',requestNo:requestNo,offCode:offCode,pan: pan,acctType:acctType,taxyear:taxyear,filPeriod:filePer,period:period,tranNo:tranNo},
                    success: function(response){
                        var JSONResponse=Ext.decode(response.responseText);
                        if(JSONResponse.success=='true')
                        {  

                            Ext.ComponentQuery.query("#txtPan")[0].setValue(pan);

                            LoadTaxpayerInfo(pan,acctType,function(TaxpayerInfo){

                                //LOAD TAXPAYER INFO   
                                var taxpayer=TaxpayerInfo.root.Taxpayer;
                                var address=taxpayer.BusinessAddress.Address;
                                Ext.ComponentQuery.query("#lblTaxpayerName")[0].setValue(taxpayer.Name);
                                Ext.ComponentQuery.query("#lblTaxpayerAddress")[0].setValue(address.DistrictNameNep+' / '+address.StreetName);
                                Ext.ComponentQuery.query("#lblTaxpayerPhoneNo")[0].setValue(address.Telephone);
                                Ext.ComponentQuery.query("#lblTaxpayerFax")[0].setValue(address.Fax);
                                Ext.ComponentQuery.query('#hdnRegistrationDate')[0].setValue(taxpayer.RegistrationDate);
                            });


                            //LOAD VAT RETURNS
                            me.LoadVatReturnsAU(JSONResponse);
                        }
                    }

                });
            }
            else if(auAction=='E'||auAction=='V')
            {
                Ext.Ajax.request({
                    url: '../Handlers/VAT/VatReturnsHandler.ashx',
                    params: {method:'GetVatReturnAU',offCode:offCode,requestNo:requestNo},
                    success: function(response){
                        var JSONResponse=Ext.decode(response.responseText);
                        if(JSONResponse.success=='true')
                        {  

                            Ext.ComponentQuery.query("#txtPan")[0].setValue(pan);
                            //Ext.ComponentQuery.query('#hdnAUExists')[0].setValue('E');

                            LoadTaxpayerInfo(pan,acctType,function(TaxpayerInfo){

                                //LOAD TAXPAYER INFO   
                                var taxpayer=TaxpayerInfo.root.Taxpayer;
                                var address=taxpayer.BusinessAddress.Address;
                                Ext.ComponentQuery.query("#lblTaxpayerName")[0].setValue(taxpayer.Name);
                                Ext.ComponentQuery.query("#lblTaxpayerAddress")[0].setValue(address.DistrictNameNep+' / '+address.StreetName);
                                Ext.ComponentQuery.query("#lblTaxpayerPhoneNo")[0].setValue(address.Telephone);
                                Ext.ComponentQuery.query("#lblTaxpayerFax")[0].setValue(address.Fax);
                                Ext.ComponentQuery.query('#hdnRegistrationDate')[0].setValue(taxpayer.RegistrationDate);
                            });


                            //LOAD VAT RETURNS
                            me.LoadVatReturnsAU(JSONResponse);

                            if(auAction=='V')
                            {
                                var frmMVR=Ext.ComponentQuery.query('#ManualVatReturns')[0];


                                frmMVR.query('.field,.combo').forEach(function(c){c.setReadOnly(true);});
                                frmMVR.query('.grid').forEach(function(c){ c.on('beforeedit', function(editor, e) { return false;});});

                                Ext.ComponentQuery.query('#btnSaveVatReturns')[0].hide(true);
                                Ext.ComponentQuery.query('#btnPrintVatReturns')[0].hide(true);
                                Ext.ComponentQuery.query('#btnSubmitVatReturns')[0].hide(true);
                                Ext.ComponentQuery.query('#btnMVRBack')[0].hide(true);
                                Ext.ComponentQuery.query('#btnMVRVerify')[0].hide(true);



                            }

                        }
                    }

                });  
            }


            if(editOrDelete=='D')
            {

                var frmMVR=Ext.ComponentQuery.query('#ManualVatReturns')[0];

                frmMVR.query('.field,.combo').forEach(function(c){c.setReadOnly(true);});
                frmMVR.query('.grid').forEach(function(c){ c.on('beforeedit', function(editor, e) { return false;});});
            }

        }
        else if(param.from=='MAR')
        {
            Ext.ComponentQuery.query('#lblViewSuspensionReasons')[0].setVisible(true);
            var suspRet=param.suspendedReturns;
            Ext.ComponentQuery.query("#hfMVRAction")[0].setValue('A');

            Ext.ComponentQuery.query("#txtPan")[0].setValue(suspRet.PAN);

            LoadTaxpayerInfo(suspRet.PAN,acctType,function(TaxpayerInfo){

                //LOAD TAXPAYER INFO   
                var taxpayer=TaxpayerInfo.root.Taxpayer;
                var address=taxpayer.BusinessAddress.Address;
                Ext.ComponentQuery.query("#lblTaxpayerName")[0].setValue(taxpayer.Name);
                Ext.ComponentQuery.query("#lblTaxpayerAddress")[0].setValue(address.DistrictNameNep+' / '+address.StreetName);
                Ext.ComponentQuery.query("#lblTaxpayerPhoneNo")[0].setValue(address.Telephone);
                Ext.ComponentQuery.query("#lblTaxpayerFax")[0].setValue(address.Fax);
                Ext.ComponentQuery.query('#hdnRegistrationDate')[0].setValue(taxpayer.RegistrationDate);


                Ext.ComponentQuery.query('#txtRecDate')[0].setValue(suspRet.RecDate);
                Ext.ComponentQuery.query("#txtTaxYear")[0].setValue(suspRet.Taxyear);
                Ext.ComponentQuery.query("#ddlFilingPeriod")[0].setValue(suspRet.FilPeriod);
                Ext.ComponentQuery.query("#ddlPeriod")[0].setValue(suspRet.Period);


                //Set Taxpayer Transaction Details
                Ext.ComponentQuery.query("#txtTaxableSale")[0].setValue(suspRet.TaxableSale);
                Ext.ComponentQuery.query("#txtVatOnSale")[0].setValue(suspRet.VATOnSale);
                Ext.ComponentQuery.query("#txtExport")[0].setValue(suspRet.Export);
                Ext.ComponentQuery.query("#txtExemptSale")[0].setValue(suspRet.ExemptSale);
                Ext.ComponentQuery.query("#txtTaxablePurchase")[0].setValue(suspRet.TaxablePurchase);
                Ext.ComponentQuery.query("#txtVatOnPurchase")[0].setValue(suspRet.VATOnPur);
                Ext.ComponentQuery.query("#txtTaxablePurI")[0].setValue(suspRet.TaxablePurI);
                Ext.ComponentQuery.query("#txtVatOnPurI")[0].setValue(suspRet.VATOnPurI);
                Ext.ComponentQuery.query("#txtExemptPurchase")[0].setValue(suspRet.ExemptPur);
                Ext.ComponentQuery.query("#txtExemptPurI")[0].setValue(suspRet.ExemptPurI);
                Ext.ComponentQuery.query("#txtAdjCredit")[0].setValue(suspRet.AdjCredit);
                Ext.ComponentQuery.query("#txtAdjDebit")[0].setValue(suspRet.AdjDebit);
                Ext.ComponentQuery.query("#txtCreditBF")[0].setValue(suspRet.CreditBF);
                Ext.ComponentQuery.query("#txtRefClaimAmt")[0].setValue(suspRet.RefClaimAmt);
                Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setValue(suspRet.RBID);
            });



        }
        else 
        {

            tranNo= param.tranNo;

            //MANUAL VAT RETURN ENTRY  OR TRAN AUTHENTICATION
            if(!tranNo)//ENTERS MANUAL VAT RETURN ENTRY
            {
                Ext.ComponentQuery.query("#hfMVRAction")[0].setValue('A');

            }//ENDS IF
            else//TRAN AUTHENTICATION VERIFICATION
            {
                Ext.ComponentQuery.query("#hfMVRAction")[0].setValue('V');
                txtAcctType=Ext.ComponentQuery.query("#txtAccountType")[0];
                txtAcctType.setValue('00');

                var form=(Ext.ComponentQuery.query('#frmManualVatReturns')[0]).getForm();

                //GETS SUBMISSION NO
                Ext.Ajax.request({
                    url: '../Handlers/VAT/VatReturnsHandler.ashx',
                    params: {method:'GetVatReturnByTranNo',tranNo: tranNo},
                    success: function(response){
                        var JSONResponse=Ext.decode(response.responseText);
                        if(JSONResponse.success=='true')
                        {  

                            var submissionNo=JSONResponse.root.SubmissionNumber;
                            var acctType=JSONResponse.root.AcctType;

                            //LOADS VAT RETURNS USING SUBMISSION NO
                            Ext.Ajax.request({
                                url: '../Handlers/VAT/VatReturnsSubmissionNumberHandler.ashx',
                                params: {method:'GetLoginTBs',submissionNo: submissionNo },
                                success: function(response){
                                    var JSONResponse=Ext.decode(response.responseText);
                                    if(JSONResponse.success=='true')
                                    {  

                                        pan=JSONResponse.root.PAN;

                                        if(JSONResponse.root.SubmittedYN!='Y')
                                        {
                                            msg('INFO','*यो विवरण सब्मित भएको छैन।<BR>तपाईले यो विवरण भेरिफाई गर्न सक्नुहुन्न।');
                                        }
                                        else
                                        {
                                            Ext.ComponentQuery.query("#txtPan")[0].setValue(pan);

                                            LoadTaxpayerInfo(pan,acctType,function(TaxpayerInfo){

                                                //LOAD TAXPAYER INFO   
                                                var taxpayer=TaxpayerInfo.root.Taxpayer;
                                                var address=taxpayer.BusinessAddress.Address;
                                                Ext.ComponentQuery.query("#lblTaxpayerName")[0].setValue(taxpayer.Name);
                                                Ext.ComponentQuery.query("#lblTaxpayerAddress")[0].setValue(address.DistrictNameNep+' / '+address.StreetName);
                                                Ext.ComponentQuery.query("#lblTaxpayerPhoneNo")[0].setValue(address.Telephone);
                                                Ext.ComponentQuery.query("#lblTaxpayerFax")[0].setValue(address.Fax);
                                                Ext.ComponentQuery.query('#hdnRegistrationDate')[0].setValue(taxpayer.RegistrationDate);
                                            });


                                            //LOAD VAT RETURNS
                                            me.LoadVatReturns(submissionNo);
                                        }

                                    }

                                }
                            });//Ends Loading Vat Returns using TranNo

                            Ext.ComponentQuery.query('#btnSaveVatReturns')[0].hide(true);
                            Ext.ComponentQuery.query('#btnPrintVatReturns')[0].hide(true);
                            Ext.ComponentQuery.query('#btnSubmitVatReturns')[0].hide(true);
                            Ext.ComponentQuery.query('#btnMVRBack')[0].hide(true);
                            Ext.ComponentQuery.query('#btnMVRVerify')[0].hide(true);
                            //Convert All Fields To Read Only
                            var frmMVR=Ext.ComponentQuery.query('#ManualVatReturns')[0];
                            frmMVR.query('.field,.combo').forEach(function(c){c.setReadOnly(true);});
                            frmMVR.query('.grid').forEach(function(c){ c.on('beforeedit', function(editor, e) { return false;});});
                            //Ends Converting Fields To Read Only


                        }

                    }
                });//Ends Get Submission No
            }//Ends Else

        }




    },

    onTxtSubmissionNoBlur: function(field, eOpts) {

        var me=this;
        var pan;

        var submissionNo=Ext.ComponentQuery.query("#txtSubmissionNo")[0].getValue();
        var acctType=Ext.ComponentQuery.query("#txtAccountType")[0].getValue();
        if(submissionNo==='')
        {
            Ext.getCmp("hfMVRAction").setValue("A");
            return;
        }
        else
        {
            Ext.ComponentQuery.query('#btnSaveVatReturns')[0].focus();
        }


        Ext.getCmp("hfMVRAction").setValue("E");

        Ext.Ajax.request({
            url: '../Handlers/VAT/VatReturnsSubmissionNumberHandler.ashx',
            params: {method:'GetLoginTBs',submissionNo: submissionNo},
            success: function(response){
                var JSONResponse=Ext.decode(response.responseText);
                if(JSONResponse.success=='true')
                {  

                    if(JSONResponse.root)
                    {
                        pan=JSONResponse.root.PAN;

                        if(JSONResponse.root.SubmittedYN=='Y')
                        {
                            msg('INFO','* तपाईले यो विवरण सब्मित गरिसक्नु भयो।<BR>तपाईले यो विवरणमा सच्याउन सक्नुहुन्न।');
                        }
                        else
                        {
                            Ext.ComponentQuery.query("#txtPan")[0].setValue(pan);

                            LoadTaxpayerInfo(pan,acctType,function(TaxpayerInfo){

                                //LOAD TAXPAYER INFO   
                                var taxpayer=TaxpayerInfo.root.Taxpayer;
                                var address=taxpayer.BusinessAddress.Address;
                                Ext.ComponentQuery.query("#lblTaxpayerName")[0].setValue(taxpayer.Name);
                                Ext.ComponentQuery.query("#lblTaxpayerAddress")[0].setValue(address.DistrictNameNep+' / '+address.StreetName);
                                Ext.ComponentQuery.query("#lblTaxpayerPhoneNo")[0].setValue(address.Telephone);
                                Ext.ComponentQuery.query("#lblTaxpayerFax")[0].setValue(address.Fax);

                            });


                            //LOAD VAT RETURNS
                            me.LoadVatReturns(submissionNo);
                        }
                    }
                    else
                    {
                        msg('INFO','तपाईले भर्नु भएको सब्मिसन नं मिलेन।<BR> कृपया सब्मिसन नं पुन: भर्नुहोला।');
                        me.ClearReturnsControls('Y');
                    }
                }

            },
            failure: function ( result, request ) {

                msg('FAILURE',Ext.decode(response));
            }

        });

    },

    onTxtPanBlur: function(field, eOpts) {

        var me=this;
        var pan=Ext.ComponentQuery.query("#txtPan")[0].value;
        var acctType=Ext.ComponentQuery.query("#txtAccountType")[0].value;

        if(pan==='')
        {
            me.ClearReturnsControls('N');
            return;
        }
        else if(pan.length!=9)
        {
            msg('INFO','तपाईले भर्नु भएको प्यान ९ अंकको हुनुपर्छ।');
            me.ClearReturnsControls('N');
            return;
        }
        else
        {

            LoadTaxpayerInfoWithValidPan(pan,acctType,function(obj){

                if(obj.root.Message!==null)
                {
                    var f=Ext.ComponentQuery.query('#txtPan')[0]; 
                    msg('INFO',obj.root.Message,f);

                    me.ClearReturnsControls();
                }
                else
                {
                    var taxpayer=obj.root.Taxpayer;
                    var address=taxpayer.BusinessAddress.Address;
                    var office=taxpayer.Office;

                    if(taxpayer.AcctStatus!='A')
                    {
                        msg('INFO', 'यो प्यान सक्रिय छैन।');
                        return;
                    }


                    var userOffice=Ext.get('offCode').dom.innerHTML;    
                    if(office.OfficeCode!=userOffice)
                    {
                        msg('INFO', 'यो करदाता यो कार्यालामा दर्ता छैन।<BR><BR>तपाईले यो करदाताको विवरण भर्न पाउनु हुन्न।');
                        me.ClearReturnsControls('N');

                        return;
                    }


                    Ext.ComponentQuery.query("#lblTaxpayerName")[0].setValue(taxpayer.Name);
                    Ext.ComponentQuery.query("#lblTaxpayerAddress")[0].setValue(address.DistrictNameNep+' / '+address.StreetName);
                    Ext.ComponentQuery.query("#lblTaxpayerPhoneNo")[0].setValue(address.Phone);
                    Ext.ComponentQuery.query("#lblTaxpayerFax")[0].setValue(address.Fax);
                    Ext.ComponentQuery.query('#hdnRegistrationDate')[0].setValue(taxpayer.RegistrationDate);
                }

            });
        }

    },

    onTxtTaxYearBlur: function(field, eOpts) {
        var me=this;

        var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();


        if(taxyear===null)
        {
            return;
        }


        ValidateTaxyear(taxyear,function(invalidMsg){
            if(invalidMsg!=='')
            {
                msg('INFO',invalidMsg);
                Ext.ComponentQuery.query('#hdnVTaxyear')[0].setValue('INVALID');
                return;
            }
            else
            {
                Ext.ComponentQuery.query('#hdnVTaxyear')[0].setValue('');
            }
        });
    },

    onDdlFilingPeriodChange: function(field, newValue, oldValue, eOpts) {
        var combo=Ext.ComponentQuery.query("#ddlFilingPeriod")[0];
        var v = combo.getValue(); 

        if(v===''||v===null)
        {
            return;
        }

        //if(v!='M'||v!='m'||v!='T'||v!='t'||v!='B'||v!='b')
        if(v!='M'&&v!='m'&&v!='T'&&v!='t'&&v!='B'&&v!='b')
        {
            return;
        }

        var record = combo.findRecord(combo.valueField || combo.displayField, v); 
        var index = combo.store.indexOf(record);

        var ddlPeriod=Ext.ComponentQuery.query("#ddlPeriod")[0];
        ddlPeriod.setValue('');

        ddlPeriod.store.loadData(record.data.Period);

    },

    onDdlPeriodChange: function(field, newValue, oldValue, eOpts) {

        var me=this;
        var filePer=Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue();
        var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
        var period=Ext.ComponentQuery.query("#ddlPeriod")[0].getValue();
        var pan=Ext.ComponentQuery.query("#txtPan")[0].getValue();
        var acctType=Ext.ComponentQuery.query("#txtAccountType")[0].getValue();
        var message='';


        if(period==='')
        {
            return;
        }

        if(period<1||period>12)
        {
            return;
        }
        if(pan===''||pan===null)
        {
            message+= '<BR>* कृपया पहिला प्यान भर्नुहोला।';

        }
        if(taxyear==='0'||taxyear===null)
        {
            message+= '<BR>* कृपया पहिला कर वर्ष भर्नुहोला।';

        }


        if(Ext.ComponentQuery.query('#hdnVTaxyear')[0].getValue()==='INVALID')
        {
            message+='<BR>* तपाईले भर्नु भएको कर वर्ष मिलेन।';

        }

        if(message!=='')
        {
            Ext.ComponentQuery.query("#ddlPeriod")[0].setValue('');
            msg('INFO',message);
            return;
        }





        //VALIDATING YEAR MONTH DESCRIPTION


        Ext.Ajax.request({
            url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
            params: {
                method:'GetFilePerEndDate',
                filePeriod: filePer,
                taxyear:taxyear,
                period:period
            },
            success: function(response){

                //console.log(response.responseText);
                var endDate=Ext.decode(response.responseText);
                var recDate=Ext.ComponentQuery.query('#txtRecDate')[0].getValue();
                if(endDate.message==='')
                {
                    msg('INFO','* तपाईंले भर्नुभएको फाइलिंग पिरियड मिलेन।');
                    Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].setValue('INVALID');
                    return;

                }

                var me=this;
                var filePer=Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue();
                var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
                var period=Ext.ComponentQuery.query("#ddlPeriod")[0].getValue();
                var pan=Ext.ComponentQuery.query("#txtPan")[0].getValue();
                var acctType=Ext.ComponentQuery.query("#txtAccountType")[0].getValue();
                var registrationDate=Ext.ComponentQuery.query('#hdnRegistrationDate')[0].getValue();


                //VALIDATING YEAR MONTH DESCRIPTION
                ValidateFilingPeriod(pan,acctType,filePer,taxyear,period,registrationDate,function(errMessage){
                    if(errMessage!=='')
                    {
                        msg('INFO',errMessage);
                        Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].setValue('INVALID');
                        return;
                    }
                    else
                    {
                        if(endDate.message>recDate)
                        {
                            msg('INFO','* यो अवधिलाई फाईल गर्ने बेला भएको छैन।');
                            Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].setValue('INVALID');
                            return;
                        }
                        else
                        {
                            Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].setValue('VALID');
                        }
                    }
                });



            }
        });


    },

    onTxtVatOnSaleChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        me.CalculateTotalDebit(Ext.ComponentQuery.query("#txtVatOnSale")[0].getValue(), Ext.ComponentQuery.query("#txtAdjDebit")[0].getValue());
    },

    onTxtVatOnSaleBlur: function(field, eOpts) {
        /*


        var me=this;
        var startDate;
        var endDate;
        var date;
        var retDate='';
        var rateNDate;
        var rateStartPeriod;
        var rateEndPeriod;
        var deviationAllowedRate;


        var filePer=Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue();
        var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
        var period=Ext.ComponentQuery.query("#ddlPeriod")[0].getValue();

        //alert(filePer);
        //alert(taxyear);
        //alert(period);

        var message='';


        //CHECKING FILE PERIOD, TAX YEAR, PERIOD
        if(filePer===null)
        {
            message+='\nFile Period Cannot Be Empty';
        }
        if(taxyear===null)
        {
            message+='\nTax Year Cannot Be Empty';
        }

        if(period===null)
        {
            message+='\nPeriod Cannot Be Empty';
        }

        if(message!=='')
        {
            me.msg('INFO',message);
            return;
        }


        var taxableSale=Ext.ComponentQuery.query('#txtTaxableSale')[0].getValue();
        var vatOnSale=Ext.ComponentQuery.query('#txtVatOnSale')[0].getValue();
        //alert(vatOnSale);



        retDate=me.GetStartOrEndDate(filePer,taxyear,period,'S');

        //alert(retDate);
        if(retDate!=='')
        {
            //alert(retDate);

            //GET RATE AT THE START OF THE PERIOD
            rateNDate=me.GetRate('VATRATE',retDate);
            rateStartPeriod=rateNDate.split('&&')[0];

            endDate=rateNDate.split('&&')[1];

            //GET DEVIATION RATE
            deviationAllowedRate=me.GetRate('ALDIFFDR',retDate).split('&&')[0];

            //alert(endDate);

            if(endDate!='9999.99.99')
            {
                alert(endDate);
                //GET RATE AT THE END OF THE PERIOD    
                retDate=endDate.split('.')[0]+'.'+endDate.split('.')[1]+'.'+(Number(endDate.split('.')[2])+1);
                rateEndPeriod=GetRate('VATRATE',retDate);
            }
            else
            {
                //CHECK VALIDITY FOR VAT ON SALE
                var negativeDev=Number(vatOnSale)-Number(deviationAllowedRate);
                var positiveDev=Number(vatOnSale)+Number(deviationAllowedRate);
                var estTax=Number(taxableSale)*Number(rateStartPeriod)/100;

                if(Number(estTax)<Number(negativeDev)||Number(estTax)>Number(positiveDev))
                {
                    me.msg('ERROR','Invalid Vat On Sale');
                }


            }



            /* Ext.Ajax.request({
            url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
            params: {
            method:'GetRate',field:'VATRATE',date:startDate,
            id: 1
            },
            success: function(response){
            var TaxpayerInfo =Ext.decode( response.responseText);
            console.log(TaxpayerInfo);


            if{}

            }
            });

            }*/
    },

    onTxtVatOnPurchaseChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        var vatOnPurchase="0";
        var vatOnPurI="0";
        var adjCredit="0";

        vatOnPurchase=Ext.ComponentQuery.query("#txtVatOnPurchase")[0].getValue();
        vatOnPurI=Ext.ComponentQuery.query("#txtVatOnPurI")[0].getValue();
        adjCredit=Ext.ComponentQuery.query("#txtAdjCredit")[0].getValue();

        me.CalculateTotalCredit(vatOnPurchase,vatOnPurI,adjCredit);


    },

    onTxtVatOnPurIChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        var vatOnPurchase="0";
        var vatOnPurI="0";
        var adjCredit="0";

        vatOnPurchase=Ext.ComponentQuery.query("#txtVatOnPurchase")[0].getValue();
        vatOnPurI=Ext.ComponentQuery.query("#txtVatOnPurI")[0].getValue();
        adjCredit=Ext.ComponentQuery.query("#txtAdjCredit")[0].getValue();

        me.CalculateTotalCredit(vatOnPurchase,vatOnPurI,adjCredit);
    },

    onTxtTotalCreditChange: function(field, newValue, oldValue, eOpts) {
        var diff=this.CalculateVatDueTM(Number(Ext.ComponentQuery.query("#txtTotalDebit")[0].getValue()),Number(Ext.ComponentQuery.query("#txtTotalCredit")[0].getValue()));
    },

    onTxtTotalDebitChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        var diff=me.CalculateVatDueTM(Number(Ext.ComponentQuery.query("#txtTotalDebit")[0].getValue()),Number(Ext.ComponentQuery.query("#txtTotalCredit")[0].getValue()));

    },

    onTxtAdjCreditChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        var vatOnPurchase="0";
        var vatOnPurI="0";
        var adjCredit="0";

        vatOnPurchase=Ext.ComponentQuery.query("#txtVatOnPurchase")[0].getValue();
        vatOnPurI=Ext.ComponentQuery.query("#txtVatOnPurI")[0].getValue();
        adjCredit=Ext.ComponentQuery.query("#txtAdjCredit")[0].getValue();

        me.CalculateTotalCredit(vatOnPurchase,vatOnPurI,adjCredit);
    },

    onTxtAdjDebitChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        me.CalculateTotalDebit(Ext.ComponentQuery.query("#txtVatOnSale")[0].getValue(), Ext.ComponentQuery.query("#txtAdjDebit")[0].getValue());
    },

    onTxtVatDueTMChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        me.CalculateVatDue(Ext.ComponentQuery.query("#txtVatDueTM")[0].getValue(),Ext.ComponentQuery.query("#txtCreditBF")[0].getValue());
    },

    onTxtCreditBFChange: function(field, newValue, oldValue, eOpts) {
        var me=this;
        me.CalculateVatDue(Ext.ComponentQuery.query("#txtVatDueTM")[0].getValue(),Ext.ComponentQuery.query("#txtCreditBF")[0].getValue());
    },

    onTxtRefClaimAmtBlur: function(field, eOpts) {
        var me=this;
        var refClaimAmt=Ext.ComponentQuery.query("#txtRefClaimAmt")[0].getValue();
        var vatDue=Ext.ComponentQuery.query("#txtVatDue")[0].getValue();


        var refBasis=Ext.ComponentQuery.query("#ddlReferenceBasis");
        vatDue=vatDue===null?0:-vatDue;
        if(refClaimAmt>0)
        {
            if(refClaimAmt>(vatDue===null?0:vatDue))
            {

                msg('INFO','कर फिर्ता माग गरिएको रकम जम्मा क्रेडिट भन्दा बढी हुनुहुन्न।');
                Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setVisible(false);
                return;
            }
        }


        if(Number(refClaimAmt)>0)
        {
            Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setVisible(true);
        }
        else
        {
            Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setVisible(false);
        }




    },

    onDdlFilingPeriodKeyup: function(textfield, e, eOpts) {
        var filingPeriod=Ext.ComponentQuery.query('#ddlFilingPeriod')[0];

        switch(e.keyCode)
        {
            case(e.M):
            filingPeriod.setValue('M');
            break;
            case(e.T):
            filingPeriod.setValue('T');
            break;
            case(e.B):
            filingPeriod.setValue('B');
            break;
            default:
            filingPeriod.setValue("");
            return;
        }

        /*if(e.keyCode==e.M)
        {
        filingPeriod.setValue('M');

        return false;
        }
        else
        {
        if(e.T==e.keyCode)
        {
        filingPeriod.setValue('T');
        return false;
        }
        else if(e.B==e.keyCode)
        {
        filingPeriod.setValue('B');
        return false;
        }
        }
        */
    },

    onDdlPeriodKeyup: function(textfield, e, eOpts) {
        //console.log(e);
        var period=Ext.ComponentQuery.query('#ddlPeriod')[0];
        switch(e.keyCode)
        {
            case(e.ONE):
            period.setValue('1');
            break;
            case(e.TWO):
            period.setValue('2');
            break;
            case(e.THREE):
            period.setValue('3');
            break;
            case(e.FOUR):
            period.setValue('4');
            break;
            case(e.FIVE):
            period.setValue('5');
            break;

            case(e.SIX):
            period.setValue('6');
            break;

            case(e.SEVEN):
            period.setValue('7');
            break;

            case(e.EIGHT):
            period.setValue('8');
            break;

            case(e.NINE):
            period.setValue('9');
            break;

            case(e.TEN):
            period.setValue('10');
            break;

            case(e.ELEVEN):
            period.setValue('11');
            break;

            case(e.TWELVE):
            period.setValue('12');
            break;
            default:
            period.setValue("");
            return;
        }
        /*
        if(e.keyCode==e.ONE)
        {
        period.setValue('1');
        }
        else if(e.TWO==e.keyCode)
        {
        period.setValue('2');
        }
        else if(e.THREE==e.keyCode)
        {
        period.setValue('3');
        }
        else if (e.FOUR==e.keyCode)
        {
        period.setValue('4');
        }
        else if (e.FIVE==e.keyCode)
        {
        period.setValue('5');
        }
        else if (e.SIX==e.keyCode)
        {
        period.setValue('6');
        }
        else if (e.SEVEN==e.keyCode)
        {
        period.setValue('7');
        }
        else if (e.EIGHT==e.keyCode)
        {
        period.setValue('8');
        }
        else if (e.NINE==e.keyCode)
        {
        period.setValue('9');
        }
        else if (e.TEN==e.keyCode)
        {
        period.setValue('10');
        }
        else if (e.ELEVEN==e.keyCode)
        {
        period.setValue('11');
        }
        else if (e.TWELVE==e.keyCode)
        {
        period.setValue('12');
        }
        */
    },

    onBtnVerifyClick: function(button, e, eOpts) {

    },

    onBtnMVRBackClick: function(button, e, eOpts) {

        var param=Ext.ComponentQuery.query('#ManualVatReturns')[0].extraParam;
        var tNo=param.tranNo;
        var idxM=param.indexM;
        var idxT=param.indexT;

        uiConfig = {menuLink:'ModuleVerification',pageTitle:'Module Verification'};
        DynamicUI(uiConfig,null,{tranNo:tNo,indexM:idxM,indexT:idxT });
    },

    onTxtRefClaimAmtChange: function(field, newValue, oldValue, eOpts) {
        var refClaimAmt=Ext.ComponentQuery.query("#txtRefClaimAmt")[0].getValue();
        var refBasis=Ext.ComponentQuery.query("#ddlReferenceBasis")[0];


        if(Number(refClaimAmt)>0)
        {
            Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setVisible(true);

        }
        else
        {
            Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setVisible(false);
            refBasis.setValue('');
        }

    },

    onTxtRecDateBlur: function(field, eOpts) {

        validateFutureDate(field.getValue(),'Y',function(obj){
            field.focus();
        });

    },

    onBtnPrintVatReturnsClick: function(button, e, eOpts) {
        var userActivity={
            ApplicationID:'VAT',
            ModuleID:'VMRETURN',
            UserID:'ITS',
            Action:'PRINT'
        };

        LogUserActivity(userActivity);

        var param = { 
            'SubmissionNo' : Ext.ComponentQuery.query('#txtSubmissionNo')[0].getValue()
        };

        var url="../Reporting/Vat/ReportHandlers/Returns/VatReturnsReporthandler.ashx";
        var winOption="width=730,height=345,left=100,top=100,resizable=yes,scrollbars=yes";
        OpenWindowWithPost(url,winOption,"NewFile", param);


    },

    onLblViewSuspensionReasonsClick: function(label) {
        //SuspendedReasonErrors

        var objParam = Ext.ComponentQuery.query('#ManualVatReturns')[0];

        //console.log();
        var param = objParam.extraParam.params;




        var params={errorCode:param.suspendedReturns.SuspReason};

        menuLink='SuspendedReasonErrors';
        //var win = Ext.getCmp('SuspendedReasonErrors');
        //win.close();
        dynamicPopUp(menuLink,{params:params});
    },

    onBtnSubmitVatReturnsClick: function(button, e, eOpts) {
        var me=this;

        var objParam = Ext.ComponentQuery.query('#ManualVatReturns')[0];
        var param='';
        if (objParam.extraParam)
        {
            param = objParam.extraParam.params;

        }

        var me=this;

        var submissionNo=Ext.ComponentQuery.query("#txtSubmissionNo")[0].getValue();

        var filePer=Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue();
        var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
        var period=Ext.ComponentQuery.query("#ddlPeriod")[0].getValue();
        var pan=Ext.ComponentQuery.query("#txtPan")[0].getValue();
        var acctType=Ext.ComponentQuery.query("#txtAccountType")[0].getValue();
        var registrationDate=Ext.ComponentQuery.query('#hdnRegistrationDate')[0].getValue();

        var strMessage='';
        var taxpayerOffice;
        var strSuspReason='';
        var errCode='';
        var errDesc='';


        var userActivity={
            ApplicationID:'VAT',
            ModuleID:'VMRETURN',
            UserID:'ITS',
            Action:'SUBMIT'
        };

        LogUserActivity(userActivity);

        //Validating Pan
        if(pan===''||pan===null)
        {
            strMessage+='<BR>* तपाईंले प्यान अनिबार्य रूपमा भर्नु पर्नेछ।';
        }
        else
        {
            var isValid=ValidatePan(pan,'00');
            if(isValid===false)
            {
                strMessage+='<BR>* तपाईंले भर्नु भएको प्यान नं मिलेन।';
                //return;
            }
        }

        //Validating Taxyear
        if(taxyear===''|| taxyear===null)
        {
            strMessage+='<BR>* तपाईंले कर वर्ष अनिवार्य रूपमा भर्नु पर्नेछ।';
        }
        else
        {
            if(Ext.ComponentQuery.query('#hdnVTaxyear')[0].getValue()==='INVALID')
            {
                strMessage+='<BR>* तपाईंले भर्नु भएको कर वर्ष मिलेन।';
            }
        }

        if(filePer===''||filePer===null)
        {
            strMessage+='<BR>* तपाईंले मा.\\ चौ. \\ व्दै अनिवार्य रूपमा छान्नु पर्नेछ।';
        }

        if(period===''||period===null)
        {
            strMessage+='<BR>* महिना अनिवार्य रूपमा छान्नु पर्नेछ।';
        }


        if(Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].getValue()==='INVALID')
        {
            strMessage+='<BR>* तपाईंले भर्नुभएको फाइलिंग पिरियड मिलेन।';
        }


        var refClaimAmt=Ext.ComponentQuery.query("#txtRefClaimAmt")[0].getValue();
        var vatDue=Ext.ComponentQuery.query("#txtVatDue")[0].getValue();


        var refBasis=Ext.ComponentQuery.query("#ddlReferenceBasis");
        vatDue=vatDue===null?0:-vatDue;
        if(refClaimAmt>0)
        {
            if(refClaimAmt>vatDue)
            {

                strMessage+='कर फिर्ता माग गरिएको रकम जम्मा क्रेडिट रकम भन्दा बढी हुनुहुन्न।';
                Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setVisible(false);

            }
        }


        if(strMessage!=='')
        {
            msg('INFO',strMessage);
            return;
        }
        else
        {


            var from=Ext.ComponentQuery.query('#hdnActionType')[0].getValue('AU');


            if(from=='AU')
            {






                //----------------------------------------------------------------------------------------------------
                //----------------------------------------------------------------------------------------------------
                //----------------------------Save Vat Returns -------------------------------------------------------
                //----------------------------------------------------------------------------------------------------
                //----------------------------------------------------------------------------------------------------

                var objVatReturns={
                    OffCodeAU:Ext.get('offCode').dom.innerHTML,
                    RequestNo:Ext.ComponentQuery.query('#txtSubmissionNo')[0].getValue(),
                    PAN:Ext.ComponentQuery.query('#txtPan')[0].getValue(),
                    AcctType : Ext.ComponentQuery.query("#txtAccountType")[0].getValue(),
                    TaxYear : Number(Ext.ComponentQuery.query("#txtTaxYear")[0].getValue()),
                    FilePer : Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue(),
                    Period : Number(Ext.ComponentQuery.query("#ddlPeriod")[0].getValue()),
                    RecDate : Ext.ComponentQuery.query("#txtRecDate")[0].getValue(),
                    TaxableSale : Number(Ext.ComponentQuery.query("#txtTaxableSale")[0].getValue()),
                    VATOnSale : Number(Ext.ComponentQuery.query("#txtVatOnSale")[0].getValue()),
                    VATOnPur : Number(Ext.ComponentQuery.query("#txtVatOnPurchase")[0].getValue()),
                    TaxablePurI : Number(Ext.ComponentQuery.query("#txtTaxablePurI")[0].getValue()),
                    VATOnPurI : Number(Ext.ComponentQuery.query("#txtVatOnPurI")[0].getValue()),
                    ExemptSale : Number(Ext.ComponentQuery.query("#txtExemptSale")[0].getValue()),
                    TaxablePurchase : Number(Ext.ComponentQuery.query("#txtTaxablePurchase")[0].getValue()),
                    ExemptPur : Number(Ext.ComponentQuery.query("#txtExemptPurchase")[0].getValue()),
                    ExemptPurI : Number(Ext.ComponentQuery.query("#txtExemptPurI")[0].getValue()),
                    CreditBF : Number(Ext.ComponentQuery.query("#txtCreditBF")[0].getValue()),
                    TDStockAmount : 0,
                    TDStockTax : 0,
                    AdjCredit : Number(Ext.ComponentQuery.query("#txtAdjCredit")[0].getValue()),
                    AdjDebit : Number(Ext.ComponentQuery.query("#txtAdjDebit")[0].getValue()),
                    Export : Number(Ext.ComponentQuery.query("#txtExport")[0].getValue()),
                    Penalty : 0,
                    Interest : 0,
                    TotalCredit : Number(Ext.ComponentQuery.query("#txtTotalCredit")[0].getValue()),
                    TotalDebit : Number(Ext.ComponentQuery.query("#txtTotalDebit")[0].getValue()),
                    TotalVatTM : Number(Ext.ComponentQuery.query("#txtVatDueTM")[0].getValue()),
                    VATDue : Number(Ext.ComponentQuery.query("#txtVatDue")[0].getValue()),
                    RefClaimAmt : Number(Ext.ComponentQuery.query("#txtRefClaimAmt")[0].getValue()),
                    TranDate : Ext.get('nepDate').dom.innerHTML,
                    RTType : 'RT',
                    BatchNo : '',
                    UserID : '',
                    RBID : Ext.ComponentQuery.query("#ddlReferenceBasis")[0].getValue(),
                    TranNo:Ext.ComponentQuery.query('#hdnTranNo')[0].getValue(),
                    Action : Ext.ComponentQuery.query("#hfMVRAction")[0].getValue(),
                    Status:'F'
                };









                var frm=Ext.getCmp('frmVatReturns');

                var form = button.up('form').getForm();
                if(form)
                {
                    //console.log(form);
                }

                if(form.isValid()){


                    Ext.Ajax.request({
                        url: '../Handlers/VAT/VatReturnsHandler.ashx',
                        params: {
                            method:'ValidateVatReturnsAU',
                            vatReturns: JSON.stringify(objVatReturns)
                        },
                        success: function(response){
                            var JSONResponse=Ext.decode(response.responseText);
                            if(JSONResponse.success=='true')
                            {  
                                var resp=JSONResponse.root.split('&&');

                                if(resp.length==3)
                                {

                                    errCode=JSONResponse.root.split('&&')[0];
                                    errDesc=JSONResponse.root.split('&&')[1];
                                    submissionNo=JSONResponse.root.split('&&')[2];

                                    msg('INFO', '* तपाईंले बुझाउनु भएको विवरणमा निम्न प्रकारका गलतीहरु छन्।<BR>तपाईको गलतिहरू.... '+errDesc+'<BR><BR>तपाईको सब्मिसन नं :  <B STYLE="COLOR:RED">'+submissionNo+'</B>');
                                    return;
                                }
                                else
                                {
                                    submissionNo=JSONResponse.root.split('&&')[0];
                                    var fp=Ext.ComponentQuery.query('#frmManualVatReturns')[0];
                                    fp.getForm().reset();


                                    //RESET DEFAULTS
                                    Ext.ComponentQuery.query("#hfMVRAction")[0].setValue('A');
                                    var txtAcctType=Ext.ComponentQuery.query("#txtAccountType")[0];
                                    txtAcctType.setValue('00');
                                    GetNepaliDate(function(nepaliDate){
                                        Ext.ComponentQuery.query('#txtRecDate')[0].setValue(nepaliDate);
                                    });
                                    Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].setValue('');
                                    Ext.ComponentQuery.query('#hdnTranNo')[0].setValue('');


                                    msg('INFO','तपाईंको विवरण सफलतापुर्वक सब्मित भयो।<BR>तपाईको सब्मिसन नं :  <B STYLE="COLOR:RED">'+submissionNo+'</B>');



                                }
                            }
                        }


                    });
                }












            }
            else
            {



                //----------------------------------------------------------------------------------------------------
                //----------------------------------------------------------------------------------------------------
                //----------------------------Save Vat Returns -------------------------------------------------------
                //----------------------------------------------------------------------------------------------------
                //----------------------------------------------------------------------------------------------------

                var objVatReturns={
                    SubmissionNo:submissionNo,
                    AcctType : Ext.ComponentQuery.query("#txtAccountType")[0].getValue(),
                    TaxYear : Number(Ext.ComponentQuery.query("#txtTaxYear")[0].getValue()),
                    FilePer : Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue(),
                    Period : Number(Ext.ComponentQuery.query("#ddlPeriod")[0].getValue()),
                    RecDate : Ext.ComponentQuery.query("#txtRecDate")[0].getValue(),
                    TaxableSale : Number(Ext.ComponentQuery.query("#txtTaxableSale")[0].getValue()),
                    VATOnSale : Number(Ext.ComponentQuery.query("#txtVatOnSale")[0].getValue()),
                    VATOnPur : Number(Ext.ComponentQuery.query("#txtVatOnPurchase")[0].getValue()),
                    TaxablePurI : Number(Ext.ComponentQuery.query("#txtTaxablePurI")[0].getValue()),
                    VATOnPurI : Number(Ext.ComponentQuery.query("#txtVatOnPurI")[0].getValue()),
                    ExemptSale : Number(Ext.ComponentQuery.query("#txtExemptSale")[0].getValue()),
                    TaxablePurchase : Number(Ext.ComponentQuery.query("#txtTaxablePurchase")[0].getValue()),
                    ExemptPur : Number(Ext.ComponentQuery.query("#txtExemptPurchase")[0].getValue()),
                    ExemptPurI : Number(Ext.ComponentQuery.query("#txtExemptPurI")[0].getValue()),
                    CreditBF : Number(Ext.ComponentQuery.query("#txtCreditBF")[0].getValue()),
                    TDStockAmount : 0,
                    TDStockTax : 0,
                    AdjCredit : Number(Ext.ComponentQuery.query("#txtAdjCredit")[0].getValue()),
                    AdjDebit : Number(Ext.ComponentQuery.query("#txtAdjDebit")[0].getValue()),
                    Export : Number(Ext.ComponentQuery.query("#txtExport")[0].getValue()),
                    Penalty : 0,
                    Interest : 0,
                    TotalCredit : Number(Ext.ComponentQuery.query("#txtTotalCredit")[0].getValue()),
                    TotalDebit : Number(Ext.ComponentQuery.query("#txtTotalDebit")[0].getValue()),
                    TotalVatTM : Number(Ext.ComponentQuery.query("#txtVatDueTM")[0].getValue()),
                    VATDue : Number(Ext.ComponentQuery.query("#txtVatDue")[0].getValue()),
                    RefClaimAmt : Number(Ext.ComponentQuery.query("#txtRefClaimAmt")[0].getValue()),
                    TranDate : Ext.get('nepDate').dom.innerHTML,
                    RTType : 'RT',
                    OffCode : Ext.get('offCode').dom.innerHTML,
                    BatchNo : '',
                    UserID : '',
                    RBID : Ext.ComponentQuery.query("#ddlReferenceBasis")[0].getValue(),
                    Action : Ext.ComponentQuery.query("#hfMVRAction")[0].getValue(),
                    Status:'I',
                    EM:param.from=='MAR'?'MAR':'VMRETURN'

                };






                //-------------------------------------Get Taxpayer Current Office---------------------------



                Ext.Ajax.request({
                    url: '../Handlers/Registration/Taxpayer/TaxpayerHandler.ashx',
                    params: {
                        method:'GetTaxpayerCurrOffice',
                        pan: pan,
                        acctType:'00',
                        id: 1
                    },
                    success: function(taxpayerCurrOffice){
                        var  TPOffice =Ext.decode( taxpayerCurrOffice.responseText);

                        if(JSON.stringify(TPOffice.root.Success)=='false')
                        {
                            msg('INFO',TPOffice.root.Message);
                        }
                        else
                        {
                            taxpayerOffice=TPOffice.root.TaxpayerOffice.OfficeCode;


                            //SETTING LOGIN TBS ATTRIBUTES
                            var LoginTBs={
                                SubmissionNumber:submissionNo,
                                Username:'',
                                Password:'',
                                PAN:pan,
                                Emailid:'',
                                ContactNo:'',
                                submittedFor:param.from=='MAR'?'MAR':'VRET',
                                SubmittedYN:'N',
                                SubmittedDate:Ext.get('nepDate').dom.innerHTML,
                                TranNo:'0',
                                Address:'',
                                RegOffice:taxpayerOffice,
                                VatReturns:objVatReturns,
                                Action:Ext.ComponentQuery.query("#hfMVRAction")[0].getValue()
                            };


                            var frm=Ext.getCmp('frmVatReturns');

                            var form = button.up('form').getForm();
                            if(form)
                            {
                                //console.log(form);
                            }

                            if(form.isValid()){


                                Ext.Ajax.request({
                                    url: '../Handlers/VAT/VatReturnsSubmissionNumberHandler.ashx',
                                    params: {
                                        method:'ValidateManualVatReturns',
                                        LoginTBS: JSON.stringify(LoginTBs)
                                    },
                                    success: function(response){
                                        var JSONResponse=Ext.decode(response.responseText);

                                        if(JSONResponse.success=='true')
                                        {  
                                            var resp=JSONResponse.root.split('&&');

                                            if(resp.length==3)
                                            {

                                                errCode=JSONResponse.root.split('&&')[0];
                                                errDesc=JSONResponse.root.split('&&')[1];
                                                submissionNo=JSONResponse.root.split('&&')[2];

                                                if(param.from=='MAR')
                                                {
                                                    msg('ERROR','तपाईंले बुझाउनु भएको विवरणमा निम्न प्रकारका गलतीहरु छन्।<BR><BR>'+errDesc+'<BR><BR>कृपया गलतीअरू सच्याउनु होला।<BR><BR>तपाईको सब्मिसन नं: <B STYLE="COLOR:RED">'+submissionNo+'</B><BR><BR>तपाई यो विवरण सब्मित गर्न चाहनुहुन्छ?');
                                                    return;
                                                }
                                                else
                                                {

                                                    Ext.Msg.show({
                                                        title:'INFO',
                                                        msg: '* तपाईंले बुझाउनु भएको विवरणमा निम्न प्रकारका गलतीहरु छन्।<BR>तपाईको गलतिहरू.... '+errDesc+'<BR><BR>तपाईको सब्मिसन नं :  <B STYLE="COLOR:RED">'+submissionNo+'<\B><BR><BR>तपाई यो विवरण सब्मित गर्न सक्नुहुन्न?',
                                                        buttons: Ext.Msg.YESNO,
                                                        fn: function (btn){

                                                            if(btn=='yes'){     
                                                                //Submit Manual Vat Returns With Error Message


                                                                Ext.Ajax.request({
                                                                    url: '../Handlers/VAT/VatReturnsSubmissionNumberHandler.ashx',
                                                                    params: {
                                                                        method:'SubmitManualVatReturnsError',
                                                                        submissionNo: submissionNo,
                                                                        EM:'VMRETURN',
                                                                        errMsg: errCode
                                                                    },
                                                                    success: function(response){
                                                                        var JSONResponse=Ext.decode(response.responseText);
                                                                        //console.log(JSONResponse.root);
                                                                        if(JSONResponse.root===true)
                                                                        {
                                                                            var fp=Ext.ComponentQuery.query('#frmManualVatReturns')[0];
                                                                            fp.getForm().reset();


                                                                            //RESET DEFAULTS
                                                                            Ext.ComponentQuery.query("#hfMVRAction")[0].setValue('A');
                                                                            var txtAcctType=Ext.ComponentQuery.query("#txtAccountType")[0];
                                                                            txtAcctType.setValue('00');
                                                                            Ext.ComponentQuery.query('#txtRecDate')[0].setValue(Ext.get('nepDate').dom.innerHTML);

                                                                            msg('INFO','तपाईंको विवरण सफलतापुर्वक सब्मित भयो।<BR>तपाईको सब्मिसन नं :  <B STYLE="COLOR:RED">'+submissionNo+'</B>');
                                                                        }

                                                                    }
                                                                });
                                                            }
                                                            else
                                                            {
                                                                Ext.ComponentQuery.query('#txtSubmissionNo')[0].setValue(submissionNo);
                                                                Ext.ComponentQuery.query("#hfMVRAction")[0].setValue('E');

                                                            }

                                                        },
                                                        icon: Ext.Msg.INFO
                                                    });
                                                }
                                            }
                                            else
                                            {
                                                submissionNo=JSONResponse.root.split('&&')[0];
                                                var fp=Ext.ComponentQuery.query('#frmManualVatReturns')[0];
                                                fp.getForm().reset();


                                                //RESET DEFAULTS
                                                Ext.ComponentQuery.query("#hfMVRAction")[0].setValue('A');
                                                var txtAcctType=Ext.ComponentQuery.query("#txtAccountType")[0];
                                                txtAcctType.setValue('00');
                                                GetNepaliDate(function(nepaliDate){
                                                    Ext.ComponentQuery.query('#txtRecDate')[0].setValue(nepaliDate);
                                                });
                                                Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].setValue('');
                                                Ext.ComponentQuery.query('#lblViewSuspensionReasons')[0].setVisible(false);
                                                msg('INFO','तपाईंको विवरण सफलतापुर्वक सब्मित भयो।<BR>तपाईको सब्मिसन नं :  <B STYLE="COLOR:RED">'+submissionNo+'<\B>');



                                            }
                                        }
                                    }


                                });
                            }
                        }
                    }
                });


            }



        }


    },

    onBtnSaveVatReturnsClick: function(button, e, eOpts) {
        var objParam = Ext.ComponentQuery.query('#ManualVatReturns')[0];
        var param='';
        if (objParam.extraParam)
        {
            param = objParam.extraParam.params;

        }


        var me=this;
        var strMessage='';
        var pan=Ext.ComponentQuery.query("#txtPan")[0].getValue();
        var submissionNo=Ext.ComponentQuery.query("#txtSubmissionNo")[0].getValue();
        var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
        var filePer=Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue();
        var period=Ext.ComponentQuery.query("#ddlPeriod")[0].getValue();

        //console.log(submissionNo);

        var userActivity={
            ApplicationID:'VAT',
            ModuleID:'VMRETURN',
            UserID:'ITS',
            Action:'SAVE'
        };

        LogUserActivity(userActivity);



        //Validating Pan
        if(pan===''||pan===null)
        {
            strMessage+='<BR>* तपाईंले प्यान अनिबार्य रूपमा भर्नु पर्नेछ।';
        }
        else
        {
            var isValid=ValidatePan(pan,'00');
            if(isValid===false)
            {
                strMessage+='<BR>* तपाईंले भर्नु भएको प्यान नं मिलेन।';
                //return;
            }
        }

        //Validating Taxyear
        if(taxyear===''|| taxyear===null)
        {
            strMessage+='<BR>* तपाईंले कर वर्ष अनिवार्य रूपमा भर्नु पर्नेछ।';
        }
        else
        {
            if(Ext.ComponentQuery.query('#hdnVTaxyear')[0].getValue()==='INVALID')
            {
                strMessage+='<BR>* तपाईंले भर्नु भएको कर वर्ष मिलेन।';
            }
        }

        if(filePer===''||filePer===null)
        {
            strMessage+='<BR>* तपाईंले मा.\\ चौ. \\ व्दै अनिवार्य रूपमा छान्नु पर्नेछ।';
        }

        if(period===''||period===null)
        {
            strMessage+='<BR>* महिना अनिवार्य रूपमा छान्नु पर्नेछ।';
        }


        if(Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].getValue()==='INVALID')
        {
            strMessage+='<BR>* तपाईंले भर्नुभएको फाइलिंग पिरियड मिलेन।';
        }




        if(strMessage!=='')
        {
            msg('INFO',strMessage);
            return;
        }
        else
        {


            var from=Ext.ComponentQuery.query('#hdnActionType')[0].getValue();


            if(from=='AU')
            {

                //SETTING VAT RETURN ATTRIBUTES
                var objVatReturns={
                    RequestNo:Ext.ComponentQuery.query('#txtSubmissionNo')[0].getValue(),
                    OffCodeAU:Ext.ComponentQuery.query('#hdnAUOffCode')[0].getValue(),
                    PAN:pan,
                    AcctType : Ext.ComponentQuery.query("#txtAccountType")[0].getValue(),
                    TaxYear : Number(Ext.ComponentQuery.query("#txtTaxYear")[0].getValue()),
                    FilePer : Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue(),
                    Period : Number(Ext.ComponentQuery.query("#ddlPeriod")[0].getValue()),
                    RecDate : Ext.ComponentQuery.query("#txtRecDate")[0].getValue(),
                    TaxableSale : Number(Ext.ComponentQuery.query("#txtTaxableSale")[0].getValue()),
                    VATOnSale : Number(Ext.ComponentQuery.query("#txtVatOnSale")[0].getValue()),
                    VATOnPur : Number(Ext.ComponentQuery.query("#txtVatOnPurchase")[0].getValue()),
                    TaxablePurI : Number(Ext.ComponentQuery.query("#txtTaxablePurI")[0].getValue()),
                    VATOnPurI : Number(Ext.ComponentQuery.query("#txtVatOnPurI")[0].getValue()),
                    ExemptSale : Number(Ext.ComponentQuery.query("#txtExemptSale")[0].getValue()),
                    TaxablePurchase : Number(Ext.ComponentQuery.query("#txtTaxablePurchase")[0].getValue()),
                    ExemptPur : Number(Ext.ComponentQuery.query("#txtExemptPurchase")[0].getValue()),
                    ExemptPurI : Number(Ext.ComponentQuery.query("#txtExemptPurI")[0].getValue()),
                    CreditBF : Number(Ext.ComponentQuery.query("#txtCreditBF")[0].getValue()),
                    TDStockAmount : 0,
                    TDStockTax : 0,
                    AdjCredit : Number(Ext.ComponentQuery.query("#txtAdjCredit")[0].getValue()),
                    AdjDebit : Number(Ext.ComponentQuery.query("#txtAdjDebit")[0].getValue()),
                    Export : Number(Ext.ComponentQuery.query("#txtExport")[0].getValue()),
                    Penalty : 0,
                    Interest : 0,
                    TotalCredit : Number(Ext.ComponentQuery.query("#txtTotalCredit")[0].getValue()),
                    TotalDebit : Number(Ext.ComponentQuery.query("#txtTotalDebit")[0].getValue()),
                    TotalVatTM : Number(Ext.ComponentQuery.query("#txtVatDueTM")[0].getValue()),
                    VATDue : Number(Ext.ComponentQuery.query("#txtVatDue")[0].getValue()),
                    RefClaimAmt : Number(Ext.ComponentQuery.query("#txtRefClaimAmt")[0].getValue()),
                    TranDate : Ext.get('nepDate').dom.innerHTML,
                    RTType : 'RT',
                    BatchNo : '',
                    UserID : '',
                    RBID : Ext.ComponentQuery.query("#ddlReferenceBasis")[0].getValue(),
                    TranNo:Ext.ComponentQuery.query('#hdnTranNo')[0].getValue(), 
                    Action : Ext.ComponentQuery.query("#hfMVRAction")[0].getValue(),
                    Status:'I'
                };







                Ext.Ajax.request({
                    url: '../Handlers/VAT/VatReturnsHandler.ashx',
                    params: {method:'SaveVatReturnsAU',vatReturns: JSON.stringify(objVatReturns)},
                    success: function(response){
                        var JSONResponse=Ext.decode(response.responseText);
                        if(JSONResponse.success=='true')
                        {  
                            msg('INFO','* तपाईंको विवरण सफलतापुर्ण सेभ भयो।');
                        }

                    }
                });
            }
            else
            {
                var TPOFfice;

                Ext.Ajax.request({
                    url: '../Handlers/Registration/Taxpayer/TaxpayerHandler.ashx',
                    params: {
                        method:'GetTaxpayerCurrOffice',
                        pan: pan,
                        acctType:'00',
                        id: 1
                    },
                    success: function(taxpayerCurrOffice){
                        TPOffice =Ext.decode( taxpayerCurrOffice.responseText);

                        if(JSON.stringify(TPOffice.root.Success)=='false')
                        {
                            msg('INFO',TPOffice.root.Message);
                        }
                        else
                        {

                            //SETTING VAT RETURN ATTRIBUTES
                            var objVatReturns={
                                SubmissionNumber:submissionNo,
                                AcctType : Ext.ComponentQuery.query("#txtAccountType")[0].getValue(),
                                TaxYear : Number(Ext.ComponentQuery.query("#txtTaxYear")[0].getValue()),
                                FilePer : Ext.ComponentQuery.query("#ddlFilingPeriod")[0].getValue(),
                                Period : Number(Ext.ComponentQuery.query("#ddlPeriod")[0].getValue()),
                                RecDate : Ext.ComponentQuery.query("#txtRecDate")[0].getValue(),
                                TaxableSale : Number(Ext.ComponentQuery.query("#txtTaxableSale")[0].getValue()),
                                VATOnSale : Number(Ext.ComponentQuery.query("#txtVatOnSale")[0].getValue()),
                                VATOnPur : Number(Ext.ComponentQuery.query("#txtVatOnPurchase")[0].getValue()),
                                TaxablePurI : Number(Ext.ComponentQuery.query("#txtTaxablePurI")[0].getValue()),
                                VATOnPurI : Number(Ext.ComponentQuery.query("#txtVatOnPurI")[0].getValue()),
                                ExemptSale : Number(Ext.ComponentQuery.query("#txtExemptSale")[0].getValue()),
                                TaxablePurchase : Number(Ext.ComponentQuery.query("#txtTaxablePurchase")[0].getValue()),
                                ExemptPur : Number(Ext.ComponentQuery.query("#txtExemptPurchase")[0].getValue()),
                                ExemptPurI : Number(Ext.ComponentQuery.query("#txtExemptPurI")[0].getValue()),
                                CreditBF : Number(Ext.ComponentQuery.query("#txtCreditBF")[0].getValue()),
                                TDStockAmount : 0,
                                TDStockTax : 0,
                                AdjCredit : Number(Ext.ComponentQuery.query("#txtAdjCredit")[0].getValue()),
                                AdjDebit : Number(Ext.ComponentQuery.query("#txtAdjDebit")[0].getValue()),
                                Export : Number(Ext.ComponentQuery.query("#txtExport")[0].getValue()),
                                Penalty : 0,
                                Interest : 0,
                                TotalCredit : Number(Ext.ComponentQuery.query("#txtTotalCredit")[0].getValue()),
                                TotalDebit : Number(Ext.ComponentQuery.query("#txtTotalDebit")[0].getValue()),
                                TotalVatTM : Number(Ext.ComponentQuery.query("#txtVatDueTM")[0].getValue()),
                                VATDue : Number(Ext.ComponentQuery.query("#txtVatDue")[0].getValue()),
                                RefClaimAmt : Number(Ext.ComponentQuery.query("#txtRefClaimAmt")[0].getValue()),
                                TranDate : Ext.get('nepDate').dom.innerHTML,
                                RTType : 'RT',
                                OffCode : Ext.get('offCode').dom.innerHTML,
                                BatchNo : '',
                                UserID : '',
                                RBID : Ext.ComponentQuery.query("#ddlReferenceBasis")[0].getValue(),
                                Status:'I',
                                EM:param.from=='MAR'?'MAR':'VRETURN',
                                Action : Ext.ComponentQuery.query("#hfMVRAction")[0].getValue()
                            };



                            //SETTING LOGIN TBS ATTRIBUTES
                            var LoginTBs={
                                SubmissionNumber:submissionNo,
                                Username:'',
                                Password:'',
                                PAN:pan,
                                Emailid:'',
                                ContactNo:'',
                                submittedFor:param.from=='MAR'?'MAR':'VRET',
                                SubmittedYN:'N',
                                SubmittedDate:Ext.get('nepDate').dom.innerHTML,
                                TranNo:'0',
                                Address:'',
                                RegOffice:TPOffice.root.TaxpayerOffice.OfficeCode,
                                VatReturns:objVatReturns,
                                Action:Ext.ComponentQuery.query("#hfMVRAction")[0].getValue()
                            };




                            Ext.Ajax.request({
                                url: '../Handlers/VAT/VatReturnsSubmissionNumberHandler.ashx',
                                params: {method:'SaveSubmissionNoWithVatReturns',LoginTBS: JSON.stringify(LoginTBs)},
                                success: function(response){
                                    var JSONResponse=Ext.decode(response.responseText);
                                    console.log(JSONResponse);
                                    if(JSONResponse.success=='true')
                                    {  


                                        var fp=Ext.ComponentQuery.query('#frmManualVatReturns')[0];
                                        fp.getForm().reset();


                                        //RESET DEFAULTS
                                        Ext.ComponentQuery.query("#hfMVRAction")[0].setValue('A');
                                        var txtAcctType=Ext.ComponentQuery.query("#txtAccountType")[0];
                                        txtAcctType.setValue('00');
                                        GetNepaliDate(function(nepaliDate){
                                            Ext.ComponentQuery.query('#txtRecDate')[0].setValue(nepaliDate);
                                        });
                                        Ext.ComponentQuery.query('#hdnVFilingPeriod')[0].setValue('');
                                        Ext.ComponentQuery.query('#lblViewSuspensionReasons')[0].setVisible(false);

                                        msg('INFO','* तपाईंको विवरण सफलतापुर्ण सेभ भयो।<BR>कृपया सब्मिसन नं टिप्नु होला।<BR><BR>तपाईको सब्मिसन नं : <B STYLE="COLOR:RED">'+JSONResponse.root+'<\B>');

                                    }

                                }
                            });


                        }

                    }
                });
            }

        }
    },

    msg: function(title, message) {
        var rqdIcon = Ext.MessageBox.INFO;

        if(title == "FAILURE")
        rqdIcon = Ext.Msg.ERROR;
        else if(title == "WARNING")
        rqdIcon = Ext.Msg.WARNING;

        Ext.Msg.show({
            title: title,
            msg: message ,
            buttons: Ext.MessageBox.OK,
            icon: rqdIcon
        });
    },

    ValidateTaxyear: function(callback) {

        var currDate=null;
        var isValid='true';

        //var ret;
        Ext.Ajax.request({
            url: '../Handlers/Common/DateHandler.ashx?method=GetDates',
            params:{},
            success: function (result, request ) {
                currDate=result.responseText;



                var currentYear=Ext.decode(currDate).root.NepaliDate.split('.')[0];
                var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
                if(taxyear<2054 || taxyear>currentYear)
                {
                    isValid='false';
                }

                callback(isValid);



            }
        });



        /*
        var isValid='true';
        var currentYear=Ext.decode(currDate).root.NepaliDate.split('.')[0];
        var taxyear=Ext.ComponentQuery.query("#txtTaxYear")[0].getValue();
        if(taxyear<2054 || taxyear>currentYear)
        {
        isValid='false';
        }

        callback(isValid);
        */
        //me.msg('INFO','Invalid Tax Year! \n\tTax Year Should be Betweem 2054 and CurrentYear ('+taxyear+')');
        //return isValid;

    },

    CalculateTotalCredit: function(amtVatOnPurchase, amtVatOnPurI, amtAdjCredit) {
        //alert(Number(amtVatOnPurI));
        //alert(Number(amtVatOnPurchase));
        Ext.ComponentQuery.query("#txtTotalCredit")[0].setValue(Number(amtVatOnPurchase)+Number(amtVatOnPurI)+Number(amtAdjCredit));
    },

    CalculateVatDueTM: function(amtTotalDebit, amtTotalCredit) {

        Ext.ComponentQuery.query("#txtVatDueTM")[0].setValue(Number(amtTotalDebit)-Number(amtTotalCredit));
    },

    CalculateTotalDebit: function(amtVatOnSale, amtAdjDebit) {

        Ext.ComponentQuery.query("#txtTotalDebit")[0].setValue(Number(amtVatOnSale)+Number(amtAdjDebit));
    },

    CalculateVatDue: function(amtVatDueTM, amtCreditBF) {
        Ext.ComponentQuery.query("#txtVatDue")[0].setValue(Number(amtVatDueTM)-Number(amtCreditBF));
    },

    GetCreditBF: function() {

        var creditBF;
        Ext.Ajax.request({
            url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
            params: {
                method:'GetCreditBF',
                pan:pan,
                acctType:acctType,
                taxyear:taxyear,
                fileper: fileper,
                period:period
            },
            async:false,
            success: function(response){
                var rt=Ext.decode(response.responseText);
                creditBF=rt.message;
            }
        });

        //alert(creditBF);
        return creditBF;
    },

    GetStartOrEndDate: function(filePer, taxyear, Period, StartOrEndDate) {
        var me=this;
        var retDate;
        var method;

        if(StartOrEndDate=='S')
        {
            method="GetFilePerStartDate";
        }
        else
        {
            method="GetFilePerEndDate";
        }



        Ext.Ajax.request({
            url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
            params: {
                method:method,
                filePeriod: filePer,
                taxyear:taxyear,
                period:Period
            },
            async:false,
            success: function(response){
                var date=Ext.decode(response.responseText);
                if(date.success=='False')
                {
                    me.msg('INFO',date.message);
                    retDate='';
                }
                else
                {
                    retDate=date.message;
                }

            }
        });

        return retDate;

    },

    GetRate: function(acctType, field, date) {
        var rate;

        Ext.Ajax.request({
            url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
            params: {
                method:'GetRate',
                acctType:acctType,
                field: field,
                date:date
            },
            async:false,
            success: function(response){
                rate=Ext.decode(response.responseText);


            }
        });
        return rate.message;
    },

    LoadVatReturns: function(submissionNo) {


        //LOAD VAT RETURNS DETAILS
        Ext.Ajax.request({
            url: '../Handlers/Vat/VatReturnsHandler.ashx?method=GetVatReturn',
            params: {SubNo:submissionNo
            },
            success: function(response){
                var TaxpayerInfo =Ext.decode( response.responseText);
                if(TaxpayerInfo.root!=='')
                {
                    Ext.ComponentQuery.query('#txtSubmissionNo')[0].setValue(submissionNo);

                    //Set Taxpayer Year Month Details
                    Ext.ComponentQuery.query("#txtTaxYear")[0].setValue(TaxpayerInfo.root.TaxYear);
                    Ext.ComponentQuery.query("#ddlFilingPeriod")[0].setValue(TaxpayerInfo.root.FilePer);
                    Ext.ComponentQuery.query("#ddlPeriod")[0].setValue(TaxpayerInfo.root.Period);


                    //Set Taxpayer Transaction Details
                    Ext.ComponentQuery.query("#txtTaxableSale")[0].setValue(TaxpayerInfo.root.TaxableSale);
                    Ext.ComponentQuery.query("#txtVatOnSale")[0].setValue(TaxpayerInfo.root.VATOnSale);
                    Ext.ComponentQuery.query("#txtExport")[0].setValue(TaxpayerInfo.root.Export);
                    Ext.ComponentQuery.query("#txtExemptSale")[0].setValue(TaxpayerInfo.root.ExemptSale);
                    Ext.ComponentQuery.query("#txtTaxablePurchase")[0].setValue(TaxpayerInfo.root.TaxablePurchase);
                    Ext.ComponentQuery.query("#txtVatOnPurchase")[0].setValue(TaxpayerInfo.root.VATOnPur);
                    Ext.ComponentQuery.query("#txtTaxablePurI")[0].setValue(TaxpayerInfo.root.TaxablePurI);
                    Ext.ComponentQuery.query("#txtVatOnPurI")[0].setValue(TaxpayerInfo.root.VATOnPurI);
                    Ext.ComponentQuery.query("#txtExemptPurchase")[0].setValue(TaxpayerInfo.root.ExemptPur);
                    Ext.ComponentQuery.query("#txtExemptPurI")[0].setValue(TaxpayerInfo.root.ExemptPurI);
                    Ext.ComponentQuery.query("#txtAdjCredit")[0].setValue(TaxpayerInfo.root.AdjCredit);
                    Ext.ComponentQuery.query("#txtAdjDebit")[0].setValue(TaxpayerInfo.root.AdjDebit);
                    Ext.ComponentQuery.query("#txtCreditBF")[0].setValue(TaxpayerInfo.root.CreditBF);
                    Ext.ComponentQuery.query("#txtRefClaimAmt")[0].setValue(TaxpayerInfo.root.RefClaimAmt);
                    Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setValue(TaxpayerInfo.root.RBID);
                    Ext.ComponentQuery.query('#txtRecDate')[0].setValue(TaxpayerInfo.root.RecDate);
                    Ext.getCmp("hfMVRAction").setValue(TaxpayerInfo.root.Action);
                }       
                else
                {
                    Ext.getCmp("hfMVRAction").setValue("A");

                }
            }
        });
    },

    LoadVatReturnsAU: function(returns) {
        if(returns.root!=='')
        {
            //Ext.ComponentQuery.query('#txtSubmissionNo')[0].setValue(submissionNo);

            //Set Taxpayer Year Month Details
            Ext.ComponentQuery.query('#txtRecDate')[0].setValue(returns.root.RecDate);
            Ext.ComponentQuery.query("#txtTaxYear")[0].setValue(returns.root.TaxYear);
            Ext.ComponentQuery.query("#ddlFilingPeriod")[0].setValue(returns.root.FilePer);
            Ext.ComponentQuery.query("#ddlPeriod")[0].setValue(returns.root.Period);


            //Set Taxpayer Transaction Details
            Ext.ComponentQuery.query("#txtTaxableSale")[0].setValue(returns.root.TaxableSale);
            Ext.ComponentQuery.query("#txtVatOnSale")[0].setValue(returns.root.VATOnSale);
            Ext.ComponentQuery.query("#txtExport")[0].setValue(returns.root.Export);
            Ext.ComponentQuery.query("#txtExemptSale")[0].setValue(returns.root.ExemptSale);
            Ext.ComponentQuery.query("#txtTaxablePurchase")[0].setValue(returns.root.TaxablePurchase);
            Ext.ComponentQuery.query("#txtVatOnPurchase")[0].setValue(returns.root.VATOnPur);
            Ext.ComponentQuery.query("#txtTaxablePurI")[0].setValue(returns.root.TaxablePurI);
            Ext.ComponentQuery.query("#txtVatOnPurI")[0].setValue(returns.root.VATOnPurI);
            Ext.ComponentQuery.query("#txtExemptPurchase")[0].setValue(returns.root.ExemptPur);
            Ext.ComponentQuery.query("#txtExemptPurI")[0].setValue(returns.root.ExemptPurI);
            Ext.ComponentQuery.query("#txtAdjCredit")[0].setValue(returns.root.AdjCredit);
            Ext.ComponentQuery.query("#txtAdjDebit")[0].setValue(returns.root.AdjDebit);
            Ext.ComponentQuery.query("#txtCreditBF")[0].setValue(returns.root.CreditBF);
            Ext.ComponentQuery.query("#txtRefClaimAmt")[0].setValue(returns.root.RefClaimAmt);
            Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setValue(returns.root.RBID);
            Ext.getCmp("hfMVRAction").setValue(returns.root.Action);
        }       
        else
        {
            Ext.getCmp("hfMVRAction").setValue("A");

        }
    },

    ClearReturnsControls: function(clearPAN) {
        if(clearPAN=='Y')
        {
            Ext.ComponentQuery.query('#txtPan')[0].setValue('');
        }

        Ext.ComponentQuery.query("#lblTaxpayerName")[0].setValue('');
        Ext.ComponentQuery.query("#lblTaxpayerAddress")[0].setValue('');
        Ext.ComponentQuery.query("#lblTaxpayerPhoneNo")[0].setValue('');
        Ext.ComponentQuery.query("#lblTaxpayerFax")[0].setValue('');
        Ext.ComponentQuery.query('#hdnRegistrationDate')[0].setValue('');

        //Set Taxpayer Year Month Details
        Ext.ComponentQuery.query("#txtTaxYear")[0].setValue('');
        Ext.ComponentQuery.query("#ddlFilingPeriod")[0].setValue('');
        Ext.ComponentQuery.query("#ddlPeriod")[0].setValue('');


        //Set Taxpayer Transaction Details
        Ext.ComponentQuery.query("#txtTaxableSale")[0].setValue('');
        Ext.ComponentQuery.query("#txtVatOnSale")[0].setValue('');
        Ext.ComponentQuery.query("#txtExport")[0].setValue('');
        Ext.ComponentQuery.query("#txtExemptSale")[0].setValue('');
        Ext.ComponentQuery.query("#txtTaxablePurchase")[0].setValue('');
        Ext.ComponentQuery.query("#txtVatOnPurchase")[0].setValue('');
        Ext.ComponentQuery.query("#txtTaxablePurI")[0].setValue('');
        Ext.ComponentQuery.query("#txtVatOnPurI")[0].setValue('');
        Ext.ComponentQuery.query("#txtExemptPurchase")[0].setValue('');
        Ext.ComponentQuery.query("#txtExemptPurI")[0].setValue('');
        Ext.ComponentQuery.query("#txtAdjCredit")[0].setValue('');
        Ext.ComponentQuery.query("#txtAdjDebit")[0].setValue('');
        Ext.ComponentQuery.query("#txtCreditBF")[0].setValue('');
        Ext.ComponentQuery.query("#txtRefClaimAmt")[0].setValue('');
        Ext.ComponentQuery.query("#ddlReferenceBasis")[0].setValue('');
        Ext.ComponentQuery.query('#txtRecDate')[0].setValue(Ext.get('nepDate').dom.innerHTML);
        Ext.getCmp("hfMVRAction").setValue('A');
    },

    init: function(application) {
        this.control({
            "#ManualVatReturns": {
                afterrender: this.onManualVatReturnsAfterRender
            },
            "#txtSubmissionNo": {
                blur: this.onTxtSubmissionNoBlur
            },
            "#txtPan": {
                blur: this.onTxtPanBlur
            },
            "#txtTaxYear": {
                blur: this.onTxtTaxYearBlur
            },
            "#ddlFilingPeriod": {
                change: this.onDdlFilingPeriodChange,
                keyup: this.onDdlFilingPeriodKeyup
            },
            "#ddlPeriod": {
                change: this.onDdlPeriodChange,
                keyup: this.onDdlPeriodKeyup
            },
            "#txtVatOnSale": {
                change: this.onTxtVatOnSaleChange,
                blur: this.onTxtVatOnSaleBlur
            },
            "#txtVatOnPurchase": {
                change: this.onTxtVatOnPurchaseChange
            },
            "#txtVatOnPurI": {
                change: this.onTxtVatOnPurIChange
            },
            "#txtTotalCredit": {
                change: this.onTxtTotalCreditChange
            },
            "#txtTotalDebit": {
                change: this.onTxtTotalDebitChange
            },
            "#txtAdjCredit": {
                change: this.onTxtAdjCreditChange
            },
            "#txtAdjDebit": {
                change: this.onTxtAdjDebitChange
            },
            "#txtVatDueTM": {
                change: this.onTxtVatDueTMChange
            },
            "#txtCreditBF": {
                change: this.onTxtCreditBFChange
            },
            "#txtRefClaimAmt": {
                blur: this.onTxtRefClaimAmtBlur,
                change: this.onTxtRefClaimAmtChange
            },
            "#btnVerify": {
                click: this.onBtnVerifyClick
            },
            "#btnMVRBack": {
                click: this.onBtnMVRBackClick
            },
            "#txtRecDate": {
                blur: this.onTxtRecDateBlur
            },
            "#btnPrintVatReturns": {
                click: this.onBtnPrintVatReturnsClick
            },
            "#lblViewSuspensionReasons": {
                click: this.onLblViewSuspensionReasonsClick
            },
            "#btnSubmitVatReturns": {
                click: this.onBtnSubmitVatReturnsClick
            },
            "#btnSaveVatReturns": {
                click: this.onBtnSaveVatReturnsClick
            }
        });
    }

});
