/*
 * File: app/controller/AuthorizedUpdate.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.AuthorizedUpdate', {
    extend: 'Ext.app.Controller',

    stores: [
        'AuthUpdateApplicationStore',
        'AuthUpdateEntityStore',
        'AuthUpdatePKsStore',
        'AUUPdateFieldStore'
    ],

    onFrmAuthorizedUpdateAfterRender: function(component, eOpts) {
        var me =this;


        var objParam = Ext.ComponentQuery.query('#AuthorizedUpdate')[0];
        Ext.ComponentQuery.query('#hdnAUAction')[0].setValue('A');
        Ext.ComponentQuery.query('#hdnAUFrom')[0].setValue('AU');

        var es=Ext.getStore('AuthUpdateEntityStore');
        es.removeAll();

        var pks=Ext.getStore('AuthUpdatePKsStore');
        pks.removeAll();

        var fs=Ext.getStore('AUUPdateFieldStore');
        fs.removeAll();


        if(objParam.extraParam)
        {
            var param = objParam.extraParam.params;

            if(param.from=='MV')
            {
                var tranNo=param.tranNo;
                Ext.ComponentQuery.query('#hdnAUFrom')[0].setValue('MV');

                Ext.Ajax.request({
                    url: '../Handlers/Common/AuthUpdate/AuthUpdatessHandler.ashx?method=GetAuthUpdateByTran',
                    params: {tranNo:tranNo},
                    success: function(response){
                        var obj =Ext.decode( response.responseText);
                        var au=obj.root;
                        if(au)
                        {
                            if(au.Status!='F')
                            {
                                msg('INFO','Authorized Update Not Submitted.<BR>You Cannot Verify the Information');
                                return;
                            }
                            else if(au.Status=='V')
                            {
                                msg('INFO','Authorized Update Already Verified.<BR>You Cannot Verify the Information');
                                return;
                            }
                            else
                            {

                                Ext.ComponentQuery.query('#hdnAUAction')[0].setValue('V');
                                Ext.ComponentQuery.query('#btnAUGo')[0].enable(true);

                                me.SetAuthUpdateControls(au);

                                var frmAU=Ext.ComponentQuery.query('#AuthorizedUpdate')[0];
                                frmAU.query('.field,.combo').forEach(function(c){c.setReadOnly(true);});
                                //frmAU.query('.grid').forEach(function(c){ c.on('beforeedit', function(editor, e) { return false;});});
                                Ext.ComponentQuery.query('#btnAUCheck')[0].disable();

                            }


                        }



                    }
                });

            }

        }
        else
        {
            Ext.ComponentQuery.query('#rdbAUEdit')[0].setValue(true); 
            var frmAU=Ext.ComponentQuery.query('#AuthorizedUpdate')[0];
            frmAU.query('.field,.combo').forEach(function(c){c.setReadOnly(true);});
            //frmAU.query('.grid').forEach(function(c){ c.on('beforeedit', function(editor, e) { return false;});});

            Ext.ComponentQuery.query('#txtAURequestNo')[0].setReadOnly(false);
            Ext.ComponentQuery.query('#btnAUCheck')[0].disable(); 
            Ext.ComponentQuery.query('#btnAUFieldsAdd')[0].disable();


        }
    },

    onDdlAUApplicationChange: function(field, newValue, oldValue, eOpts) {


        var me=this;

        var applId=Ext.ComponentQuery.query('#ddlAUApplication')[0].getValue();

        if(!applId)
        {
            Ext.ComponentQuery.query('#ddlAUEntity')[0].setReadOnly(true);
            return;
        }
        else
        {

            var pks=Ext.getStore('AuthUpdatePKsStore');
            pks.removeAll();
            //pks.load([],false);






            me.LoadEntities(applId,null);

        }
    },

    onDdlAUEntityChange: function(field, newValue, oldValue, eOpts) {
        var applId=Ext.ComponentQuery.query('#ddlAUApplication')[0].getValue();

        var combobox=Ext.ComponentQuery.query('#ddlAUEntity')[0];
        var value = combobox.getValue();

        if(!value)
        {
            return;
        }
        var store = Ext.getStore('AuthUpdateEntityStore');
        var items = store.data.items;

        var record = combobox.findRecord(combobox.valueField || combobox.displayField, value);
        var index = combobox.store.indexOf(record);



        //var entity=Ext.ComponentQuery.query('#ddlAUEntity')[0].getValue();
        var entity=items[index].data.Value;



        //var applId=Ext.ComponentQuery.query('#ddlAUApplication')[0].getValue();

        if(!entity|| entity=="Select")
        {
            var strPS = Ext.getStore('AuthUpdatePKsStore');
            strPS.removeAll();
            return;
        }



        var auAction=Ext.ComponentQuery.query('#hdnAUAction')[0].getValue();

        if(auAction=='A')
        {

            var strPS = Ext.getStore('AuthUpdatePKsStore');
            strPS.removeAll();
            Ext.Ajax.request({
                url: '../Handlers/Common/AuthUpdate/AuthUpdatePKsHandler.ashx',
                params: {method:'GetAuthUpdatePKs',applicationId:applId,entity:entity,seqNo:null },
                success: function(response){
                    var JSONResponse=Ext.decode(response.responseText);
                    var visitSelection=JSONResponse.root;
                    if(JSONResponse.success=='true')
                    {  

                        strPS.add(JSONResponse.root);
                    }
                }
            });
            Ext.ComponentQuery.query('#btnAUCheck')[0].enable();
        }
    },

    onBtnAUCheckClick: function(button, e, eOpts) {
        var store='';
        var i;
        var queryCondition=' ';


        var combobox=Ext.ComponentQuery.query('#ddlAUEntity')[0];
        var value = combobox.getValue();


        var store1 = Ext.getStore('AuthUpdateEntityStore');
        var items1 = store1.data.items;

        var record = combobox.findRecord(combobox.valueField || combobox.displayField, value);
        var index = combobox.store.indexOf(record);



        //var entity=Ext.ComponentQuery.query('#ddlAUEntity')[0].getValue();
        var entity=items1[index].data.Value;




        //var entity=Ext.ComponentQuery.query('#ddlAUEntity')[0].getValue();
        var isAllPKsFilled='Y';


        //if(applId==='VMRETURN')
        //{
        store=Ext.getStore('AuthUpdatePKsStore');
        var items = store.data.items;
        var noOfPKs=store.getCount();


        for(i=0;i<noOfPKs;i++)
        {
            if(items[i].data.Value)
            {
                queryCondition+=items[i].data.PrimaryKey+' = ';
                queryCondition+='\''+items[i].data.Value+'\' AND ';
            }
            else
            {
                isAllPKsFilled='N';
                break;
            }
        }
        //queryCondition=queryCondition;
        //}


        if(isAllPKsFilled=='Y')
        {
            Ext.Ajax.request({
                url: '../Handlers/Common/AuthUpdate/AuthUpdatePKsHandler.ashx?method=CheckAURecord',
                params: {applId:entity,condition:queryCondition
                },
                success: function(response){
                    var obj =Ext.decode( response.responseText);
                    if(obj.message=='T')
                    {
                        Ext.ComponentQuery.query('#hdnAUExists')[0].setValue('Y');
                        Ext.ComponentQuery.query('#btnAUGo')[0].enable(true);
                        msg('INFO','* The Record You Want To Edit is Found<BR>  You may Proceed');
                        Ext.ComponentQuery.query('#btnAUFieldsAdd')[0].enable();
                    }       
                    else
                    {
                        Ext.ComponentQuery.query('#hdnAUExists')[0].setValue('N');
                        Ext.ComponentQuery.query('#btnAUGo')[0].disable(true);

                        msg('INFO','* तपाईले सच्याउन खोज्नु भएको विवरण भेटेन।');
                    }
                }
            });
        }
        else
        {
            msg('INFO','Please, Fill All The Primary Key Values');  
        }
    },

    onBtnAUGoClick: function(button, e, eOpts) {
        var me=this;
        var applicationId=Ext.ComponentQuery.query('#ddlAUApplication')[0];
        //var entity=Ext.ComponentQuery.query('#ddlAUEntity')[0];
        var combobox=Ext.ComponentQuery.query('#ddlAUEntity')[0];
        var value = combobox.getValue();


        var store1 = Ext.getStore('AuthUpdateEntityStore');
        var items1 = store1.data.items;

        var record = combobox.findRecord(combobox.valueField || combobox.displayField, value);
        var index = combobox.store.indexOf(record);



        //var entity=Ext.ComponentQuery.query('#ddlAUEntity')[0].getValue();
        var entity=items1[index].data.Value;


        var offCode=Ext.get('offCode').dom.innerHTML;
        var requestNo=Ext.ComponentQuery.query('#txtAURequestNo')[0];
        var requestDate=Ext.ComponentQuery.query('#txtAURequestDate')[0];
        var employeeNo=Ext.ComponentQuery.query('#txtAUEmployeeNo')[0];
        var requestOfficer=Ext.ComponentQuery.query('#txtAURequestedBy')[0];
        var reason=Ext.ComponentQuery.query('#txtAURemarks')[0];
        var authAction=Ext.ComponentQuery.query('#rdbAUEdit')[0].getValue()===true?'E':'D';
        var action=Ext.ComponentQuery.query('#hdnAUAction')[0].getValue();
        var tranNo=Ext.ComponentQuery.query('#hdnAUTranNo')[0].getValue();


        var auFields=(!Ext.getStore('AUUPdateFieldStore'))?null:getJson(Ext.getStore('AUUPdateFieldStore'));
        var auPKs=(!Ext.getStore('AuthUpdatePKsStore'))?null:getJson(Ext.getStore('AuthUpdatePKsStore'));

        var errMsg='';
        if(applicationId.getValue()==='')
        {
            errMsg+='* Please, Select Application<BR>';
        }
        if(requestNo.getValue()==='')
        {
            errMsg+='*Please, Enter Request No';
        }
        if(employeeNo.getValue()==='' && requestOfficer.getValue()==='')
        {
            errMsg+='*Please, Enter Either The Employee No or The Request Officer';
        }
        if(errMsg!=='')
        {
            msg('INFO', errMsg);
            return;
        }
        else
        {


            var authUpdate={
                OffCode:offCode,
                RequestNo:requestNo.getValue(),
                RequestDate:requestDate.getValue(),
                RequestOfficer:requestOfficer.getValue(),
                EmployeeNo:employeeNo.getValue(),
                PAN:'',
                Reason:reason.getValue(),
                AuthAction:authAction,
                EntryDate:Ext.get('nepDate').dom.innerHTML,
                EffectiveDate:'',
                ApplicationId:applicationId.getValue(),
                EntityDetail:entity,
                AuthorizationNo:'',
                Authorizationdate:'',
                AuthorizedBy:'',
                ComputerUpdate:'',
                UpdatedBy:'',
                AuthUpdateFields:auFields,
                AuthUpdatePKs:auPKs,
                TranNo:tranNo?tranNo:null,
                Action:action,
                Status:'I'
            };

            if(action=='V')
            {
                me.RedirectToModule(entity,auPKs);
            }
            else
            {
                Ext.Ajax.request({
                    url: '../Handlers/Common/AuthUpdate/AuthUpdatessHandler.ashx?method=SaveAuthUpdate',
                    params: {authUpdate:JSON.stringify(authUpdate)
                    },
                    success: function(response){

                        var obj =Ext.decode( response.responseText);

                        Ext.ComponentQuery.query('#hdnAUTranNo')[0].setValue(obj.message);

                        me.RedirectToModule(entity,auPKs);


                    }
                });
            }

        }



    },

    onBtnAUFieldsAddClick: function(button, e, eOpts) {
        /*var offCode=Ext.ComponentQuery.query('#txtVRPan')[0];
        var requestNo=Ext.ComponentQuery.query('#txtVRSelectionDate')[0];
        var seqNo=Ext.ComponentQuery.query('#txtVRSelectionDate')[0];
        var fieldName=Ext.ComponentQuery.query('#txtVRSelectionDate')[0];
        var oldValue=Ext.ComponentQuery.query('#txtVRSelectionDate')[0];
        var newValue=Ext.ComponentQuery.query('#txtVRSelectionDate')[0];
        var message='';


        if(pan.getValue()==='')
        {
        message+='<BR>* कृपया पहिला प्यान भर्नुहोला।';

        }

        if(selDate.getValue()==='')
        {
        message+='<BR>* कृपया पहिला छनोट मिति भर्नुहोला।';
        }

        if(message!=='')
        {
        msg('INFO',message);
        return;
        }
        else
        {*/
        var grd = Ext.ComponentQuery.query('#grdAUFields')[0];
        var rec={
            OffCode:Ext.get('offCode').dom.innerHTML,
            RequestNo:Ext.ComponentQuery.query('#txtAURequestNo')[0].getValue(),
            SeqNo:'',
            FieldName:'',
            OldValue:'',
            NewValue:'',
            Action:'A'
        };
        if(grd.store.add(rec))
        {
            var btnAUFields= Ext.ComponentQuery.query('#btnAUFieldsAdd')[0];
            btnAUFields.disable(true);
        }

        var col = grd.headerCt.getHeaderAtIndex(0);
        var recd = grd.store.data.items;
        var record = recd[recd.length-1];
        grd.getPlugin('plugInGrdAUFields').startEdit(record, col);		
        //}
    },

    onTxtAURequestNoBlur: function(component, e, eOpts) {
        var me=this;
        me.LoadAuthUpdate();
        me.LoadAuthUpdate();

    },

    onBtnAUDeleteClick: function(button, e, eOpts) {
        var me=this;
        var applicationId=Ext.ComponentQuery.query('#ddlAUApplication')[0];
        var entity=Ext.ComponentQuery.query('#ddlAUEntity')[0];
        var offCode=Ext.get('offCode').dom.innerHTML;
        var requestNo=Ext.ComponentQuery.query('#txtAURequestNo')[0];

        var errMsg='';
        if(applicationId.getValue()==='')
        {
            errMsg+='* Please, Select Application<BR>';
        }
        if(requestNo.getValue()==='')
        {
            errMsg+='*Please, Enter Request No';
        }
        if(errMsg!=='')
        {
            msg('INFO', errMsg);
            return;
        }
        else
        {

            Ext.Msg.show({
                title:'INFO',
                msg: 'Are You Sure, You Want To Delete This Aurhorized Update? <BR> The Request No is '+requestNo.getValue(),
                buttons: Ext.Msg.YESNO,
                fn: function (btn){
                    if(btn=='yes'){    
                        Ext.Ajax.request({
                            url: '../Handlers/Common/AuthUpdate/AuthUpdatessHandler.ashx?method=DelAuthUpdate',
                            params: {applId:applicationId.getValue(), entity:entity.getValue(),offCode:offCode,requestNo:requestNo.getValue()
                            },
                            success: function(response){
                                msg('INFO','Authorized Update Deleted Successfully.');
                                me.ClearAuthUpdateControls();



                            }
                        });


                    }

                }
            });




        }

    },

    onBtnAUCancelClick: function(button, e, eOpts) {
        var me=this;
        me.ClearAuthUpdateControls();
    },

    ShowVatReturns: function(primaryKeys, ReturnsOrCB) {
        var uiConfig='';
        var menuLink='';
        var offCode=Ext.get('offCode').dom.innerHTML;
        var requestNo=Ext.ComponentQuery.query('#txtAURequestNo')[0].getValue();
        var action=Ext.ComponentQuery.query('#hdnAUAction')[0].getValue();
        var tranNo=Ext.ComponentQuery.query('#hdnAUTranNo')[0].getValue();

        var store=Ext.getStore('AuthUpdatePKsStore');
        var items = store.data.items;

        var pan=items[0].data.Value;
        var acctType=items[1].data.Value;
        var taxyear=items[2].data.Value;
        var filPer=items[3].data.Value;
        var period=items[4].data.Value;
        var editOrDelete='';
        if(Ext.ComponentQuery.query('#rdbAUEdit')[0].getValue()===true)
        {
            editOrDelete='E';
        }
        else if(Ext.ComponentQuery.query('#rdbAUDelete')[0].getValue()===true)
        {
            editOrDelete='D';
        }

        var auFrom=Ext.ComponentQuery.query('#hdnAUFrom')[0].getValue();

        var params={from:'AU',
                offCode:offCode, 
                requestNo:requestNo,
                pan:pan,
                acctType:acctType,
                taxyear:taxyear,
                filPer:filPer,
                period:period,
                auAction:action,
                tranNo:tranNo,
                editOrDelete:editOrDelete
            };



        if(ReturnsOrCB=='VRET')
        {

            uiConfig = {menuLink:'ManualVatReturns',
                pageTitle:'Authorized Updates For Vat Returns'

            };
            menuLink='ManualVatReturns';
        }
        else if(ReturnsOrCB=='CB')
        {
            uiConfig = {menuLink:'ManualCloseOfBusiness',
                pageTitle:'Authorized Updates For Vat Returns'

            };
            menuLink='ManualCloseOfBusiness';

        }

        if(auFrom=='AU')
        {
            DynamicUI(uiConfig,null,{params:params});
        }
        else if(auFrom=='MV')
        {
            var objParam = Ext.ComponentQuery.query('#AuthorizedUpdate')[0].extraParam;
            var win = Ext.getCmp('PopupWindow');
            win.close();
            dynamicPopUp(menuLink,{params:params});
        }


    },

    LoadAuthUpdate: function() {
        var me =this;
        var offCode=Ext.get('offCode').dom.innerHTML;
        var requestNo=Ext.ComponentQuery.query('#txtAURequestNo')[0].getValue();


        Ext.Ajax.request({
            url: '../Handlers/Common/AuthUpdate/AuthUpdatessHandler.ashx?method=GetAuthUpdate',
            params: {offCode:offCode, requestNo:requestNo},
            success: function(response){
                var obj =Ext.decode( response.responseText);
                var au=obj.root;
                if(au)
                {
                    var frmAU=Ext.ComponentQuery.query('#AuthorizedUpdate')[0];
                    if(au.Status=='F')
                    {
                        msg('INFO','Authorized Update Already Submitted.<BR>You Cannot Modify the Information');
                        return;
                    }
                    else if(au.Status=='V')
                    {
                        msg('INFO','Authorized Update Already Verified.<BR>You Cannot Modify the Information');
                        return;
                    }
                    else
                    {

                        Ext.ComponentQuery.query('#hdnAUAction')[0].setValue('E');
                        Ext.ComponentQuery.query('#btnAUGo')[0].enable(true);

                        me.SetAuthUpdateControls(au);



                        Ext.ComponentQuery.query('#btnAUDelete')[0].enable(true);
                    }
                    frmAU.query('.field,.combo').forEach(function(c){c.setReadOnly(true);});
                    //  frmAU.query('.grid').forEach(function(c){ c.on('beforeedit', function(editor, e) { return false;});});
                    Ext.ComponentQuery.query('#txtAURequestNo')[0].setReadOnly(false); 


                }
                else
                {
                    Ext.ComponentQuery.query('#hdnAUAction')[0].setValue('A');
                    me.ClearAuthUpdateControls();
                    me.EnableDisableAUControls('E');
                    Ext.ComponentQuery.query('#ddlAUEntity')[0].setReadOnly(true);

                }


            }
        });





    },

    ClearAuthUpdateControls: function() {
        Ext.ComponentQuery.query('#hdnAUAction')[0].setValue('A');
        Ext.ComponentQuery.query('#hdnAUExists')[0].setValue('N');

        Ext.ComponentQuery.query('#ddlAUApplication')[0].setValue('');

        //Ext.ComponentQuery.query('#txtAURequestNo')[0].setValue('');
        Ext.ComponentQuery.query('#txtAURequestDate')[0].setValue('');
        Ext.ComponentQuery.query('#txtAUEmployeeNo')[0].setValue('');
        Ext.ComponentQuery.query('#txtAURequestedBy')[0].setValue('');
        Ext.ComponentQuery.query('#txtAUEntryDate')[0].setValue('');

        Ext.ComponentQuery.query('#rdbAUEdit')[0].setValue(true);
        Ext.ComponentQuery.query('#txtAURemarks')[0].setValue('');

        Ext.ComponentQuery.query('#ddlAUEntity')[0].setValue('');


        Ext.ComponentQuery.query('#txtAUAuthNo')[0].setValue('');
        Ext.ComponentQuery.query('#txtAUAuthDate')[0].setValue('');
        Ext.ComponentQuery.query('#txtAUAuthEmployeeNo')[0].setValue('');
        Ext.ComponentQuery.query('#txtAUAuthEntryDate')[0].setValue('');
        Ext.ComponentQuery.query('#txtAUAuthAuthorization')[0].setValue('');
        Ext.ComponentQuery.query('#txtAUAuthUser')[0].setValue('');



        Ext.ComponentQuery.query('#btnAUGo')[0].disable(true);
        Ext.ComponentQuery.query('#btnAUDelete')[0].disable(true);


        var es=Ext.getStore('AuthUpdateEntityStore');
        es.removeAll();
        //es.load();


        var pks=Ext.getStore('AuthUpdatePKsStore');
        pks.removeAll();
        //pks.load();

        var fs=Ext.getStore('AUUPdateFieldStore');
        fs.removeAll();
    },

    SetAuthUpdateControls: function(au) {
        var me=this;

        Ext.ComponentQuery.query('#hdnAUTranNo')[0].setValue(au.TranNo);
        Ext.ComponentQuery.query('#txtAURequestNo')[0].setValue(au.RequestNo);

        Ext.ComponentQuery.query('#ddlAUApplication')[0].setValue(au.ApplicationId);
        Ext.ComponentQuery.query('#txtAURequestDate')[0].setValue(au.RequestDate);
        Ext.ComponentQuery.query('#txtAUEmployeeNo')[0].setValue(au.EmployeeNo);
        Ext.ComponentQuery.query('#txtAURequestedBy')[0].setValue(au.RequestOfficer);
        Ext.ComponentQuery.query('#txtAURemarks')[0].setValue(au.Reason);
        Ext.ComponentQuery.query('#txtAUEntryDate')[0].setValue(au.EntryDate);
        if(au.AuthAction=='E')
        {
            Ext.ComponentQuery.query('#rdbAUEdit')[0].setValue(true);
        }
        else if (au.AuthAction=='D')
        {
            Ext.ComponentQuery.query('#rdbAUDelete')[0].setValue(true);
        }


        me.LoadEntities(au.ApplicationId,au.EntityDetail);



        var strUFS = Ext.getStore('AUUPdateFieldStore');
        strUFS.removeAll();
        strUFS.add(au.AuthUpdateFields);


        var strPKS = Ext.getStore('AuthUpdatePKsStore');
        strPKS.removeAll();
        //strPKS.load([],false);
        strPKS.add(au.AuthUpdatePKs);




        /*Ext.ComponentQuery.query('#txtAUAuthNo')[0].setValue(au.AuthorizationNo);
        Ext.ComponentQuery.query('#txtAUAuthDate')[0].setValue(au.AuthorizationDate);
        Ext.ComponentQuery.query('#txtAUAuthEmployeeNo')[0].setValue(au.RequestOfficer);
        Ext.ComponentQuery.query('#txtAUAuthEntryDate')[0].setValue(au.Reason);
        Ext.ComponentQuery.query('#txtAUAuthAuthorization')[0].setValue(au.EntryDate);
        Ext.ComponentQuery.query('#txtAUAuthUser')[0].setValue(au.AuthorizedBy);
        */

    },

    RedirectToModule: function(module, auPKs) {
        var me=this;
        /*if(module=='VMRETURN')
        {
        me.ShowVatReturns(auPKs,'VRET');

        }
        else if(module=='VMCB')
        {
        me.ShowVatReturns(auPKs,'CB');
        }
        else if(module=='VAPPEAL')
        {
        me.ShowVatAppeal();
        }
        */


        var uiConfig='';
        var menuLink='';
        var offCode=Ext.get('offCode').dom.innerHTML;
        var requestNo=Ext.ComponentQuery.query('#txtAURequestNo')[0].getValue();
        var action=Ext.ComponentQuery.query('#hdnAUAction')[0].getValue();
        var tranNo=Ext.ComponentQuery.query('#hdnAUTranNo')[0].getValue();
        var entity=Ext.ComponentQuery.query('#ddlAUEntity')[0].getValue();


        var store=Ext.getStore('AuthUpdatePKsStore');
        var items = store.data.items;



        var editOrDelete='';
        if(Ext.ComponentQuery.query('#rdbAUEdit')[0].getValue()===true)
        {
            editOrDelete='E';
        }
        else if(Ext.ComponentQuery.query('#rdbAUDelete')[0].getValue()===true)
        {
            editOrDelete='D';
        }

        var auFrom=Ext.ComponentQuery.query('#hdnAUFrom')[0].getValue();

        var params={from:'AU',
                offCode:offCode, 
                requestNo:requestNo,
                auAction:action,
                tranNo:tranNo,
                editOrDelete:editOrDelete,
                pks:items
            };



        var pan_no      = params.pks[0].get('Value');
        var request_no  = params.requestNo;
        var office_code = params.offCode;

        if(auFrom=='AU')
        {
            if(module=="RegistrationAU")
            {

                uiConfig = {menuLink:'RegAUMainPage',pageTitle:'Authorized Update Of Registration'};

                DynamicUI(uiConfig,null,{pan_no:pan_no,request_no:request_no,office_code:office_code,action:action});
            }
            else
            {
                uiConfig = {menuLink:entity,
                    pageTitle:'Authorized Update'
                };

                DynamicUI(uiConfig,null,{params:params});
            }
        }
        else if(auFrom=='MV')
        {
            if(module=="RegistrationAU")
            {   
                Ext.Ajax.request({
                    url:"../Handlers/Registration/RegistrationsForHandler.ashx?method=GetRegistrationsForsAU",
                    params:{pan_no:pan_no},
                    success: function ( result, request ) { 
                        var obj = Ext.decode(result.responseText);             
                        var arr=[];
                        var dta=obj.root;


                        if(dta.length>0)
                        {            
                            for(var c=0;c<dta.length;c++)
                            {
                                if(dta[c].RegFor=="PPAN")
                                { 
                                    arr.push(dta[c].RegFor);
                                }
                                else if(dta[c].RegFor=="ITAX")
                                {
                                    arr.push(dta[c].RegFor);
                                }
                                else if(dta[c].RegFor=="VAT")
                                {
                                    arr.push(dta[c].RegFor);
                                }
                                else if(dta[c].RegFor=="EXCS")
                                {                                       
                                    arr.push(dta[c].RegFor);
                                }
                            } 

                            var win = Ext.getCmp('PopupWindow');
                            win.close();

                            var winPopup = Ext.create('MyApp.view.PopupWindow',{
                                autoScroll:true,
                                width:1300,
                                height:550,
                                draggable:false,
                                maximizable:false,
                                minimizable:false,
                                resizable:false,
                                modal:true,
                                title:"",
                                y:50,
                                layout:'fit'
                            });       



                            winPopup.extraParam={RegistrationForAU:arr,pan_no:pan_no,request_no:request_no,office_code:office_code};
                            //winPopup.removeAll();
                            winPopup.show();
                        }  
                        else
                        {
                            msg("WARNING","No Data Found!!!");
                        }
                    },
                    failure: function ( result, request ) {
                        msg("FAILURE","Error in Fetching Data !!!");
                    }
                });

            }
            else
            {
                menuLink=entity;
                var objParam = Ext.ComponentQuery.query('#AuthorizedUpdate')[0].extraParam;
                var win = Ext.getCmp('PopupWindow');
                win.close();
                dynamicPopUp(menuLink,{params:params});
            }            


        }


        /*
        if(auFrom=='AU')
        {
        uiConfig = {menuLink:entity,
        pageTitle:'Authorized Update'
        };

        DynamicUI(uiConfig,null,{params:params});
        }
        else if(auFrom=='MV')
        {
        menuLink=entity;
        var objParam = Ext.ComponentQuery.query('#AuthorizedUpdate')[0].extraParam;
        var win = Ext.getCmp('PopupWindow');
        win.close();
        dynamicPopUp(menuLink,{params:params});

        }
        */
    },

    LoadEntities: function(applId,entity) {
        var strES = Ext.getStore('AuthUpdateEntityStore');
        strES.removeAll();
        //strES.load([],false); 

        Ext.Ajax.request({
            url: '../Handlers/Common/AuthUpdate/AuthUpdatePKsHandler.ashx',
            params: {method:'GetAUEntities',applicationId:applId,entity:null },
            success: function(response){
                var JSONResponse=Ext.decode(response.responseText);
                var visitSelection=JSONResponse.root;
                if(JSONResponse.success=='true')
                {  

                    strES.add(JSONResponse.root);
                    // Ext.ComponentQuery.query('#ddlAUEntity')[0].setValue("Select");
                    if(entity)
                    {    
                        Ext.ComponentQuery.query('#ddlAUEntity')[0].setValue(entity);
                    }
                    else
                    {
                        Ext.ComponentQuery.query('#ddlAUEntity')[0].setValue('Select');
                        Ext.ComponentQuery.query('#ddlAUEntity')[0].setReadOnly(false);	
                    }

                }


            }
        });
    },

    ShowVatAppeal: function() {
        var uiConfig='';
        var offCodeAU=Ext.get('offCode').dom.innerHTML;
        var requestNo=Ext.ComponentQuery.query('#txtAURequestNo')[0].getValue();
        var action=Ext.ComponentQuery.query('#hdnAUAction')[0].getValue();
        var tranNo=Ext.ComponentQuery.query('#hdnAUTranNo')[0].getValue();

        var store=Ext.getStore('AuthUpdatePKsStore');
        var items = store.data.items;

        var offCode=items[0].data.Value;
        var appealNo=items[1].data.Value;

        var editOrDelete='';

        if(Ext.ComponentQuery.query('#rdbAUEdit')[0].getValue()===true)
        {
            editOrDelete='E';
        }
        else if(Ext.ComponentQuery.query('#rdbAUDelete')[0].getValue()===true)
        {
            editOrDelete='D';
        }

        var  params={
            from:'AU',
            offCodeAU:offCodeAU,   
            requestNo:requestNo,
            offCode:offCode, 
            appealNo:appealNo,
            actionAU:action,
            tranNo:tranNo,
            editOrDelete:editOrDelete
        };
        var objParam = Ext.ComponentQuery.query('#AuthorizedUpdate')[0].extraParam;
        if(objParam)
        {
            if(objParam.params.from === "MV")
            {
                var win = Ext.getCmp('PopupWindow');
                win.close();
                dynamicPopUp('AppealEntry',{params:params});
            }
        }
        else
        {
            uiConfig = {menuLink:'AppealEntry',pageTitle:'Authorized Updates For Appeal Entry'};
            DynamicUI(uiConfig,null,{params:params});
        }

    },

    EnableDisableAUControls: function(enableOrDisable) {
        //Ext.ComponentQuery.query('#ddlAUApplication')[0].setValue('');

        /*Ext.ComponentQuery.query('#txtAUEmployeeNo')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#txtAURequestedBy')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#txtAUEntryDate')[0].setReadOnly(true);

        Ext.ComponentQuery.query('#rdbAUEdit')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#txtAURemarks')[0].setReadOnly(true);
        */


        var frmMVR=Ext.ComponentQuery.query('#AuthorizedUpdate')[0];


        if(enableOrDisable=='D')
        {
            frmMVR.query('.field,.combo').forEach(function(c){c.setReadOnly(true);});
            //frmMVR.query('.grid').forEach(function(c){ c.on('beforeedit', function(editor, e) { return false;});});

            Ext.ComponentQuery.query('#txtAURequestNo')[0].setReadOnly(false);
        }
        else
        {	
            frmMVR.query('.field,.combo').forEach(function(c){c.setReadOnly(false);});
            //frmMVR.query('.grid').forEach(function(c){ c.on('beforeedit', function(editor, e) { return false;});});

            Ext.ComponentQuery.query('#txtAURequestNo')[0].setReadOnly(false);  
        }

        Ext.ComponentQuery.query('#txtAUAuthNo')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#txtAUAuthDate')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#txtAUAuthEmployeeNo')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#txtAUAuthEntryDate')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#txtAUAuthAuthorization')[0].setReadOnly(true);
        Ext.ComponentQuery.query('#txtAUAuthUser')[0].setReadOnly(true);

        //Ext.ComponentQuery.query('#ddlAUEntity')[0].setReadOnly(true);




        //Ext.ComponentQuery.query('#btnAUGo')[0].disable(true);
        //Ext.ComponentQuery.query('#btnAUDelete')[0].disable(true);


        //var es=Ext.getStore('AuthUpdateEntityStore');
        //es.removeAll();
        //es.load();


        //var pks=Ext.getStore('AuthUpdatePKsStore');
        //pks.removeAll();
        //pks.load();

        //var fs=Ext.getStore('AUUPdateFieldStore');
        //fs.removeAll();


    },

    init: function(application) {
        this.control({
            "#frmAuthorizedUpdate": {
                afterrender: this.onFrmAuthorizedUpdateAfterRender
            },
            "#ddlAUApplication": {
                change: this.onDdlAUApplicationChange
            },
            "#ddlAUEntity": {
                change: this.onDdlAUEntityChange
            },
            "#btnAUCheck": {
                click: this.onBtnAUCheckClick
            },
            "#btnAUGo": {
                click: this.onBtnAUGoClick
            },
            "#btnAUFieldsAdd": {
                click: this.onBtnAUFieldsAddClick
            },
            "#txtAURequestNo": {
                blur: this.onTxtAURequestNoBlur
            },
            "#btnAUDelete": {
                click: this.onBtnAUDeleteClick
            },
            "#btnAUCancel": {
                click: this.onBtnAUCancelClick
            }
        });
    }

});
