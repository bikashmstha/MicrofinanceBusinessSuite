/*
 * File: app/controller/UserVerification.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.UserVerification', {
    extend: 'Ext.app.Controller',

    stores: [
        'UserVModuleUV',
        'VerificationModule',
        'ApplicationwithVerificationModule',
        'User'
    ],

    ongrdApplicationUvItemClick: function(dataview, record, item, index, e, eOpts) {
        var me=this;
        var grd =Ext.ComponentQuery.query("#grdAppModuleUv")[0];
        grd.store.loadData(record.raw.VerificationModule);

        var strUserVerification=Ext.getStore('UserVModuleUV');
        strUserVerification.loadData([],false);

    },

    onGrdAppModuleUvItemClick: function(dataview, record, item, index, e, eOpts) {
        var appid = Ext.ComponentQuery.query('#grdApplicationUv')[0].getSelectionModel().getSelection()[0].data.ApplicationID;
        var modid = Ext.ComponentQuery.query('#grdAppModuleUv')[0].getSelectionModel().getSelection()[0].data.ModuleID;

        //var store=  Ext.getStore('UV_UserVModule');
        var grd = Ext.ComponentQuery.query('#grdAppModuleVerUv')[0];


        //store.load({params:{AppID:appid,ModuleID:modid}});

        grd.getStore().load({params:{AppID:appid,ModuleID:modid}});

        console.log('store', grd.getStore().data.items);

        console.log('count',grd.getStore().getCount());

    },

    onBtmContUvAfterRender: function(component, eOpts) {


        Ext.ComponentQuery.query('#grdAppModuleVerUv')[0].getPlugin('grdpluginUv').on('canceledit',function(e){
            Ext.getStore('UserVModuleUV').removeAt(e.rowIdx);
        });

        Ext.ComponentQuery.query('#grdAppModuleVerUv')[0].on('beforeedit', function(editor,e) {
            var valid=true;
            if(editor.record.data.Action==="")
            {
                valid=false;
                Ext.MessageBox.alert('Warning',"You Can not edit this record");
            }
            return valid;
        });
        Ext.ComponentQuery.query('#grdAppModuleVerUv')[0].on('validateedit', function(editor, e) {

            var index=e.rowIdx;
            var max = Ext.ComponentQuery.query('#grdAppModuleUv')[0].getSelectionModel().getSelection()[0].data.LevelOfVerification;
            var userID= editor.context.newValues.UserID;
            var items=e.store.data.items;
            var count=0;
            var message="";
            var valid=true;
            if(userID==="" ||userID==="--Choose--")
            {
                count++;
                message=message+count+") "+"User is required. <br/>" ;
            }
            else
            {
                for(var i=0; i<items.length;i++)
                {
                    if(i!=index)
                    {
                        var uid=items[i].data.UserID;
                        if(userID==uid)
                        {
                            count++;
                            message=message+count+") "+"User Already Exists. <br/>" ;
                            break;
                        }
                    }


                }
            }

            if(isNaN(editor.context.newValues.VerifyLevel)||Number(editor.context.newValues.VerifyLevel)===0)
            {
                count++;
                message=message+count+") "+"Verify Level is Invalid.<br/>" ;
            }
            else
            {
                if(Number(editor.context.newValues.VerifyLevel)>Number(max))
                {
                    count++;
                    message=message+count+") "+"Level Of Verification more than "+max+".<br/>" ;
                }
            }

            if(editor.context.newValues.FromDate==="")
            {
                count++;
                message=message+count+") "+"Date is required.<br/>" ;
            }
            else
            {

                if(validateNepDate(editor.context.newValues.FromDate)!=="")
                {
                    count++;
                    message=message+count+") "+"Invalid Date.<br/>" ;
                }

            }


            e.cancel = count>0;
            if(e.cancel)
            {
                Ext.MessageBox.alert('Warning',message);
            }
            else
            {
                e.store.data.items[index].data.Action=editor.context.newValues.Action=="A"?"A":"E";
            }



        });
    },

    onBtnAddUvClick: function(button, e, eOpts) {

        //alert('ssss');
        var appid = Ext.ComponentQuery.query('#grdApplicationUv')[0].getSelectionModel().getSelection()[0].data.ApplicationID;
        var modid = Ext.ComponentQuery.query('#grdAppModuleUv')[0].getSelectionModel().getSelection()[0].data.ModuleID;
        var vmFromDate=Ext.ComponentQuery.query('#grdAppModuleUv')[0].getSelectionModel().getSelection()[0].data.FromDate;
        //alert(vmFromDate);
        Ext.getStore('UserVModuleUV').add({"ApplicationID":appid,"ModuleID":modid,"VMFromDate":vmFromDate,"UserID":"","VerifyLevel":"","Action":"A","FromDate":"","ToDate":""});


        //console.log('add new');
        var grd=Ext.ComponentQuery.query('#grdAppModuleVerUv')[0];
        var col=grd.headerCt.getHeaderAtIndex(0);
        var rec=Ext.getStore('UserVModuleUV').data.items;
        var record=rec[rec.length-1];
        grd.getPlugin('grdpluginUv').startEdit(record, col);
    },

    onBtnSaveeUMVClick: function(button, e, eOpts) {

        var data=[];
        Ext.getStore('UserVModuleUV').clearFilter();
        var itm=Ext.getStore('UserVModuleUV').data.items;

        console.log(itm);

        for(var i=0;i<itm.length;i++)
        {

            if(itm[i].data.Action==="A"||itm[i].data.Action==="D")
            {
                data.push(itm[i].data);
            }

        }

        console.log(JSON.stringify(data));


        if(Ext.getStore('UserVModuleUV').data.getCount()===0)
        {
            msg('FAILURE','No User assigned for VERIFICATION');
            return;
        }


        Ext.Ajax.request({
            url: '../Handlers/Verification/UserVerificationModuleHandler.ashx?method=SaveUserVerificationModules',
            params: {data:JSON.stringify(data)},



            success: function ( result, request ) {


                var obj = Ext.decode(result.responseText);
                msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);


                var strVerificationModule=Ext.getStore('VerificationModule');
                var strUserVModuleUV=Ext.getStore('UserVModuleUV');

                strVerificationModule.removeAll();
                strUserVModuleUV.removeAll();
                Ext.ComponentQuery.query('#grdApplicationUv')[0].getSelectionModel().deselectAll();





            },

            failure: function ( result, request ) {

                msg('ERROR OCURRED !!!', 'Error');
            }

        });

    },

    onBtnCancelUVUVMClick: function(button, e, eOpts) {
        var strVerificationModule=Ext.getStore('VerificationModule');
        var strUserVModuleUV=Ext.getStore('UserVModuleUV');

        strVerificationModule.removeAll();
        strUserVModuleUV.removeAll();
        Ext.ComponentQuery.query('#grdApplicationUv')[0].getSelectionModel().deselectAll();
    },

    init: function(application) {
        this.control({
            "#grdApplicationUv": {
                itemclick: this.ongrdApplicationUvItemClick
            },
            "#grdAppModuleUv": {
                itemclick: this.onGrdAppModuleUvItemClick
            },
            "#btmContUv": {
                afterrender: this.onBtmContUvAfterRender
            },
            "#btnAddUv": {
                click: this.onBtnAddUvClick
            },
            "#btnSaveeUMV": {
                click: this.onBtnSaveeUMVClick
            },
            "#btnCancelUVUVM": {
                click: this.onBtnCancelUVUVMClick
            }
        });
    }

});
