/*
 * File: app/controller/MFSavingAccountOpen.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.MFSavingAccountOpen', {
    extend: 'Ext.app.Controller',

    stores: [
        'CenterCodeStore',
        'SearchMemberStore',
        'SavingProductStore',
        'ReferenceShortStore',
        'TransferTypeRefShortStore',
        'ContraAccountStore',
        'AccountStatusStore',
        'EmployeeSearchShortStore',
        'SavingAccountNumberSearchStore',
        'MFSavingAccOpenStore'
    ],

    onTxtCenterCodeAfterRender: function(component, eOpts) {
        component.getEl().on('dblclick', function(){
             var winPopup = Ext.create('MyApp.view.SelectCenterPopup',{

                });

                winPopup.extraParam={param:null};
                winPopup.show();
          });

    },

    onTxtMemberCodeAfterRender: function(component, eOpts) {
        component.getEl().on('dblclick', function(){
             var winPopup = Ext.create('MyApp.view.SelectMFAccSavOpenMemberPopup',{

                });

                winPopup.extraParam={param:null};
                winPopup.show();
          });

    },

    onTxtSavingProductCodeAfterRender: function(component, eOpts) {
        component.getEl().on('dblclick', function(){
             var winPopup = Ext.create('MyApp.view.SelectSavingProductPopup',{

                });

                winPopup.extraParam={param:null};
                winPopup.show();
          });

    },

    onTxtEmpIdAfterRender: function(component, eOpts) {

        component.getEl().on('dblclick', function(){
             var winPopup = Ext.create('MyApp.view.SelectMFEmployeePopup',{

                });

                winPopup.extraParam={param:null};
                winPopup.show();
          });
    },

    onBtnOpenAccountClick: function(button, e, eOpts) {
        var obj={
            ClientNo : Ext.ComponentQuery.query('#txtMemberCode')[0].ClientNo ,
        CenterCode : Ext.ComponentQuery.query('#txtCenterCode')[0].getValue(),
        //ClientCenter : Ext.ComponentQuery.query('#')[0].getValue(),
        SavingProductCode : Ext.ComponentQuery.query('#txtSavingProductCode')[0].getValue(),
        AccountOpenDate : Ext.ComponentQuery.query('#txtAccOpenDateAD')[0].getValue(),
        AccountStatus : Ext.ComponentQuery.query('#ddlAccStatus')[0].getValue(),
        IntSchemeCode : Ext.ComponentQuery.query('#txtInterestSchemeCode')[0].getValue(),
        CurrentBalance : Ext.ComponentQuery.query('#txtCurrentBalance')[0].getValue(),
        SigneeName1 : Ext.ComponentQuery.query('#txtSigneeName')[0].getValue(),
        SigneeName2 : '',//Ext.ComponentQuery.query('#')[0].getValue(),
        ReasonForClosing :'',// Ext.ComponentQuery.query('#')[0].getValue(),
        DueMandatoryAmount : Ext.ComponentQuery.query('#txtDueMandatoryAmt')[0].getValue(),
        AccClosingCharge : Ext.ComponentQuery.query('#txtACClosingCharge')[0].getValue(),
        TranOfficeCode : getOfficeCode(),
        FixedCollectAmount : Ext.ComponentQuery.query('#txtFixedCollectionAmt')[0].getValue(),
        DepositPeriod : Ext.ComponentQuery.query('#txtDepositPeriod')[0].getValue(),
        EmployeeId : Ext.ComponentQuery.query('#txtEmpId')[0].getValue(),
        ReferenceAccountNo :'',// Ext.ComponentQuery.query('#')[0].getValue(),
        InsurancePolicyNo : Ext.ComponentQuery.query('#txtInsurancePolicyNo')[0].getValue(),
        InsurancePolicyAmt : Ext.ComponentQuery.query('#txtInsurancePolicyAmt')[0].getValue(),
        CollectionType : Ext.ComponentQuery.query('#ddlCollectionType')[0].getValue(),
        DepositPeriodType :'M',// Ext.ComponentQuery.query('#')[0].getValue(),
        AmtAtMaturity : Ext.ComponentQuery.query('#txtAmtAtMaturity')[0].getValue(),
        MaturityDate : Ext.ComponentQuery.query('#txtMaturityDateAD')[0].getValue(),
        InterestRate : Ext.ComponentQuery.query('#txtInterestRate')[0].getValue(),
        TransferIntPeriodic : Ext.ComponentQuery.query('#ddlTransferType')[0].getValue(),
        ThirdPartyData :'',// Ext.ComponentQuery.query('#')[0].getValue()
        CreatedBy:getCurrentUser(),
        ContraAccount : Ext.ComponentQuery.query('#ddlContraAccount')[0].getValue(),
        Action : 'I'


        };

        	 var waitSave = watiMsg('Saving. Please wait ...');
        Ext.Ajax.request({
             url:'../Handlers/Finance/Transaction/SavingTransaction/ClientSavingAccountHandler.ashx',
             params:{method:'Save',clientSavingAccount:JSON.stringify(obj)},
             success: function ( result, request ) {
        waitSave.hide();
                  var out = Ext.decode(result.responseText);
        				if(out.success==='true'){
        					msg('SUCCESS',out.message);
        						}

        				else{msg('FAILURE',out.message);


                  }
             },
             failure: function(form, action) {
        waitSave.hide();var out=Ext.decode(response.responseText);msg('FAILURE',out.message);     }
        });



    },

    onTxtSearchSavingAccNoAfterRender: function(component, eOpts) {
        component.getEl().on('dblclick', function(){
             var winPopup = Ext.create('MyApp.view.SelectSavingAccNoPopup',{

                });

                winPopup.extraParam={param:null};
                winPopup.show();
          });

    },

    onBtnSearchClick: function(button, e, eOpts) {
        Ext.Ajax.request({
            url:'../Handlers/Finance/Transaction/SavingTransaction/AccountOpenDetailHandler.ashx',
            params:{method:'GetAccountOpenDetail',
                   withdrawlNo:'',
                    offCode:getOfficeCode(),
                    savingAccountNo:Ext.ComponentQuery.query('#txtSearchSavingAccNo')[0].getValue(),
                    clientName:Ext.ComponentQuery.query('#txtMemberName')[0].getValue(),
                    fromDate :Ext.ComponentQuery.query('#txtAccOpenDateFromBS')[0].getValue(),
                    toDate :Ext.ComponentQuery.query('#txtAccOpenDateToBS')[0].getValue()
                   },
            success: function ( result, request ) {

                var obj = Ext.decode(result.responseText);
                if(obj.success === 'true'){
                    //console.log("Resu",obj.root);
                    var store =Ext.getStore('MFSavingAccOpenStore');
                    store.removeAll();
                    store.add(obj.root);


                }else{msg('FAILURE','Could Not Load Data');}
            },
            failure: function(form, action) {
                msg("FAILURE","Could Not Load Data");    }
        });
    },

    onFrmMFSavingAccountOpenAfterRender: function(component, eOpts) {
        Ext.ComponentQuery.query('#txtAccOpenDateBS')[0].setValue(getMisDateBS());
        Ext.ComponentQuery.query('#txtAccOpenDateAD')[0].setValue(getMisDateAD());


        //GET FOR COLLECTION TYPE

        Ext.Ajax.request({
            url:'../Handlers/GeneralMasterParameters/References/MsRefrenceCodeDetailsHandler.ashx',
            params:{method:'GetReferenceDetailListShort',referenceCode:'INSTALLMENT_TYPE'
                   },
            success: function ( result, request ) {

                var obj = Ext.decode(result.responseText);
                if(obj.success === 'true'){
                    //console.log("Resu",obj.root);
                    var store =Ext.getStore('ReferenceShortStore');
                    store.removeAll();
                    store.add(obj.root);


                }else{msg('FAILURE','Could Not Load Data');}
            },
            failure: function(form, action) {
                msg("FAILURE","Could Not Load Data");    }
        });

        //GET FOR TRANSFER TYPE

        Ext.Ajax.request({
            url:'../Handlers/GeneralMasterParameters/References/MsRefrenceCodeDetailsHandler.ashx',
            params:{method:'GetReferenceDetailListShort',referenceCode:'TRANSFER_INT_PERIODIC'
                   },
            success: function ( result, request ) {

                var obj = Ext.decode(result.responseText);
                if(obj.success === 'true'){
                    //console.log("Resu",obj.root);
                    var store =Ext.getStore('TransferTypeRefShortStore');
                    store.removeAll();
                    store.add(obj.root);


                }else{msg('FAILURE','Could Not Load Data');}
            },
            failure: function(form, action) {
                msg("FAILURE","Could Not Load Data");    }
        });

        //GET FOR ACCOUNT STATUS


        Ext.Ajax.request({
            url:'../Handlers/GeneralMasterParameters/References/MsRefrenceCodeDetailsHandler.ashx',
            params:{method:'GetReferenceDetailListShort',referenceCode:'SAVING_ACCOUNT_STATUS'
                   },
            success: function ( result, request ) {

                var obj = Ext.decode(result.responseText);
                if(obj.success === 'true'){
                    //console.log("Resu",obj.root);
                    var store =Ext.getStore('AccountStatusStore');
                    store.removeAll();
                    store.add(obj.root);
                    Ext.ComponentQuery.query('#ddlAccStatus')[0].select('A');


                }else{msg('FAILURE','Could Not Load Data');}
            },
            failure: function(form, action) {
                msg("FAILURE","Could Not Load Data");    }
        });

        //GET FOR CONTRA ACCOUNT

        Ext.Ajax.request({
            url:'../Handlers/Finance/Maintenance/AccountHeadEntryHandler.ashx',
            params:{method:'GetContraAccount',offCode:getOfficeCode(), accountDesc:null
                   },
            success: function ( result, request ) {

                var obj = Ext.decode(result.responseText);
                if(obj.success === 'true'){
                    //console.log("Resu",obj.root);
                    var store =Ext.getStore('ContraAccountStore');
                    store.removeAll();
                    store.add(obj.root);


                }else{msg('FAILURE','Could Not Load Data');}
            },
            failure: function(form, action) {
                msg("FAILURE","Could Not Load Data");    }
        });

    },

    init: function(application) {
        this.control({
            "#txtCenterCode": {
                afterrender: this.onTxtCenterCodeAfterRender
            },
            "#txtMemberCode": {
                afterrender: this.onTxtMemberCodeAfterRender
            },
            "#txtSavingProductCode": {
                afterrender: this.onTxtSavingProductCodeAfterRender
            },
            "#txtEmpId": {
                afterrender: this.onTxtEmpIdAfterRender
            },
            "#btnOpenAccount": {
                click: this.onBtnOpenAccountClick
            },
            "#txtSearchSavingAccNo": {
                afterrender: this.onTxtSearchSavingAccNoAfterRender
            },
            "#btnSearch": {
                click: this.onBtnSearchClick
            },
            "#frmMFSavingAccountOpen": {
                afterrender: this.onFrmMFSavingAccountOpenAfterRender
            }
        });
    }

});
