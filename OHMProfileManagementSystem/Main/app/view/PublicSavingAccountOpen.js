/*
 * File: app/view/PublicSavingAccountOpen.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.PublicSavingAccountOpen', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Ext.form.Label',
        'Ext.Img',
        'Ext.form.field.Checkbox',
        'Ext.button.Button',
        'Ext.form.FieldSet',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.selection.RowModel',
        'Ext.grid.column.Action'
    ],

    frame: true,
    title: 'Public Saving AccountOpen',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    itemId: 'frmPublicSavingAccountOpen',
                    bodyPadding: 10,
                    layout: {
                        type: 'table',
                        columns: 4
                    },
                    items: [
                        {
                            xtype: 'container',
                            colspan: 3,
                            layout: {
                                type: 'table',
                                columns: 3
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtAccountOpenDateBS',
                                    fieldLabel: 'Account Open Date (B.S)',
                                    labelWidth: 155,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;'
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtAccountOpenDateAD',
                                    margin: '0 0 0 5',
                                    fieldLabel: 'Account Open Date (A.D)',
                                    labelWidth: 150,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;'
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 3,
                                    itemId: 'txtSavingAccountNumber',
                                    fieldLabel: 'Saving Account No.',
                                    labelWidth: 155,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;'
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 3,
                                    itemId: 'ddlMemberName',
                                    fieldLabel: 'Member Name',
                                    labelWidth: 155,
                                    fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                                    size: 60,
                                    displayField: 'Name',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'PublicClientStore',
                                    valueField: 'ClientCode',
                                    listeners: {
                                        select: {
                                            fn: me.onDdlMemberNameSelect,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 4,
                                    itemId: 'ddlSavingProduct',
                                    fieldLabel: 'Saving Product',
                                    labelWidth: 155,
                                    fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                                    displayField: 'ProductName',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'PubSavingProductStore',
                                    valueField: 'ProductCode',
                                    listeners: {
                                        select: {
                                            fn: me.onDdlSavingProductSelect,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtInterestSchemeCode',
                                    fieldLabel: 'Interest Scheme',
                                    labelWidth: 155,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;'
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtInterestSchemeName',
                                    margin: '0 0 0 5',
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;',
                                    size: 37
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            margin: '0 0 0 10',
                            layout: {
                                type: 'table',
                                columns: 1
                            },
                            items: [
                                {
                                    xtype: 'label',
                                    text: 'Client photo:'
                                },
                                {
                                    xtype: 'image',
                                    height: 120
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            colspan: 3,
                            layout: {
                                type: 'table',
                                columns: 3
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtFixedCollectionAmount',
                                    fieldLabel: 'Fixed Collection Amt',
                                    labelWidth: 155
                                },
                                {
                                    xtype: 'combobox',
                                    itemId: 'txtCollectionType',
                                    margin: '0 0 0 5',
                                    fieldLabel: 'Collection Type',
                                    displayField: 'RefDtlName',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'MsReferenceCodeDetailsDestinationFormatStore',
                                    valueField: 'RefDtlCode'
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtCollectionPeriod',
                                    margin: '0 0 0 5',
                                    fieldLabel: 'Collection Period',
                                    labelWidth: 150
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtCurrentBal',
                                    fieldLabel: 'Current Bal.',
                                    labelWidth: 155
                                },
                                {
                                    xtype: 'combobox',
                                    itemId: 'ddlAcStatus',
                                    margin: '0 0 0 5',
                                    fieldLabel: 'Ac Status',
                                    labelWidth: 150,
                                    displayField: 'RefDtlName',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'MsReferenceCodeDetailsDestinationParameterStore',
                                    valueField: 'RefDtlCode'
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtDepositPeriod',
                                    fieldLabel: 'Deposit Period',
                                    labelWidth: 155
                                },
                                {
                                    xtype: 'combobox',
                                    itemId: 'ddlAcOperator',
                                    margin: '0 0 0 5',
                                    fieldLabel: 'Ac Operator',
                                    labelWidth: 150
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtMaturityDateBS',
                                    fieldLabel: 'Maturity Date (B.S)',
                                    labelWidth: 155,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;'
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtMaturityDateAD',
                                    margin: '0 0 0 5',
                                    fieldLabel: 'Maturity Date (A.D)',
                                    labelWidth: 150,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;'
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtAmtAtMaturity',
                                    fieldLabel: 'Amt At Maturity',
                                    labelWidth: 155
                                },
                                {
                                    xtype: 'combobox',
                                    itemId: 'ddlTransferType',
                                    margin: '0 0 0 5',
                                    fieldLabel: 'Transfer Type',
                                    labelWidth: 150,
                                    displayField: 'RefDtlName',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'MsReferenceCodeDetailsDestinationTypeStore',
                                    valueField: 'RefDtlCode'
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            margin: '0 0 0 10',
                            layout: {
                                type: 'table',
                                columns: 1
                            },
                            items: [
                                {
                                    xtype: 'label',
                                    text: 'Joint Client Photo'
                                },
                                {
                                    xtype: 'image',
                                    height: 120
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            colspan: 4,
                            layout: {
                                type: 'table',
                                columns: 3
                            },
                            items: [
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'chkTransferAmtToNormalAc',
                                    fieldLabel: 'Transfer Amt to Normal Ac',
                                    labelWidth: 155
                                },
                                {
                                    xtype: 'container',
                                    width: 65
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtInterestRate',
                                    margin: '0 0 0 5',
                                    fieldLabel: 'Interest Rate (%)',
                                    labelWidth: 150,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;'
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 3,
                                    itemId: 'txtReferenceAcNo',
                                    fieldLabel: 'Reference Ac No.',
                                    labelWidth: 155,
                                    fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                                    size: 60,
                                    listeners: {
                                        afterrender: {
                                            fn: me.onTxtReferenceAcNoAfterRender,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    itemId: 'txtAccountCloseDateBS',
                                    fieldLabel: 'Account Close Date (B.S)',
                                    labelWidth: 155,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;'
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtAccountCloseDateAD',
                                    margin: '0 0 0 5',
                                    fieldLabel: 'Account Close Date (A.D)',
                                    labelWidth: 150,
                                    fieldStyle: 'background-color:#D2D2D2;background-image:none;'
                                },
                                {
                                    xtype: 'combobox',
                                    itemId: 'ddlContraAccount',
                                    fieldLabel: 'Contra Ac',
                                    labelWidth: 155,
                                    fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                                    size: 50,
                                    displayField: 'AccountDesc',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'ContraAccountSearchShortStore',
                                    valueField: 'AccountCode'
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            colspan: 4,
                            height: 25,
                            layout: {
                                type: 'hbox',
                                align: 'stretch',
                                pack: 'center'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    itemId: 'btnOpenAccount',
                                    text: 'Open Account',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnOpenAccountClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    hidden: true,
                                    itemId: 'btnUpdateAccount',
                                    text: 'Update Account',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnUpdateAccountClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            colspan: 4,
                            height: 25,
                            margin: '10 0 0 0',
                            layout: {
                                type: 'hbox',
                                align: 'stretch',
                                pack: 'center'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    itemId: 'txtMemberInfo',
                                    text: 'Member Info '
                                },
                                {
                                    xtype: 'button',
                                    margins: '0 10 0 10',
                                    itemId: 'txtCheque',
                                    text: 'Cheque'
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'btnSignature',
                                    text: 'Signature'
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            colspan: 4,
                            title: 'Search',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtSearchAccOpenDateFromBS',
                                    fieldLabel: 'Account Open Date From (B.S)',
                                    labelWidth: 180
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtSearchAccOpenDateToBS',
                                    margin: '0 0 0 10',
                                    fieldLabel: 'Account Open Date To (B.S)',
                                    labelWidth: 180
                                },
                                {
                                    xtype: 'combobox',
                                    itemId: 'ddlSavingAccountNo',
                                    fieldLabel: 'Saving Account No.',
                                    labelWidth: 180,
                                    fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                                    size: 25,
                                    displayField: 'SavingAccountNo',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'SavingAccountNumberSearchShortStore',
                                    valueField: 'SavingAccountNo'
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'txtMemberName',
                                    margin: '0 0 0 10',
                                    fieldLabel: 'Member Name',
                                    labelWidth: 180,
                                    size: 40
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'btnSearch',
                                    text: 'Search',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnSearchClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            colspan: 4,
                            itemId: 'grdPublicSavingAccountOpen',
                            store: 'PublicAccountDetailStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    width: 131,
                                    dataIndex: 'SavingAccountNo',
                                    text: 'Saving Account No'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 248,
                                    dataIndex: 'MemberName',
                                    text: 'Member Name'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 194,
                                    dataIndex: 'IntSchDesc',
                                    text: 'Interest Scheme'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'SavProdDesc',
                                    text: 'Saving Product'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 116,
                                    dataIndex: 'OpenDateBs',
                                    text: 'Account Open Date'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'AccountStatus',
                                    text: 'Account Status'
                                },
                                {
                                    xtype: 'actioncolumn',
                                    items: [
                                        {
                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                Ext.ComponentQuery.query('#grdPublicSavingAccountOpen')[0].getSelectionModel().select(rowIndex);
                                                //get reference of store
                                                var store = Ext.getStore('PublicAccountDetailStore');

                                                //get selected row using rowindex
                                                var row = store.getAt(rowIndex).data;


                                                // set values
                                                console.log('row',row);

                                                Ext.ComponentQuery.query('#txtAccountOpenDateBS')[0].setValue(row.AccountOpenDate);
                                                Ext.ComponentQuery.query('#txtAccountOpenDateAD')[0].setValue(row.OpenDateBs);
                                                Ext.ComponentQuery.query('#txtSavingAccountNumber')[0].setValue(row.SavingAccountNo);
                                                Ext.ComponentQuery.query('#ddlMemberName')[0].setValue(row.MemberName);
                                                Ext.ComponentQuery.query('#ddlSavingProduct')[0].setValue(row.SavingProductCode);
                                                Ext.ComponentQuery.query('#txtInterestSchemeCode')[0].setValue(row.AccountNo);
                                                Ext.ComponentQuery.query('#txtInterestSchemeName')[0].setValue(row.IntSchemeCode);
                                                Ext.ComponentQuery.query('#txtFixedCollectionAmount')[0].setValue(row.FixedCollectAmount);
                                                Ext.ComponentQuery.query('#txtCollectionType')[0].setValue(row.CollectionType);
                                                //Ext.ComponentQuery.query('#txtCollectionPeriod')[0].setValue(row.Remarks);
                                                Ext.ComponentQuery.query('#txtCurrentBal')[0].setValue(row.CurrentBalance);
                                                Ext.ComponentQuery.query('#ddlAcStatus')[0].setValue(row.AccountStatus);
                                                Ext.ComponentQuery.query('#txtDepositPeriod')[0].setValue(row.DepositPeriod);
                                                Ext.ComponentQuery.query('#ddlAcOperator')[0].setValue(row.AccClosingCharge);
                                                Ext.ComponentQuery.query('#txtMaturityDateBS')[0].setValue(row.MaturityDate);
                                                //Ext.ComponentQuery.query('#txtMaturityDateAD')[0].setValue(row.ChargeType);
                                                Ext.ComponentQuery.query('#txtAmtAtMaturity')[0].setValue(row.AmtAtMaturity);
                                                Ext.ComponentQuery.query('#ddlTransferType')[0].setValue(row.TransferIntPeriodic);
                                                Ext.ComponentQuery.query('#chkTransferAmtToNormalAc')[0].setValue(row.TransferDepositTo_Ref_Ac);
                                                Ext.ComponentQuery.query('#txtInterestRate')[0].setValue(row.InterestRate);
                                                Ext.ComponentQuery.query('#txtReferenceAcNo')[0].setValue(row.ReferenceAccountNo);
                                                //Ext.ComponentQuery.query('#txtAccountCloseDateBS')[0].setValue(row.ValueDate);
                                                Ext.ComponentQuery.query('#txtAccountCloseDateAD')[0].setValue(row.AccountClosedDate);
                                                Ext.ComponentQuery.query('#ddlContraAccount')[0].setValue(row.ContraAcNo);
                                                Ext.ComponentQuery.query('#hdnClientNo')[0].setValue(row.ClientNo);






                                                //set buttons visible

                                                Ext.ComponentQuery.query('#btnUpdateAccount')[0].setVisible(true);
                                                Ext.ComponentQuery.query('#btnOpenAccount')[0].setVisible(false);

                                            },
                                            icon: '../ITS/resources/images/icons/Modify.png'
                                        }
                                    ]
                                }
                            ],
                            selModel: Ext.create('Ext.selection.RowModel', {

                            })
                        },
                        {
                            xtype: 'textfield',
                            hidden: true,
                            itemId: 'hdnClientNo',
                            fieldLabel: 'Label'
                        },
                        {
                            xtype: 'textfield',
                            hidden: true,
                            itemId: 'hdnRefAccNo',
                            fieldLabel: 'Label'
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFrmPublicSavingAccountOpenAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onDdlMemberNameSelect: function(combo, records, eOpts) {
        Ext.ComponentQuery.query('#hdnClientNo')[0].setValue(records[0].data.ClientNo);
    },

    onDdlSavingProductSelect: function(combo, records, eOpts) {
        Ext.ComponentQuery.query('#txtInterestSchemeCode')[0].setValue(records[0].data.IntSchemeCode);
        Ext.ComponentQuery.query('#txtInterestSchemeName')[0].setValue(records[0].data.IntSchemeDesc);
    },

    onTxtReferenceAcNoAfterRender: function(component, eOpts) {

        component.getEl().on('dblclick', function(){
             var winPopup = Ext.create('MyApp.view.SelectPublicSavingOpenRefAccountNumberPopup',{

                });

                winPopup.extraParam={param:null};
                winPopup.show();
          });
    },

    onBtnOpenAccountClick: function(button, e, eOpts) {


        var insObj={
        	ClientNo:Ext.ComponentQuery.query('#hdnClientNo')[0].getValue(),
        	ClientCenter:'C',
        	SavingProductCode:Ext.ComponentQuery.query('#ddlSavingProduct')[0].getValue(),
        	AccountOpenDate:Ext.ComponentQuery.query('#txtAccountOpenDateAD')[0].getValue(),
        	AccountStatus:Ext.ComponentQuery.query('#ddlAcStatus')[0].getValue(),
        	AccountClosedDate:Ext.ComponentQuery.query('#txtAccountCloseDateAD')[0].getValue(),
        	IntSchemeCode:Ext.ComponentQuery.query('#txtInterestSchemeCode')[0].getValue(),
        	InterestRate:Ext.ComponentQuery.query('#txtInterestRate')[0].getValue(),
        	CurrentBalance:Ext.ComponentQuery.query('#txtCurrentBal')[0].getValue(),
        	TranOfficeCode:getOfficeCode(),
        	FixedCollectAmount:Ext.ComponentQuery.query('#txtFixedCollectionAmount')[0].getValue(),
        	CollectionType:Ext.ComponentQuery.query('#txtCollectionType')[0].getValue(),
        	DepositPeriod:Ext.ComponentQuery.query('#txtDepositPeriod')[0].getValue(),
        	DepositPeriodType:'M',
        	ReferenceAccountNo:Ext.ComponentQuery.query('#txtReferenceAcNo')[0].getValue(),
        	AmtAtMaturity:Ext.ComponentQuery.query('#txtAmtAtMaturity')[0].getValue(),
        	MaturityDate:Ext.ComponentQuery.query('#txtMaturityDateAD')[0].getValue(),
        	AccountOperationType:Ext.ComponentQuery.query('#ddlAcOperator')[0].getValue(),
        	TransferDepositTo_Ref_Ac:Ext.ComponentQuery.query('#chkTransferAmtToNormalAc')[0].getValue()?'Y':'N',
        	User1:GetCurrentUser(),
        	ContraAccount:Ext.ComponentQuery.query('#ddlContraAccount')[0].getValue(),
        	InsertUpdate:'I'
        };


        var waitSave = watiMsg("Depositing...Please wait ...");
        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/PublicSavingTransaction/PublicSavingAccountOpenHandler.ashx',
            params: {
                method:'SavePublicSavingAccountOpen',
                publicSavingAccountOpen:JSON.stringify(insObj)
            },
            success: function ( response, request ) {
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                console.log(out);

                if(out.success==="true")
                {
                    msg("SUCCESS",out.message);
                }
                else
                {
                    msg("FAILURE",out.message);
                }
            },
            failure: function ( result, request ) {
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                msg("FAILURE",out.message);
            }



        });


    },

    onBtnUpdateAccountClick: function(button, e, eOpts) {


        var insObj={
        	ClientNo:Ext.ComponentQuery.query('#hdnClientNo')[0].getValue(),
        	ClientCenter:'C',
        	SavingProductCode:Ext.ComponentQuery.query('#ddlSavingProduct')[0].getValue(),
        	AccountOpenDate:Ext.ComponentQuery.query('#txtAccountOpenDateAD')[0].getValue(),
        	AccountStatus:Ext.ComponentQuery.query('#ddlAcStatus')[0].getValue(),
        	AccountClosedDate:Ext.ComponentQuery.query('#txtAccountCloseDateAD')[0].getValue(),
        	IntSchemeCode:Ext.ComponentQuery.query('#txtInterestSchemeCode')[0].getValue(),
        	InterestRate:Ext.ComponentQuery.query('#txtInterestRate')[0].getValue(),
        	CurrentBalance:Ext.ComponentQuery.query('#txtCurrentBal')[0].getValue(),
        	TranOfficeCode:getOfficeCode(),
        	FixedCollectAmount:Ext.ComponentQuery.query('#txtFixedCollectionAmount')[0].getValue(),
        	CollectionType:Ext.ComponentQuery.query('#txtCollectionType')[0].getValue(),
        	DepositPeriod:Ext.ComponentQuery.query('#txtDepositPeriod')[0].getValue(),
        	DepositPeriodType:'M',
        	ReferenceAccountNo:Ext.ComponentQuery.query('#txtReferenceAcNo')[0].getValue(),
        	AmtAtMaturity:Ext.ComponentQuery.query('#txtAmtAtMaturity')[0].getValue(),
        	MaturityDate:Ext.ComponentQuery.query('#txtMaturityDateAD')[0].getValue(),
        	AccountOperationType:Ext.ComponentQuery.query('#ddlAcOperator')[0].getValue(),
        	TransferDepositTo_Ref_Ac:Ext.ComponentQuery.query('#chkTransferAmtToNormalAc')[0].getValue()?'Y':'N',
        	User1:GetCurrentUser(),
        	ContraAccount:Ext.ComponentQuery.query('#ddlContraAccount')[0].getValue(),
        	InsertUpdate:'U'
        };


        var waitSave = watiMsg("Updating...Please wait ...");
        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/PublicSavingTransaction/PublicSavingAccountOpenHandler.ashx',
            params: {
                method:'SavePublicSavingAccountOpen',
                publicSavingAccountOpen:JSON.stringify(insObj)
            },
            success: function ( response, request ) {
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                console.log(out);

                if(out.success==="true")
                {
                    msg("SUCCESS",out.message);
                }
                else
                {
                    msg("FAILURE",out.message);
                }
            },
            failure: function ( result, request ) {
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                msg("FAILURE",out.message);
            }



        });


    },

    onBtnSearchClick: function(button, e, eOpts) {
        var waitSave = watiMsg("Searching...Please wait ...");

        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/PublicSavingTransaction/PublicAccountDetailHandler.ashx',
            params: {
                method:'GetPubAccDetail',
                OfficeCode:getOfficeCode(),
                ClientNo:null,
        		SavingAccountNo:Ext.ComponentQuery.query('#ddlSavingAccountNo')[0].getValue(),
        		ClientName:Ext.ComponentQuery.query('#txtMemberName')[0].getValue(),
        		ProductClass:null,
        		FromDate:Ext.ComponentQuery.query('#txtSearchAccOpenDateFromBS')[0].getValue(),
        		ToDate:Ext.ComponentQuery.query('#txtSearchAccOpenDateToBS')[0].getValue()



            },
            success: function(response){

                waitSave.hide();
                var obj = Ext.decode(response.responseText);



                if(obj.success === "true")
                {

                    var store=Ext.getStore('PublicAccountDetailStore');
                    store.removeAll();
                    store.add(obj.root);
                }
                else
                {
                    msg("FAILURE",obj.message);
                }
            }
        });

    },

    onFrmPublicSavingAccountOpenAfterRender: function(component, eOpts) {
        Ext.ComponentQuery.query('#txtAccountOpenDateBS')[0].setValue(getMisDateBS());
        Ext.ComponentQuery.query('#txtAccountOpenDateAD')[0].setValue(getMisDateAD());
        Ext.ComponentQuery.query('#txtSearchAccOpenDateFromBS')[0].setValue(getMisDateBS());
        Ext.ComponentQuery.query('#txtSearchAccOpenDateToBS')[0].setValue(getMisDateBS());

        var publicAccountDetailStore=Ext.getStore('PublicAccountDetailStore');
        publicAccountDetailStore.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/PublicSavingTransaction/PublicClientHandler.ashx',
            params: {
                method:'GetPubClient',
                OfficeCode:getOfficeCode(),
                ClientName:null


            },
            success: function(response){


                var obj = Ext.decode(response.responseText);



                if(obj.success === "true")
                {

                    var store=Ext.getStore('PublicClientStore');
                    store.removeAll();
                    store.add(obj.root);
                }
                else
                {
                    msg("FAILURE",obj.message);
                }
            }
        });

        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/EditTransaction/PubSavingProductHandler.ashx',
            params: {
                method:'GetPubSavingProd',
                ProductName:null,


            },
            success: function(response){


                var obj = Ext.decode(response.responseText);



                if(obj.success === "true")
                {

                    var store=Ext.getStore('PubSavingProductStore');
                    store.removeAll();
                    store.add(obj.root);
                }
                else
                {
                    msg("FAILURE",obj.message);
                }
            }
        });


        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/References/MsRefrenceCodeDetailsHandler.ashx',
            params: {
                method:'GetReferenceDetailListShort',
                referenceCode:'INSTALLMENT_TYPE'
            },
            success: function(response){


        var obj = Ext.decode(response.responseText);

         console.log('resp',response);

              if(obj.success === "true")
                        {

                            var DestinationFormatStore=Ext.getStore('MsReferenceCodeDetailsDestinationFormatStore');
                            DestinationFormatStore.removeAll();
                            DestinationFormatStore.add(obj.root);

                        }
                        else
                        {
                            msg("FAILURE",obj.message);
                        }
            }
        });



        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/References/MsRefrenceCodeDetailsHandler.ashx',
            params: {
                method:'GetReferenceDetailListShort',
                referenceCode:'SAVING_ACCOUNT_STATUS'
            },
            success: function(response){


                var obj = Ext.decode(response.responseText);

                console.log('resp',response);

                if(obj.success === "true")
                {

                    var DestinationParameterStore=Ext.getStore('MsReferenceCodeDetailsDestinationParameterStore');
                    DestinationParameterStore.removeAll();
                    DestinationParameterStore.add(obj.root);



                }
                else
                {
                    msg("FAILURE",obj.message);
                }
            }
        });


        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/References/MsRefrenceCodeDetailsHandler.ashx',
            params: {
                method:'GetReferenceDetailListShort',
                referenceCode:'TRANSFER_INT_PERIODIC'
            },
            success: function(response){


                var obj = Ext.decode(response.responseText);

                console.log('resp',response);

                if(obj.success === "true")
                {

                    var DestinationTypeStore=Ext.getStore('MsReferenceCodeDetailsDestinationTypeStore');
                    DestinationTypeStore.removeAll();
                    DestinationTypeStore.add(obj.root);


                }
                else
                {
                    msg("FAILURE",obj.message);
                }
            }
        });

        Ext.Ajax.request({
            url: '../Handlers/Finance/Maintenance/AccountHeadEntryHandler.ashx',
            params: {
                method:'GetContraAccount',
                offCode:getOfficeCode(),
                accountDesc:null


            },
            success: function(response){


                var obj = Ext.decode(response.responseText);



                if(obj.success === "true")
                {

                    var store=Ext.getStore('ContraAccountSearchShortStore');
                    store.removeAll();
                    store.add(obj.root);
                   // Ext.ComponentQuery.query('#ddlContraAccount')[0].select('100000021000002');
                }
                else
                {
                    msg("FAILURE",obj.message);
                }
            }
        });




        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/EditTransaction/PubSavingAccountSearchHandler.ashx',
            params: {
                method:'GetPubSavAccSearch',
                OfficeCode:getOfficeCode(),
                SavingAccountNo:null
            },
            success: function(response){


        var obj = Ext.decode(response.responseText);

         console.log('resp',response);

              if(obj.success === "true")
                        {

                            var Store=Ext.getStore('SavingAccountNumberSearchShortStore');
                            Store.removeAll();
                            Store.add(obj.root);

                        }
                        else
                        {
                            msg("FAILURE",obj.message);
                        }
            }
        });
    }

});