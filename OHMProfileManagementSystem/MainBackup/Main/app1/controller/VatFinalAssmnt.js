/*
 * File: app/controller/VatFinalAssmnt.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.VatFinalAssmnt', {
    extend: 'Ext.app.Controller',

    stores: [
        'FilingPeriodStore',
        'MaReason',
        'TaxDurationVfa',
        'Period'
    ],

    onBtnAddClick: function(button, e, eOpts) {
        var grd = Ext.ComponentQuery.query('#grdTaxDurationVfa')[0];

        var pan = Ext.ComponentQuery.query("#txtPanVfa")[0].getValue();

        if(pan ===''||pan === null)
        {
            msg('WARNING', 'Please Enter PAN before adding FinalLines !!!');
            return;
        }


        var rec={filPeriod:'',
                Period:'',
                TaxYear:null,
                MaAmount:null,
                PenAmount:null,
                AddAmount:null,
                IntAmount:null,
            TotAmount:null };

        grd.store.add(rec);

        //console.log(rec);

        var col = grd.headerCt.getHeaderAtIndex(0);
        var rec = grd.store.data.items;
        var record = rec[rec.length-1];
        grd.getPlugin('grdTaxDurationPluginVfa').startEdit(record, col);

    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this;
        var param = null;
        var view = Ext.ComponentQuery.query('#VatFinalAssmnt')[0];

        var strTaxDurationVfa = Ext.getStore('TaxDurationVfa');
        strTaxDurationVfa.loadData([],false);


        if(view.extraParam)
        {
            param = view.extraParam.params;

            var from = param.from;

            switch(from)
            {
                case "AU":
                me.loadDetailsForAU(param);
                break;
                case "MV":
                var tranNo = param.tranNo; 
                me.loadDetailByTran(tranNo);
                break;            

            }



        }

    },

    onPanelBeforeRender: function(component, eOpts) {
        var me = this;
        me.clearControls("");
    },

    onCboFilingPeriodChange: function(field, newValue, oldValue, eOpts) {
        var cboFilingPeriod = Ext.ComponentQuery.query("#cboFilingPeriodVfa")[0];
        var record = cboFilingPeriod.findRecord(cboFilingPeriod.valueField || cboFilingPeriod.displayField,newValue); 

        var cboPeriod = Ext.ComponentQuery.query("#cboPeriodVfa")[0];
        cboPeriod.setValue('');


        if(record === false)
        {
            return;
        }
        else
        {
            cboPeriod.store.loadData(record.data.Period);

            var taxyear = Ext.ComponentQuery.query("#txtTaxYearVFa")[0].getValue();
            var period = Ext.ComponentQuery.query("#cboPeriodVFa")[0].getValue();

            if(period !== "" && taxyear !== "")    
            me.validateTaxDuration();
            else
            return;
        }


    },

    onCntGrdTaxDurationVfaAfterRender: function(component, eOpts) {
        var me = this;
        var grd = Ext.ComponentQuery.query('#grdTaxDurationVfa')[0];
        var txtAcctTypeVfa = Ext.ComponentQuery.query("#txtAcctTypeVfa")[0];
        var txtOfficeCodeVfa = Ext.ComponentQuery.query("#txtOfficeCodeVfa")[0];


        //txtOfficeCodeVfa.setValue("22");
        txtAcctTypeVfa.setValue("00");

        var offCode = Ext.get('offCode').dom.innerHTML;
        txtOfficeCodeVfa.setValue(offCode);


        grd.on('beforeedit', function(editor,e) {
            var valid=true;
            // msg('WARNING','Before Updatings !!!');
        });


        grd.on('validateedit', function(editor, e) {

            var valid= true;
            var filePerMsg = Ext.ComponentQuery.query("#hdnFilePerVfa")[0].getValue();
            var pan = Ext.ComponentQuery.query("#txtPanVfa")[0].getValue();
            var cboFilingPeriod = Ext.ComponentQuery.query("#cboFilingPeriodVfa")[0];
            var cboPeriod = Ext.ComponentQuery.query("#cboPeriodVfa")[0];
            var txtTaxYearVfa = Ext.ComponentQuery.query("#txtTaxYearVfa")[0];

            var filingPeriod = cboFilingPeriod.getValue();
            var period = cboPeriod.getValue();
            var year = txtTaxYearVfa.getValue();

            valid = me.validateTaxDuration();

            if (valid === true)
            {
                var str = editor.grid.store;

                // console.log("store",str);

                var recordIndex = str.findBy(
                function(record, id){

                    if(record.data.FilPeriod == filingPeriod && 
                    record.data.Period == period && 
                    record.data.TaxYear == year )
                    {

                        //alert("matched !!!");
                        return true;  // a record with this data exists
                    }
                    return false;  // there is no record in the store with this data
                });

                /*

                if(recordIndex != -1)
                {
                valid=false;
                msg("WARNING","Two Duplicate Periods is not allowed !!!");    

                }   
                */
            }


            return valid;
        });

        grd.getPlugin('grdTaxDurationPluginVfa').on('canceledit',function(e){    

            // console.log("cancel:",e);
            // msg('WARNING','Cancel !!!');


        });
    },

    onCntGrdTaxDurationVfaBeforeRender: function(component, eOpts) {

        var grid = Ext.ComponentQuery.query('#grdTaxDurationVfa')[0];


        grid.columns[1].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";   

            var strFilPeriod = Ext.getStore("FilingPeriodStore");                
            var index = strFilPeriod.find('FilPeriod',value);
            var rec = strFilPeriod.getAt(index);

            var strPeriod = Ext.getStore("Period");

            var items=Ext.getStore('FilingPeriodStore').data.items;    


            for(var i=0;i<items.length;i++)
            {

                if(items[i].data.FilPeriod === value)
                {
                    temp=items[i].data.FilPeriodDesc;
                    break;
                }        
            }   


            // console.log("rec",rec);

            if(rec !== false && rec !== undefined)
            {
                strPeriod.loadData(rec.data.Period);
            } 


            return temp;
        };


        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var temp="";    

            var items = Ext.getStore('Period').data.items;

            for(var i=0;i<items.length;i++)
            {        
                if(items[i].data.Period == value)
                {           
                    temp=items[i].data.PeriodDesc;
                    break;
                }        
            }

            return temp;
        };

    },

    onTxtPanVfaBlur: function(component, e, eOpts) {
        var name = Ext.ComponentQuery.query('#txtNameVfa')[0].getValue();

        if(name === "")
        {
            // this.loadPanDetails();
        }
    },

    onTxtTaxYearVfaBlur: function(component, e, eOpts) {
        var me = this;
        var taxyear = Ext.ComponentQuery.query('#txtTaxYearVfa')[0].getValue();

        if(taxyear !== "")
        {
            ValidateTaxyear(taxyear,function(invalidMsg){

                if(invalidMsg!=="")
                {
                    msg('WARNING',invalidMsg);

                    return false;
                }
                else
                {            
                    me.validateTaxDuration();
                }
            });
        }
    },

    onBtnCancelVfaClick: function(button, e, eOpts) {
        this.clearControls("");
    },

    onCboPeriodVfaChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        var taxyear = Ext.ComponentQuery.query("#txtTaxYearVfa")[0].getValue();

        if(taxyear !== "")    
        me.validateTaxDuration();
        else
        return;




    },

    onTxtPanVfaKeypress: function(textfield, e, eOpts) {
        var name = Ext.ComponentQuery.query('#txtNameVfa')[0].getValue();


        if(e.keyCode === 13)
        {
            this.loadPanDetails();
        }
        else if(e.keyCode === 9)
        {
            this.loadPanDetails();
        }
        else if(name !== "")
        {   

            Ext.Msg.confirm('Confirm Action', 'Do you want to change Pan No. ?', function(btn) {
                if(btn == 'yes'){

                    this.loadPanDetails();
                    return true;
                }
            }, this);

        }


    },

    onTxtMaAmountVfaChange: function(field, newValue, oldValue, eOpts) {
        this.calTotal();
    },

    onTxtAddAmountVfaChange: function(field, newValue, oldValue, eOpts) {
        this.calTotal();
    },

    onTxtIntAmountVfaChange: function(field, newValue, oldValue, eOpts) {
        this.calTotal();
    },

    onTxtPenAmountVfaChange: function(field, newValue, oldValue, eOpts) {
        this.calTotal();
    },

    onBtnSubmitVfaClick: function(button, e, eOpts) {
        var me = this;

        var form = button.up('form').getForm();
        var action = Ext.ComponentQuery.query('#hdnActionVfa')[0].getValue();
        var txtMaNo = Ext.ComponentQuery.query('#txtMaNoVfa')[0];

        if(action == "E" && txtMaNo.getValue()  === "")
        {
            msg("WARNING","Please Enter  Ma No. !!!");

            //txtMaNo.focus(true);
            return;
        }


        if(!form.isValid())
        {
            msg("WARNING","Please Fill the required fields !!!");    
            return;
        }

        if(action === "D")
        {  

            var offCode = Ext.ComponentQuery.query('#txtOfficeCodeVfa')[0].getValue();
            var maNo = txtMaNo.getValue() === "" ?null:txtMaNo.getValue();


            //------------------------------------------------------
            // NB: Posting Data to Server
            //------------------------------------------------------

            Ext.Ajax.request({
                url:"../Handlers/VAT/ManagementAssessment/MaFinalHeadsHandler.ashx?method=DeleteMaFinalHeads" ,
                params:{offCode:offCode,maNo:maNo},
                success: function ( result, request ) {

                    var obj = Ext.decode(result.responseText);

                    msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);
                    if(obj.success === "false") return;

                    me.clearControls("");

                },
                failure: function ( result, request ) {

                    var obj = Ext.decode(result.responseText);

                    msg("FAILURE",obj.message);
                    return;
                }

            });



        }
        else
        {
            Ext.Msg.confirm('Confirm Action', 'एकपटक Submit गरिसकेपछि अर्को पटक विवरण फेरि परिवर्तन गर्न पइने छैन। \n के तपाई Submit गर्न चाहनुहन्छ ?', function(btn) {
                if(btn == 'yes'){

                    me.save("F");

                    return true;
                }
            }, this);

        }
    },

    onBtnSaveVfaClick: function(button, e, eOpts) {
        var form = button.up('form').getForm();
        var action = Ext.ComponentQuery.query('#hdnActionVfa')[0].getValue();
        var txtMaNo = Ext.ComponentQuery.query('#txtMaNoVfa')[0];

        if(action == "E" && txtMaNo.getValue()  === "")
        {
            msg("WARNING","Please Enter  Ma No. !!!");

            //txtMaNo.focus(true);
            return;
        }

        if(!form.isValid())
        {
            msg("WARNING","Please Fill the required fields !!!");    
            return;
        }




        var param = null;
        var view = Ext.ComponentQuery.query('#VatFinalAssmnt')[0];

        if(view.extraParam)
        {
            param = view.extraParam.params;


            if(param.from == 'AU')
            { 
                //msg("WARNING","Save Authorized Update !!!");
                this.saveForAU(param.requestNo,param.offCode);

                return;
            }
        }
        else
        {
            this.save("I");
        }
    },

    onBtnEditVfaClick: function(button, e, eOpts) {
        var hdnAction = Ext.ComponentQuery.query('#hdnActionVfa')[0];
        var lblActionVfa = Ext.ComponentQuery.query('#lblActionVfa')[0];
        var txtMaNoVfa = Ext.ComponentQuery.query('#txtMaNoVfa')[0];

        this.clearControls("");

        txtMaNoVfa.setReadOnly(false);
        txtMaNoVfa.focus(true);
        hdnAction.setValue("E");
        lblActionVfa.setValue("Updating ...");


        var btnSave = Ext.ComponentQuery.query("#btnSaveVfa")[0];
        var btnSubmit = Ext.ComponentQuery.query("#btnSubmitVfa")[0];

        btnSave.setDisabled(false);
        btnSubmit.setDisabled(false);
    },

    onBtnDeleteVfaClick: function(button, e, eOpts) {
        var hdnAction = Ext.ComponentQuery.query('#hdnActionVfa')[0];
        var lblActionVfa = Ext.ComponentQuery.query('#lblActionVfa')[0];
        var txtMaNoVfa = Ext.ComponentQuery.query('#txtMaNoVfa')[0];

        txtMaNoVfa.setReadOnly(false);
        txtMaNoVfa.focus(true);

        this.clearControls("");
        hdnAction.setValue("D");

        lblActionVfa.setValue("Deleting ...");


        var btnSave = Ext.ComponentQuery.query("#btnSaveVfa")[0];
        var btnSubmit = Ext.ComponentQuery.query("#btnSubmitVfa")[0];

        btnSave.setDisabled(false);
        btnSubmit.setDisabled(false);
    },

    onTxtMaNoVfaKeypress: function(textfield, e, eOpts) {
        var me = this;
        me.clearControls("MaNo");

        var action = Ext.ComponentQuery.query('#hdnActionVfa')[0].getValue();


        var param = null;
        var view = Ext.ComponentQuery.query('#VatFinalAssmnt')[0];


        if(view.extraParam)
        {
            param = view.extraParam.params;

            var from = param.from;

            msg("WARNING","Authorized Update editing ...");
        }
        else
        {

            if(e.keyCode === 13)
            {
                if(action === "P")
                {
                    me.loadDetailsForPrint();
                }
                else
                {
                    me.loadDetailsByMaNo();
                }
            }
            else if(e.keyCode === 9)
            {
                if(action === "P")
                {
                    me.loadDetailsForPrint();
                }
                else
                {
                    me.loadDetailsByMaNo();
                }
            }
        }

    },

    onCboMaReasonCodeVfaChange: function(field, newValue, oldValue, eOpts) {
        var txtAppealNoVfa = Ext.ComponentQuery.query('#txtAppealNoVfa')[0];
        var txtMaReasonDescVfa = Ext.ComponentQuery.query('#txtMaReasonDescVfa')[0];

        txtAppealNoVfa.setDisabled(true);
        txtMaReasonDescVfa.setDisabled(true);

        if(oldValue !== undefined && oldValue !== null)
        {   
            txtAppealNoVfa.setValue("");
            txtMaReasonDescVfa.setValue("");
        }

        if(newValue == "4")
        {
            txtAppealNoVfa.setDisabled(false);
        }
        else if(newValue == "5")
        {
            txtMaReasonDescVfa.setDisabled(false);
        }

    },

    onBtnPrintVfaClick: function(button, e, eOpts) {
        var me = this;

        var txtOfficeCodeVfa = Ext.ComponentQuery.query("#txtOfficeCodeVfa")[0];
        var txtMaNoVfa = Ext.ComponentQuery.query("#txtMaNoVfa")[0];

        var lblActionVfa = Ext.ComponentQuery.query('#lblActionVfa')[0];

        var offCode = txtOfficeCodeVfa.getValue();    
        var maNo = txtMaNoVfa.getValue();
        var hdnAction = Ext.ComponentQuery.query('#hdnActionVfa')[0];

        if(offCode === "")
        {
            msg("WARNING","कृपया  'कार्यलय कोड' राख्नुहोस् !!!",function(){offCode.focus(true);});
            return;
        }

        me.clearControls("");
        txtMaNoVfa.setValue(maNo);

        hdnAction.setValue("P");
        lblActionVfa.setValue("Print ...");
        txtMaNoVfa.focus(true);
        txtMaNoVfa.setReadOnly(false);

        //me.print(offCode,maNo);

        //var btnSave = Ext.ComponentQuery.query("#btnSaveVfa")[0];
        //var btnSubmit = Ext.ComponentQuery.query("#btnSubmitVfa")[0];

        //btnSave.setDisabled(true);
        //btnSubmit.setDisabled(true);

    },

    validateTaxDuration: function() {
        var hdnFilePerVfa = Ext.ComponentQuery.query("#hdnFilePerVfa")[0];
        var filePer = Ext.ComponentQuery.query("#cboFilingPeriodVfa")[0].getValue();
        var taxyear = Ext.ComponentQuery.query("#txtTaxYearVfa")[0].getValue();
        var period = Ext.ComponentQuery.query("#cboPeriodVfa")[0].getValue();
        var pan = Ext.ComponentQuery.query("#txtPanVfa")[0].getValue();
        var acctType = Ext.ComponentQuery.query("#txtAcctTypeVfa")[0].getValue();
        var flag = true;
        var errMsg = "";

        hdnFilePerVfa.setValue("");

        var objFocus = null

        if(pan ===''||pan === null)
        {
            // msg('WARNING', 'कृपया स्था.लेखा.नं. राख्नुहोस् !!!');
            //return false;
            errMsg = "कृपया स्था.लेखा.नं. राख्नुहोस् !!!<br>";
            objFocus = Ext.ComponentQuery.query("#txtPanVfa")[0];
        }

        if(filePer === "" || filePer === null)
        {      
            //msg("WARNING","कृपया मा/चौ/द्रवै राख्नुहोस्!!!");
            //return false;
            errMsg += "कृपया मा/चौ/द्रवै राख्नुहोस् !!!<br>";

            if(objFocus == null)
            {
                objFocus = Ext.ComponentQuery.query("#cboFilingPeriodVfa")[0];
            }
        }


        if(period === "" || period === null)
        {  
            // msg("WARNING","कृपया कर अवधि राख्नुहोस् <br>"); 
            //return false;
            errMsg += "कृपया कर अवधि राख्नुहोस् !!!<br>";

            if(objFocus == null)
            {
                objFocus = Ext.ComponentQuery.query("#cboPeriodVfa")[0];
            }
        }



        if(taxyear ==='0'|| taxyear === null ||taxyear === "")
        {
            // msg('WARNING','कृपया  कर वर्ष राख्नुहोस् <br>');
            // return false;
            errMsg += "कृपया  कर वर्ष राख्नुहोस् !!!<br>";

            if(objFocus == null)
            {
                objFocus = Ext.ComponentQuery.query("#txtTaxYearVfa")[0];
            }
        }

        //alert("FINALma validating !" + errMsg);

        if(errMsg !== "")
        {
            msg("WARNING",errMsg,function(){ objFocus.focus();});
            return false;
        }

        var  wait = watiMsg('Validating ...');

        Ext.Ajax.request({
            url: '../Handlers/VAT/VatUtilitiesHandler.ashx',
            params: {
                method:'GetFilePeriodWithEndDate',
                filePer: filePer,
                taxyear:taxyear,
                period:period,
                pan: pan,
                acctType:acctType
            },
            async:false,
            success: function(result, request){
                wait.hide();

                objFocus = Ext.ComponentQuery.query("#cboFilingPeriodVfa")[0];

                var obj = Ext.decode(result.responseText);
                var message = "";

                message = obj.success === 'true'?(obj.message !== filePer?"Please Enter valid Filing Period !!!": obj.message):obj.message; 

                if(obj.success === 'false')
                {
                    flag = false;
                    msg("WARNING",message,function(){ objFocus.focus();});
                }
                else if(obj.success == 'true' && obj.message !== filePer)
                {
                    flag = false;
                    msg("WARNING",message,function(){ objFocus.focus();});
                }
                else if(obj.success == 'true' && obj.message === filePer)
                {
                    //hdnFilePerVfa.setValue(message);
                    flag = true;
                }
                else
                {
                    flag = false;                                        
                    msg("WARNING",message,function(){ objFocus.focus();});
                }

            },
            failure: function ( result, request ) {

                wait.hide();

                var obj = Ext.decode(result.responseText);

                msg("FAILURE",obj.message);
            }

        });


        return flag;
    },

    clearControls: function(arg) {
        var txtOfficeCodeVfa = Ext.ComponentQuery.query('#txtOfficeCodeVfa')[0];
        var txtMaNoVfa = Ext.ComponentQuery.query('#txtMaNoVfa')[0];
        var txtPanVfa = Ext.ComponentQuery.query('#txtPanVfa')[0];
        var txtNameVfa = Ext.ComponentQuery.query('#txtNameVfa')[0];
        var txtAddressVfa = Ext.ComponentQuery.query('#txtAddressVfa')[0];
        var txtPhoneVfa = Ext.ComponentQuery.query('#txtPhoneVfa')[0];
        var txtAssessPeriodVfa = Ext.ComponentQuery.query('#txtAssessPeriodVfa')[0];
        var txtSectionVfa = Ext.ComponentQuery.query('#txtSectionVfa')[0];
        var txtRuleVfa = Ext.ComponentQuery.query('#txtRuleVfa')[0];
        var txtMaReasonDescVfa = Ext.ComponentQuery.query('#txtMaReasonDescVfa')[0];
        var txtAppealNoVfa = Ext.ComponentQuery.query('#txtAppealNoVfa')[0];
        var txtIntCalUptoVfa = Ext.ComponentQuery.query('#txtIntCalUptoVfa')[0];
        var txtEffDateVfa = Ext.ComponentQuery.query('#txtEffDateVfa')[0];

        var txtBankVfa = Ext.ComponentQuery.query('#txtBankVfa')[0];
        var txtBranchVfa = Ext.ComponentQuery.query('#txtBranchVfa')[0];

        var cboMaReasonCodeVfa = Ext.ComponentQuery.query('#cboMaReasonCodeVfa')[0];

        var strTaxDurationVfa = Ext.getStore('TaxDurationVfa');

        var hdnFilePerVfa = Ext.ComponentQuery.query("#hdnFilePerVfa")[0];
        var hdnActionVfa = Ext.ComponentQuery.query('#hdnActionVfa')[0];

        var lblActionVfa = Ext.ComponentQuery.query('#lblActionVfa')[0];
        var lblFinAmount = Ext.ComponentQuery.query('#lblFinTotalVfa')[0];

        var btnAddVfa = Ext.ComponentQuery.query("#btnAddVfa")[0];
        btnAddVfa.setDisabled(true);

        if(arg !== "Pan")
        {
            txtPanVfa.setValue("");
            txtPanVfa.clearInvalid();
        }


        if(arg !== "MaNo")
        {    
            txtMaNoVfa.setValue("");
            txtMaNoVfa.clearInvalid();

            hdnActionVfa.setValue("");
            lblActionVfa.setValue("");
            lblFinAmount.setValue("");
        }

        hdnFilePerVfa.setValue("");


        txtBankVfa.setValue("");
        txtBranchVfa.setValue("");

        txtNameVfa.setValue("");
        txtAddressVfa.setValue("");
        txtPhoneVfa.setValue("");
        txtAssessPeriodVfa.setValue("");
        txtSectionVfa.setValue("");
        txtRuleVfa.setValue("");
        txtMaReasonDescVfa.setValue("");
        txtAppealNoVfa.setValue("");
        txtIntCalUptoVfa.setValue("");
        txtEffDateVfa.setValue("");
        cboMaReasonCodeVfa.setValue("");


        txtBankVfa.clearInvalid();
        txtBranchVfa.clearInvalid();

        txtNameVfa.clearInvalid();
        txtAddressVfa.clearInvalid();
        txtPhoneVfa.clearInvalid();
        txtAssessPeriodVfa.clearInvalid();
        txtSectionVfa.clearInvalid();
        txtRuleVfa.clearInvalid();
        txtMaReasonDescVfa.clearInvalid();
        txtAppealNoVfa.clearInvalid();
        txtIntCalUptoVfa.clearInvalid();
        txtEffDateVfa.clearInvalid();
        cboMaReasonCodeVfa.clearInvalid();

        strTaxDurationVfa.loadData([],false);












    },

    save: function(maStatus) {
        var me = this;

        var loadMsg = "";

        var offCode = Ext.ComponentQuery.query('#txtOfficeCodeVfa')[0].getValue();
        var maNo = Ext.ComponentQuery.query('#txtMaNoVfa')[0].getValue() === "" ?null:Ext.ComponentQuery.query('#txtMaNoVfa')[0].getValue();
        var pan = Ext.ComponentQuery.query('#txtPanVfa')[0].getValue();
        var name = Ext.ComponentQuery.query('#txtNameVfa')[0].getValue();
        var address = Ext.ComponentQuery.query('#txtAddressVfa')[0].getValue();
        var phone = Ext.ComponentQuery.query('#txtPhoneVfa')[0].getValue();
        var assessPeriod = Ext.ComponentQuery.query('#txtAssessPeriodVfa')[0].getValue();
        var section = Ext.ComponentQuery.query('#txtSectionVfa')[0].getValue();
        var rule = Ext.ComponentQuery.query('#txtRuleVfa')[0].getValue();
        var maReasonDesc = Ext.ComponentQuery.query('#txtMaReasonDescVfa')[0].getValue();
        var appealNo = Ext.ComponentQuery.query('#txtAppealNoVfa')[0].getValue();
        var intCalUpto = Ext.ComponentQuery.query('#txtIntCalUptoVfa')[0].getValue();
        var effDate = Ext.ComponentQuery.query('#txtEffDateVfa')[0].getValue();
        var maReasonCode = Ext.ComponentQuery.query('#cboMaReasonCodeVfa')[0].getValue();
        var accTypeVfa = Ext.ComponentQuery.query('#txtAcctTypeVfa')[0].getValue();

        var bankName = Ext.ComponentQuery.query('#txtBankVfa')[0].getValue();
        var bankAddr = Ext.ComponentQuery.query('#txtBranchVfa')[0].getValue();


        var totMaAmt = Ext.ComponentQuery.query('#lblFinTotalVfa')[0].getValue();

        var strTaxDurationVfa = Ext.getStore('TaxDurationVfa');

        var tranNo = Ext.ComponentQuery.query('#hdnTranNoVfa')[0].getValue();
        var action = Ext.ComponentQuery.query('#hdnActionVfa')[0].getValue();
        var stDate = Ext.ComponentQuery.query('#hdnEffDateVfa')[0].getValue();            

        /*
        if(intCalUpto > effDate)
        {
        msg("WARNING"," व्याज र जरिवाना गणना मिति अन्तिम कर मिति भन्दा कम हुनु पर्छ !!!");
        return;
        }
        */


        if(action == "E")
        {
            loadMsg = "Updating ...";
        }
        else
        {
            loadMsg = "Saving ...";
        }

        strTaxDurationVfa.each(function (rec) {     

            var taxYear = rec.get('TaxYear') === ""? null:rec.get('TaxYear');
            var maAmount = rec.get('MaAmount') === ""? null:rec.get('MaAmount');
            var penAmount = rec.get('PenAmount') === ""? null:rec.get('PenAmount');
            var addAmount = rec.get('AddAmount') === ""? null:rec.get('AddAmount');
            var intAmount = rec.get('IntAmount') === ""? null:rec.get('IntAmount');

            rec.data.TaxYear = taxYear;
            rec.data.MaAmount = maAmount;
            rec.data.PenAmount = penAmount;
            rec.data.AddAmount = addAmount;
            rec.data.IntAmount = intAmount;

        });

        var maFinalLines = "";
        var maFinalHead = "";

        strTaxDurationVfa.clearFilter();

        if(strTaxDurationVfa.getCount() > 0)
        {
            maFinalLines = getJson(strTaxDurationVfa); 

            strTaxDurationVfa.filter(function(item){
                return item.get("Action")!= 'D';
            });
        }

        maFinalHead = { 
            Pan :pan,
            AcctType : accTypeVfa,
            MaReasonCode :maReasonCode,     
            OffCode : offCode, 
            MaNo :maNo, 
            EffDate: effDate,
            TranDate :"",  
            MaReasonDesc : maReasonDesc,
            AppealNo:appealNo !== ""?appealNo:null, 
            TotMaAmt:totMaAmt !== ""?totMaAmt:null, 
            IntCalUpto : intCalUpto,
            AssessPeriod:assessPeriod,
            Section :section,
            Rules : rule,
            BankName:bankName,
            BankAddr:bankAddr,
            UserID:"pcs",
            MaStatus:maStatus,
            FinalDate:"",   
            StDate:stDate,
            TranNo:tranNo !== ""?tranNo:null,
            MaFinalLines:maFinalLines !== ""?maFinalLines:null,
            Action:action

        };

        var waitSave = watiMsg(loadMsg);

        //console.log("maFinalHead",maFinalHead);

        //------------------------------------------------------
        // NB: Posting Data to Server
        //------------------------------------------------------

        Ext.Ajax.request({
            url:"../Handlers/VAT/ManagementAssessment/MaFinalHeadsHandler.ashx?method=Save" ,
            params:{maFinalHead:JSON.stringify(maFinalHead)},
            success: function ( result, request ) {

                waitSave.hide();

                var obj = Ext.decode(result.responseText);

                /*
                msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);
                if(obj.success === "false") return;

                me.clearControls("");
                */

                if(obj.success === "false")
                {

                    msg("FAILURE",obj.message);
                    return;
                }


                me.clearControls("");

                //-----------------------------------------------------------------------------
                // NB: Finalized case , it allows to display report
                //-----------------------------------------------------------------------------
                if(maStatus === "F")
                {
                    var message = obj.message;

                    if(maNo === "" || maNo === null)
                    {
                        var len = message.length;

                        maNo = message.substr(len-10,10);

                    }

                    Ext.Msg.confirm('Confirm Action',message +'<br><br> के तपाई प्रिन्ट गर्न चाहनुहुन्छ?', function(btn) {
                        if(btn == 'yes'){

                            me.print(offCode,maNo);

                            return true;
                        }
                    }, this);
                }
                else
                {
                    msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);
                }


            },
            failure: function ( result, request ) {

                waitSave.hide();

                var errMsg = "Error in " + loadMsg;

                msg("FAILURE",errMsg);
                return;
            }

        });

    },

    saveForAU: function(requestNo,offCodeAU) {
        var me = this;

        var loadMsg = "";

        var offCode = Ext.ComponentQuery.query('#txtOfficeCodeVfa')[0].getValue();
        var maNo = Ext.ComponentQuery.query('#txtMaNoVfa')[0].getValue() === "" ?null:Ext.ComponentQuery.query('#txtMaNoVfa')[0].getValue();
        var pan = Ext.ComponentQuery.query('#txtPanVfa')[0].getValue();
        var name = Ext.ComponentQuery.query('#txtNameVfa')[0].getValue();
        var address = Ext.ComponentQuery.query('#txtAddressVfa')[0].getValue();
        var phone = Ext.ComponentQuery.query('#txtPhoneVfa')[0].getValue();
        var assessPeriod = Ext.ComponentQuery.query('#txtAssessPeriodVfa')[0].getValue();
        var section = Ext.ComponentQuery.query('#txtSectionVfa')[0].getValue();
        var rule = Ext.ComponentQuery.query('#txtRuleVfa')[0].getValue();
        var maReasonDesc = Ext.ComponentQuery.query('#txtMaReasonDescVfa')[0].getValue();
        var appealNo = Ext.ComponentQuery.query('#txtAppealNoVfa')[0].getValue();
        var intCalUpto = Ext.ComponentQuery.query('#txtIntCalUptoVfa')[0].getValue();
        var effDate = Ext.ComponentQuery.query('#txtEffDateVfa')[0].getValue();
        var maReasonCode = Ext.ComponentQuery.query('#cboMaReasonCodeVfa')[0].getValue();
        var accTypeVfa = Ext.ComponentQuery.query('#txtAcctTypeVfa')[0].getValue();

        var bankName = Ext.ComponentQuery.query('#txtBankVfa')[0].getValue();
        var bankAddr = Ext.ComponentQuery.query('#txtBranchVfa')[0].getValue();


        var totMaAmt = Ext.ComponentQuery.query('#lblFinTotalVfa')[0].getValue();

        var strTaxDurationVfa = Ext.getStore('TaxDurationVfa');

        var tranNo = Ext.ComponentQuery.query('#hdnTranNoVfa')[0].getValue();
        var action = Ext.ComponentQuery.query('#hdnActionVfa')[0].getValue();
        var stDate = Ext.ComponentQuery.query('#hdnEffDateVfa')[0].getValue();            

        /*
        if(intCalUpto > effDate)
        {
        msg("WARNING"," व्याज र जरिवाना गणना मिति अन्तिम कर मिति भन्दा कम हुनु पर्छ !!!");
        return;
        }
        */


        if(action == "E")
        {
            loadMsg = "Updating ...";
        }
        else
        {
            loadMsg = "Saving ...";
        }

        strTaxDurationVfa.each(function (rec) {     

            var taxYear = rec.get('TaxYear') === ""? null:rec.get('TaxYear');
            var maAmount = rec.get('MaAmount') === ""? null:rec.get('MaAmount');
            var penAmount = rec.get('PenAmount') === ""? null:rec.get('PenAmount');
            var addAmount = rec.get('AddAmount') === ""? null:rec.get('AddAmount');
            var intAmount = rec.get('IntAmount') === ""? null:rec.get('IntAmount');

            rec.data.TaxYear = taxYear;
            rec.data.MaAmount = maAmount;
            rec.data.PenAmount = penAmount;
            rec.data.AddAmount = addAmount;
            rec.data.IntAmount = intAmount;

        });

        var maLines = "";
        var maHeader = "";

        strTaxDurationVfa.clearFilter();

        if(strTaxDurationVfa.getCount() > 0)
        {
            maLines = getJson(strTaxDurationVfa); 

            strTaxDurationVfa.filter(function(item){
                return item.get("Action")!= 'D';
            });
        }


        maHeader = { 
            RequestNo:requestNo,
            OffCodeAU:offCodeAU,
            Pan :pan,
            AcctType : accTypeVfa,
            MaReasonCode :maReasonCode,     
            OffCode : offCode, 
            MaNo :maNo, 
            EffDate: effDate,
            TranDate :"",  
            MaReasonDesc : maReasonDesc,
            AppealNo:appealNo !== ""?appealNo:null, 
            TotMaAmt:totMaAmt !== ""?totMaAmt:null, 
            IntCalUpto : intCalUpto,
            AssessPeriod:assessPeriod,
            Section :section,
            Rules : rule,
            BankName:bankName,
            BankAddr:bankAddr,
            UserID:"",
            MaStatus:"",
            FinalDate:"",   
            StDate:stDate,
            TranNo:tranNo !== ""?tranNo:null,
            MaFinalLines:maLines !== ""?maLines:null,
            Action:action

        };

        var waitSave = watiMsg(loadMsg);
        //------------------------------------------------------
        // NB: Posting Data to Server
        //------------------------------------------------------

        Ext.Ajax.request({
            url:"../Handlers/VAT/ManagementAssessment/MaFinalHeadsHandler.ashx?method=SaveMaHeaderForAU" ,
            params:{maHeader:JSON.stringify(maHeader)},
            success: function ( result, request ) {
                waitSave.hide();

                var obj = Ext.decode(result.responseText);

                msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);

            },
            failure: function ( result, request ) {

                waitSave.hide();

                msg("FAILURE in saving Authorized Update!!!");
                return;
            }

        });
    },

    calTotal: function() {
        var grd = Ext.ComponentQuery.query('#grdTaxDurationVfa')[0];
        var store = grd.getStore();
        var selectedRow = grd.getSelectionModel();

        var record = grd.getSelectionModel().getSelection()[0];

        //console.log("idx",grd.getSelectionModel().getSelectedIndex());
        //console.log('rowIdx',store.indexOf(record));

        var txtMaAmountVfa = Ext.ComponentQuery.query('#txtMaAmountVfa')[0].getValue();
        var txtPenAmountVfa = Ext.ComponentQuery.query('#txtPenAmountVfa')[0].getValue();
        var txtAddAmountVfa = Ext.ComponentQuery.query('#txtAddAmountVfa')[0].getValue();
        var txtIntAmountVfa = Ext.ComponentQuery.query('#txtIntAmountVfa')[0].getValue();
        var finAmount = Ext.ComponentQuery.query('#lblFinTotalVfa')[0];


        var maAmount = (txtMaAmountVfa === ""   || txtMaAmountVfa  === null)?0:txtMaAmountVfa;
        var penAmount = (txtPenAmountVfa === "" || txtPenAmountVfa  === null)?0:txtPenAmountVfa;
        var addAmount = (txtAddAmountVfa === "" || txtAddAmountVfa  === null )?0:txtAddAmountVfa;
        var intAmount = (txtIntAmountVfa === "" || txtIntAmountVfa  === null)?0:txtIntAmountVfa;

        var totAmount = parseInt(maAmount)+parseInt(penAmount)+parseInt(addAmount)+parseInt(intAmount);


        Ext.ComponentQuery.query('#txtTotAmountVfa')[0].setValue(totAmount);

        finAmount.setValue("");

        //This code sum numbers in certain column
        var sum = 0; 
        //store.each(function (rec) { sum += rec.get('NameColumn'); console.log('sum',sum);});
        var rowIdx = store.indexOf(record);
        var idx = 0;


        store.each(function (rec) {     


            if(rec.get('TotAmount') !=="" && rowIdx !== idx)
            {
                sum = parseInt(sum) + parseInt(rec.get('TotAmount')); 
            }

            idx++;


        });

        //console.log('totAmount',totAmount);
        //console.log('sum',sum);


        var overallTot = parseInt(sum)+parseInt(totAmount);

        finAmount.setValue(overallTot);



    },

    loadPanDetails: function() {
        this.clearControls("Pan");

        var isValid = false;
        var btnAddVfa = Ext.ComponentQuery.query("#btnAddVfa")[0];
        var txtPanVfa = Ext.ComponentQuery.query("#txtPanVfa")[0];
        var txtNameVfa = Ext.ComponentQuery.query("#txtNameVfa")[0];
        var txtAddressVfa = Ext.ComponentQuery.query("#txtAddressVfa")[0];
        var txtPhoneVfa = Ext.ComponentQuery.query("#txtPhoneVfa")[0];
        var offCode = Ext.ComponentQuery.query("#txtOfficeCodeVfa")[0].getValue();


        if(txtPanVfa.getValue() === "")
        {
            //  msg("WARNING","Please Enter PAN !!!");
            return;
        }

        LoadTaxpayerInfoWithValidPan(txtPanVfa.getValue(),"00",function(data){

            var rec = data.root.Taxpayer;
            var addr = rec.BusinessAddress.Address;
            var office = rec.Office;
            var detailAddr = addr.StreetName + " , " + addr.DistrictNameNep;


            if(rec.AcctStatus === "D")
            {
                msg("WARNING","PAN is Deactivated !!!");
                return;
            }


            if(offCode != office.OfficeCode)
            {
                msg("WARNING","PAN is not registered in this office !!!");

                return;
            }


            txtNameVfa.setValue(rec.Name);
            txtAddressVfa.setValue(detailAddr);
            txtPhoneVfa.setValue(rec.TelePhone);

            btnAddVfa.setDisabled(false);

        });

    },

    loadDetailsByMaNo: function() {
        var me = this;

        var action = Ext.ComponentQuery.query('#hdnActionVfa')[0].getValue();
        var url = "";    
        var txtOfficeCodeVfa = Ext.ComponentQuery.query("#txtOfficeCodeVfa")[0];
        var txtMaNoVfa = Ext.ComponentQuery.query("#txtMaNoVfa")[0];
        var txtPanVfa = Ext.ComponentQuery.query("#txtPanVfa")[0];
        var txtNameVfa = Ext.ComponentQuery.query("#txtNameVfa")[0];
        var txtAddressVfa = Ext.ComponentQuery.query("#txtAddressVfa")[0];
        var txtPhoneVfa = Ext.ComponentQuery.query("#txtPhoneVfa")[0];

        var offCode = txtOfficeCodeVfa.getValue();    
        var maNo = txtMaNoVfa.getValue();

        if(offCode === "" || maNo === "")
        {
            return;
        }    


        if(action === "E" || action === "D")
        {
            url = "../Handlers/VAT/ManagementAssessment/MaFinalHeadsHandler.ashx?method=GetMaFinalHeads";
        }
        else        
        {
            url = "../Handlers/VAT/ManagementAssessment/MaPreHeadsHandler.ashx?method=GetMaVerifiedPreHeads";
        }


        var wait = watiMsg('loading ...');

        Ext.Ajax.request({
            url:url,
            params:{offCode:offCode,maNo:maNo},
            success: function ( result, request ) {            

                wait.hide();            

                var obj = Ext.decode(result.responseText);         

                var data = obj.root; 

                if(obj.success === "false")
                {           

                    //---------------------------------------------------------------------------------
                    // NB: For Final MA already finalized case.
                    //---------------------------------------------------------------------------------

                    if(obj.message === "F")
                    {               

                        if(action === "P")
                        {
                            me.print(offCode,maNo);
                            return; 

                        }
                        else
                        {

                            Ext.Msg.confirm('Confirm Action', 'Final Ma is already FINALIZED !!!. <br/> Do you want to PREVIEW ?', function(btn) {
                                if(btn == 'yes'){

                                    me.loadMaData(data,"F");    
                                }
                            }, this);
                        }
                    }            
                    else
                    {
                        if(obj.message.length === 66)
                        {

                            Ext.Msg.confirm('WARNING',obj.message, function(btn) {
                                if(btn == 'yes'){                
                                    txtMaNoVfa.setValue("");
                                    txtPanVfa.focus(true);  
                                    txtPanVfa.clearInvalid();
                                }
                            }, this);


                        }
                        else if(obj.message.length === 52)
                        {

                            Ext.Msg.confirm('WARNING',obj.message, function(btn) {
                                if(btn == 'yes'){    
                                    var tmpMaNo = txtMaNoVfa.getValue();

                                    me.onBtnEditVfaClick();
                                    txtMaNoVfa.setValue(tmpMaNo);
                                    me.loadDetailsByMaNo();
                                }
                            }, this);
                        }
                        else
                        {
                            msg("WARNING",obj.message);
                        }
                    }

                    return;
                }

                me.loadMaData(data,"");

            },
            failure: function ( result, request ) {

                wait.hide();
                // var obj = Ext.decode(result.responseText);   

                msg("FAILURE","Error in Fetching Data !!!");
            }
        });

    },

    loadDetailsForPrint: function() {
        var me = this;

        var action = Ext.ComponentQuery.query('#hdnActionVfa')[0].getValue();
        var url = "";    
        var txtOfficeCodeVfa = Ext.ComponentQuery.query("#txtOfficeCodeVfa")[0];
        var txtMaNoVfa = Ext.ComponentQuery.query("#txtMaNoVfa")[0];
        var txtPanVfa = Ext.ComponentQuery.query("#txtPanVfa")[0];
        var txtNameVfa = Ext.ComponentQuery.query("#txtNameVfa")[0];
        var txtAddressVfa = Ext.ComponentQuery.query("#txtAddressVfa")[0];
        var txtPhoneVfa = Ext.ComponentQuery.query("#txtPhoneVfa")[0];

        var offCode = txtOfficeCodeVfa.getValue();    
        var maNo = txtMaNoVfa.getValue();

        if(offCode === "" || maNo === "")
        {
            return;
        }    

        url = "../Handlers/VAT/ManagementAssessment/MaFinalHeadsHandler.ashx?method=GetMaFinalHeads";


        var wait = watiMsg('loading ...');

        Ext.Ajax.request({
            url:url,
            params:{offCode:offCode,maNo:maNo},
            success: function ( result, request ) {            

                wait.hide();            

                var obj = Ext.decode(result.responseText);        
                var data = obj.root;

                if(obj.success === "false")
                {                   
                    if(obj.message === "F")
                    {                
                        me.print(offCode,maNo);
                    }
                    else
                    {
                        msg("WARNING",obj.message);
                    }

                    return;
                }

                me.print(offCode,maNo);


            },
            failure: function ( result, request ) {

                wait.hide();
                // var obj = Ext.decode(result.responseText);   

                msg("FAILURE","Error in Fetching Data !!!");
            }
        });

    },

    loadDetailByTran: function(tran) {
        var me = this;

        if(tran === "" || tran === null)
        {    
            msg("WARNING","No Tran Exists for Verification !!!");
            return;
        }

        var wait = waitMsg('loading ...');

        Ext.Ajax.request({
            url:"../Handlers/VAT/ManagementAssessment/MaFinalHeadsHandler.ashx?method=GetMaFinalHeadByTranNo",
            params:{tranNo:tran},
            success: function ( result, request ) {            

                wait.hide();            
                var obj = Ext.decode(result.responseText);        
                var data = obj.root; 

                if(obj.success === "true")
                {              
                    me.loadMaData(data,"");

                    var view = Ext.ComponentQuery.query('#VatFinalAssmnt')[0];

                    view.query('.button').forEach(function(c){c.setDisabled(true);});
                    view.query('.field,.combo').forEach(function(c){c.setReadOnly(true);});
                    view.query('.grid').forEach(function(c){ c.on('beforeedit', function(editor, e) { return false;});});

                    return;
                }
                else
                {
                    msg("WARNING",obj.message);

                    return;
                }       

            },
            failure: function ( result, request ) {

                wait.hide(); 

                msg("FAILURE","Error in Fetching Data !!!");
            }
        });

    },

    loadMaData: function(data,type) {
        var sum = 0;
        var finAmount = Ext.ComponentQuery.query('#lblFinTotalVfa')[0];
        var grd = Ext.ComponentQuery.query("#grdTaxDurationVfa")[0];

        var txtOfficeCodeVfa = Ext.ComponentQuery.query("#txtOfficeCodeVfa")[0];
        var txtMaNoVfa = Ext.ComponentQuery.query("#txtMaNoVfa")[0];
        var txtPanVfa = Ext.ComponentQuery.query("#txtPanVfa")[0];
        var txtNameVfa = Ext.ComponentQuery.query("#txtNameVfa")[0];
        var txtAddressVfa = Ext.ComponentQuery.query("#txtAddressVfa")[0];
        var txtPhoneVfa = Ext.ComponentQuery.query("#txtPhoneVfa")[0];

        var txtAssessPeriodVfa = Ext.ComponentQuery.query('#txtAssessPeriodVfa')[0];
        var txtSectionVfa = Ext.ComponentQuery.query('#txtSectionVfa')[0];
        var txtRuleVfa = Ext.ComponentQuery.query('#txtRuleVfa')[0];
        var txtMaReasonDescVfa = Ext.ComponentQuery.query('#txtMaReasonDescVfa')[0];
        var txtAppealNoVfa = Ext.ComponentQuery.query('#txtAppealNoVfa')[0];
        var txtIntCalUptoVfa = Ext.ComponentQuery.query('#txtIntCalUptoVfa')[0];
        var txtEffDateVfa = Ext.ComponentQuery.query('#txtEffDateVfa')[0];
        var txtBankVfa = Ext.ComponentQuery.query('#txtBankVfa')[0];
        var txtBranchVfa = Ext.ComponentQuery.query('#txtBranchVfa')[0];

        var hdnAction = Ext.ComponentQuery.query('#hdnActionVfa')[0];
        var hdnTranNo = Ext.ComponentQuery.query('#hdnTranNoVfa')[0];
        var hdnEffDateVfa = Ext.ComponentQuery.query('#hdnEffDateVfa')[0]; 


        var cboMaReasonCodeVfa = Ext.ComponentQuery.query('#cboMaReasonCodeVfa')[0];

        var store = Ext.getStore('TaxDurationVfa');

        var action = hdnAction.getValue();

        txtMaNoVfa.setValue(data.MaNo);
        txtPanVfa.setValue(data.Pan);
        txtBankVfa.setValue(data.BankName);
        txtBranchVfa.setValue(data.BankAddr);
        txtNameVfa.setValue(data.Name);
        txtAddressVfa.setValue(data.Address);
        txtPhoneVfa.setValue(data.Phone);
        txtAssessPeriodVfa.setValue(data.AssessPeriod);
        txtSectionVfa.setValue(data.Section);
        txtRuleVfa.setValue(data.Rules);
        txtMaReasonDescVfa.setValue(data.MaReasonDesc);
        txtAppealNoVfa.setValue(data.AppealNo);
        txtIntCalUptoVfa.setValue(data.IntCalUpto);
        txtEffDateVfa.setValue(data.EffDate);

        hdnTranNo.setValue(data.TranNo);



        if(hdnAction.getValue() !== "D")
        hdnAction.setValue(data.Action);

        cboMaReasonCodeVfa.setValue(data.MaReasonCode);   


        store.loadData([],false);


        if(action === "E" || action === "D")
        {
            store.add(data.MaFinalLines); 
            hdnEffDateVfa.setValue("");
        }
        else 
        {
            if(data.MaPreLines)
            {
                store.add(data.MaPreLines); 
                hdnEffDateVfa.setValue(data.EffDate);
            }
            else if(data.MaFinalLines)
            {
                store.add(data.MaFinalLines);  
                hdnEffDateVfa.setValue(data.EffDate);
            }
        }

        store.each(function (rec) {     

            var taxYear = rec.get('TaxYear') === ""? null:rec.get('TaxYear');
            var maAmount = rec.get('MaAmount') === ""? null:rec.get('MaAmount');
            var penAmount = rec.get('PenAmount') === ""? null:rec.get('PenAmount');
            var addAmount = rec.get('AddAmount') === ""? null:rec.get('AddAmount');
            var intAmount = rec.get('IntAmount') === ""? null:rec.get('IntAmount');

            rec.data.TaxYear = taxYear;
            rec.data.MaAmount = maAmount;
            rec.data.PenAmount = penAmount;
            rec.data.AddAmount = addAmount;
            rec.data.IntAmount = intAmount;


            var maAmount1 = (maAmount === null)?0:maAmount;
            var penAmount1 = (penAmount === null)?0:penAmount;
            var addAmount1 = (addAmount === null)?0:addAmount;
            var intAmount1 = (intAmount === null)?0:intAmount;
            var totAmount = parseInt(maAmount1)+parseInt(penAmount1)+parseInt(addAmount1)+parseInt(intAmount1);

            rec.data.TotAmount = totAmount;


            if(rec.data.TotAmount !=="")
            {
                sum = parseInt(sum) + parseInt(rec.data.TotAmount); 
            }

        });

        grd.bindStore(store);
        finAmount.setValue(sum );


        var btnAddVfa = Ext.ComponentQuery.query("#btnAddVfa")[0];
        btnAddVfa.setDisabled(false);

        if(type === "F")
        {
            var btnSave = Ext.ComponentQuery.query("#btnSaveVfa")[0];
            var btnSubmit = Ext.ComponentQuery.query("#btnSubmitVfa")[0];

            btnSave.setDisabled(true);
            btnSubmit.setDisabled(true);
        }

        //NB: to hide the column of grid
        //grd.columns[9].setVisible(false);

    },

    loadDetailsForAU: function(param) {
        var me = this;
        var wait = watiMsg('loading ...');

        var requestNo = param.requestNo;
        var offCode = param.pks[0].data.Value;
        var maNo = param.pks[1].data.Value;

        var url = "../Handlers/VAT/ManagementAssessment/MaFinalHeadsHandler.ashx?method=GetMaHeaderForAU";


        Ext.Ajax.request({
            url:url,
            params:{offCode:offCode,requestNo:requestNo,maNo:maNo},
            success: function ( result, request ) {            

                wait.hide();            

                var obj = Ext.decode(result.responseText);        

                var data = obj.root;         

                var btnAddVfa = Ext.ComponentQuery.query('#btnAddVfa')[0];     
                var lblActionVfa = Ext.ComponentQuery.query('#lblActionVfa')[0];

                btnAddVfa.setDisabled(false);
                lblActionVfa.setValue("Authorized Update ...");


                me.loadMaData(data,""); 

                var btnEdit = Ext.ComponentQuery.query("#btnEditVfa")[0];
                var btnDelete = Ext.ComponentQuery.query("#btnDeleteVfa")[0];        
                var btnCancel = Ext.ComponentQuery.query("#btnCancelVfa")[0];
                var btnPrint = Ext.ComponentQuery.query("#btnPrintVfa")[0];



                btnEdit.setDisabled(true);
                btnDelete.setDisabled(true);        
                btnCancel.setDisabled(true);              
                btnPrint.setDisabled(true);


            },
            failure: function ( result, request ) {

                wait.hide(); 

                msg("FAILURE","Error in Fetching Data !!!");
            }
        });

    },

    print: function(offCode,maNo) {
        var param = { 'offCode':offCode,'maNo' :maNo };
        var url="../../../Reporting/Vat/ReportHandlers/FinalMaReportHandler.ashx";
        var winOption="width=730,height=345,left=100,top=100,resizable=yes,scrollbars=yes";

        OpenWindowWithPost(url,winOption,"NewFile", param);
    },

    init: function(application) {
        this.control({
            "#btnAddVfa": {
                click: this.onBtnAddClick
            },
            "#VatFinalAssmnt": {
                afterrender: this.onPanelAfterRender,
                beforerender: this.onPanelBeforeRender
            },
            "#cboFilingPeriodVfa": {
                change: this.onCboFilingPeriodChange
            },
            "#cntGrdTaxDurationVfa": {
                afterrender: this.onCntGrdTaxDurationVfaAfterRender,
                beforerender: this.onCntGrdTaxDurationVfaBeforeRender
            },
            "#txtPanVfa": {
                blur: this.onTxtPanVfaBlur,
                keypress: this.onTxtPanVfaKeypress
            },
            "#txtTaxYearVfa": {
                blur: this.onTxtTaxYearVfaBlur
            },
            "#btnCancelVfa": {
                click: this.onBtnCancelVfaClick
            },
            "#cboPeriodVfa": {
                change: this.onCboPeriodVfaChange
            },
            "#txtMaAmountVfa": {
                change: this.onTxtMaAmountVfaChange
            },
            "#txtAddAmountVfa": {
                change: this.onTxtAddAmountVfaChange
            },
            "#txtIntAmountVfa": {
                change: this.onTxtIntAmountVfaChange
            },
            "#txtPenAmountVfa": {
                change: this.onTxtPenAmountVfaChange
            },
            "#btnSubmitVfa": {
                click: this.onBtnSubmitVfaClick
            },
            "#btnSaveVfa": {
                click: this.onBtnSaveVfaClick
            },
            "#btnEditVfa": {
                click: this.onBtnEditVfaClick
            },
            "#btnDeleteVfa": {
                click: this.onBtnDeleteVfaClick
            },
            "#txtMaNoVfa": {
                keypress: this.onTxtMaNoVfaKeypress
            },
            "#cboMaReasonCodeVfa": {
                change: this.onCboMaReasonCodeVfaChange
            },
            "#btnPrintVfa": {
                click: this.onBtnPrintVfaClick
            }
        });
    }

});
