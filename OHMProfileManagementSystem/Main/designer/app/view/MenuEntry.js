/*
 * File: app/view/MenuEntry.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MenuEntry', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.toolbar.Toolbar',
        'Ext.form.field.ComboBox',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.selection.RowModel',
        'Ext.grid.plugin.RowEditing',
        'Ext.grid.column.Action'
    ],

    frame: true,
    height: 586,
    width: 725,
    title: 'Menu Entry',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'combobox',
                            itemId: 'ddlModule',
                            maxWidth: 300,
                            width: 300,
                            fieldLabel: 'Module',
                            emptyText: '- - - Select Module - - -',
                            displayField: 'ModuleDesc',
                            forceSelection: true,
                            queryMode: 'local',
                            store: 'ModuleStore',
                            valueField: 'ModuleId',
                            listeners: {
                                change: {
                                    fn: me.onDdlModuleChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            itemId: 'ddlTab',
                            fieldLabel: 'Tab',
                            emptyText: '- - - Select Tab - - -',
                            displayField: 'TabDesc',
                            forceSelection: true,
                            queryMode: 'local',
                            store: 'TabStore',
                            valueField: 'TabId',
                            listeners: {
                                change: {
                                    fn: me.onDdlTabChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            itemId: 'ddlReport',
                            fieldLabel: 'Report',
                            emptyText: '- - - Select Report - - -',
                            displayField: 'ReportDesc',
                            forceSelection: true,
                            queryMode: 'local',
                            store: 'ReportShortStore',
                            valueField: 'ReportId'
                        },
                        {
                            xtype: 'button',
                            margins: '0 0 0 20',
                            padding: 5,
                            text: 'Search',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'gridpanel',
                    itemId: 'grdMenu',
                    title: 'Menu List',
                    store: 'MenuEntryStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'FormID',
                            text: 'Form ID',
                            editor: {
                                xtype: 'textfield',
                                itemId: 'txtFormId'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 246,
                            dataIndex: 'WebFormName',
                            text: 'Web Form Name',
                            editor: {
                                xtype: 'textfield',
                                itemId: 'txtWebFormName'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 167,
                            dataIndex: 'DisplayName',
                            text: 'Display Name',
                            editor: {
                                xtype: 'textfield',
                                itemId: 'txtDisplayName'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            dataIndex: 'ModuleDesc',
                            text: 'ModuleDesc',
                            editor: {
                                xtype: 'combobox'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            dataIndex: 'TabDesc',
                            text: 'TabDesc',
                            editor: {
                                xtype: 'combobox'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            width: 177,
                            dataIndex: 'RepoTypeDesc',
                            text: 'Report Type Description',
                            editor: {
                                xtype: 'combobox'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'DisplaySeq',
                            text: 'Display Sequence',
                            editor: {
                                xtype: 'textfield',
                                itemId: 'txtDisplaySequence'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'Action',
                            text: 'Action',
                            editor: {
                                xtype: 'textfield',
                                itemId: 'txtAction'
                            }
                        },
                        {
                            xtype: 'actioncolumn',
                            items: [
                                {
                                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                        var store = Ext.getStore('MenuEntryStore');
                                        var grd =  Ext.ComponentQuery.query('#grdMenu')[0];
                                        var row = store.getAt(rowIndex).data;
                                        //console.log('row',row);
                                        //console.log('desc',row.CasteDesc);

                                        Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Menu Entry ?', function(btn) {
                                            if(btn == 'yes'){

                                                var menuEntry={
                                                    //RowID:row.rowID,
                                                    FormID:row.FormID,
                                                    FormName:row.WebFormName,
                                                    WebFormName:row.WebFormName,
                                                    DisplayName:row.DisplayName,
                                                    TabID:row.TabID,
                                                    //TabDesc:row.tabDesc,
                                                    ModuleID:row.ModuleID,
                                                    //ModuleDesc:row.moduleDesc,
                                                    ReportType:row.ReportType,
                                                    //RepoTypeDesc:row.repoTypeDesc,
                                                    DisplaySeq:row.DisplaySeq,
                                                    Action:'D'
                                                };




                                                var wMsg='Deleting....';

                                                var waitSave = watiMsg(wMsg);

                                                Ext.Ajax.request({
                                                    url: '../Handlers/GeneralMasterParameters/Menu/MenuEntryHandler.ashx',
                                                    params: {
                                                        method:'SaveMenuEntry',
                                                        menuEntry:JSON.stringify(menuEntry)
                                                    },
                                                    success: function(response){
                                                        waitSave.hide();
                                                        var out=Ext.decode(response.responseText);
                                                        console.log(out);

                                                        if(out.success==="true")
                                                        {
                                                            var message=out.root;
                                                            if(message.OutResultCode==="SUCCESS")
                                                            {
                                                                msg("SUCCESS",message.OutResultMessage,function(){
                                                                    grd.bindStore(store);
                                                                    store.removeAt(rowIndex);
                                                                });



                                                            }
                                                            else
                                                            {
                                                                msg("FAILURE",message.OutResultMessage);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            msg("FAILURE",out.message);
                                                        }
                                                    },
                                                    failure: function ( result, request ) {
                                                        waitSave.hide();
                                                        var out=Ext.decode(response.responseText);
                                                        msg("FAILURE",out.message);
                                                    }

                                                });



                                                return true;
                                            }
                                        });
                                    },
                                    icon: '../ITS/resources/images/icons/cancel.png'
                                }
                            ]
                        }
                    ],
                    selModel: Ext.create('Ext.selection.RowModel', {

                    }),
                    plugins: [
                        Ext.create('Ext.grid.plugin.RowEditing', {
                            listeners: {
                                canceledit: {
                                    fn: me.onRowEditingCanceledit,
                                    scope: me
                                },
                                validateedit: {
                                    fn: me.onRowEditingValidateedit,
                                    scope: me
                                }
                            }
                        })
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'button',
                                    itemId: 'btnAddMenu',
                                    text: 'Add Menu',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnAddMenuClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onPanelAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onDdlModuleChange: function(field, newValue, oldValue, eOpts) {
         var tabstore=Ext.getStore('TabStore');
                tabstore.removeAll();
                Ext.Ajax.request({
                    url: '../Handlers/GeneralMasterParameters/Menu/TabHandler.ashx',
                    params: {
                        method:'SearchTab'
                    },
                    success: function(response){

                    var data=Ext.decode(response.responseText);

                    tabstore.removeAll();
                    tabstore.add(data.root);


                }
                });
    },

    onDdlTabChange: function(field, newValue, oldValue, eOpts) {
        var module=Ext.ComponentQuery.query('#ddlModule')[0];

        if (module.getValue()===''||module.getValue()===null)
        {
            msg('WARNING','Please, Select Module.');
            return;
        }
        var reportstore=Ext.getStore('ReportShortStore');
                reportstore.removeAll();
                Ext.Ajax.request({
                    url: '../Handlers/GeneralMasterParameters/Menu/ReportHandler.ashx',
                    params: {
                        method:'GetReportShort',
                        moduleId:module.getValue(),
                        tabId:field.getValue()
                    },
                    success: function(response){

                    var data=Ext.decode(response.responseText);
                    reportstore.removeAll();
                    reportstore.add(data.root);


                }
                });
    },

    onButtonClick: function(button, e, eOpts) {
        var store=Ext.getStore('MenuEntryStore');
        store.removeAll();
         var moduleId=Ext.ComponentQuery.query('#ddlModule')[0].getValue();
         var tabId=Ext.ComponentQuery.query('#ddlTab')[0].getValue();
        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Menu/MenuEntryHandler.ashx',
            params: {
                method:'GetMenuLists',
                moduleid:moduleId,
                tabid:tabId
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onRowEditingCanceledit: function(editor, e, eOpts) {

    },

    onRowEditingValidateedit: function(editor, e, eOpts) {
        var errMsg='';
            //var rowID=Ext.ComponentQuery.query('#txtCasteCode')[0];
            var formID=Ext.ComponentQuery.query('#txtFormId')[0];
            //var formName=Ext.ComponentQuery.query('#txtWebFormName')[0];

            var webFormName=Ext.ComponentQuery.query('#txtWebFormName')[0];
            var displayName=Ext.ComponentQuery.query('#txtDisplayName')[0];
            var tabID=Ext.ComponentQuery.query('#ddlTab')[0];
            var moduleID=Ext.ComponentQuery.query('#ddlModule')[0];
            var reportType=Ext.ComponentQuery.query('#ddlReport')[0];
            var displaySeq=Ext.ComponentQuery.query('#txtDisplaySequence')[0];

        var action=Ext.ComponentQuery.query('#txtAction')[0];

        if(moduleID.getValue()===null ||moduleID.getValue()==="")
        {
            errMsg+="Please,Select Module.<br />";
        }
        if(tabID.getValue()===null ||tabID.getValue()==="")
        {
            errMsg+="Please,Select Tab.<br />";
        }
        if(formID.getValue()===null ||formID.getValue()==="")
        {
            errMsg+="Please, Enter Form ID.<br />";
        }
        if(webFormName.getValue()===null ||webFormName.getValue()==="")
        {
            errMsg+="Please,Enter Web Form Name.<br />";
        }
        if(displayName.getValue()===null ||displayName.getValue()==="")
        {
            errMsg+="Please,Enter Display Name.<br />";
        }
        if(displaySeq.getValue()===null ||displaySeq.getValue()==="")
        {
            errMsg+="Please,Enter Display Name.<br />";
        }

        if(errMsg!=='')
        {
            msg("WARNING",errMsg);
            return;
        }


        var menuEntry={
            //RowID:rowID.getValue(),
            FormID:formID.getValue(),
            FormName:webFormName.getValue(),
            WebFormName:webFormName.getValue(),
            DisplayName:displayName.getValue(),
            TabID:tabID.getValue(),
            //TabDesc:tabDesc.getValue(),
            ModuleID:moduleID.getValue(),
            //ModuleDesc:moduleDesc.getValue(),
            ReportType:reportType.getValue(),
            //RepoTypeDesc:repoTypeDesc.getValue(),
            DisplaySeq:displaySeq.getValue(),
            Action:action.getValue()
        };

        var wMsg='';
        if(action.getValue()==='I')
        {
            wMsg='Inserting....';
        }
        else
        {
            wMsg='Updating....';
        }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Menu/MenuEntryHandler.ashx',
            params: {
                method:'SaveMenuEntry',
                menuEntry:JSON.stringify(menuEntry)
            },
            success: function(response){
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                console.log(out);

                if(out.success==="true")
                {
                    var message=out.root;
                    if(message.OutResultCode==="SUCCESS")
                    {
                        msg("SUCCESS",message.OutResultMessage,function(){
                            var grd = Ext.ComponentQuery.query('#grdMenu')[0];

                            var record = grd.getSelectionModel().getSelection()[0];
                            record.set('Action','U');

                        });



                    }
                    else
                    {
                        msg("FAILURE",message.OutResultMessage);
                    }
                }
                else
                {
                    msg("FAILURE",out.message);
                }
            },
            failure: function ( result, request ) {
                waitSave.hide();
                var out=Ext.decode(response.responseText);
                msg("FAILURE",out.message);
            }

        });

    },

    onBtnAddMenuClick: function(button, e, eOpts) {
        var store =Ext.getStore('MenuEntryStore');
        var rec={FormID:'',
                 FormName:'',
                 Action:'I'};
        store.add(rec);
    },

    onPanelAfterRender: function(component, eOpts) {
        var menuEntryStore=Ext.getStore('MenuEntryStore');
        menuEntryStore.removeAll();
        var modulestore=Ext.getStore('ModuleStore');
                modulestore.removeAll();

                Ext.Ajax.request({
                    url: '../Handlers/GeneralMasterParameters/Menu/ModuleHandler.ashx',
                    params: {
                        method:'GetModuleShort'
                    },
                    success: function(response){

                    var data=Ext.decode(response.responseText);
                    console.log('data',data);
                    modulestore.removeAll();
                    modulestore.add(data.root);


                }
                });




    }

});