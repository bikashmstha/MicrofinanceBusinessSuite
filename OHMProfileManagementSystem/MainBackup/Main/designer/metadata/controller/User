{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "User",
        "stores": [
            "Office",
            "User",
            "OfficeApplication",
            "ApplicationRole",
            "RoleGranted",
            "ModuleFunction",
            "UserModuleFunction",
            "Designation"
        ]
    },
    "configAlternates": {
        "designer|userClassName": "string",
        "stores": "typedarray"
    },
    "designerId": "73487ce0-2af9-4414-8362-d77f37e9fce1",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#cboOffice",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onCboOfficeSelect",
                "implHandler": [
                    "//console.log('before loading...');\r",
                    "\r",
                    "//var controller = this.getController(\"Role\"); \r",
                    "//if (controller)\r",
                    "//controller.init();\r",
                    "\r",
                    "//console.log('after loading...');\r",
                    "\r",
                    "\r",
                    "var txtUsrID = Ext.ComponentQuery.query('#txtUserID')[0];\r",
                    "var txtUsrName = Ext.ComponentQuery.query('#txtUserName')[0];\r",
                    "var txtPass = Ext.ComponentQuery.query('#txtPassword')[0];\r",
                    "var txtConfirmPass = Ext.ComponentQuery.query('#txtConfirmPassword')[0];\r",
                    "var txtTranDate = Ext.ComponentQuery.query('#txtTranDate')[0];\r",
                    "\r",
                    "var strUser = Ext.getStore('User');\r",
                    "var strOfficeApp = Ext.getStore('OfficeApplication');\r",
                    "var strAppRole = Ext.getStore('ApplicationRole');\r",
                    "var strRoleGranted = Ext.getStore('RoleGranted');\r",
                    "var strModFunction = Ext.getStore('ModuleFunction');\r",
                    "var strUsrModFunction = Ext.getStore('UserModuleFunction');\r",
                    "\r",
                    "\r",
                    "var txtEmpID = Ext.ComponentQuery.query('#txtEmpID')[0];\r",
                    "var cboDesignation = Ext.ComponentQuery.query('#cboDesignation')[0];\r",
                    "var rbgStatus = Ext.ComponentQuery.query('#rbgStatus')[0];\r",
                    "\r",
                    "cboDesignation.setValue(\"\");\r",
                    "cboDesignation.clearInvalid();\r",
                    "\r",
                    "rbgStatus.items.get(0).setValue(true);\r",
                    "\r",
                    "txtUsrID.setValue(\"\");\r",
                    "txtUsrName.setValue(\"\");\r",
                    "txtPass.setValue(\"\");\r",
                    "txtTranDate.setValue(\"\");\r",
                    "txtConfirmPass.setValue(\"\");\r",
                    "txtEmpID.setValue(\"\");\r",
                    "\r",
                    "txtUsrID.setReadOnly(false);\r",
                    "txtUsrName.setReadOnly(false);\r",
                    "txtTranDate.setReadOnly(false);\r",
                    "txtPass.setReadOnly(false); \r",
                    "txtConfirmPass.setReadOnly(false);\r",
                    "txtEmpID.setReadOnly(false); \r",
                    "\r",
                    "strOfficeApp.loadData([],false);\r",
                    "strAppRole.loadData([],false);\r",
                    "strRoleGranted.loadData([],false);\r",
                    "strModFunction.loadData([],false);\r",
                    "strUsrModFunction.loadData([],false);\r",
                    "\r",
                    "\r",
                    "strUser.load(\r",
                    "{params:{officeCode:combo.getValue()}\r",
                    "}\r",
                    ");\r",
                    "\r",
                    "\r",
                    "strOfficeApp.load(\r",
                    "{params:{OfficeCode:combo.getValue()}\r",
                    "}\r",
                    ");\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "//var grdUser =  Ext.ComponentQuery.query('#grdUser')[0];\r",
                    "//grdUser.bindStore(strUser); \r",
                    "\r",
                    "//Ext.getCmp('grid').getSelectionModel().selectRow(RowIndex);\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "select",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onCboOfficeSelect",
            "designerId": "3ccc41bb-cd26-42fd-a556-6e120751652f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#Users",
                "designer|targetType": "Ext.panel.Panel",
                "fn": "onPanelAfterRender",
                "implHandler": [
                    "var strOffice = Ext.getStore('Office');\r",
                    "var strDesig = Ext.getStore('Designation');\r",
                    "\r",
                    "strOffice.load();\r",
                    "strDesig.load();\r",
                    "\r",
                    "\r",
                    "strOffice.load(\r",
                    "{\r",
                    "    scope:this,\r",
                    "    callback: function(records, operation, success){\r",
                    "        if(success){\r",
                    "\r",
                    "            var officeTransferTo = Ext.ComponentQuery.query('#cboOfficeTransferTo')[0];\r",
                    "            var strOfficeTransferTo = deepCloneStore(strOffice,\"OfficeTransferTo\");\r",
                    "\r",
                    "            //officeTransferTo.store = strOfficeTransferTo;\r",
                    "            officeTransferTo.bindStore(strOfficeTransferTo);\r",
                    "\r",
                    "        }\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onPanelAfterRender",
            "designerId": "50ce9063-35a7-4625-802b-d17bfd99fcad"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "clearStores",
                "implHandler": [
                    "\r",
                    "var strUser = Ext.getStore('User');\r",
                    "var strOfficeApp = Ext.getStore('OfficeApplication');\r",
                    "var strAppRole = Ext.getStore('ApplicationRole');\r",
                    "var strRoleGranted = Ext.getStore('RoleGranted');\r",
                    "var strModFunction = Ext.getStore('ModuleFunction');\r",
                    "var strUsrModFunction = Ext.getStore('UserModuleFunction');\r",
                    "\r",
                    "\r",
                    "strUser.loadData([],false);\r",
                    "strOfficeApp.loadData([],false);\r",
                    "strAppRole.loadData([],false);\r",
                    "strRoleGranted.loadData([],false);\r",
                    "strModFunction.loadData([],false);\r",
                    "strUsrModFunction.loadData([],false);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "clearStores",
            "designerId": "2527f6e0-9ad1-4381-90bc-7122ae5a6c08"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "arg"
                ],
                "fn": "clearControls",
                "implHandler": [
                    "var cboOffice = Ext.ComponentQuery.query('#cboOffice')[0];\r",
                    "var cboOfficeTransferTo = Ext.ComponentQuery.query('#cboOfficeTransferTo')[0];\r",
                    "var txtUsrID = Ext.ComponentQuery.query('#txtUserID')[0];\r",
                    "var txtUsrName = Ext.ComponentQuery.query('#txtUserName')[0];\r",
                    "var txtPass = Ext.ComponentQuery.query('#txtPassword')[0];\r",
                    "var txtConfirmPass = Ext.ComponentQuery.query('#txtConfirmPassword')[0];\r",
                    "var txtTranDate = Ext.ComponentQuery.query('#txtTranDate')[0];\r",
                    "\r",
                    "var txtEmpID = Ext.ComponentQuery.query('#txtEmpID')[0];\r",
                    "var cboDesignation = Ext.ComponentQuery.query('#cboDesignation')[0];\r",
                    "var rbgStatus = Ext.ComponentQuery.query('#rbgStatus')[0];\r",
                    "\r",
                    "\r",
                    "var strUser = Ext.getStore('User');\r",
                    "var strOfficeApp = Ext.getStore('OfficeApplication');\r",
                    "var strAppRole = Ext.getStore('ApplicationRole');\r",
                    "var strRoleGranted = Ext.getStore('RoleGranted');\r",
                    "var strModFunction = Ext.getStore('ModuleFunction');\r",
                    "var strUsrModFunction = Ext.getStore('UserModuleFunction');\r",
                    "\r",
                    "var btnAddRole = Ext.ComponentQuery.query('#btnAddOfficeRole')[0];\r",
                    "var btnLoadFun = Ext.ComponentQuery.query('#btnLoadFun')[0];\r",
                    "var btnAddFunction = Ext.ComponentQuery.query('#btnAddFunction')[0];\r",
                    "\r",
                    "var hdnUserStatus = Ext.ComponentQuery.query('#hdnUserStatus')[0];\r",
                    "var hdnUserDesig = Ext.ComponentQuery.query('#hdnUserDesig')[0];\r",
                    "\r",
                    "\r",
                    "var grdApp = Ext.ComponentQuery.query('#grdOfficeApplication')[0];\r",
                    "\r",
                    "\r",
                    "grdApp.getSelectionModel().deselectAll();\r",
                    "\r",
                    "if(arg == \"All\")\r",
                    "{\r",
                    "    cboOffice.setValue(\"\");\r",
                    "    strUser.loadData([],false);\r",
                    "    strOfficeApp.loadData([],false);    \r",
                    "}\r",
                    "\r",
                    "cboOfficeTransferTo.setDisabled(true);\r",
                    "cboOfficeTransferTo.setValue(\"\");\r",
                    "cboDesignation.setValue(\"\");\r",
                    "\r",
                    "rbgStatus.items.get(0).setValue(true);\r",
                    "\r",
                    "hdnUserStatus.setValue(\"\");\r",
                    "hdnUserDesig.setValue(\"\");\r",
                    "\r",
                    "txtEmpID.setValue(\"\");\r",
                    "txtUsrID.setValue(\"\");\r",
                    "txtUsrName.setValue(\"\");\r",
                    "txtPass.setValue(\"\");\r",
                    "txtTranDate.setValue(\"\");\r",
                    "txtConfirmPass.setValue(\"\");\r",
                    "\r",
                    "\r",
                    "cboOffice.clearInvalid();\r",
                    "\r",
                    "cboDesignation.clearInvalid();\r",
                    "\r",
                    "txtEmpID.clearInvalid();\r",
                    "txtUsrID.clearInvalid();\r",
                    "txtUsrName.clearInvalid();\r",
                    "txtPass.clearInvalid();\r",
                    "txtTranDate.clearInvalid();\r",
                    "txtConfirmPass.clearInvalid();\r",
                    "\r",
                    "\r",
                    "strAppRole.loadData([],false);\r",
                    "strRoleGranted.loadData([],false);\r",
                    "strModFunction.loadData([],false);\r",
                    "strUsrModFunction.loadData([],false);\r",
                    "\r",
                    "txtUsrID.setReadOnly(false);\r",
                    "txtUsrName.setReadOnly(false);\r",
                    "txtTranDate.setReadOnly(false);\r",
                    "txtPass.setReadOnly(false); \r",
                    "txtConfirmPass.setReadOnly(false);\r",
                    "\r",
                    "btnAddRole.setDisabled(true);\r",
                    "btnLoadFun.setDisabled(true);\r",
                    "btnAddFunction.setDisabled(true);\r",
                    "\r",
                    "//Ext.ComponentQuery.query('#rdoGroupGender')[0].items.get(0).getGroupValue()\r",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "clearControls",
            "designerId": "50a342f0-43d4-4658-9997-425fc98be19f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "myObj"
                ],
                "fn": "getClone",
                "implHandler": [
                    "if(myObj === undefined)\r",
                    "return myObj;\r",
                    "var objectClone = new myObj.constructor();\r",
                    "for (var property in myObj)\r",
                    "if (typeof myObj[property] == 'object')\r",
                    "objectClone[property] = getClone(myObj[property]);\r",
                    "else\r",
                    "objectClone[property] = myObj[property];\r",
                    "return objectClone;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getClone",
            "designerId": "4cf3c578-f898-43a7-a298-e25a0befbe54"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#btnSave",
                "designer|targetType": "Ext.button.Button",
                "fn": "onBtnSaveClick",
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "\r",
                    "var form = button.up('form').getForm();\r",
                    "\r",
                    "if(!form.isValid())\r",
                    "{\r",
                    "    msg(\"WARNING\",\"Please Fill the required fields !!!\");    \r",
                    "    return;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "var authtWindow = Ext.create('MyApp.view.UsersAuthorization');\r",
                    "\r",
                    "authtWindow.modal = true;\r",
                    "authtWindow.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onBtnSaveClick",
            "designerId": "1f95c08c-4c66-4130-a44e-007b7b8dd6d4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#btnCancel",
                "designer|targetType": "Ext.button.Button",
                "fn": "onBtnCancelClick",
                "implHandler": [
                    "this.clearControls(\"All\");"
                ],
                "name": "click",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onBtnCancelClick",
            "designerId": "191e13c3-2bcc-47ba-8362-4049ba867325"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#txtConfirmPassword",
                "designer|targetType": "Ext.form.field.Text",
                "fn": "onTxtConfirmPasswordBlur",
                "implHandler": [
                    "/*\r",
                    "\r",
                    "var me = this;\r",
                    "\r",
                    "var txtPass = Ext.ComponentQuery.query('#txtPassword')[0];\r",
                    "var txtConfirmPass = Ext.ComponentQuery.query('#txtConfirmPassword')[0];\r",
                    "\r",
                    "if(txtPass.getValue() != txtConfirmPass.getValue())\r",
                    "{\r",
                    "msg(\"WARNING\",\"PASSWORD MISTMATCH !!!\");\r",
                    "\r",
                    "txtConfirmPass.focus();\r",
                    "\r",
                    "return;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "*/"
                ],
                "name": "blur",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onTxtConfirmPasswordBlur",
            "designerId": "ab96207c-df31-4c62-a464-36e24783ba7a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#btnAddFunction",
                "designer|targetType": "Ext.button.Button",
                "fn": "onBtnAddFunctionClick",
                "implHandler": [
                    "var me = this;\r",
                    "var dupMsg = \"\";\r",
                    "var grdApp = Ext.ComponentQuery.query('#grdOfficeApplication')[0];\r",
                    "var grdModFunc = Ext.ComponentQuery.query('#grdModuleFunction')[0];\r",
                    "\r",
                    "var selectedApp = grdApp.getSelectionModel().getSelection()[0];  \r",
                    "var selectedModFunc = grdModFunc.getSelectionModel().getSelection();\r",
                    "\r",
                    "var str = Ext.getStore('UserModuleFunction');\r",
                    "\r",
                    "if(selectedModFunc.length < 1)\r",
                    "{\r",
                    "    msg(\"WARNING\",\"Please select Functions to be added first !!!\");\r",
                    "\r",
                    "    return;\r",
                    "\r",
                    "}\r",
                    "else\r",
                    "{    \r",
                    "\r",
                    "    for (var i = 0; i < selectedModFunc.length; i++)\r",
                    "    {\r",
                    "\r",
                    "        var recordIndex = str.findBy(\r",
                    "        function(record, id){\r",
                    "            if(record.get('ApplicationID') === selectedApp.data.ApplicationID && \r",
                    "            record.get('ModuleID') === selectedModFunc[i].data.ModuleID &&\r",
                    "            record.get('FunCD') === selectedModFunc[i].data.FunCD\r",
                    "            ){\r",
                    "                return true;  // a record with this data exists\r",
                    "            }\r",
                    "            return false;  // there is no record in the store with this data\r",
                    "        });\r",
                    "\r",
                    "        if(recordIndex != -1)\r",
                    "        {\r",
                    "            dupMsg += selectedModFunc[i].data.ModuleID + \"->\" + selectedModFunc[i].data.FunDesc + '<br>';\r",
                    "\r",
                    "        }\r",
                    "        else\r",
                    "        {   \r",
                    "\r",
                    "            str.add({ApplicationID: selectedApp.data.ApplicationID,\r",
                    "                ModuleID: selectedModFunc[i].data.ModuleID,\r",
                    "                ModuleDesc: selectedModFunc[i].data.ModuleDesc,\r",
                    "                FunCD:selectedModFunc[i].data.FunCD,\r",
                    "            FunDesc:selectedModFunc[i].data.FunDesc});\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "if(dupMsg !== \"\")\r",
                    "{    \r",
                    "    var finalMsg = \"\";\r",
                    "\r",
                    "    if(selectedModFunc.length > 1)\r",
                    "    finalMsg = \"Following module functions already exists <br><br>\";\r",
                    "    else\r",
                    "    finalMsg = \"Following module function already exists <br><br>\";\r",
                    "\r",
                    "    finalMsg += dupMsg;\r",
                    "    msg('WARNING',finalMsg);\r",
                    "}\r",
                    "\r",
                    "\r",
                    "grdModFunc .getSelectionModel().deselectAll();"
                ],
                "name": "click",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onBtnAddFunctionClick",
            "designerId": "eba4a430-8f68-48cf-aaaf-60bfe6aabf2c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#btnLoadFun",
                "designer|targetType": "Ext.button.Button",
                "fn": "onBtnLoadFunClick",
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var strModuleFunction = Ext.getStore('ModuleFunction');\r",
                    "var grdApp = Ext.ComponentQuery.query('#grdOfficeApplication')[0];\r",
                    "\r",
                    "if(grdApp.getSelectionModel().getSelection().length < 1)\r",
                    "{\r",
                    "    msg(\"WARNING\",\"Please Select Application first !!!\");\r",
                    "\r",
                    "    return;\r",
                    "\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "    var selectedApp = grdApp.getSelectionModel().getSelection()[0]; \r",
                    "    var appID = \"\";\r",
                    "\r",
                    "    if(selectedApp !== undefined)\r",
                    "    appID = selectedApp.data.ApplicationID;    \r",
                    "\r",
                    "    strModuleFunction.load({params:{appID:appID}});\r",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onBtnLoadFunClick",
            "designerId": "5cdef307-4f17-4c8f-b94e-c9646a36145d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#Users",
                "designer|targetType": "Ext.panel.Panel",
                "fn": "onUsersBeforeRender",
                "implHandler": [
                    "var me = this; \r",
                    "me.clearStores();\r",
                    "\r",
                    "/*\r",
                    "var grd = abstractcomponent.query('#grdModuleFunction')[0];\r",
                    "\r",
                    "var tmpRoleGranted = Ext.create('Ext.data.Store',{\r",
                    "model: 'MyApp.model.RoleGranted',\r",
                    "storeId:'tmpRoleGranted',\r",
                    "proxy: {\r",
                    "type: 'ajax',\r",
                    "url: '',\r",
                    "reader: {\r",
                    "type: 'json',\r",
                    "root: 'data'\r",
                    "}   }\r",
                    "});\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "beforerender",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onUsersBeforeRender",
            "designerId": "cb3bbe4b-f148-4030-88ff-9f287ceeb021"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#grdOfficeApplication",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onGrdAppItemClick",
                "implHandler": [
                    "var appID = record.raw.ApplicationID;\r",
                    "\r",
                    "var btnAddRole = Ext.ComponentQuery.query('#btnAddOfficeRole')[0];\r",
                    "var btnLoadFun = Ext.ComponentQuery.query('#btnLoadFun')[0];\r",
                    "var btnAddFunction = Ext.ComponentQuery.query('#btnAddFunction')[0];\r",
                    "\r",
                    "\r",
                    "var strAppRole = Ext.getStore('ApplicationRole');\r",
                    "var strModFunction = Ext.getStore('ModuleFunction');\r",
                    "\r",
                    "strAppRole.loadData([],false);\r",
                    "strModFunction.loadData([],false);\r",
                    "\r",
                    "strAppRole.load(\r",
                    "{\r",
                    "    params:{appID:appID}\r",
                    "});\r",
                    "\r",
                    "\r",
                    "btnAddRole.setDisabled(false);\r",
                    "btnLoadFun.setDisabled(false);\r",
                    "btnAddFunction.setDisabled(false);"
                ],
                "name": "itemclick",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onGrdAppItemClick",
            "designerId": "61b048e9-0e28-4fc5-b3a0-8ac13ceeafe6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#grdUser",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onGrdUserItemClick",
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var cboOffice = Ext.ComponentQuery.query('#cboOffice')[0];\r",
                    "var txtUsrID = Ext.ComponentQuery.query('#txtUserID')[0];\r",
                    "var txtUsrName = Ext.ComponentQuery.query('#txtUserName')[0];\r",
                    "var txtPass = Ext.ComponentQuery.query('#txtPassword')[0];\r",
                    "var txtConfirmPass = Ext.ComponentQuery.query('#txtConfirmPassword')[0];\r",
                    "var txtTranDate = Ext.ComponentQuery.query('#txtTranDate')[0];\r",
                    "var txtEmpID = Ext.ComponentQuery.query('#txtEmpID')[0];\r",
                    "var cboDesignation = Ext.ComponentQuery.query('#cboDesignation')[0];\r",
                    "var rbgStatus = Ext.ComponentQuery.query('#rbgStatus')[0];\r",
                    "\r",
                    "var hdnUserStatus = Ext.ComponentQuery.query('#hdnUserStatus')[0];\r",
                    "var hdnUserDesig = Ext.ComponentQuery.query('#hdnUserDesig')[0];\r",
                    "\r",
                    "var strUser = Ext.getStore('User');\r",
                    "var strOfficeApp = Ext.getStore('OfficeApplication');\r",
                    "var strAppRole = Ext.getStore('ApplicationRole');\r",
                    "var strRoleGranted = Ext.getStore('RoleGranted');\r",
                    "var strModFunction = Ext.getStore('ModuleFunction');\r",
                    "var strUsrModFunction = Ext.getStore('UserModuleFunction');\r",
                    "\r",
                    "\r",
                    "var cboOfficeTransferTo = Ext.ComponentQuery.query('#cboOfficeTransferTo')[0];\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "    url: '../Handlers/Security/UserHandler.ashx?method=Details',\r",
                    "    params: {userID: record.data.UserID},\r",
                    "    success: function ( result, request ) {\r",
                    "\r",
                    "        cboOfficeTransferTo.setDisabled(false);\r",
                    "\r",
                    "        var obj = Ext.decode(result.responseText);\r",
                    "\r",
                    "        var data = obj.root;   \r",
                    "\r",
                    "        txtUsrID.setValue(data.UserID);\r",
                    "        txtUsrName.setValue(data.UserName);\r",
                    "        txtTranDate.setValue(data.TranDate);\r",
                    "        txtPass.setValue(\"..........\");\r",
                    "        txtConfirmPass.setValue(\"..........\");\r",
                    "        txtEmpID.setValue(data.EmpID);\r",
                    "\r",
                    "        txtUsrID.setReadOnly(true);\r",
                    "        txtUsrName.setReadOnly(true);\r",
                    "        txtTranDate.setReadOnly(true);\r",
                    "        txtPass.setReadOnly(true); \r",
                    "        txtConfirmPass.setReadOnly(true);\r",
                    "        txtEmpID.setReadOnly(true);\r",
                    "\r",
                    "        if(data.UserDesignation.AccountStatus !== null)\r",
                    "        hdnUserStatus.setValue(data.AccountStatus);\r",
                    "\r",
                    "        if(data.UserDesignation.DesignationID !== null)\r",
                    "        hdnUserDesig.setValue(data.UserDesignation.DesignationID);\r",
                    "\r",
                    "        cboDesignation.setValue(data.UserDesignation.DesignationID);\r",
                    "\r",
                    "        if(data.AccountStatus  == \"A\")\r",
                    "        rbgStatus.items.get(0).setValue(true);\r",
                    "        else if(data.AccountStatus  == \"I\")\r",
                    "        rbgStatus.items.get(1).setValue(true);\r",
                    "        else            \r",
                    "        rbgStatus.items.get(2).setValue(true);\r",
                    "\r",
                    "        strUsrModFunction.loadData([],false);\r",
                    "        strRoleGranted.loadData([],false);\r",
                    "\r",
                    "        strUsrModFunction.add(data.UserModuleFunctions);\r",
                    "        strRoleGranted.add(data.UserRoles);\r",
                    "\r",
                    "    },\r",
                    "    failure: function ( result, request ) {\r",
                    "\r",
                    "        var obj = Ext.decode(result.responseText);\r",
                    "\r",
                    "        // var data = obj.root;   \r",
                    "\r",
                    "        msg(\"FAILURE\",obj.message);\r",
                    "    }\r",
                    "\r",
                    "});"
                ],
                "name": "itemclick",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onGrdUserItemClick",
            "designerId": "3abcbfc9-dfea-4af7-9831-c0eff3ed2927"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#btnAddOfficeRole",
                "designer|targetType": "Ext.button.Button",
                "fn": "onBtnAddOfficeRoleClick",
                "implHandler": [
                    "var me = this;\r",
                    "var dupMsg = \"\";\r",
                    "\r",
                    "var grdApp = Ext.ComponentQuery.query('#grdOfficeApplication')[0];\r",
                    "var grdRole = Ext.ComponentQuery.query('#grdApplicationRole')[0];\r",
                    "\r",
                    "var selectedApp = grdApp.getSelectionModel().getSelection()[0];  \r",
                    "var selectedRole = grdRole.getSelectionModel().getSelection();\r",
                    "\r",
                    "var str = Ext.getStore('RoleGranted');\r",
                    "\r",
                    "if(selectedRole.length < 1)\r",
                    "{\r",
                    "    msg(\"WARNING\",\"Please select Roles to be added first !!!\");\r",
                    "\r",
                    "    return;\r",
                    "\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "\r",
                    "    for (var i = 0; i < selectedRole.length; i++)\r",
                    "    {\r",
                    "        //    var match = store.find('title','title');\r",
                    "        //  if(match == -1) {\r",
                    "\r",
                    "\r",
                    "        var recordIndex = str.findBy(\r",
                    "        function(record, id){\r",
                    "            if(record.get('ApplicationID') === selectedApp.data.ApplicationID && \r",
                    "            record.get('RoleID') === selectedRole[i].data.RoleID\r",
                    "            ){\r",
                    "                return true;  // a record with this data exists\r",
                    "            }\r",
                    "            return false;  // there is no record in the store with this data\r",
                    "        });\r",
                    "\r",
                    "        if(recordIndex != -1)\r",
                    "        {\r",
                    "\r",
                    "            dupMsg += selectedRole[i].data.RoleID + ',';\r",
                    "\r",
                    "        }\r",
                    "        else\r",
                    "        {     \r",
                    "            str.add({ApplicationID: selectedApp.data.ApplicationID,\r",
                    "                Application: selectedApp.data.Description,\r",
                    "                RoleID:selectedRole[i].data.RoleID,\r",
                    "            Description:selectedRole[i].data.Description});\r",
                    "\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "if(dupMsg !== \"\")\r",
                    "{\r",
                    "\r",
                    "    dupMsg= dupMsg.substring(0,dupMsg.length-1);\r",
                    "    dupMsg += ' already exists !!!';\r",
                    "    msg('WARNING',dupMsg);\r",
                    "}\r",
                    "\r",
                    "grdRole .getSelectionModel().deselectAll();\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onBtnAddOfficeRoleClick",
            "designerId": "57e79bd9-19b6-468d-a63c-23e94d48d371"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#btnAuthorizationOk",
                "designer|targetType": "Ext.button.Button",
                "fn": "onBtnAuthorizationOkClick",
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var f = button.up('window').down('form');\r",
                    "var form = f.getForm();\r",
                    "\r",
                    "if(!form.isValid())\r",
                    "{\r",
                    "    msg(\"WARNING\",\"Please Fill the required fields !!!\");    \r",
                    "    return;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var rqdUrl = '../Handlers/Security/UserHandler.ashx?method=';\r",
                    "var message = \"\";\r",
                    "var errMsg = \"\";\r",
                    "var waitSave = \"\";\r",
                    "var user= \"\";\r",
                    "var status = \"\";\r",
                    "var userStatus=\"\";\r",
                    "var userDesignation= \"\";\r",
                    "var grdUser = Ext.ComponentQuery.query('#grdUser')[0];\r",
                    "var selectedUser = grdUser.getSelectionModel().getSelection()[0];\r",
                    "var cboOffice = Ext.ComponentQuery.query('#cboOffice')[0];\r",
                    "var txtUsrID = Ext.ComponentQuery.query('#txtUserID')[0];\r",
                    "var cboDesignation = Ext.ComponentQuery.query('#cboDesignation')[0];\r",
                    "var txtEmpID = Ext.ComponentQuery.query('#txtEmpID')[0];\r",
                    "var rb = Ext.ComponentQuery.query('#rbgStatus')[0];\r",
                    "\r",
                    "\r",
                    "status = rb.getValue().status;\r",
                    "\r",
                    "\r",
                    "\r",
                    "//------------------------------------------------------\r",
                    "// NB: Hidden Fields\r",
                    "//------------------------------------------------------\r",
                    "\r",
                    "var hdnUserStatus = Ext.ComponentQuery.query('#hdnUserStatus')[0];\r",
                    "var hdnUserDesig = Ext.ComponentQuery.query('#hdnUserDesig')[0];\r",
                    "\r",
                    "\r",
                    "\r",
                    "//------------------------------------------------------\r",
                    "// NB: Extracting Store datas\r",
                    "//------------------------------------------------------\r",
                    "\r",
                    "var strUser = Ext.getStore('User');\r",
                    "\r",
                    "var strRoleGranted = Ext.getStore('RoleGranted');\r",
                    "var jsonRoleGranted = \"\";\r",
                    "\r",
                    "strRoleGranted.clearFilter();\r",
                    "\r",
                    "if(strRoleGranted.getCount() > 0)\r",
                    "{\r",
                    "\r",
                    "    //strRoleGranted = Ext.getStore('RoleGranted');\r",
                    "    //strRoleGranted.clearFilter();\r",
                    "    jsonRoleGranted = getJson(strRoleGranted);\r",
                    "\r",
                    "    strRoleGranted .filter(function(item){\r",
                    "        return item.get(\"Action\")!= 'D';\r",
                    "    }); \r",
                    "}\r",
                    "\r",
                    "\r",
                    "var strModFunction = Ext.getStore('UserModuleFunction');\r",
                    "var jsonModfunction = \"\";\r",
                    "\r",
                    "\r",
                    "strModFunction.clearFilter();\r",
                    "\r",
                    "if(strModFunction.getCount() > 0)\r",
                    "{\r",
                    "    //strModFunction.clearFilter();\r",
                    "    jsonModfunction = getJson(strModFunction); \r",
                    "\r",
                    "\r",
                    "    strModFunction.filter(function(item){\r",
                    "        return item.get(\"Action\")!= 'D';    \r",
                    "    });\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "//------------------------------------------------------\r",
                    "\r",
                    "\r",
                    "\r",
                    "var txtAuthBy  = Ext.ComponentQuery.query('#txtAuthorizationBy')[0];\r",
                    "var txtAuthDate = Ext.ComponentQuery.query('#txtAuthorizationDate')[0];\r",
                    "var txtAuthNo = Ext.ComponentQuery.query('#txtAuthorizationNo')[0];\r",
                    "var desig =  cboDesignation.getValue();\r",
                    "\r",
                    "if(hdnUserDesig.getValue() != desig)\r",
                    "{\r",
                    "    userDesignation= {\r",
                    "        UserID : txtUsrID.getValue(),\r",
                    "        DesignationID:cboDesignation.getValue(),\r",
                    "        // FromDate: '2069.09.09',        \r",
                    "        AuthorizationNo:txtAuthNo.getValue(),\r",
                    "        AuthorizationBy:txtAuthBy.getValue(),\r",
                    "        AuthorizationDate:txtAuthDate.getValue()\r",
                    "\r",
                    "    };\r",
                    "}\r",
                    "\r",
                    "\r",
                    "if(hdnUserStatus.getValue() !== status)\r",
                    "{\r",
                    "\r",
                    "    userStatus= {\r",
                    "        UserID : txtUsrID.getValue(),\r",
                    "        Status :status,\r",
                    "        //FromDate: '2069.09.09',\r",
                    "        AuthorizationNo:txtAuthNo.getValue(),\r",
                    "        AuthorizationBy:txtAuthBy.getValue(),\r",
                    "        AuthorizationDate:txtAuthDate.getValue()\r",
                    "\r",
                    "    };\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(selectedUser !== undefined)\r",
                    "{\r",
                    "\r",
                    "    //------------------------------------------------------\r",
                    "    // NB: For Edit Case\r",
                    "    //------------------------------------------------------\r",
                    "\r",
                    "    var officeTransferTo = Ext.ComponentQuery.query('#cboOfficeTransferTo')[0].getValue();\r",
                    "\r",
                    "    var oUser = null;\r",
                    "    if(officeTransferTo !== null)\r",
                    "    {\r",
                    "        oUser= {\r",
                    "            OfficeCode:officeTransferTo,    \r",
                    "            AuthorizationNo:txtAuthNo.getValue(),\r",
                    "            AuthorizationBy:txtAuthBy.getValue(),\r",
                    "            AuthorizationDate:txtAuthDate.getValue(),\r",
                    "            Action:\"A\"\r",
                    "            //Action:\"E\"\r",
                    "\r",
                    "        };\r",
                    "    }\r",
                    "\r",
                    "    user={\r",
                    "        UserID : txtUsrID.getValue(),\r",
                    "        AccountStatus: status,\r",
                    "        UserRoles :jsonRoleGranted,\r",
                    "        UserModuleFunctions : jsonModfunction,\r",
                    "        UserDesignation:userDesignation,\r",
                    "        UserStatus :userStatus,\r",
                    "        OfficeUser : oUser,\r",
                    "        CreatedBy : \"ITS\",\r",
                    "        AuthorizationNo:txtAuthNo.getValue(),\r",
                    "        AuthorizationBy:txtAuthBy.getValue(),\r",
                    "        AuthorizationDate:txtAuthDate.getValue()\r",
                    "    };\r",
                    "\r",
                    "    console.log(\"edit user \" ,user);\r",
                    "\r",
                    "    rqdUrl += 'Edit';\r",
                    "    message = \"Successfully Updated.\";\r",
                    "    errMsg = \"Error in Update !!!\";\r",
                    "\r",
                    "    //waitSave = Ext.MessageBox.wait('Updating ...');\r",
                    "    waitSave = waitMsg(\"Updating ...\");\r",
                    "\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "\r",
                    "    //------------------------------------------------------\r",
                    "    // NB: For Save Case\r",
                    "    //------------------------------------------------------\r",
                    "\r",
                    "    var txtUsrName = Ext.ComponentQuery.query('#txtUserName')[0];\r",
                    "    var txtPass = Ext.ComponentQuery.query('#txtPassword')[0];\r",
                    "    var txtConfirmPass = Ext.ComponentQuery.query('#txtConfirmPassword')[0];\r",
                    "    var txtTranDate =  Ext.ComponentQuery.query('#txtTranDate')[0];\r",
                    "\r",
                    "\r",
                    "    if(txtPass.getValue() !== txtConfirmPass.getValue())\r",
                    "    {\r",
                    "        msg(\"WARNING\",\"PASSWORD MISTMATCH !!!\");\r",
                    "\r",
                    "        return;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "    var strOfficeApp = Ext.getStore('OfficeApplication');\r",
                    "    var strAppRole = Ext.getStore('ApplicationRole');\r",
                    "    var strUsrModFunction = Ext.getStore('ModuleFunction');\r",
                    "\r",
                    "\r",
                    "\r",
                    "    var oUser= {\r",
                    "        OfficeCode: cboOffice.getValue(),\r",
                    "        //FromDate: '2069.09.09',        \r",
                    "        AuthorizationNo:txtAuthNo.getValue(),\r",
                    "        AuthorizationBy:txtAuthBy.getValue(),\r",
                    "        AuthorizationDate:txtAuthDate.getValue()\r",
                    "\r",
                    "    };\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    user={\r",
                    "        UserID : txtUsrID.getValue(),\r",
                    "        UserName :txtUsrName.getValue(),\r",
                    "        EmpID :txtEmpID.getValue(),\r",
                    "        Password : txtPass.getValue(),\r",
                    "        AccountStatus: status,\r",
                    "        TranDate : txtTranDate.getValue(),\r",
                    "        UserRoles :jsonRoleGranted,\r",
                    "        UserModuleFunctions : jsonModfunction,\r",
                    "        OfficeUser : oUser,\r",
                    "        UserDesignation:userDesignation,\r",
                    "        UserStatus :userStatus,\r",
                    "        CreatedBy : \"ITS\",\r",
                    "        AuthorizationNo:txtAuthNo.getValue(),\r",
                    "        AuthorizationBy:txtAuthBy.getValue(),\r",
                    "        AuthorizationDate:txtAuthDate.getValue()\r",
                    "\r",
                    "    };\r",
                    "\r",
                    "\r",
                    "    rqdUrl += 'Save';\r",
                    "    message = \"Sucessfully Saved.\";\r",
                    "    errMsg = \"Error in Save !!!\";\r",
                    "\r",
                    "    //waitSave = Ext.MessageBox.wait('Saving ...');\r",
                    "    waitSave = waitMsg(\"Saving ...\");\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "//------------------------------------------------------\r",
                    "// NB: Posting Data to Server\r",
                    "//------------------------------------------------------\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "    url:rqdUrl ,\r",
                    "    params:{user:JSON.stringify(user)},\r",
                    "    success: function ( result, request ) {\r",
                    "\r",
                    "        waitSave.hide();\r",
                    "        button.up('window').close();\r",
                    "\r",
                    "        var obj = Ext.decode(result.responseText);        \r",
                    "\r",
                    "        msg(obj.success === \"true\" ?\"SUCCESS\":\"FAILURE\",obj.success === \"true\" ?message:obj.message);\r",
                    "        if(obj.success === \"false\"){ return;}\r",
                    "\r",
                    "        me.clearControls(\"\");\r",
                    "        me.clearAuthorization();\r",
                    "\r",
                    "        strUser.load({params:{officeCode:cboOffice.getValue()}});         \r",
                    "    },\r",
                    "    failure: function ( result, request ) {\r",
                    "\r",
                    "        waitSave.hide();\r",
                    "\r",
                    "        msg(\"FAILURE\",errMsg);\r",
                    "    }\r",
                    "\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "//var editedRecords = grid.getStore().getUpdatedRecords(); // <---- OK\r",
                    "//var editedFirstName = editedRecords[0].data.FirstName;"
                ],
                "name": "click",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onBtnAuthorizationOkClick",
            "designerId": "16dc1a92-8fae-4177-8d10-4c2a0b87dc20"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#btnAuthorizationCancel",
                "designer|targetType": "Ext.button.Button",
                "fn": "onBtnAuthorizationCancelClick",
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "me.clearAuthorization();\r",
                    "button.up('window').close();"
                ],
                "name": "click",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onBtnAuthorizationCancelClick",
            "designerId": "06cd209f-1246-4743-ad0d-30c9f9011902"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "clearAuthorization",
                "implHandler": [
                    "var txtAuthorizationBy = Ext.ComponentQuery.query('#txtAuthorizationBy')[0];\r",
                    "var txtAuthorizationDate = Ext.ComponentQuery.query('#txtAuthorizationDate')[0];\r",
                    "var txtAuthorizationNo = Ext.ComponentQuery.query('#txtAuthorizationNo')[0];\r",
                    "\r",
                    "if(txtAuthorizationBy !== undefined)\r",
                    "txtAuthorizationBy.setValue(\"\");\r",
                    "\r",
                    "if(txtAuthorizationDate !== undefined)\r",
                    "txtAuthorizationDate.setValue(\"\");\r",
                    "\r",
                    "if(txtAuthorizationNo !== undefined)\r",
                    "txtAuthorizationNo.setValue(\"\");"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "clearAuthorization",
            "designerId": "90d1551c-7b0c-4f24-8c3c-7c6124d6b500"
        }
    ]
}