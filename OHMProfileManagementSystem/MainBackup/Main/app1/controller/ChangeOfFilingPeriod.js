/*
 * File: app/controller/ChangeOfFilingPeriod.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.ChangeOfFilingPeriod', {
    extend: 'Ext.app.Controller',

    stores: [
        'FilingPeriodStore'
    ],

    onBtnSaveCofClick: function(button, e, eOpts) {
        var me = this;

        me.save("I");
    },

    onTxtPanCofKeypress: function(textfield, e, eOpts) {
        var me = this;
        var flag = true;

        if((textfield.getValue !== "") && (e.keyCode === 13 || e.keyCode === 9))
        {
            if(textfield.getValue().length < 9)
            {
                msg("WARNING","Pan must be of minimum length 9 !!!",function(){textfield.focus();});
                return false;
            }


            LoadTaxpayerInfoWithValidPan(textfield.getValue(),"00",function(data){

                me.loadCurrFilePerWithEffDate();

            });

        }


        return true;
    },

    onBtnDeleteHisCofClick: function(button, e, eOpts) {
        var me = this;
        var param = me.validateParam();
        var txtPan = Ext.ComponentQuery.query('#txtPanCof')[0];
        var wait = waitMsg('Deleting History ...');

        var pan = txtPan.getValue();

        if(pan === "")
        {
            msg("WARNING","कृपया प्यान राख्नुहोस् !!!",function(){
                txtPan.focus();
            });
        }

        Ext.Ajax.request({
            url:"../Handlers/VAT/ChangeOfFilingPeriod/FilePerHistoriesHandler.ashx?method=DeleteHistory",
            params:{pan:pan,acctType:'00'},
            success: function ( result, request ) {            

                wait.hide();            
                var obj = Ext.decode(result.responseText); 

                if(obj.success === "true")
                {
                    var data = obj.root; 

                    var txtPan = Ext.ComponentQuery.query('#txtPanCof')[0];
                    var txtStartDate = Ext.ComponentQuery.query('#txtStartDateCof')[0];
                    var cboFilingPeriod = Ext.ComponentQuery.query('#cboFilingPeriodCof')[0];  
                    var lblCurrFilePer = Ext.ComponentQuery.query('#lblCurrFilePerCof')[0];

                    txtStartDate.setValue(data.StartDate);
                    cboFilingPeriod.setValue(data.FilePer);
                    lblCurrFilePer.setText(data.DeleteHisoryMsg);

                    param.action = "DH";

                }
                else
                {
                    msg("WARNING",obj.message);      
                }    

            },
            failure: function ( result, request ) {

                wait.hide(); 

                msg("FAILURE","Error in Fetching Data !!!");
            }
        });

    },

    onBtnEditCofClick: function(button, e, eOpts) {
        var me = this;
        var param = me.validateParam();
        var lblAction = Ext.ComponentQuery.query('#lblActionCof')[0];
        var txtPan = Ext.ComponentQuery.query('#txtPanCof')[0];

        txtPan.focus();
        lblAction.setValue("Updating ...");

        param.action ="E";

    },

    onBtnDeleteCofClick: function(button, e, eOpts) {
        var me = this;
        var param = me.validateParam();
        var lblAction = Ext.ComponentQuery.query('#lblActionCof')[0];
        var txtPan = Ext.ComponentQuery.query('#txtPanCof')[0];

        txtPan.focus();
        lblAction.setValue("Deleting ...");

        param.action = "D";
    },

    onBtnSubmitCofClick: function(button, e, eOpts) {
        var me = this;

        me.save("F");

    },

    onBtnCancelCofClick: function(button, e, eOpts) {
        var me = this;

        me.clearControls();
    },

    onPnlChangeOfFilPerCofAfterRender: function(component, eOpts) {
        var me = this;
        var param = null;
        var view = Ext.ComponentQuery.query('#pnlChangeOfFilPerCof')[0];


        if(view.extraParam)
        {
            param = view.extraParam;

            //console.log("param>>",param);

            if(param.params)
            {
                var from = param.params.from;

                switch(from)
                {
                    case "MV":
                    var tranNo = param.params.tranNo;        
                    me.loadDetailByTran(tranNo,view);
                    break;          
                }
            }    

            return;
        }
        else
        {
            param = {"action":"A","effDate":""};
            view.extraParam = param;
        }

    },

    onTxtStartDateCofKeypress: function(textfield, e, eOpts) {

        if(textfield.getValue() !== "" && e.keyCode === 13)
        {

            var me = this;
            var param = me.validateParam();

            if(param.action !== "E")
            {
                return;
            }

            var flag = validateFutureDate(textfield.getValue(),"N",function(){ textfield.focus();});

            if(!flag)
            {
                return;
            }

            var txtPan = Ext.ComponentQuery.query('#txtPanCof')[0];
            var txtStartDate = Ext.ComponentQuery.query('#txtStartDateCof')[0];
            var cboFilingPeriod = Ext.ComponentQuery.query('#cboFilingPeriodCof')[0];

            var pan = txtPan.getValue();
            var startDate = textfield.getValue();

            var errMsg = "";
            var objFocus = null;

            if(pan === "")
            {
                errMsg = "कृपया प्यान नं. भर्नुहोस् ।<br>";
                objFocus = txtPan;
            }

            if(errMsg !== "")
            {   
                msg("WARNING",errMsg,function(){objFocus.focus();});

                return;
            }


            var wait = waitMsg('Loading ...');

            Ext.Ajax.request({
                url:"../Handlers/VAT/ChangeOfFilingPeriod/FilePerHistoriesHandler.ashx?method=GetFilePerHistoryTS",
                params:{pan:pan,acctType:'00',startDate:startDate},
                success: function ( result, request ) {            

                    wait.hide(); 

                    var obj = Ext.decode(result.responseText);        
                    var data = obj.root; 


                    if(obj.success === "true")
                    { 
                        var cboFilingPer = Ext.ComponentQuery.query('#cboFilingPeriodCof')[0];

                        if(cboFilingPer.getStore().getCount() < 1)
                        {

                            me.loadCurrFilePerWithEffDate();
                        }

                        cboFilingPer.setValue(data.FilePer);


                        return;
                    }
                    else
                    {
                        msg("WARNING",obj.message,function(){textfield.focus();});

                        return;
                    }       

                },
                failure: function ( result, request ) {

                    wait.hide(); 

                    msg("FAILURE","Error in Fetching Data !!!");
                }
            });

        }
    },

    loadCurrFilePerWithEffDate: function() {
        var me = this;
        var param = me.validateParam();
        var txtPan = Ext.ComponentQuery.query('#txtPanCof')[0];
        var txtStartDate = Ext.ComponentQuery.query('#txtStartDateCof')[0];
        var cboFilingPeriod = Ext.ComponentQuery.query('#cboFilingPeriodCof')[0];

        var pan = txtPan.getValue();
        var startDate = txtStartDate.getValue();
        var errMsg = "";
        var objFocus = null;

        if(pan === "")
        {
            errMsg = "कृपया प्यान नं. भर्नुहोस् ।<br>";
            objFocus = txtPan;
        }



        if(errMsg !== "")
        {   
            msg("WARNING",errMsg,function(){objFocus.focus();});

            return;
        }



        var wait = waitMsg('Loading ...');

        Ext.Ajax.request({
            url:"../Handlers/VAT/ChangeOfFilingPeriod/FilePerHistoriesHandler.ashx?method=GetCurrentFilePerWithEffDate",
            params:{pan:pan,acctType:'00'},
            async:false,
            success: function ( result, request ) {            

                wait.hide(); 

                var strFilePer = Ext.getStore("FilingPeriodStore");
                var lblCurrFilePer = Ext.ComponentQuery.query('#lblCurrFilePerCof')[0];
                var cboFilingPer = Ext.ComponentQuery.query('#cboFilingPeriodCof')[0];
                var obj = Ext.decode(result.responseText);        
                var data = obj.root; 

                if(obj.success === "true")
                { 
                    if(obj.message === "")
                    {
                        msg("WARNING","Pan Is Invalid !!!");

                        return ;
                    }

                    var filePer = "";
                    var filePerMsg = "";

                    var arr = obj.message.split("/");
                    var currFilePer = arr[0].trim();
                    var effDate = arr[1].trim();

                    switch(currFilePer)
                    {
                        case "M": 
                        filePer = "मासिक";
                        break;
                        case "T": 
                        filePer = "चौमासिक";
                        break;
                        case "B": 
                        filePer = "दुई‌ मासिक";
                        break;

                    }


                    filePerMsg = "[ हालको कर अवधि " + filePer + " ]";


                    strFilePer.clearFilter();            
                    strFilePer.filter(function(item){

                        return item.get("FilPeriod")!== currFilePer;
                    });


                    /*
                    var strCloneFilePer = null;

                    strCloneFilePer = deepCloneStore(strFilePer,"strCloneFilePer");


                    strCloneFilePer.filter(function(item){

                    return item.get("FilPeriod")!== currFilePer;
                    });

                    cboFilingPer.bindStore(strCloneFilePer);           
                    */
                    cboFilingPer.bindStore(strFilePer); 
                    lblCurrFilePer.setText(filePerMsg);

                    param.effDate = effDate;


                    return;
                }
                else
                {
                    msg("WARNING",obj.message);

                    return;
                }       

            },
            failure: function ( result, request ) {

                wait.hide(); 

                msg("FAILURE","Error in Fetching Data !!!");
            }
        });
    },

    clearControls: function() {
        var me = this;
        var param = me.validateParam();
        var lblAction = Ext.ComponentQuery.query('#lblActionCof')[0];
        var lblCurrFilePer = Ext.ComponentQuery.query('#lblCurrFilePerCof')[0];
        var txtPan = Ext.ComponentQuery.query('#txtPanCof')[0];
        var txtStartDate = Ext.ComponentQuery.query('#txtStartDateCof')[0];
        var cboFilingPeriod = Ext.ComponentQuery.query('#cboFilingPeriodCof')[0];


        txtPan.setValue("");
        txtStartDate.setValue("");
        cboFilingPeriod.setValue("");
        lblAction.setValue("");
        lblCurrFilePer.setText("");

        txtPan.clearInvalid();
        txtStartDate.clearInvalid();

        param.action = "";







    },

    save: function(status) {
        var me = this;
        var param = me.validateParam();
        var txtPan = Ext.ComponentQuery.query('#txtPanCof')[0];
        var txtStartDate = Ext.ComponentQuery.query('#txtStartDateCof')[0];
        var cboFilingPeriod = Ext.ComponentQuery.query('#cboFilingPeriodCof')[0];

        var arrDate = txtStartDate.getValue().split(".");

        var pan = txtPan.getValue();
        var startDate = txtStartDate.getValue();
        var filePer = cboFilingPeriod.getValue();
        var errMsg = "";
        var objFocus = null;
        var action = param.action;

        var filePerHis = null;

        //------------------------------------------
        // NB: Start of VALIDATION
        //------------------------------------------

        if(pan === "")
        {
            errMsg = "कृपया प्यान नं. भर्नुहोस् ।<br>";
            objFocus = txtPan;
        }



        if(startDate === "")
        {
            errMsg += "कृपया शुरू मिति भर्नुहोस् ।<br>";

            if(objFocus === null)
            {
                objFocus = txtStartDate;
            }
        }
        else
        {
            var flag = validateFutureDate(startDate,"N",function(){ txtStartDate.focus();});

            if(!flag)
            {
                return;
            }
        }

        if(action === "A")
        {

            if(filePer === null)
            {
                errMsg += "कृपया मा / चौ / द्वै छान्नुहोस् ।<br>";

                if(objFocus === null)
                {
                    objFocus = cboFilingPeriod;
                }
            }


        }

        if(errMsg !== "")
        {   
            msg("WARNING",errMsg,function(){objFocus.focus();});

            return;
        }


        //NB:Compare registration Effective Date with Start Date
        if(startDate.trim() == param.effDate.trim())
        {
            Ext.Msg.confirm('Confirm Action', 'Do you want to change filling period from begining ?', function(btn) {
                if(btn == 'yes'){

                    filePerHis = {
                        Pan :pan,
                        AcctType :"00",
                        FilePer :filePer,
                        StartDate :startDate,
                        EndDate :"",
                        TranDate :"",
                        UserID :"",
                        TranNo : null,
                        Status :status,
                        Action :action,
                        HisStartDate :""
                    };

                    me.validSave(param,filePerHis);

                    return true;
                }
            }, this);


            return;
        }
        else if((arrDate[1] !== "04" || arrDate[1] !== "08" || arrDate[1] !== "12") && arrDate[2] !== "01")
        {
            errMsg = "शुरू मिति श्रावण १ वा मंसिर १ वा चैत्र १ मध्य एक हुनुपर्छ !!!";

            msg("WARNING",errMsg,function(){txtStartDate.focus();});

            return;
        }

        //------------------------------------------
        // End of VALIDATION
        //------------------------------------------

        filePerHis = {
            Pan :pan,
            AcctType :"00",
            FilePer :filePer,
            StartDate :startDate,
            EndDate :"",
            TranDate :"",
            UserID :"",
            TranNo : null,
            Status :status,
            Action :action,
            HisStartDate :""
        };

        //console.log("filePerHis",filePerHis);

        me.validSave(param,filePerHis);




        /*
        var filePerHis = {
        Pan :pan,
        AcctType :"00",
        FilePer :filePer,
        StartDate :startDate,
        EndDate :"",
        TranDate :"",
        UserID :"",
        TranNo : null,
        Status :status,
        Action :action,
        HisStartDate :""
        };



        var wait = "";

        if(action == "A")
        wait = waitMsg('Saving ...');
        else if(action == "E")
        wait = waitMsg('Updating ...');
        else if(action == "D")
        wait = waitMsg('Deleting ...');
        else
        wait = waitMsg('Deleting History...');

        Ext.Ajax.request({
        url:"../Handlers/VAT/ChangeOfFilingPeriod/FilePerHistoriesHandler.ashx?method=SaveFilePerHistoryTS",
        params:{filePerHistory:JSON.stringify(filePerHis)},
        success: function ( result, request ) {            

        wait.hide();            
        var obj = Ext.decode(result.responseText);        
        var data = obj.root; 

        if(obj.success === "true" && action === "A")
        {
        param.action = "E";
        }

        msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);       

        },
        failure: function ( result, request ) {

        wait.hide(); 

        msg("FAILURE","Error in Fetching Data !!!");
        }
        });

        */
    },

    validateParam: function() {
        var me = this;
        var view = Ext.ComponentQuery.query('#pnlChangeOfFilPerCof')[0];
        var user = me.getController('MyApp.controller.LoginSecurity');  


        if(view.extraParam === null)
        {
            user.clearSession();

            return;

        }
        else
        {
            return view.extraParam;
        }

    },

    loadDetailByTran: function(tranNo,view) {
        var wait = waitMsg('Loading Preview ...');

        Ext.Ajax.request({
            url:"../Handlers/VAT/ChangeOfFilingPeriod/FilePerHistoriesHandler.ashx?method=GetFilePerHistoryTSByTranNo",
            params:{tranNo:tranNo},
            success: function ( result, request ) {            

                wait.hide();              

                var obj = Ext.decode(result.responseText);        
                var data = obj.root; 

                if(obj.success === "true")
                {     
                    var txtPan = Ext.ComponentQuery.query('#txtPanCof')[0];
                    var txtStartDate = Ext.ComponentQuery.query('#txtStartDateCof')[0];
                    var cboFilingPeriod = Ext.ComponentQuery.query('#cboFilingPeriodCof')[0];

                    var strFilePer = Ext.getStore("FilingPeriodStore");

                    cboFilingPeriod.bindStore(strFilePer);

                    txtPan.setValue(data.Pan);
                    txtStartDate.setValue(data.StartDate);
                    cboFilingPeriod.setValue(data.FilePer);

                    view.query('.field').forEach(function(c){c.setReadOnly(true);});  
                    view.query('.button').forEach(function(c){c.setDisabled(true);});

                    return;
                }
                else
                {
                    msg("WARNING",obj.message);

                    return;
                }       

            },
            failure: function ( result, request ) {

                wait.hide(); 

                msg("FAILURE","Error in Fetching Data !!!");
            }
        });

    },

    validSave: function(param,filePerHis) {
        var wait = "";

        switch(param.action.trim())
        {
            case "A": 
            wait = waitMsg('Saving ...');
            break;
            case "E": 
            wait = waitMsg('Updating ...');
            break;
            case "D": 
            wait = waitMsg('Deleting ...');
            break;
            case "DH": 
            wait = waitMsg('Deleting History...');
            break;

        }


        Ext.Ajax.request({
            url:"../Handlers/VAT/ChangeOfFilingPeriod/FilePerHistoriesHandler.ashx?method=SaveFilePerHistoryTS",
            params:{filePerHistory:JSON.stringify(filePerHis)},
            success: function ( result, request ) {            

                wait.hide();            
                var obj = Ext.decode(result.responseText);        
                var data = obj.root; 

                if(obj.success === "true" && param.action === "A")
                {
                    param.action = "E";
                }

                msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);       

            },
            failure: function ( result, request ) {

                wait.hide(); 

                msg("FAILURE","Error in Fetching Data !!!");
            }
        });
    },

    init: function(application) {
        this.control({
            "#btnSaveCof": {
                click: this.onBtnSaveCofClick
            },
            "#txtPanCof": {
                keypress: this.onTxtPanCofKeypress
            },
            "#btnDeleteHisCof": {
                click: this.onBtnDeleteHisCofClick
            },
            "#btnEditCof": {
                click: this.onBtnEditCofClick
            },
            "#btnDeleteCof": {
                click: this.onBtnDeleteCofClick
            },
            "#btnSubmitCof": {
                click: this.onBtnSubmitCofClick
            },
            "#btnCancelCof": {
                click: this.onBtnCancelCofClick
            },
            "#pnlChangeOfFilPerCof": {
                afterrender: this.onPnlChangeOfFilPerCofAfterRender
            },
            "#txtStartDateCof": {
                keypress: this.onTxtStartDateCofKeypress
            }
        });
    }

});
