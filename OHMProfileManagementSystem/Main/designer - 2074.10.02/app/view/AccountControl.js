/*
 * File: app/view/AccountControl.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.AccountControl', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.tab.Panel',
        'Ext.tab.Tab',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Action',
        'Ext.grid.plugin.RowEditing',
        'Ext.toolbar.Toolbar',
        'Ext.form.field.ComboBox'
    ],

    frame: true,
    title: 'Account Control',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'tabpanel',
                    frame: true,
                    itemId: 'frmAccountControl',
                    activeTab: 0,
                    items: [
                        {
                            xtype: 'panel',
                            frame: true,
                            title: 'Account Category',
                            tabConfig: {
                                xtype: 'tab',
                                listeners: {
                                    click: {
                                        fn: me.onTabClick,
                                        scope: me
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    itemId: 'grdAccountCategory',
                                    store: 'AccountCategoryStore',
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'CategoryNo',
                                            text: 'Category No',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtCategoryNo'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'CategoryDesc',
                                            text: 'Category Desc',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtCategoryDesc'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'CategoryInitial',
                                            text: 'Category Initial',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtCategoryInitial'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'CategoryInitialDet',
                                            text: 'Category Initial Det',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtCategoryInitialDet'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'Action',
                                            text: 'Action',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtAction'
                                            }
                                        },
                                        {
                                            xtype: 'actioncolumn',
                                            itemId: 'delAccountCategory',
                                            items: [
                                                {
                                                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                        var store = Ext.getStore('AccountCategoryStore');
                                                        var grd =  Ext.ComponentQuery.query('#grdAccountCategory')[0];
                                                        var row = store.getAt(rowIndex).data;

                                                        Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Account Category ?', function(btn) {
                                                            if(btn == 'yes'){

                                                                /*
                                                                nepaliDateConversion.FiscalYear, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_MONTH_CODE", nepaliDateConversion.MonthCode, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_START_DATE", nepaliDateConversion.EnglishStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_START_DATE", nepaliDateConversion.NepaliStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_END_DATE", nepaliDateConversion.EnglishEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_END_DATE", nepaliDateConversion.NepaliEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_YEAR", nepaliDateConversion.NepaliYear, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_PERIOD", nepaliDateConversion.NepaliPeriod, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NO_OF_DAYS_IN_MONTH", nepaliDateConversion.NoOfDays, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_ON", nepaliDateConversion.CreatedOn, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_BY", nepaliDateConversion.CreatedBy, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_INSERT_UPDATE", nepaliDateConversion.Action, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_CODE", null, OracleDbType.Varchar2, ParameterDirection.Output));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_DESC", null, OracleDbType.
                                                                */
                                                                var accountCategory={CategoryNo:row.CategorNo,
                                                                        CategoryDesc:row.CategoryDesc,
                                                                        CategoryInitial:row.CategoryInitial,
                                                                        TranOfficeCode:null,
                                                                    Action:'D'};

                                                                var wMsg='Deleting....';

                                                                var waitSave = watiMsg(wMsg);

                                                                Ext.Ajax.request({
                                                                    url: '../Handlers/Maintenance/AccountControl/AccountCategoryHandler.ashx',
                                                                    params: {
                                                                        method:'SaveAccountCategory',
                                                                        accountCategory:JSON.stringify(accountCategory)
                                                                    },
                                                                    success: function(response){
                                                                        waitSave.hide();
                                                                        var out=Ext.decode(response.responseText);
                                                                        console.log(out);

                                                                        if(out.success==="true")
                                                                        {
                                                                            var message=out.root;
                                                                            if(message.OutResultCode==="SUCCESS")
                                                                            {
                                                                                msg("SUCCESS",message.OutResultMessage,function(){
                                                                                    grd.bindStore(store);
                                                                                    store.removeAt(rowIndex);
                                                                                });



                                                                            }
                                                                            else
                                                                            {
                                                                                msg("FAILURE",message.OutResultMessage);
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            msg("FAILURE",out.message);
                                                                        }
                                                                    },
                                                                    failure: function ( result, request ) {
                                                                        waitSave.hide();
                                                                        var out=Ext.decode(response.responseText);
                                                                        msg("FAILURE",out.message);
                                                                    }

                                                                });



                                                                return true;
                                                            }
                                                        });
                                                    },
                                                    icon: '../ITS/resources/images/icons/cancel.png'
                                                }
                                            ]
                                        }
                                    ],
                                    plugins: [
                                        Ext.create('Ext.grid.plugin.RowEditing', {
                                            listeners: {
                                                validateedit: {
                                                    fn: me.onRowEditingValidateedit,
                                                    scope: me
                                                },
                                                canceledit: {
                                                    fn: me.onRowEditingCanceledit,
                                                    scope: me
                                                }
                                            }
                                        })
                                    ],
                                    dockedItems: [
                                        {
                                            xtype: 'toolbar',
                                            dock: 'top',
                                            items: [
                                                {
                                                    xtype: 'button',
                                                    itemId: 'btnAddAccountCategory',
                                                    text: 'Add Account Category',
                                                    listeners: {
                                                        click: {
                                                            fn: me.onBtnAddAccountCategoryClick,
                                                            scope: me
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            title: 'Account Sub Category',
                            tabConfig: {
                                xtype: 'tab',
                                listeners: {
                                    click: {
                                        fn: me.onTabClick1,
                                        scope: me
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    itemId: 'grdAccountSubCategory',
                                    store: 'AccountSubCategoryStore',
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'SubCategoryNo',
                                            text: 'Sub-Category No',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtSubCategoryNo'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'SubCategoryDesc',
                                            text: 'Sub-Category Desc',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtSubCategoryDesc'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'CategoryNo',
                                            text: 'Category No',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtCategoryNo'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'RatioNum',
                                            text: 'Ratio No.',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtRatioNum'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'DisplaySeq',
                                            text: 'Display Seq',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtDisplaySeq'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'CategoryInitialDesc',
                                            text: 'Category Initial Desc',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtCategoryInitialDesc'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'Action',
                                            text: 'Action',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtAction'
                                            }
                                        },
                                        {
                                            xtype: 'actioncolumn',
                                            itemId: 'delAccountSubCatgory',
                                            items: [
                                                {
                                                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                        var store = Ext.getStore('AccountSubCategoryStore');
                                                        var grd =  Ext.ComponentQuery.query('#grdAccountSubCategory')[0];
                                                        var row = store.getAt(rowIndex).data;

                                                        Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Sub Account Category ?', function(btn) {
                                                            if(btn == 'yes'){

                                                                /*
                                                                nepaliDateConversion.FiscalYear, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_MONTH_CODE", nepaliDateConversion.MonthCode, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_START_DATE", nepaliDateConversion.EnglishStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_START_DATE", nepaliDateConversion.NepaliStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_END_DATE", nepaliDateConversion.EnglishEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_END_DATE", nepaliDateConversion.NepaliEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_YEAR", nepaliDateConversion.NepaliYear, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_PERIOD", nepaliDateConversion.NepaliPeriod, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NO_OF_DAYS_IN_MONTH", nepaliDateConversion.NoOfDays, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_ON", nepaliDateConversion.CreatedOn, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_BY", nepaliDateConversion.CreatedBy, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_INSERT_UPDATE", nepaliDateConversion.Action, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_CODE", null, OracleDbType.Varchar2, ParameterDirection.Output));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_DESC", null, OracleDbType.
                                                                */
                                                                var accountSubCategory={
                                                                    SubCategoryNo:row.SubCategoryNo,
                                                                    SubCategoryDesc:row.SubCategoryDesc,
                                                                    CategoryNo:row.CategoryNo,
                                                                    CategoryDesc:row.CategoryDesc,
                                                                    RatioNum:row.RatioNum,
                                                                    DisplaySeq:row.DisplaySeq,
                                                                    CategoryInitialDesc:'',
                                                                Action:'D'};

                                                                var wMsg='Deleting....';

                                                                var waitSave = watiMsg(wMsg);

                                                                Ext.Ajax.request({
                                                                    url: '../Handlers/Maintenance/AccountControl/AccountCategoryHandler.ashx',
                                                                    params: {
                                                                        method:'SaveAccountSubCategory',
                                                                        accountSubCategory:JSON.stringify(accountSubCategory)
                                                                    },
                                                                    success: function(response){
                                                                        waitSave.hide();
                                                                        var out=Ext.decode(response.responseText);
                                                                        console.log(out);

                                                                        if(out.success==="true")
                                                                        {
                                                                            var message=out.root;
                                                                            if(message.OutResultCode==="SUCCESS")
                                                                            {
                                                                                msg("SUCCESS",message.OutResultMessage,function(){
                                                                                    grd.bindStore(store);
                                                                                    store.removeAt(rowIndex);
                                                                                });



                                                                            }
                                                                            else
                                                                            {
                                                                                msg("FAILURE",message.OutResultMessage);
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            msg("FAILURE",out.message);
                                                                        }
                                                                    },
                                                                    failure: function ( result, request ) {
                                                                        waitSave.hide();
                                                                        var out=Ext.decode(response.responseText);
                                                                        msg("FAILURE",out.message);
                                                                    }

                                                                });



                                                                return true;
                                                            }
                                                        });
                                                    },
                                                    icon: '../ITS/resources/images/icons/cancel.png'
                                                }
                                            ]
                                        }
                                    ],
                                    plugins: [
                                        Ext.create('Ext.grid.plugin.RowEditing', {
                                            listeners: {
                                                validateedit: {
                                                    fn: me.onRowEditingValidateedit1,
                                                    scope: me
                                                },
                                                canceledit: {
                                                    fn: me.onRowEditingCanceledit1,
                                                    scope: me
                                                }
                                            }
                                        })
                                    ],
                                    dockedItems: [
                                        {
                                            xtype: 'toolbar',
                                            dock: 'top',
                                            items: [
                                                {
                                                    xtype: 'button',
                                                    itemId: 'btnAddAccountSubCategory',
                                                    text: 'Add Account Sub Category',
                                                    listeners: {
                                                        click: {
                                                            fn: me.onBtnAddAccountSubCategoryClick,
                                                            scope: me
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            frame: true,
                            title: 'GL Voucher Type',
                            tabConfig: {
                                xtype: 'tab',
                                listeners: {
                                    click: {
                                        fn: me.onTabClick2,
                                        scope: me
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    itemId: 'ddlOfficeCode',
                                    fieldLabel: 'Office Code',
                                    emptyText: '--- Select Office ---',
                                    size: 50,
                                    displayField: 'OfficeName',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'OfficeShortStore',
                                    valueField: 'OfficeCode'
                                },
                                {
                                    xtype: 'combobox',
                                    itemId: 'ddlFiscalYear',
                                    fieldLabel: 'Fiscal Year',
                                    emptyText: '--- Select Fiscal Year ---',
                                    displayField: 'FiscalYear',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'NepaliFiscalYearStore',
                                    valueField: 'FiscalYear'
                                },
                                {
                                    xtype: 'gridpanel',
                                    itemId: 'grdGLVoucherType',
                                    padding: '20 0 0 0',
                                    title: '',
                                    store: 'GLVoucherTypeStore',
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'TranOffCode',
                                            text: 'Tran Off Code',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtTranOffCode'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'VoucherType',
                                            text: 'Voucher Type',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtVoucherType'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'FiscalYear',
                                            text: 'Fiscal Year',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtFiscalYear'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'VoucherName',
                                            text: 'Voucher Name',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtVoucherName'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'LastVoucherNo',
                                            text: 'Last Voucher No',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtLastVoucherNo'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'Action',
                                            text: 'Action',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtAction'
                                            }
                                        },
                                        {
                                            xtype: 'actioncolumn',
                                            itemId: 'delgLVoucherType',
                                            items: [
                                                {
                                                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                        var store = Ext.getStore('GLVoucherTypeStore');
                                                        var grd =  Ext.ComponentQuery.query('#grdGLVoucherType')[0];
                                                        var row = store.getAt(rowIndex).data;

                                                        Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected GL Voucher Type ?', function(btn) {
                                                            if(btn == 'yes'){

                                                                /*
                                                                nepaliDateConversion.FiscalYear, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_MONTH_CODE", nepaliDateConversion.MonthCode, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_START_DATE", nepaliDateConversion.EnglishStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_START_DATE", nepaliDateConversion.NepaliStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_END_DATE", nepaliDateConversion.EnglishEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_END_DATE", nepaliDateConversion.NepaliEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_YEAR", nepaliDateConversion.NepaliYear, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_PERIOD", nepaliDateConversion.NepaliPeriod, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NO_OF_DAYS_IN_MONTH", nepaliDateConversion.NoOfDays, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_ON", nepaliDateConversion.CreatedOn, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_BY", nepaliDateConversion.CreatedBy, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_INSERT_UPDATE", nepaliDateConversion.Action, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_CODE", null, OracleDbType.Varchar2, ParameterDirection.Output));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_DESC", null, OracleDbType.
                                                                */
                                                                var glVoucherType={
                                                                    TranOffCode:row.TranOffCode,
                                                                    VoucherType:row.VoucherType,
                                                                    FiscalYear:row.FiscalYear,
                                                                    VoucherName:row.VoucherName,
                                                                    LastVoucherNo:row.LastVoucherNo,
                                                                    Action:'D'
                                                                };

                                                                var wMsg='Deleting....';

                                                                var waitSave = watiMsg(wMsg);

                                                                Ext.Ajax.request({
                                                                    url: '../Handlers/Maintenance/AccountControl/GLVoucherTypeHandler.ashx',
                                                                    params: {
                                                                        method:'SaveGLVoucherType',
                                                                        glVoucherType:JSON.stringify(glVoucherType)
                                                                    },
                                                                    success: function(response){
                                                                        waitSave.hide();
                                                                        var out=Ext.decode(response.responseText);
                                                                        console.log(out);

                                                                        if(out.success==="true")
                                                                        {
                                                                            var message=out.root;
                                                                            if(message.OutResultCode==="SUCCESS")
                                                                            {
                                                                                msg("SUCCESS",message.OutResultMessage,function(){
                                                                                    grd.bindStore(store);
                                                                                    store.removeAt(rowIndex);
                                                                                });



                                                                            }
                                                                            else
                                                                            {
                                                                                msg("FAILURE",message.OutResultMessage);
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            msg("FAILURE",out.message);
                                                                        }
                                                                    },
                                                                    failure: function ( result, request ) {
                                                                        waitSave.hide();
                                                                        var out=Ext.decode(response.responseText);
                                                                        msg("FAILURE",out.message);
                                                                    }

                                                                });



                                                                return true;
                                                            }
                                                        });
                                                    },
                                                    icon: '../ITS/resources/images/icons/cancel.png'
                                                }
                                            ]
                                        }
                                    ],
                                    plugins: [
                                        Ext.create('Ext.grid.plugin.RowEditing', {
                                            listeners: {
                                                validateedit: {
                                                    fn: me.onRowEditingValidateedit2,
                                                    scope: me
                                                },
                                                canceledit: {
                                                    fn: me.onRowEditingCanceledit2,
                                                    scope: me
                                                }
                                            }
                                        })
                                    ],
                                    dockedItems: [
                                        {
                                            xtype: 'toolbar',
                                            dock: 'top',
                                            items: [
                                                {
                                                    xtype: 'button',
                                                    itemId: 'btnAddGLVoucherType',
                                                    text: 'Add GL Voucher Type',
                                                    listeners: {
                                                        click: {
                                                            fn: me.onBtnAddGLVoucherTypeClick,
                                                            scope: me
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'btnVTLoad',
                                    text: 'Load',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnVTLoadClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            frame: true,
                            title: 'Voucher Approval Security',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            tabConfig: {
                                xtype: 'tab',
                                listeners: {
                                    click: {
                                        fn: me.onTabClick3,
                                        scope: me
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    colspan: 2,
                                    itemId: 'ddlVASOfficeCode',
                                    fieldLabel: 'Office Code',
                                    emptyText: '--- Select Office ---',
                                    size: 50,
                                    displayField: 'OfficeName',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'OfficeShortStore',
                                    valueField: 'OfficeCode'
                                },
                                {
                                    xtype: 'gridpanel',
                                    colspan: 2,
                                    itemId: 'grdVoucherApprovalSecurity',
                                    store: 'VoucherApprovalSecurityStore',
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'UserCode',
                                            text: 'User Code',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtUserCode'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'VoucherType',
                                            text: 'Voucher Type',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtVoucherType'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'MaxApprovalAmount',
                                            text: 'Max Approval Amount',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtMaxApprovalAmount'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'TranOfficeCode',
                                            text: 'Tran Office Code',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtTranOfficeCode'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'Action',
                                            text: 'Action',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtAction'
                                            }
                                        },
                                        {
                                            xtype: 'actioncolumn',
                                            itemId: 'delVoucherApprovalSecurity',
                                            items: [
                                                {
                                                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                        var store = Ext.getStore('VoucherApprovalSecurityStore');
                                                        var grd =  Ext.ComponentQuery.query('#grdVoucherApprovalSecurity')[0];
                                                        var row = store.getAt(rowIndex).data;

                                                        Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected Voucher Approval Security ?', function(btn) {
                                                            if(btn == 'yes'){

                                                                /*
                                                                nepaliDateConversion.FiscalYear, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_MONTH_CODE", nepaliDateConversion.MonthCode, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_START_DATE", nepaliDateConversion.EnglishStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_START_DATE", nepaliDateConversion.NepaliStartDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_ENGLISH_END_DATE", nepaliDateConversion.EnglishEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_END_DATE", nepaliDateConversion.NepaliEndDate, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_YEAR", nepaliDateConversion.NepaliYear, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NEPALI_PERIOD", nepaliDateConversion.NepaliPeriod, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_NO_OF_DAYS_IN_MONTH", nepaliDateConversion.NoOfDays, OracleDbType.Int16, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_ON", nepaliDateConversion.CreatedOn, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_CREATED_MODIFIED_BY", nepaliDateConversion.CreatedBy, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_INSERT_UPDATE", nepaliDateConversion.Action, OracleDbType.Varchar2, ParameterDirection.Input));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_CODE", null, OracleDbType.Varchar2, ParameterDirection.Output));
                                                                paramList.Add(SqlHelper.GetOraParam(":P_OUT_RESULT_DESC", null, OracleDbType.
                                                                */

                                                                var voucherApprovalSecurity={UserCode:row.UserCode,
                                                                        VoucherType:row.VoucherType,
                                                                        MaxApprovalAmount:row.MaxApprovalAmount,
                                                                        TranOfficeCode:row.TranOfficeCode,
                                                                    Action:'D'};


                                                                var wMsg='Deleting....';

                                                                var waitSave = watiMsg(wMsg);

                                                                Ext.Ajax.request({
                                                                    url: '../Handlers/Maintenance/AccountControl/VoucherApprovalSecurityHandler.ashx',
                                                                    params: {
                                                                        method:'SaveVoucherApprovalSecurity',
                                                                        voucherApprovalSecurity:JSON.stringify(voucherApprovalSecurity)
                                                                    },
                                                                    success: function(response){
                                                                        waitSave.hide();
                                                                        var out=Ext.decode(response.responseText);
                                                                        console.log(out);

                                                                        if(out.success==="true")
                                                                        {
                                                                            var message=out.root;
                                                                            if(message.OutResultCode==="SUCCESS")
                                                                            {
                                                                                msg("SUCCESS",message.OutResultMessage,function(){
                                                                                    grd.bindStore(store);
                                                                                    store.removeAt(rowIndex);
                                                                                });



                                                                            }
                                                                            else
                                                                            {
                                                                                msg("FAILURE",message.OutResultMessage);
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            msg("FAILURE",out.message);
                                                                        }
                                                                    },
                                                                    failure: function ( result, request ) {
                                                                        waitSave.hide();
                                                                        var out=Ext.decode(response.responseText);
                                                                        msg("FAILURE",out.message);
                                                                    }

                                                                });



                                                                return true;
                                                            }
                                                        });
                                                    },
                                                    icon: '../ITS/resources/images/icons/cancel.png'
                                                }
                                            ]
                                        }
                                    ],
                                    plugins: [
                                        Ext.create('Ext.grid.plugin.RowEditing', {
                                            listeners: {
                                                validateedit: {
                                                    fn: me.onRowEditingValidateedit3,
                                                    scope: me
                                                },
                                                canceledit: {
                                                    fn: me.onRowEditingCanceledit3,
                                                    scope: me
                                                }
                                            }
                                        })
                                    ],
                                    dockedItems: [
                                        {
                                            xtype: 'toolbar',
                                            dock: 'top',
                                            items: [
                                                {
                                                    xtype: 'button',
                                                    itemId: 'btnAddVoucherApprovalSecurit',
                                                    text: 'Add Voucher Approval Security',
                                                    listeners: {
                                                        click: {
                                                            fn: me.onBtnAddVoucherApprovalSecuritClick,
                                                            scope: me
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'btnLoadVoucherSecurity',
                                    padding: 5,
                                    text: 'Load',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnLoadVoucherSecurityClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFrmAccountControlAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onTabClick: function(button, e, eOpts) {
        var store=Ext.getStore('AccountCategoryStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Maintenance/AccountControl/AccountCategoryHandler.ashx',
            params: {
                method:'GetAccountCategory'
            },
            success: function(response){

                var data=Ext.decode(response.responseText);
                store.removeAll();
                store.add(data.root);


            }
        });
    },

    onRowEditingValidateedit: function(editor, e, eOpts) {
        var errMsg='';
        var categoryNo=Ext.ComponentQuery.query('#txtCategoryNo')[0];
        var categoryDesc=Ext.ComponentQuery.query('#txtCategoryDesc')[0];
        var categoryInitial=Ext.ComponentQuery.query('#txtCategoryInitial')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];

        if(categoryNo.getValue()===null ||categoryNo.getValue()==="")
            {
                errMsg+="Please,Enter Category Number";
            }
        if(categoryDesc.getValue()===null ||categoryDesc.getValue()==="")
            {
                errMsg+="Please,Enter Category Description";
            }
        if(categoryInitial.getValue()===null ||categoryInitial.getValue()==="")
            {
                errMsg+="Please,Enter Catgory Initial";
            }

        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }
        /*
        p_category_no                               IN           NUMBER,
                                         p_category_desc                             IN           VARCHAR2,
                                         p_category_initial                          IN           VARCHAR2,
                                         p_tran_office_code                          IN           VARCHAR2,       */

        var accountCategory={CategoryNo:categorNo.getValu(),
                 CategoryDesc:categoryDesc.getValue(),
                 CategoryInitial:categoryInitial.getValue(),
                 TranOfficeCode:null,
                 Action:action.getValue()};



        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updating....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Maintenance/AccountControl/AccountCategoryHandler.ashx',
                    params: {
                        method:'SaveAccountCategory',
                        accountCategory:JSON.stringify(accountCategory)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdAccountCategory')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit: function(editor, e, eOpts) {

    },

    onBtnAddAccountCategoryClick: function(button, e, eOpts) {

        var store =Ext.getStore('AccountCategoryStore');
        var rec={CategoryNo:'',
                 CategoryDesc:'',
                 CategoryInitial:'',
                 TranOfficeCode:'',
                 Action:'I'};
        store.add(rec);
    },

    onTabClick1: function(button, e, eOpts) {
        var store=Ext.getStore('AccountSubCategoryStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Maintenance/AccountControl/AccountSubCategoryHandler.ashx',
            params: {
                method:'GetAccountSubCategory'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            store.removeAll();
                console.log('data',data.root);
            store.add(data.root);


        }
        });
    },

    onRowEditingValidateedit1: function(editor, e, eOpts) {
        var errMsg='';
        var subCategoryNo=Ext.ComponentQuery.query('#txtSubCategoryNo')[0];
        var subCategoryDesc=Ext.ComponentQuery.query('#txtSubCategoryDesc')[0];
        var categoryNo=Ext.ComponentQuery.query('#txtCategoryNo')[0];
        var ratioNum=Ext.ComponentQuery.query('#txtRatioNum')[0];
        var displaySeq=Ext.ComponentQuery.query('#txtDisplaySeq')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];

        if(subCategoryNo.getValue()===null ||subCategoryNo.getValue()==="")
            {
                errMsg+="Please,Enter Sub Category Code";
            }
        if(subCategoryDesc.getValue()===null ||subCategoryDesc.getValue()==="")
            {
                errMsg+="Please,Enter Sub Category Description";
            }
        if(categoryNo.getValue()===null ||categoryNo.getValue()==="")
            {
                errMsg+="Please,Enter CategoryNo Code";
            }
        if(ratioNum.getValue()===null ||ratioNum.getValue()==="")
            {
                errMsg+="Please,Enter Ratio Number";
            }
        if(displaySeq.getValue()===null ||displaySeq.getValue()==="")
            {
                errMsg+="Please,Enter Display Sequence";
            }
        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }

        var accountSubCategory={
                    SubCategoryNo:subCategoryNo.getValue(),
                    SubCategoryDesc:subCategoryDesc.getValue(),
                    CategoryNo:categoryNo.getValue(),
                    CategoryDesc:categoryDesc.getValue(),
                    RatioNum:ratioNum.getValue(),
                    DisplaySeq:displaySeq.getValue,
                    CategoryInitialDesc:'',
                    Action:action.getValue()};

        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updting....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Maintenance/AccountControl/AccountSubCategoryHandler.ashx',
                    params: {
                        method:'SaveAccountSubCategory',
                        accountSubCategory:JSON.stringify(accountSubCategory)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdAccountSubCategory')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit1: function(editor, e, eOpts) {

    },

    onBtnAddAccountSubCategoryClick: function(button, e, eOpts) {


        var store =Ext.getStore('AccountSubCategoryStore');
        var rec={
                    SubCategoryNo:'',
                    SubCategoryDesc:'',
                    CategoryNo:'',
                    CategoryDesc:'',
                    RatioNum:'',
                    DisplaySeq:'',
                    CategoryInitialDesc:'',
                    Action:'I'};
        store.add(rec);
    },

    onTabClick2: function(button, e, eOpts) {
        /*var store=Ext.getStore('GLVoucherTypeStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Maintenance/AccountControl/GLVoucherTypeHandler.ashx',
            params: {
                method:'GetGLVoucherType'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            store.removeAll();
            store.add(data.root);


        }
        });*/
    },

    onRowEditingValidateedit2: function(editor, e, eOpts) {
        var errMsg='';
        var tranOffCode=Ext.ComponentQuery.query('#txtTranOffCode')[0];
        var voucherType=Ext.ComponentQuery.query('#txtVoucherType')[0];
        var fiscalYear=Ext.ComponentQuery.query('#txtFiscalYear')[0];
        var voucherName=Ext.ComponentQuery.query('#txtVoucherName')[0];
        var LastVoucherNo=Ext.ComponentQuery.query('#txtLastVoucherNo')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];

        if(tranOffCode.getValue()===null ||tranOffCode.getValue()==="")
            {
                errMsg+="Please,Enter Narration Code";
            }
        if(voucherType.getValue()===null ||voucherType.getValue()==="")
            {
                errMsg+="Please,Enter Narration Description";
            }
        if(fiscalYear.getValue()===null ||fiscalYear.getValue()==="")
            {
                errMsg+="Please,Enter Narration Code";
            }
        if(voucherName.getValue()===null ||voucherName.getValue()==="")
            {
                errMsg+="Please,Enter Narration Description";
            }
        if(LastVoucherNo.getValue()===null ||LastVoucherNo.getValue()==="")
            {
                errMsg+="Please,Enter Narration Code";
            }
        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }

        var glVoucherType={
                    TranOffCode:tranOffCode.getValue(),
                     VoucherType:voucherType.getValue(),
                     FiscalYear:fiscalYear.getValue(),
                     VoucherName:voucherName.getValue(),
                     LastVoucherNo:lastVoucherNo.getValue(),
                     Action:'I'
        };

        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updting....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Maintenance/AccountControl/GLVoucherTypeHandler.ashx',
                    params: {
                        method:'SaveGLVoucherType',
                        glLVoucherType:JSON.stringify(glVoucherType)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdGLVoucherType')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit2: function(editor, e, eOpts) {

    },

    onBtnAddGLVoucherTypeClick: function(button, e, eOpts) {
        /*
        public string TranOffCode { get; set; }
                public string VoucherType { get; set; }
                public string FiscalYear { get; set; }
                public string VoucherName { get; set; }
                public long LastVoucherNo { get; set; }
                */

        var store =Ext.getStore('GLVoucherTypeStore');
        var rec={
                    TranOffCode:'',
                     VoucherType:'',
                     FiscalYear:'',
                     VoucherName:'',
                     LastVoucherNo:'',
                     Action:'I'
        };
        store.add(rec);
    },

    onBtnVTLoadClick: function(button, e, eOpts) {
        var office=Ext.ComponentQuery.query('#ddlOfficeCode')[0];
        var fiscalYear=Ext.ComponentQuery.query('#ddlFiscalYear')[0];

        var store=Ext.getStore('GLVoucherTypeStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Maintenance/AccountControl/GLVoucherTypeHandler.ashx',
            params: {
                method:'GetGLVoucherType',
                officeCode:office.getValue(),
                fiscalYear:fiscalYear.getValue()
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            store.removeAll();
            store.add(data.root);


        }
        });


    },

    onTabClick3: function(button, e, eOpts) {

    },

    onRowEditingValidateedit3: function(editor, e, eOpts) {
        var errMsg='';
        var userCode=Ext.ComponentQuery.query('#txtUserCode')[0];
        var voucherType=Ext.ComponentQuery.query('#txtVoucherType')[0];
        var maxApprovalAmount=Ext.ComponentQuery.query('#txtMaxApprovalAmount')[0];
        var tranOfficeCode=Ext.ComponentQuery.query('#txtTranOfficeCode')[0];
        var action=Ext.ComponentQuery.query('#txtAction')[0];

        if(fiscalYear.getValue()===null ||fiscalYear.getValue()==="")
            {
                errMsg+="Please,Enter User Code";
            }
        if(startDateBS.getValue()===null ||startDateBS.getValue()==="")
            {
                errMsg+="Please,Enter VoucherType";
            }
        if(startDate.getValue()===null ||startDate.getValue()==="")
            {
                errMsg+="Please,Enter Max Approval Amount";
            }
        if(endDateBS.getValue()===null ||endDateBS.getValue()==="")
            {
                errMsg+="Please,Enter Tran Office Code";
            }
        if(endDate.getValue()===null ||endDate.getValue()==="")
            {
                errMsg+="Please,Enter Narration Code";
            }
        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }

        var voucherApprovalSecurity={UserCode:userCode.getValue(),
                 VoucherType:voucherType.getValue(),
                 MaxApprovalAmount:maxApprovalAmount.getValue(),
                 TranOfficeCode:tranOfficeCode.getValue(),
                 Action:action.getValue()};

        var wMsg='';
        if(action.getValue()==='I')
            {
                wMsg='Inserting....';
            }
        else
            {
                wMsg='Updting....';
            }
        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Maintenance/AccountControl/VoucherApprovalSecurityHandler.ashx',
                    params: {
                        method:'SaveNepaliFiscalYear',
                        voucherApprovalSecurity:JSON.stringify(voucherApprovalSecurity)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;
                            if(message.OutResultCode==="SUCCESS")
                                {
                                    msg("SUCCESS",message.OutResultMessage,function(){
                                        var grd = Ext.ComponentQuery.query('#grdVoucherApprovalSecurity')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });



                                }
                            else
                                {
                                  msg("FAILURE",message.OutResultMessage);
                                }
                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });

    },

    onRowEditingCanceledit3: function(editor, e, eOpts) {

    },

    onBtnAddVoucherApprovalSecuritClick: function(button, e, eOpts) {
        /*public string UserCode { get; set; }
                public string VoucherType { get; set; }
                public double MaxApprovalAmount { get; set; }
                public string TranOfficeCode { get; set; }
                */
        var store =Ext.getStore('VoucherApprovalSecurityStore');
        var rec={UserCode:'',
                 VoucherType:'',
                 MaxApprovalAmount:'',
                 TranOfficeCode:'',
                 Action:'I'};
        store.add(rec);
    },

    onBtnLoadVoucherSecurityClick: function(button, e, eOpts) {
         var office=Ext.ComponentQuery.query('#ddlVASOfficeCode')[0];

                var store=Ext.getStore('VoucherApprovalSecurityStore');
                store.removeAll();

                Ext.Ajax.request({
                    url: '../Handlers/Maintenance/AccountControl/VoucherApprovalSecurityHandler.ashx',
                    params: {
                        method:'GetVoucherApprovalSecurity',
                        officeCode:office.getValue()
                    },
                    success: function(response){

                    var data=Ext.decode(response.responseText);
                    store.removeAll();
                    store.add(data.root);


                }
                });
    },

    onFrmAccountControlAfterRender: function(component, eOpts) {
        var fystore=Ext.getStore('NepaliFiscalYearStore');
        fystore.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Maintenance/GeneralDefinitions/NepaliFiscalYearHandler.ashx',
            params: {
                method:'GetNepaliFiscalYear'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            console.log('data',data);
            fystore.removeAll();
            fystore.add(data.root);


        }
        });


        var store=Ext.getStore('OfficeShortStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Office/OfficeHandler.ashx',
            params: {
                method:'GetOfficeShort'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            store.removeAll();
            store.add(data.root);


        }
        });



    }

});