/*
 * File: app/view/VdcCoverageByOffice.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.VdcCoverageByOffice', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.grid.column.Action',
        'Ext.selection.RowModel',
        'Ext.grid.plugin.RowEditing'
    ],

    frame: true,
    itemId: 'VdcCoverageByOffice',
    title: 'VDC Coverage By Office',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    autoScroll: true,
                    bodyPadding: 10,
                    layout: {
                        type: 'table',
                        columns: 2
                    },
                    items: [
                        {
                            xtype: 'container',
                            colspan: 3,
                            layout: 'table',
                            items: [
                                {
                                    xtype: 'combobox',
                                    itemId: 'ddlOffice',
                                    width: 404,
                                    fieldLabel: 'Office',
                                    emptyText: '- - - Select Office - - -',
                                    displayField: 'OfficeName',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    store: 'OfficeShortStore',
                                    valueField: 'OfficeCode',
                                    listeners: {
                                        collapse: {
                                            fn: me.onDdlOfficeCollapse,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            colspan: 2,
                            height: 250,
                            itemId: 'grdVdcCoverage',
                            width: 700,
                            store: 'VdcCoverageByOfficeStore',
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    items: [
                                        {
                                            xtype: 'button',
                                            itemId: 'btnAddVdc',
                                            text: 'Add ',
                                            listeners: {
                                                click: {
                                                    fn: me.onBtnAddVdcClick,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }
                            ],
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    width: 217,
                                    dataIndex: 'VdcnpCode',
                                    text: 'VDC',
                                    editor: {
                                        xtype: 'combobox',
                                        itemId: 'ddlVDC',
                                        displayField: 'VDCNPDesc',
                                        forceSelection: true,
                                        queryMode: 'local',
                                        store: 'VdcSearchStore',
                                        valueField: 'VDCNPCode'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 237,
                                    dataIndex: 'Remarks',
                                    text: 'Remarks',
                                    editor: {
                                        xtype: 'textfield',
                                        itemId: 'txtRemarks'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'Action',
                                    text: 'Action'
                                },
                                {
                                    xtype: 'actioncolumn',
                                    items: [
                                        {
                                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                var officeCode=Ext.ComponentQuery.query('#ddlOffice')[0];
                                                var vdcCode=Ext.ComponentQuery.query('#ddlVDC')[0];
                                                var remarks=Ext.ComponentQuery.query('#txtRemarks')[0];

                                                Ext.Msg.confirm('Confirm Action', 'Do you want to Remove the selected VDC Coverage?', function(btn) {
                                                    if(btn == 'yes'){

                                                        var store = Ext.getStore('VdcCoverageByOfficeStore');
                                                        var grd =  Ext.ComponentQuery.query('#grdVdcCoverage')[0];
                                                        var row = store.getAt(rowIndex).data;

                                                        var vdcCoverageObj ={
                                                            InstituteCode : officeCode.getValue(),
                                                            VdcnpCode : vdcCode.getValue(),
                                                            Remarks : remarks.getValue(),
                                                            Action:'D'

                                                        };

                                                        var wMsg='Deleting....';

                                                        var waitSave = watiMsg(wMsg);

                                                        Ext.Ajax.request({
                                                            url: '../Handlers/GeneralMasterParameters/Office/VdcCoverageByOfficeHandler.ashx',
                                                            params:{method:'Save',vdcCoverageByOffice:JSON.stringify(vdcCoverageObj)},
                                                            success: function(response){
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);

                                                                if(out.success)
                                                                {

                                                                    msg("SUCCESS",out.message,function(){
                                                                        //grd.bindStore(store);
                                                                        store.removeAt(rowIndex);
                                                                    });
                                                                }
                                                                else
                                                                {
                                                                    msg("FAILURE",out.message);
                                                                }
                                                            },
                                                            failure: function ( result, request ) {
                                                                waitSave.hide();
                                                                var out=Ext.decode(response.responseText);
                                                                msg("FAILURE",out.message);
                                                            }

                                                        });



                                                        return true;
                                                    }
                                                });
                                            },
                                            icon: '../ITS/resources/images/icons/cancel.png'
                                        }
                                    ]
                                }
                            ],
                            selModel: Ext.create('Ext.selection.RowModel', {
                                listeners: {
                                    beforeselect: {
                                        fn: me.onRowModelBeforeSelect,
                                        scope: me
                                    }
                                }
                            }),
                            plugins: [
                                Ext.create('Ext.grid.plugin.RowEditing', {
                                    listeners: {
                                        validateedit: {
                                            fn: me.onRowEditingValidateedit,
                                            scope: me
                                        },
                                        canceledit: {
                                            fn: me.onRowEditingCanceledit,
                                            scope: me
                                        }
                                    }
                                })
                            ],
                            listeners: {
                                beforerender: {
                                    fn: me.onGrdVdcCoverageBeforeRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'container',
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    height: 250,
                                    hidden: true,
                                    itemId: 'grdDateWiseVdcCoverage',
                                    margin: '10 0 0 0',
                                    width: 700,
                                    title: 'Date Wise VDC Coverage',
                                    store: 'VdcCoverageDateWise',
                                    plugins: [
                                        Ext.create('Ext.grid.plugin.RowEditing', {
                                            listeners: {
                                                validateedit: {
                                                    fn: me.onRowEditingValidateedit1,
                                                    scope: me
                                                },
                                                canceledit: {
                                                    fn: me.onRowEditingCanceledit1,
                                                    scope: me
                                                }
                                            }
                                        })
                                    ],
                                    dockedItems: [
                                        {
                                            xtype: 'toolbar',
                                            dock: 'top',
                                            items: [
                                                {
                                                    xtype: 'button',
                                                    text: 'Add',
                                                    listeners: {
                                                        click: {
                                                            fn: me.onButtonClick,
                                                            scope: me
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ],
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'DateBS',
                                            text: 'Date(B.S)',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtNepDate'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'VdcnpDate',
                                            text: 'Date(A.D)',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtEngDate'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'HhCovered',
                                            text: 'HH Covered',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtHhCovered'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'HhServed',
                                            text: 'HH Served',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtHhServed'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'HhPotential',
                                            text: 'HH Potential',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtHhPotential'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'Remarks',
                                            text: 'Remarks',
                                            editor: {
                                                xtype: 'textfield',
                                                itemId: 'txtDatewiseRemarks'
                                            }
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'Action',
                                            text: 'Action'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'textfield',
                            hidden: true,
                            itemId: 'txtHdnVdcCode',
                            fieldLabel: 'Label'
                        }
                    ]
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onVdcCoverageByOfficeAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onDdlOfficeCollapse: function(field, eOpts) {
        var vdcCoverageObj={
                   InstituteCode:field.getValue()
               };

                  Ext.Ajax.request({
                    url: '../Handlers/GeneralMasterParameters/Office/VDCCoverageByOfficeHandler.ashx',
                    params: {
                            method:'Search',
                            vdcCoverageByOffice:JSON.stringify(vdcCoverageObj)
                   },
                    success: function(response){
                        var obj = Ext.decode(response.responseText);
                        if(obj.success === "true")
                        {

                            var store=Ext.getStore('VdcCoverageByOfficeStore');
                            store.removeAll();
                            store.add(obj.root);

                        }
                        else
                        {

                            msg("FAILURE",obj.message);
                        }
                    }
                });
    },

    onBtnAddVdcClick: function(button, e, eOpts) {
        var store=Ext.getStore('VdcCoverageByOfficeStore');
        var vdcCoverageObj ={
                        InstituteCode : "",
                        VdcnpName : "",
                        Remarks : "",
        				Action:"I"
        };

        store.add(vdcCoverageObj);

    },

    onRowModelBeforeSelect: function(rowmodel, record, index, eOpts) {

        //Ext.ComponentQuery.query('#grdDateWiseVdcCoverage')[0].setVisible(true);
        Ext.ComponentQuery.query('#txtHdnVdcCode')[0].setValue(record.data.VdcnpCode);


    },

    onRowEditingValidateedit: function(editor, e, eOpts) {
        var officeCode=Ext.ComponentQuery.query('#ddlOffice')[0];
        var vdcCode=Ext.ComponentQuery.query('#ddlVDC')[0];
        var remarks=Ext.ComponentQuery.query('#txtRemarks')[0];


        var vdcCoverageObj ={
                        InstituteCode : officeCode.getValue(),
                        VdcnpCode : vdcCode.getValue(),
                        Remarks : remarks.getValue(),
                        Action:e.newValues.Action

        };

        var waitSave = watiMsg('Please wait ...');
        Ext.Ajax.request({
             url: '../Handlers/GeneralMasterParameters/Office/VdcCoverageByOfficeHandler.ashx',
             params:{method:'Save',vdcCoverageByOffice:JSON.stringify(vdcCoverageObj)},
             success: function ( response, request ) {
                waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                           msg("SUCCESS",out.message,function(){
                                        var grd = Ext.ComponentQuery.query('#grdVdcCoverage')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });
                      }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( response, request ) {
                       waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });
    },

    onRowEditingCanceledit: function(editor, e, eOpts) {

    },

    onGrdVdcCoverageBeforeRender: function(component, eOpts) {
         var grid = Ext.ComponentQuery.query('#grdVdcCoverage')[0];

                grid.columns[0].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
                    var temp="";


                    var items=Ext.getStore('VdcSearchStore').data.items;


                    for(var i=0;i<items.length;i++)
                    {

                        if(items[i].data.VDCNPCode==value)
                        {
                            temp=items[i].data.VDCNPDesc;
                            break;
                        }
                    }


                    return temp;
                };


    },

    onRowEditingValidateedit1: function(editor, e, eOpts) {
        var vdcnpDate=Ext.ComponentQuery.query('#txtEngDate')[0];
        var hhCovered=Ext.ComponentQuery.query('#txtHhCovered')[0];
        var hhServed=Ext.ComponentQuery.query('#txtHhServed')[0];
        var hhPotential=Ext.ComponentQuery.query('#txtHhPotential')[0];
        var remarks=Ext.ComponentQuery.query('#txtDatewiseRemarks')[0];
        var officeCode=Ext.ComponentQuery.query('#txtOfficeCode')[0];
        var vdcCode=Ext.ComponentQuery.query('#txtHdnVdcCode')[0];



        var vdcDatewiseObj ={
                        InstituteCode : officeCode.getValue(),
                        VdcnpCode : vdcCode.getValue(),
                        Remarks : remarks.getValue(),
                        HhCovered:hhCovered.getValue(),
                        HhServed:hhServed.getValue(),
                        HhPotential:hhPotential.getValue(),
                        VdcnpDate:vdcnpDate.getValue(),
                        Action:e.newValues.Action

        };

        var waitSave = watiMsg('Please wait ...');
        Ext.Ajax.request({
             url: '../Handlers/GeneralMasterParameters/Office/OfficeVdcDatewiseHandler.ashx',
             params:{method:'Save',officeVdcDatewise:JSON.stringify(vdcDatewiseObj)},
             success: function ( response, request ) {
                waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                           msg("SUCCESS",out.message,function(){
                                        var grd = Ext.ComponentQuery.query('#grdDateWiseVdcCoverage')[0];

                                        var record = grd.getSelectionModel().getSelection()[0];
                                        record.set('Action','U');

                                    });
                      }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( response, request ) {
                       waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });
    },

    onRowEditingCanceledit1: function(editor, e, eOpts) {

    },

    onButtonClick: function(button, e, eOpts) {
        var store=Ext.getStore('VdcCoverageDateWise');
        var vdcCoverageDatewiseObj ={
                        InstituteCode : "",
                        VdcnpName : "",
                        Remarks : "",
                        HhCovered:"",
                        HhServed:"",
                        HhPotential:"",
                        VdcnpDate:"",
                        DateBS:"",
        				Action:"I"
        };

        store.add(vdcCoverageDatewiseObj);
    },

    onVdcCoverageByOfficeAfterRender: function(component, eOpts) {
        var store=Ext.getStore('VdcCoverageByOfficeStore');
        store.removeAll();


        var store=Ext.getStore('OfficeShortStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Office/OfficeHandler.ashx',
            params: {
                method:'GetOfficeShort'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            store.removeAll();
            store.add(data.root);


        }
        });

        var vdcStore=Ext.getStore('VdcSearchStore');
        vdcStore.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Common/VdcHandler.ashx',
            params: {
                method:'GetVDCShort',Vdc:JSON.stringify({DistrictCode:null,VDCNPDesc:null})
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            vdcStore.removeAll();
            vdcStore.add(data.root);


        }
        });
    }

});