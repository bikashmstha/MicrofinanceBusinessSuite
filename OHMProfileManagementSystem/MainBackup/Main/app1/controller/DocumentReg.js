/*
 * File: app/controller/DocumentReg.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.DocumentReg', {
    extend: 'Ext.app.Controller',

    models: [
        'DocRegUserModel',
        'DocRegRoleModel',
        'DocRegKeywordModel',
        'DocRegFilesModel'
    ],
    stores: [
        'DocRegUserStore',
        'DocRegUserToStore',
        'DocRegRoleStore',
        'DocRegRoleToStore',
        'DocRegKeywordStore',
        'DocRegKeywordToStore',
        'DocRegFileStore',
        'DocRegOfficeSecStore'
    ],
    views: [
        'DocumentReg'
    ],

    onDocumentRegAfterRender: function(component, eOpts) {
        var gridUsers=Ext.ComponentQuery.query('#grdUsers')[0];
        var gridRole=Ext.ComponentQuery.query('#grdRole')[0];
        var gridKeyword=Ext.ComponentQuery.query('#grdKeyword')[0];


        var gridToUsers=Ext.ComponentQuery.query('#grdUserTo')[0];
        var gridToRole=Ext.ComponentQuery.query('#grdRoleTo')[0];
        var gridToKeyword=Ext.ComponentQuery.query('#grdKeywordTo')[0];



        var offCode= Ext.get('offCode').dom.innerHTML;
        Ext.ComponentQuery.query('#hdnRadio')[0].setValue('O');

        var cmbsec=Ext.ComponentQuery.query('#cmbOffSection')[0];


        cmbsec.store.loadData([],false);


        gridToUsers.store.loadData([],false);
        gridToRole.store.loadData([],false);
        gridToKeyword.store.loadData([],false);

        Ext.Ajax.request
        ({

            url:'../Handlers/DocumentManagement/ClkSectionHandler.ashx?method=GetAllSections', 
            success:function(response){

                var obj =Ext.decode(response.responseText);
                var row = obj.root;



                cmbsec.store.loadData([],false);

                cmbsec.store.add(obj.root); 


            },

            failure:function()
            {
                msg('FAILURE',Ext.decode(response));

            }



        });



        Ext.Ajax.request
        ({

            url:'../Handlers/DocumentManagement/KeywordSectionHandler.ashx?method=GetKeywordSection',
            params:{Keyword:''},


            success:function(response){

                var obj =Ext.decode(response.responseText);
                var row = obj.root;



                gridKeyword.store.loadData([],false);

                gridKeyword.store.add(obj.root); 


            },

            failure:function()
            {
                msg('FAILURE',Ext.decode(response));

            }



        });

        Ext.Ajax.request
        ({

            url:'../Handlers/DocumentManagement/DocRegSecurityHandler.ashx?method=GetDocRegOfficeUsers',
            params:{officeCode:offCode},


            success:function(response){

                var obj =Ext.decode(response.responseText);
                var row = obj.root;
                gridUsers.store.loadData([],false);
                gridUsers.store.add(obj.root); 

            },

            failure:function()
            {
                msg('FAILURE',Ext.decode(response));

            }



        });


        Ext.Ajax.request
        ({

            url:'../Handlers/DocumentManagement/DocRegSecurityHandler.ashx?method=GetDocRegRoles',
            params:{applicationID:'DocMgmt'},


            success:function(response){

                var obj =Ext.decode(response.responseText);
                var row = obj.root;
                gridRole.store.loadData([],false);
                gridRole.store.add(obj.root); 


            },

            failure:function()
            {
                msg('FAILURE',Ext.decode(response));

            }



        });




    },

    onTxtPanDocRegBlur: function(component, e, eOpts) {
        var Error=Ext.ComponentQuery.query('#txtPanDocReg')[0].getActiveError( );
        var pan=Ext.ComponentQuery.query('#txtPanDocReg')[0];
        var panvalue=pan.getValue();
        var isValid=ValidatePan(panvalue,'','');
        if(Error)
        {
            msg('WARNING',Error);
            return;
        }


        if(isValid===false)
        {
            msg('WARNING','PAN is not valid type a valid PAN No.!');
            return;
        }

    },

    onContTabAfterRender: function(component, eOpts) {
        var tabUser=Ext.ComponentQuery.query('#tabPanelUsersRole')[0];
        tabUser.setVisible(false);
    },

    onGrdUsersItemClick1: function(dataview, record, item, index, e, eOpts) {
        var hidenF=Ext.ComponentQuery.query('#hdnSelectedIndex')[0];
        hidenF.setValue(index);
    },

    onBtnForwardUserClick1: function(button, e, eOpts) {
        var UserToStore = Ext.getStore('DocRegUserToStore');
        var UserStore = Ext.getStore('DocRegUserStore');
        var selectedIndex=Ext.ComponentQuery.query('#hdnSelectedIndex')[0].getValue();
        var row = UserStore.getAt(selectedIndex);
        var recordIndex = UserToStore.findBy(
        function(record, id){
            if(record.get('UserID') === row.data.UserID && record.get('FromDate')===row.data.FromDate ){
                return true;  // a record with this data exists
            }
            return false;  // there is no record in the store with this data
        }
        );

        if(recordIndex != -1){
            alert("We have a duplicate, abort!");
        }
        else
        {
            UserToStore.add({UserID:row.data.UserID,FromDate:row.data.FromDate});
        }

    },

    onBtnBackwardUserClick1: function(button, e, eOpts) {
        var UserToStore = Ext.getStore('DocRegUserToStore');
        var selData=Ext.ComponentQuery.query('#hdnSelectedIndex')[0].getValue();
        UserToStore.removeAt(selData);
    },

    onGrdKeywordToItemClick1: function(dataview, record, item, index, e, eOpts) {
        var hidenF=Ext.ComponentQuery.query('#hdnSelectedIndex')[0];
        hidenF.setValue(index);
    },

    onGrdRoleItemClick: function(dataview, record, item, index, e, eOpts) {
        var hidenF=Ext.ComponentQuery.query('#hdnSelectedIndex')[0];
        hidenF.setValue(index);
    },

    onBtnForwardRoleClick: function(button, e, eOpts) {
        var RoleToStore = Ext.getStore('DocRegRoleToStore');
        var RoleStore = Ext.getStore('DocRegRoleStore');
        var selectedIndex=Ext.ComponentQuery.query('#hdnSelectedIndex')[0].getValue();
        var row = RoleStore.getAt(selectedIndex);


        var recordIndex = RoleToStore.findBy(
        function(record, id){

            if(record.get('RoleID') === row.data.RoleID && record.get('ApplicationID')===row.data.ApplicationID ){
                return true;  // a record with this data exists
            }
            return false;  // there is no record in the store with this data
        }
        );

        if(recordIndex != -1){
            alert("We have a duplicate, abort!");
        }
        else
        {
            RoleToStore.add({RoleID:row.data.RoleID,ApplicationID:row.data.ApplicationID});
        }

    },

    onBtnBackwardRoleClick: function(button, e, eOpts) {
        var RoleToStore = Ext.getStore('DocRegRoleToStore');
        var selData=Ext.ComponentQuery.query('#hdnSelectedIndex')[0].getValue();
        RoleToStore.removeAt(selData);
    },

    onGrdRoleToItemClick: function(dataview, record, item, index, e, eOpts) {
        var hidenF=Ext.ComponentQuery.query('#hdnSelectedIndex')[0];
        hidenF.setValue(index);
    },

    onGrdKeywordItemClick: function(dataview, record, item, index, e, eOpts) {
        var hidenF=Ext.ComponentQuery.query('#hdnSelectedIndex')[0];
        hidenF.setValue(index);

    },

    onBtnAddKeywordClick: function(button, e, eOpts) {

        var dd=dynamicPopUp('KeywordSec');

        var gridKeyword=Ext.ComponentQuery.query('#grdKeyword')[0];

        Ext.Ajax.request
        ({

            url:'../Handlers/DocumentManagement/KeywordSectionHandler.ashx?method=GetKeywordSection',
            params:{Keyword:''},


            success:function(response){

                var obj =Ext.decode(response.responseText);
                var row = obj.root;
                gridKeyword.store.loadData([],false);
                gridKeyword.store.add(obj.root); 


            },

            failure:function()
            {
                msg('FAILURE',Ext.decode(response));

            }



        });
    },

    onBtnForwardKeywordClick: function(button, e, eOpts) {
        var KeywordToStore = Ext.getStore('DocRegKeywordToStore');
        var KeywordStore = Ext.getStore('DocRegKeywordStore');
        var selectedIndex=Ext.ComponentQuery.query('#hdnSelectedIndex')[0].getValue();

        var row = KeywordStore.getAt(selectedIndex);

        var recordIndex = KeywordToStore.findBy(
        function(record, id){
            if(record.get('KW_Id') === row.data.kw_id && record.get('Keyword') === row.data.Keyword &&
            record.get('Status') === row.data.Status && record.get('KeywordDesc') === row.data.KeywordDesc &&
            record.get('EntryBy') === row.data.EntryBy && record.get('EntryDate') === row.data.EntryDate &&
            record.get('Action') === row.data.Action){
                return true;  // a record with this data exists
            }
            return false;  // there is no record in the store with this data
        }
        );

        if(recordIndex != -1){
            alert("We have a duplicate, abort!");
        }
        else
        {   
            KeywordToStore.add({KW_Id:row.data.kw_id,Keyword:row.data.Keyword,Status:row.data.Status,
            KeywordDesc:row.data.KeywordDesc,EntryBy:row.data.EntryBy,EntryDate:row.data.EntryDate,Action:row.data.Action});
        }


    },

    onBtnBackrwardKeywordClick: function(button, e, eOpts) {
        var KeywordToStore = Ext.getStore('DocRegKeywordToStore');
        var selData=Ext.ComponentQuery.query('#hdnSelectedIndex')[0].getValue();
        KeywordToStore.removeAt(selData);
    },

    onGrdKeywordToItemClick: function(dataview, record, item, index, e, eOpts) {
        var hidenF=Ext.ComponentQuery.query('#hdnSelectedIndex')[0];
        hidenF.setValue(index);
    },

    onBtnFileUploadChange: function(filefield, value, eOpts) {
        Ext.getCmp('DocFormFile').getForm().submit({
            url: '../Handlers/DocumentManagement/DocFileHandler.ashx',    
            waitMsg: 'Uploading your document...',
            success: function(form,action) {

                if(action.result.success!==true)
                {
                    msg("FAILURE","Document Upload Failed");
                    return;
                }
                var arr=action.result.msg.split("*");
                Ext.ComponentQuery.query('#txtFileName')[0].fullName=action.result.msg; 
                Ext.ComponentQuery.query('#txtFileName')[0].setValue(arr[1]);



            },
            failure: function(form,action) {

                msg("FAILURE","Document Upload Failed");
            }
        });
    },

    onBtnAddFileClick: function(button, e, eOpts) {
        var me = this;
        var loadMsg = "";
        var count = 0;
        var errorMsg = "";
        var docNameUnique = "";
        var FileStore="";
        var fileName="";
        var arr ="";
        var brouseData="";
        var rec="";
        var recordIndex=-1;
        brouseData=Ext.ComponentQuery.query('#txtFileName')[0].getValue();
        FileStore = Ext.getStore('DocRegFileStore');

        if(!brouseData)
        {
            count++;
            errorMsg = errorMsg + '<br/>'+ count + ") कृपया कागजपत्र भर्नुहोस् !!!";

        }
        if(count >0)
        {
            msg("WARNING",errorMsg);
            return false;
        }

        docNameUnique =  Ext.ComponentQuery.query('#txtFileName')[0].fullName;
        arr = docNameUnique.split("*");
        fileName = arr[1];

        if(!fileName)
        {
            errorMsg = errorMsg + '<br/>' + ") कृपया कागजपत्र भर्नुहोस् !!!";
            msg("WARNING",errorMsg);
            Ext.ComponentQuery.query('#txtFileName')[0].setValue("");
            Ext.ComponentQuery.query('#txtFileName')[0].reset();    
            return false;
        }

        recordIndex = FileStore.findBy(
        function(record, id){

            if(record.get('FileName') === fileName ){
                return true; 
                // a record with this data exists
            }
            return false;  // there is no record in the store with this data
        }
        );



        if(recordIndex != -1){
            msg("WARNING","Either we have a duplicate or invalid file, abort!");
            Ext.ComponentQuery.query('#txtFileName')[0].setValue("");
        }
        else
        {   
            rec={   
                FileName:fileName,
                FileType:'',
                File:null,   
            DocNameUnique:docNameUnique  };

            if(rec!=='' && rec!==null)
            {    

                FileStore.add(rec);    

            }    

            Ext.ComponentQuery.query('#txtFileName')[0].setValue("");
            Ext.ComponentQuery.query('#txtFileName')[0].reset();    
            Ext.ComponentQuery.query('#txtFileName')[0].fullName="";  




        }



    },

    onBtnSubmitClick: function(button, e, eOpts) {
        var FileStore ="";
        var subject=Ext.ComponentQuery.query('#txtSubject')[0].getValue();
        var summary=Ext.ComponentQuery.query('#txtSummary')[0].getValue();
        var UserToStore = Ext.getStore('DocRegUserToStore');
        var KeywordToStore = Ext.getStore('DocRegKeywordToStore');
        var RoleToStore = Ext.getStore('DocRegRoleToStore');
        FileStore = Ext.getStore('DocRegFileStore');
        var Docstatus= Ext.ComponentQuery.query('#hdnRadio')[0].getValue();
        var offCode= Ext.get('offCode').dom.innerHTML;
        var txtBrowse=Ext.ComponentQuery.query('#txtFileName')[0];
        var DocCatDesc='';
        var pan=Ext.ComponentQuery.query('#txtPanDocReg')[0].getValue();
        //AccessControls
        var AccessControls=[];
        var fileName=Ext.ComponentQuery.query('#txtFileName')[0].getValue();
        var OffSecID=Ext.ComponentQuery.query('#cmbOffSection')[0].getValue();
        var RefNo='';
        if(!pan)
        {
            RefNo=0;
            DocCatDesc='N/A';
        }
        else
        {
            RefNo=pan;
            DocCatDesc='pan';
        }
        //Users

        UserToStore.each(function(rec){

            AccessControls.push(rec.data);   
        });
        //Roles

        RoleToStore.each(function(rec) {

            AccessControls.push(rec.data);   
        });




        //Files

        var Files= [];
        FileStore.each(function(rec){
        Files.push(rec.data);});


        var Keywords = [];
        KeywordToStore.each(function(rec) { 
        Keywords.push(rec.data);});



        //if(!pan)
        //{
        // msg("WARNING","Pan is manadatory!");
        //return ;
        //}



        if(!subject)
        {
            msg("WARNING","Subject is manadatory!");
            return;
        }
        if(fileName)
        {
            msg("WARNING","Click 'Addfile' button to add the file!");
            return;
        }

        var DocumentRegistration=
        { 
            Doc_Subject:subject,
            Doc_Summary:summary,
            DocCatDesc:DocCatDesc,
            RefNo:RefNo,
            offCode:offCode, 
            Status:Docstatus,
            AccessControls:AccessControls,
            lsDoc_FileContainer:Files,
            lsKeywords:Keywords,    
            SecID:OffSecID
        };

        Waitmsg= waitMsg("Please Wait...");

        Ext.Ajax.request
        ({

            url:'../Handlers/DocumentManagement/DocumentRegistrationHandler.ashx?method=SaveDocument_Diary',
            params:{documentRegistration:JSON.stringify(DocumentRegistration)},


            success:function(response){
                Waitmsg.hide();        
                var obj =Ext.decode(response.responseText); 
                msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);
                if(obj.success === "true")
                {           


                    //UserToStore.removeAll();
                    //RoleToStore.removeAll();
                    //KeywordToStore.removeAll();
                    FileStore.loadData([],false);
                    UserToStore.loadData([],false);
                    RoleToStore.loadData([],false);
                    KeywordToStore.loadData([],false);

                    // FileStore.removeAll();
                    Ext.ComponentQuery.query('#txtSubject')[0].setValue('');
                    Ext.ComponentQuery.query('#txtSummary')[0].setValue('');
                    Ext.ComponentQuery.query('#txtPanDocReg')[0].setValue('');
                    Ext.ComponentQuery.query('#txtPanDocReg')[0].reset();
                    Ext.ComponentQuery.query('#cmbOffSection')[0].reset();
                }

            },

            failure:function(response)
            {
                msg('FAILURE',Ext.decode(response));     
                Waitmsg.hide();

            }



        });

    },

    onBtnCancelClick: function(button, e, eOpts) {
        var UserToStore = Ext.getStore('DocRegUserToStore');
        var RoleToStore = Ext.getStore('DocRegRoleToStore');
        var KeywordToStore = Ext.getStore('DocRegKeywordToStore');
        var textBSub=Ext.ComponentQuery.query('#txtSubject')[0];
        var textBSum=Ext.ComponentQuery.query('#txtSummary')[0];
        var txtBrowse=Ext.ComponentQuery.query('#btnFileUpload')[0];
        //var txtPAN=Ext.ComponentQuery.query('#txtPanDocReg')[0];
        var FieStore = Ext.getStore('DocRegFileStore');
        var FileNameText=Ext.ComponentQuery.query('#txtFileName')[0];
        var cmbSec=Ext.ComponentQuery.query('#cmbOffSection')[0];

        var txtPAN=Ext.ComponentQuery.query('#txtPanDocReg')[0];
        var txtPANName=Ext.ComponentQuery.query('#txtNameReg')[0];

        txtPAN.setValue('');
        txtPANName.setValue("");

        UserToStore.removeAll();
        RoleToStore.removeAll();
        KeywordToStore.removeAll();
        FieStore.removeAll();
        cmbSec.setValue('');

        //txtPAN.setValue("");
        //Ext.ComponentQuery.query('#txtPanDocReg')[0].setValue("");
        //Ext.ComponentQuery.query('#txtNameReg')[0].setValue("");


        //txtPAN.reset();
        textBSub.setValue('');
        textBSum.setValue('');
        FileNameText.setValue('');
        txtBrowse.reset();
        cmbSec.reset();
        Ext.ComponentQuery.query('#rdOpen')[0].setValue(true);
        Ext.ComponentQuery.query('#rdJurisdiction')[0].setValue(false);
        Ext.ComponentQuery.query('#rdClassify')[0].setValue(false);








    },

    onBtnImagViewClick: function(button, e, eOpts) {
        Waitmsg= waitMsg("Please Wait...");
        var me=this;
        Ext.Ajax.request({
            url: '../Handlers/DocumentManagement/Document_FileContainerHandler.ashx',
            // params: { FID : '13',DOCID:'27' },
            params: { DOCID:DOCID },
            success: function( result, request ){
                Waitmsg.hide();   
                var obj=Ext.decode(result.responseText);
                msg(obj.success === "true" ?"SUCCESS":"FAILURE",obj.message);
                if(obj.success === "true")
                {                  
                    Waitmsg.hide();
                    me.getController('MyApp.controller.DocumentRegView').GetStoreData(obj.root);
                    uiConfig = {menuLink:'DocumentRegView', pageTitle:'DocumentRegView'};
                    DynamicUI(uiConfig,null,{st:obj.root},function(){});            

                } 
            },
            failure:function(response)
            {
                msg('ERROR OCURRED !!!', 'Error in fetching data');     
                Waitmsg.hide();

            }});

    },

    IsUpdateKeyword: function(status) {
        if(status=='true')
        {
            var gridKeyword=Ext.ComponentQuery.query('#grdKeyword')[0];
            gridKeyword.store.loadData([],false);
            Ext.Ajax.request
            ({

                url:'../Handlers/DocumentManagement/KeywordSectionHandler.ashx?method=GetKeywordSection',
                params:{Keyword:''},


                success:function(response){

                    var obj =Ext.decode(response.responseText);
                    var row = obj.root;

                    gridKeyword.store.add(obj.root); 


                },

                failure:function()
                {
                    msg('FAILURE',Ext.decode(response));

                }



            });
        }
    },

    init: function(application) {
        this.control({
            "#DocumentReg": {
                afterrender: this.onDocumentRegAfterRender
            },
            "#txtPanDocReg": {
                blur: this.onTxtPanDocRegBlur
            },
            "#contTab": {
                afterrender: this.onContTabAfterRender
            },
            "#grdUsers": {
                itemclick: this.onGrdUsersItemClick1
            },
            "#btnForwardUser": {
                click: this.onBtnForwardUserClick1
            },
            "#btnBackwardUser": {
                click: this.onBtnBackwardUserClick1
            },
            "#grdUserTo": {
                itemclick: this.onGrdKeywordToItemClick1
            },
            "#grdRole": {
                itemclick: this.onGrdRoleItemClick
            },
            "#btnForwardRole": {
                click: this.onBtnForwardRoleClick
            },
            "#btnBackwardRole": {
                click: this.onBtnBackwardRoleClick
            },
            "#grdRoleTo": {
                itemclick: this.onGrdRoleToItemClick
            },
            "#grdKeyword": {
                itemclick: this.onGrdKeywordItemClick
            },
            "#btnAddKeyword": {
                click: this.onBtnAddKeywordClick
            },
            "#btnForwardKeyword": {
                click: this.onBtnForwardKeywordClick
            },
            "#btnBackrwardKeyword": {
                click: this.onBtnBackrwardKeywordClick
            },
            "#grdKeywordTo": {
                itemclick: this.onGrdKeywordToItemClick
            },
            "#btnFileUpload": {
                change: this.onBtnFileUploadChange
            },
            "#btnAddFile": {
                click: this.onBtnAddFileClick
            },
            "#btnSubmit": {
                click: this.onBtnSubmitClick
            },
            "#btnCancel": {
                click: this.onBtnCancelClick
            },
            "#btnImagView": {
                click: this.onBtnImagViewClick
            }
        });
    }

});
