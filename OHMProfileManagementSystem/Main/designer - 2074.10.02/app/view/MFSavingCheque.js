/*
 * File: app/view/MFSavingCheque.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MFSavingCheque', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Ext.form.field.TextArea',
        'Ext.form.field.Number',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Column'
    ],

    frame: true,
    title: 'Cheque Update',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    frame: true,
                    itemId: 'frmMFSavingCheque',
                    bodyPadding: 10,
                    layout: {
                        type: 'table',
                        columns: 2
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            colspan: 2,
                            itemId: 'ddlOffice',
                            fieldLabel: 'Office Code',
                            fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                            size: 40,
                            displayField: 'OfficeName',
                            forceSelection: true,
                            queryMode: 'local',
                            store: 'OfficeShortStore',
                            valueField: 'OfficeCode',
                            listeners: {
                                change: {
                                    fn: me.onDdlOfficeChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            colspan: 2,
                            itemId: 'ddlCenter',
                            fieldLabel: 'Center Code',
                            fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                            size: 40,
                            displayField: 'CenterName',
                            queryMode: 'local',
                            store: 'CenterCodeStore',
                            valueField: 'CenterCode',
                            listeners: {
                                change: {
                                    fn: me.onDdlCenterChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'textfield',
                            itemId: 'txtMemberCode',
                            fieldLabel: 'Member Code',
                            fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                            size: 40,
                            listeners: {
                                afterrender: {
                                    fn: me.onTxtMemberCodeAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'textfield',
                            itemId: 'txtMemberName',
                            fieldLabel: 'MemberName',
                            hideLabel: true,
                            fieldStyle: 'background-color:#D2D2D2;background-image:none;',
                            size: 50
                        },
                        {
                            xtype: 'textfield',
                            itemId: 'txtAccountNo',
                            fieldLabel: 'Account No.',
                            fieldStyle: 'background-color:#DAEBE1;background-image:none;',
                            size: 30,
                            listeners: {
                                afterrender: {
                                    fn: me.onTxtAccountNoAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            itemId: 'ddlChequeStatus',
                            fieldLabel: 'Cheque Status',
                            emptyText: '--- Select---',
                            displayField: 'RefDtlName',
                            forceSelection: true,
                            queryMode: 'local',
                            store: 'ReferenceShortStore',
                            valueField: 'RefDtlCode'
                        },
                        {
                            xtype: 'textareafield',
                            colspan: 2,
                            itemId: 'txtReasonForCancel',
                            maxWidth: 400,
                            width: 400,
                            fieldLabel: 'Reason For Cancel',
                            size: 84
                        },
                        {
                            xtype: 'numberfield',
                            itemId: 'txtChequeNoFrom',
                            fieldLabel: 'Cheque No. From',
                            size: 30
                        },
                        {
                            xtype: 'numberfield',
                            itemId: 'txtChequeNoTo',
                            fieldLabel: 'Cheque No. To',
                            size: 30
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnGenerateChequeBook',
                            padding: 5,
                            text: 'Generate Cheque Book',
                            listeners: {
                                click: {
                                    fn: me.onBtnGenerateChequeBookClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnSearchChequeBook',
                            padding: 5,
                            text: 'Search Cheque Book',
                            listeners: {
                                click: {
                                    fn: me.onBtnSearchChequeBookClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'container',
                            layout: {
                                type: 'hbox',
                                align: 'stretch',
                                pack: 'center'
                            }
                        },
                        {
                            xtype: 'container',
                            layout: {
                                type: 'hbox',
                                align: 'stretch',
                                pack: 'center'
                            }
                        },
                        {
                            xtype: 'gridpanel',
                            colspan: 2,
                            itemId: 'grdAccountCheque',
                            margin: '15 0 0 0',
                            title: 'Account Cheque List',
                            store: 'ChequeGenerateDetailStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'DisplayNo',
                                    text: 'Display No'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'ChequeNo',
                                    text: 'Cheque No'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 74,
                                    dataIndex: 'Status',
                                    text: 'Status'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 175,
                                    dataIndex: 'ReasonForCancel',
                                    text: 'Reason For Cancel'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 83,
                                    dataIndex: 'StatusValue',
                                    text: 'Status Value'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'PrintedByOn',
                                    text: 'Printed By On'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'AccountNo',
                                    text: 'Account No'
                                }
                            ]
                        },
                        {
                            xtype: 'button',
                            margin: '15 0 0 0',
                            padding: 5,
                            width: 116,
                            text: 'Print Cheque Book'
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFrmMFSavingChequeAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onDdlOfficeChange: function(field, newValue, oldValue, eOpts) {
        Ext.ComponentQuery.query('#ddlCenter')[0].reset();
        Ext.ComponentQuery.query('#txtMemberCode')[0].reset();
        Ext.ComponentQuery.query('#txtMemberName')[0].reset();
        Ext.ComponentQuery.query('#txtAccountNo')[0].reset();
        Ext.ComponentQuery.query('#ddlChequeStatus')[0].reset();
        Ext.ComponentQuery.query('#txtReasonForCancel')[0].reset();
        Ext.ComponentQuery.query('#txtChequeNoFrom')[0].reset();
        Ext.ComponentQuery.query('#txtChequeNoTo')[0].reset();
        Ext.getStore('ChequeGenerateDetailStore').removeAll();

        var ccStore=Ext.getStore('CenterCodeStore');

        Ext.Ajax.request({
            url: '../Handlers/Finance/Maintenance/CenterHandler.ashx',
            params: {
                method:'GetCenterList',
                offCode:Ext.ComponentQuery.query('#ddlOffice')[0].getValue()
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            ccStore.removeAll();
            ccStore.add(data.root);




        }
        });
    },

    onDdlCenterChange: function(field, newValue, oldValue, eOpts) {
        Ext.ComponentQuery.query('#txtMemberCode')[0].reset();
        Ext.ComponentQuery.query('#txtMemberName')[0].reset();
        Ext.ComponentQuery.query('#txtAccountNo')[0].reset();
        Ext.ComponentQuery.query('#ddlChequeStatus')[0].reset();
        Ext.ComponentQuery.query('#txtReasonForCancel')[0].reset();
        Ext.ComponentQuery.query('#txtChequeNoFrom')[0].reset();
        Ext.ComponentQuery.query('#txtChequeNoTo')[0].reset();
        Ext.getStore('ChequeGenerateDetailStore').removeAll();
    },

    onTxtMemberCodeAfterRender: function(component, eOpts) {
        Ext.ComponentQuery.query('#txtMemberName')[0].reset();
        Ext.ComponentQuery.query('#txtAccountNo')[0].reset();
        Ext.ComponentQuery.query('#ddlChequeStatus')[0].reset();
        Ext.ComponentQuery.query('#txtReasonForCancel')[0].reset();
        Ext.ComponentQuery.query('#txtChequeNoFrom')[0].reset();
        Ext.ComponentQuery.query('#txtChequeNoTo')[0].reset();
        Ext.getStore('ChequeGenerateDetailStore').removeAll();

        component.getEl().on('dblclick', function(){
            var winPopup = Ext.create('MyApp.view.SelectMemberForCheque',{

            });
            var store=Ext.getStore('MemberForChequeStore');
        store.removeAll();
            winPopup.extraParam={param:null};
            winPopup.show();
        });
    },

    onTxtAccountNoAfterRender: function(component, eOpts) {
        Ext.ComponentQuery.query('#ddlChequeStatus')[0].reset();
        Ext.ComponentQuery.query('#txtReasonForCancel')[0].reset();
        Ext.ComponentQuery.query('#txtChequeNoFrom')[0].reset();
        Ext.ComponentQuery.query('#txtChequeNoTo')[0].reset();
        Ext.getStore('ChequeGenerateDetailStore').removeAll();
        component.getEl().on('dblclick', function(){
            var winPopup = Ext.create('MyApp.view.SelectMemberAccountForCheque',{

            });
            Ext.getStore('SelectMemberAccountForChequeStore').removeAll();
            winPopup.extraParam={param:null};
            winPopup.show();
        });
    },

    onBtnGenerateChequeBookClick: function(button, e, eOpts) {
        var errMsg='';
        var office=Ext.ComponentQuery.query('#ddlOffice')[0];
        var accountNo=Ext.ComponentQuery.query('#txtAccountNo')[0];
        var status=Ext.ComponentQuery.query('#ddlChequeStatus')[0];
        //var userName=Ext.ComponentQuery.query('#txtAction')[0];
        var fromChequeNo=Ext.ComponentQuery.query('#txtChequeNoFrom')[0];
        var toChequeNo=Ext.ComponentQuery.query('#txtChequeNoTo')[0];

        /*if(categoryNo.getValue()===null ||categoryNo.getValue()==="")
            {
                errMsg+="Please,Enter Category Number";
            }
        if(categoryDesc.getValue()===null ||categoryDesc.getValue()==="")
            {
                errMsg+="Please,Enter Category Description";
            }
        if(categoryInitial.getValue()===null ||categoryInitial.getValue()==="")
            {
                errMsg+="Please,Enter Catgory Initial";
            }

        if(errMsg!=='')
            {
                msg("WARNING",errMsg);
                return;
            }*/


        var generateChequeSeq={OfficeCode:office.getValue(),
                 AccountNo:accountNo.getValue(),
                 Status:Ext.ComponentQuery.query('#ddlChequeStatus')[0].getValue(),
                 UserName:'',
                 FromChequeNo:fromChequeNo.getValue(),
                        ToChequeNo: toChequeNo.getValue()     };



        var wMsg='Generating Cheque Sequence...';

        var waitSave = watiMsg(wMsg);

        Ext.Ajax.request({
                    url: '../Handlers/Finance/Transaction/SavingTransaction/GenerateChequeSequenceHandler.ashx',
                    params: {
                        method:'GenerateChequeSequence',
                        generateChequeSequence:JSON.stringify(generateChequeSeq)
                    },
                    success: function(response){
                    waitSave.hide();
                    var out=Ext.decode(response.responseText);
                    console.log(out);

                    if(out.success==="true")
                        {
                            var message=out.root;

                                    msg("SUCCESS",out.message,function(){

                                    });


                        }
                        else
                            {
                                msg("FAILURE",out.message);
                            }
                    },
                    failure: function ( result, request ) {
                        waitSave.hide();
                        var out=Ext.decode(response.responseText);
                        msg("FAILURE",out.message);
                    }

                });
    },

    onBtnSearchChequeBookClick: function(button, e, eOpts) {
        var office=Ext.ComponentQuery.query('#ddlOffice')[0];
        var accountNo=Ext.ComponentQuery.query('#txtAccountNo')[0];


        var store=Ext.getStore('ChequeGenerateDetailStore');
        store.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/Finance/Transaction/SavingTransaction/ChequeGenerateDetailHandler.ashx',
            params: {
                method:'GetChequeGenerateDetail',
                offCode:office.getValue(),
                accountNo:accountNo.getValue()
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            store.removeAll();
            store.add(data.root);


        }
        });
    },

    onFrmMFSavingChequeAfterRender: function(component, eOpts) {
        var officeStore=Ext.getStore('OfficeShortStore');
        officeStore.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/Office/OfficeHandler.ashx',
            params: {
                method:'GetOfficeList'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            officeStore.removeAll();
            officeStore.add(data.root);


        }
        });

        var refStore=Ext.getStore('ReferenceShortStore');
        refStore.removeAll();

        Ext.Ajax.request({
            url: '../Handlers/GeneralMasterParameters/References/MsRefrenceCodeDetailsHandler.ashx',
            params: {
                method:'GetReferenceDetailListShort',referenceCode:'CHEQUE_STATUS'
            },
            success: function(response){

            var data=Ext.decode(response.responseText);
            refStore.removeAll();
            refStore.add(data.root);


        }
        });
    }

});