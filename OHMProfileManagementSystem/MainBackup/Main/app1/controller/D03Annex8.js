/*
 * File: app/controller/D03Annex8.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.D03Annex8', {
    extend: 'Ext.app.Controller',

    stores: [
        'Annex'
    ],

    onPnlD03Annex8AfterRender: function(component, eOpts) {
        var me = this;
        var user = me.getController('MyApp.controller.LoginSecurity');  

        var txtFiscalYear = Ext.ComponentQuery.query("#txtFiscalYearAnx8")[0];
        var txtPan = Ext.ComponentQuery.query("#txtPanAnx8")[0];
        var txtName = Ext.ComponentQuery.query("#txtNameAnx8")[0];

        var pan = "";
        var fiscalYear = "";
        var name = "";   


        var param = me.validateParam();

        pan = param.pan;
        fiscalYear = param.fiscalYear;
        name = param.name;    

        txtPan.setValue(pan);    
        txtFiscalYear.setValue(fiscalYear);
        txtName.setValue(name);


        me.loadAnnexLk();


        //----------------------------------------------------------------
        // NB: Return to SetAnnex	
        //----------------------------------------------------------------
        if(param.from === "MV")
        {

            var annexD03 = me.getController('MyApp.controller.SetAnnexD03');
            var el = Ext.get('lnkRedirectTopAnx8');

            el.on('click', function(e,t,eOpts){

                Ext.Msg.confirm('Confirm Action', 'के तपाई पछाडि गएर अनुसुची तय गर्न चाहनुहुन्छ?', function(btn) {
                    if(btn == 'yes'){        

                        param.action ="";
                        annexD03.redirectToAnnexD03(param);
                    }
                }, this);
            });
        }
    },

    onGrdISAD03Anx8AfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdISAD03Anx8')[0];

        var strUpdAnnex = null;
        var strISA = null;
        var param = null;

        param = me.validateParam();

        if(param !== null)
        {    
            if(param.action === "E")
            {        
                me.loadDataForUpdate(param);    
                strUpdAnnex = Ext.getStore("UpdAnnex");

                strISA = deepCloneStore(strUpdAnnex,"UpdISA");  
                //strISA.filter('ItemType',"IN");

                strISA.filter(function(item){
                    return item.get("ItemType")== 'ISA' || item.get("ItemType")== 'ISD';
                });

                strISA.sort('ItemID','ASC'); 
            }  
        }


        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            Ext.Function.defer(function(){
                var txtBox = "";       
                var anxValue = null;  

                if(rowIndex == 2)
                {
                    txtBox = new Ext.form.TextField({
                        id:"txtISA"+rowIndex+"Anx8",
                        itemId:"txtISA"+rowIndex+"Anx8",
                        value: null,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,
                        readOnly:true,
                        enableKeyEvents: true
                    });

                    if( param.action === "E")
                    {
                        me.calISA();
                    }
                }
                else
                {

                    anxValue = me.getAnnexValue(param,strISA,rowIndex,1);

                    txtBox = new Ext.form.TextField({
                        id:"txtISA"+rowIndex+"Anx8",
                        itemId:"txtISA"+rowIndex+"Anx8",
                        value: anxValue,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,
                        enableKeyEvents: true
                    });
                }

                txtBox.on('keyup', function(e){
                    me.calISA();

                }, this);

            },25);

            return '<div id="' + id +'"></div>';

        };

    },

    onGrdIBAD03Anx8AfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdIBAD03Anx8')[0];

        var strUpdAnnex = null;
        var strIBA = null;
        var param = null;

        param = me.validateParam();

        if(param !== null)
        {    
            if( param.action === "E")
            {           
                strUpdAnnex = Ext.getStore("UpdAnnex");

                strIBA = deepCloneStore(strUpdAnnex,"UpdIBA");   
                strIBA.filter(function(item){
                    return item.get("ItemType")== 'IBA' || item.get("ItemType")== 'IBD';
                });
                strIBA.sort('ItemID','ASC'); 

            }

        }

        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            Ext.Function.defer(function(){
                var txtBox = "";      
                var anxValue = null;

                if(rowIndex == 2)
                {
                    txtBox = new Ext.form.TextField({
                        id:"txtIBA"+rowIndex+"Anx8",
                        itemId:"txtIBA"+rowIndex+"Anx8",
                        value: null,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,
                        readOnly:true,
                        enableKeyEvents: true
                    });

                    if( param.action === "E")
                    {
                        me.calIBA();
                    }
                }
                else
                {

                    anxValue = me.getAnnexValue(param,strIBA,rowIndex,4);

                    txtBox = new Ext.form.TextField({
                        id:"txtIBA"+rowIndex+"Anx8",
                        itemId:"txtIBA"+rowIndex+"Anx8",
                        value: anxValue,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,
                        enableKeyEvents: true
                    });
                }

                txtBox.on('keyup', function(e){
                    me.calIBA();

                }, this);

            },25);

            return '<div id="' + id +'"></div>';

        };

    },

    onGrdDeductionLossD03Anx8AfterRender: function(component, eOpts) {
        var me = this;
        var grid = Ext.ComponentQuery.query('#grdDeductionLossD03Anx8')[0];

        var strUpdAnnex = null;
        var strDL = null;
        var param = null;

        param = me.validateParam();

        if(param !== null)
        {    
            if( param.action === "E")
            {           
                strUpdAnnex = Ext.getStore("UpdAnnex");

                strDL = deepCloneStore(strUpdAnnex,"UpdDL");   
                strDL.filter('ItemType', "DL");
                strDL.sort('ItemID','ASC'); 
            }

        }

        grid.columns[2].renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {

            var id = Ext.id();

            Ext.Function.defer(function(){
                var txtBox = ""; 
                var anxValue = null;


                if(rowIndex < 2)
                {

                    anxValue = me.getAnnexValue(param,strDL,rowIndex,7);

                    txtBox = new Ext.form.TextField({
                        id:"txtDL"+rowIndex+"Anx8",
                        itemId:"txtDL"+rowIndex+"Anx8",
                        value: anxValue,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,
                        enableKeyEvents: true
                    });
                }
                else
                {
                    txtBox = new Ext.form.TextField({
                        id:"txtDL"+rowIndex+"Anx8",
                        itemId:"txtDL"+rowIndex+"Anx8",
                        value: null,
                        renderTo: id,
                        height: 22,
                        width:150,
                        fieldCls: 'TxtRight',
                        maskRe: /[0-9]/,
                        maxLength: 10,                
                        readOnly:true,
                        enableKeyEvents: true
                    });

                    if( param.action === "E")
                    {
                        me.calDeductionLoss();
                    }
                }

                txtBox.on('keyup', function(e){
                    me.calDeductionLoss();

                }, this);

            },25);

            return '<div id="' + id +'"></div>';

        };

    },

    onBtnSubmitAnx8Click: function(button, e, eOpts) {
        var me = this;
        var annexD03 = me.getController('MyApp.controller.SetAnnexD03');
        var assessmentNo = "";
        var form = button.up('form').getForm();
        var action = "A";
        var tranNo = "";
        var annexIDSno = null;


        var param = me.validateParam();  
        assessmentNo = param.submissionNo;


        if(param.action === "E")
        {        
            action = param.action;
            tranNo = param.tranNo;
            annexIDSno = param.annexIDSno;

        }

        var row1 = Ext.ComponentQuery.query("#txtISA0Anx8")[0].getValue();
        var row2 = Ext.ComponentQuery.query("#txtISA1Anx8")[0].getValue();
        var row4 = Ext.ComponentQuery.query("#txtIBA0Anx8")[0].getValue();
        var row5 = Ext.ComponentQuery.query("#txtIBA1Anx8")[0].getValue();


        var row3 = Ext.ComponentQuery.query("#txtISA2Anx8")[0].getValue();
        var row6 = Ext.ComponentQuery.query("#txtIBA2Anx8")[0].getValue();
        var row9 = Ext.ComponentQuery.query("#txtDL2Anx8")[0].getValue();
        var row10 = Ext.ComponentQuery.query("#txtDL3Anx8")[0].getValue();

        row1 = row1 === "" || row1 === null ?0:row1;
        row2 = row2 === "" || row2 === null ?0:row2;
        row4 = row4 === "" || row2 === null ?0:row4;
        row5 = row5 === "" || row5 === null ?0:row5;

        row10 = row10 === "" || row10 === null ?0:row10;

        var totInclusion = row1 + row4;
        var totDeduction = row2 + row5;
        var netIncomeLoss = 0;

        if(row10 > -1)
        {
            netIncomeLoss = row10;
        }

        //------------------------------------------------------
        // NB: Get AnnexDetails
        //------------------------------------------------------

        var strISA = Ext.getStore("Annex8");
        var strIBA = Ext.getStore("IBA");
        var strDL = Ext.getStore("DeductionLoss");

        var annex = "";
        var annexDetails = "";

        var strAnxDetail = new Ext.data.Store({
            fields: ['AssessmentNo', 'AnnexID','ItemID','ItFromDate','Amount','UserID','Terminal','TranDate','AnnexIDSno','ItemType','RecordStatus','TranNo','Action']
        });

        strAnxDetail = annexD03.getAnnexDetails(strISA,strAnxDetail,0,2,assessmentNo,"A");


        strAnxDetail = annexD03.getAnnexDetails(strIBA,strAnxDetail,0,2,assessmentNo,"A");
        strAnxDetail = annexD03.getAnnexDetails(strDL,strAnxDetail,0,2,assessmentNo,"A");

        if(strAnxDetail.getCount() > 0)
        {
            annexDetails = getJson(strAnxDetail);
        }

        var rateApplicable  = 10;

        annex = {   AssessmentNo:assessmentNo,
            AnnexID:8,
            MtcFromDate:"",
            TaxCatID:"",
            MsDisCatFromDate:null,
            DiscCatID:null,
            TotalInclusion:totInclusion,
            TotalDeduction:totDeduction,
            Discount:null,
            UserID:"",
            Terminal:"000000000000E0",
            TranDate:"",
            CountryCode:"",
            AnnexIDSno:annexIDSno,
            RateApplicable:rateApplicable,
            TotalDeductibleLoss:null,
            TotalDeductibleExp:row9 === "" ?null:row9,
            AssIncomeAftConcession:null,
            GainLossFromShare:row3 === "" ?null:row3,
            GainLossFromBuilding:row6 === "" ?null:row6,
            IncomeLoss:row10 === "" ?null:row10,
            NetIncomeLoss:netIncomeLoss,
            RecordStatus:"",
            TranNo:tranNo,
            Action:action,
            AnnexDetails:annexDetails
        };

        annexD03.saveAnnex(annex,param);
    },

    onLblRedirectAnx8Click: function(label) {
        var me = this;

        Ext.Msg.confirm('Confirm Action', 'के तपाई पछाडि गएर अनुसुची तय गर्न चाहनुहुन्छ?', function(btn) {
            if(btn == 'yes'){        

                var annexD03 = me.getController('MyApp.controller.SetAnnexD03');

                var param = me.validateParam();
                param.action ="";

                annexD03.redirectToAnnexD03(param);
            }
        }, this);

    },

    calISA: function() {
        var store = Ext.getStore("Annex8");
        var row1 = Ext.ComponentQuery.query("#txtISA0Anx8")[0].getValue();
        var row2 = Ext.ComponentQuery.query("#txtISA1Anx8")[0].getValue();
        var row3 = Ext.ComponentQuery.query("#txtISA2Anx8")[0];
        var sum = null;

        row1 = (row1 === "")?0:row1; 
        row2 = (row2 === "")?0:row2; 

        sum =  parseInt(row1) - parseInt(row2);
        row3.setValue(sum);

        this.calIncomeOrLoss();

        var strRow1 = store.getAt(0).data;
        var strRow2 = store.getAt(1).data;

        strRow1.ItemValue = row1 === 0?null:row1;
        strRow2.ItemValue = row2 === 0?null:row2;

    },

    calIBA: function() {
        var store = Ext.getStore("IBA");
        var row4 = Ext.ComponentQuery.query("#txtIBA0Anx8")[0].getValue();
        var row5 = Ext.ComponentQuery.query("#txtIBA1Anx8")[0].getValue();
        var row6 = Ext.ComponentQuery.query("#txtIBA2Anx8")[0];
        var sum = null;

        row4 = (row4 === "")?0:row4; 
        row5 = (row5 === "")?0:row5; 

        sum =  parseInt(row4) - parseInt(row5);
        row6.setValue(sum);

        var strRow1 = store.getAt(0).data;
        var strRow2 = store.getAt(1).data;

        strRow1.ItemValue = row4 === 0?null:row4;
        strRow2.ItemValue = row5 === 0?null:row5;

        this.calIncomeOrLoss();
    },

    calDeductionLoss: function() {
        var store = Ext.getStore("DeductionLoss");
        var row7 = Ext.ComponentQuery.query("#txtDL0Anx8")[0].getValue();
        var row8 = Ext.ComponentQuery.query("#txtDL1Anx8")[0].getValue();
        var row9 = Ext.ComponentQuery.query("#txtDL2Anx8")[0];
        var sum = null;

        row7 = (row7 === "")?0:row7; 
        row8 = (row8 === "")?0:row8; 

        sum =  parseInt(row7) + parseInt(row8);
        row9.setValue(sum);


        var strRow1 = store.getAt(0).data;
        var strRow2 = store.getAt(1).data;

        strRow1.ItemValue = row7 === 0?null:row7;
        strRow2.ItemValue = row8 === 0?null:row8;

        this.calIncomeOrLoss();
    },

    calIncomeOrLoss: function() {
        var row3 = Ext.ComponentQuery.query("#txtISA2Anx8")[0].getValue();
        var row6 = Ext.ComponentQuery.query("#txtIBA2Anx8")[0].getValue();
        var row9 = Ext.ComponentQuery.query("#txtDL2Anx8")[0].getValue();
        var row10 = Ext.ComponentQuery.query("#txtDL3Anx8")[0];

        var sum = null;

        row3 = (row3 === "")?0:row3; 
        row6 = (row6 === "")?0:row6; 
        row9 = (row9 === "")?0:row9; 

        sum =  parseInt(row3) + parseInt(row6) - parseInt(row9);
        row10.setValue(sum);
    },

    clearStores: function() {
        var strAnnex = Ext.getStore("Annex8");
        var strIBA = Ext.getStore("IBA");
        var strDL = Ext.getStore("DeductionLoss");

        strAnnex.loadData([],false);
        strIBA.loadData([],false);
        strDL.loadData([],false);
    },

    onLaunch: function() {
        var me = this;
        var annexD03 = me.getController('MyApp.controller.SetAnnexD03');
        var param = me.validateParam();
        var el = Ext.get('lnkRedirectTopAnx8');

        el.on('click', function(e,t,eOpts){

            Ext.Msg.confirm('Confirm Action', 'के तपाई पछाडि गएर अनुसुची तय गर्न चाहनुहुन्छ?', function(btn) {
                if(btn == 'yes'){        

                    param.action ="";
                    annexD03.redirectToAnnexD03(param);
                }
            }, this);
        });
    },

    loadAnnexLk: function() {
        var waitSave = waitMsg("Please wait ...");
        //------------------------------------------------------
        // NB: Retrive Data from Server
        //------------------------------------------------------

        Ext.Ajax.request({
            url: '../Handlers/IncomeTax/D03/AnnexItemsHandler.ashx?method=GetAnnexItems',
            params:{annexID:8,itemType:""},
            async : false,
            success: function ( result, request ) {

                waitSave.hide();

                //var strAnnex = Ext.getStore("Annex");

                var strAnnex = Ext.create ('Ext.data.Store', {
                    model: 'MyApp.model.Annex',
                    proxy: {
                        type: 'ajax',
                        url: '',
                        reader: {
                            type: 'json',
                            root: 'root'
                        }
                    },
                    storeId:'Annex8'
                });

                strAnnex.loadData([],false);

                var obj = Ext.decode(result.responseText);

                var row3 =  {   AnnexID:'8',
                        ItemID:'3',
                        ItemDescNep:'सेयर वा सुरक्षाको निसर्गबाट भएको लाभ वा नोक्सानी (१ - २)',
                        ItemDescEng:'',
                        //ItemDescEng:'सेयर वा सुरक्षाको निसर्गबाट भएको लाभ वा नोक्सानी (१ - २)',
                        ItemType:'ISA'
                    };

                var row6 =  {   AnnexID:'8',
                        ItemID:'6',
                        ItemDescNep:'घरजग्गाको निसर्गबाट भएको लाभ वा नोक्सानी (४ - ५)',
                        ItemDescEng:'',
                        //ItemDescEng:'घरजग्गाको निसर्गबाट भएको लाभ वा नोक्सानी (४ - ५)',
                        ItemType:'IBA'
                    };

                var row9 =  {   AnnexID:'8',
                        ItemID:'9',
                        ItemDescNep:'जम्मा : ( ७ देखि ८)',
                        ItemDescEng:'Total:( 7 to 8)',
                        ItemType:'DL'
                    };

                var row10 =  {   AnnexID:'8',
                        ItemID:'10',
                        ItemDescNep:'खुद लाभ / नोक्सानी : ( ३ + ६ - ९)',
                        ItemDescEng:'',
                        //ItemDescEng:'खुद लाभ / नोक्सानी : ( ३ + ६ - ९)',
                        ItemType:'DL'
                    };


                strAnnex.sort('ItemID','ASC'); 

                strAnnex.add(obj.root); 
                strAnnex.add(row3);        
                strAnnex.add(row6);  
                strAnnex.add(row9);  
                strAnnex.add(row10);

                var strIBA = null;
                var strDL = null;

                strIBA = deepCloneStore(strAnnex,"IBA");
                strDL = deepCloneStore(strAnnex,"DeductionLoss");

                strAnnex.filter(function(item){
                    return item.get("ItemType")== 'ISA' || item.get("ItemType")== 'ISD';
                });

                strIBA.filter(function(item){
                    return item.get("ItemType")== 'IBA' || item.get("ItemType")== 'IBD';
                });

                strDL.filter('ItemType',"DL");


                var gridISA = Ext.ComponentQuery.query('#grdISAD03Anx8')[0];
                var gridIBA = Ext.ComponentQuery.query('#grdIBAD03Anx8')[0];
                var gridDL = Ext.ComponentQuery.query('#grdDeductionLossD03Anx8')[0];

                gridISA.store = strAnnex;
                gridISA.bindStore(strAnnex); 

                gridIBA.store = strIBA;
                gridIBA.bindStore(strIBA);      

                gridDL.store = strDL;
                gridDL.bindStore(strDL);


            },
            failure: function(form, action) {

                waitSave.hide();

                msg("FAILURE","Error in Fetching data !!!");
            }

        });
    },

    validateParam: function() {
        var me = this;
        var view = Ext.ComponentQuery.query('#pnlD03Annex8')[0];
        var user = me.getController('MyApp.controller.LoginSecurity');  
        var param = "";

        if(view.extraParam === null)
        {
            user.clearSession();

            return;

        }
        else
        {
            return view.extraParam;
        }
    },

    loadDataForUpdate: function(param) {
        var me = this;
        var strAnnex = Ext.getStore("Annex");

        var url = "../Handlers/IncomeTax/D03/DCTBAnnexHandler.ashx?method=GetDCTBAnnexWithDetails" ;
        var args = {assessmentNo:param.submissionNo,annexID:'8',annexIDSno:param.annexIDSno};

        if(param.from === "AU")
        {  
            url = "../Handlers/IncomeTax/D03/DCTBAnnexHandler.ashx?method=GetDCTBAnnexWithDetailsAU";
            args = {offCodeAU:param.offCodeAU,requestNo:param.requestNo,assessmentNo:param.submissionNo,annexID:'8',annexIDSno:param.annexIDSno};
        }

        Ext.Ajax.request({
            url:url,
            params:args,
            async : false,
            success: function ( result, request ) {   

                var obj = Ext.decode(result.responseText); 

                var strUpdAnnex = deepCloneStore(strAnnex,"UpdAnnex");

                strUpdAnnex.loadData([],false);
                strUpdAnnex.add(obj.root.AnnexDetails);     
                strUpdAnnex.sort('ItemID','ASC'); 

                param.tranNo = obj.root.TranNo;
                param.annexIDSno = obj.root.AnnexIDSno;  

            },
            failure:  function ( result, request ) { 

                msg("FAILURE","Error in Saving data !!!");

            }
        });

    },

    getAnnexValue: function( param,store,itemID,startIdx) {
        var annexValue = null;
        var rowIdx;

        if(param.action === "E")
        {
            rowIdx = store.findBy(
            function(record, id){

                if(record.get('ItemID') === (startIdx + itemID))
                {
                    annexValue = record.get('Amount');
                    return true ;  // a record with this data exists
                }
                return false;  // there is no record in the store with this data
            });

        }
        return annexValue;
    },

    init: function(application) {
        this.control({
            "#pnlD03Annex8": {
                afterrender: this.onPnlD03Annex8AfterRender
            },
            "#grdISAD03Anx8": {
                afterrender: this.onGrdISAD03Anx8AfterRender
            },
            "#grdIBAD03Anx8": {
                afterrender: this.onGrdIBAD03Anx8AfterRender
            },
            "#grdDeductionLossD03Anx8": {
                afterrender: this.onGrdDeductionLossD03Anx8AfterRender
            },
            "#btnSubmitAnx8": {
                click: this.onBtnSubmitAnx8Click
            },
            "#lblRedirectAnx8": {
                click: this.onLblRedirectAnx8Click
            }
        });
    }

});
